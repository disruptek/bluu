
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebSite Management Client
## version: 2015-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593421 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593421](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593421): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-service"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ProviderUpdatePublishingUser_593939 = ref object of OpenApiRestCall_593421
proc url_ProviderUpdatePublishingUser_593941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderUpdatePublishingUser_593940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593942 = query.getOrDefault("api-version")
  valid_593942 = validateParameter(valid_593942, JString, required = true,
                                 default = nil)
  if valid_593942 != nil:
    section.add "api-version", valid_593942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593944: Call_ProviderUpdatePublishingUser_593939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_593944.validator(path, query, header, formData, body)
  let scheme = call_593944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593944.url(scheme.get, call_593944.host, call_593944.base,
                         call_593944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593944, url, valid)

proc call*(call_593945: Call_ProviderUpdatePublishingUser_593939;
          apiVersion: string; requestMessage: JsonNode): Recallable =
  ## providerUpdatePublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  var query_593946 = newJObject()
  var body_593947 = newJObject()
  add(query_593946, "api-version", newJString(apiVersion))
  if requestMessage != nil:
    body_593947 = requestMessage
  result = call_593945.call(nil, query_593946, nil, nil, body_593947)

var providerUpdatePublishingUser* = Call_ProviderUpdatePublishingUser_593939(
    name: "providerUpdatePublishingUser", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderUpdatePublishingUser_593940, base: "",
    url: url_ProviderUpdatePublishingUser_593941, schemes: {Scheme.Https})
type
  Call_ProviderGetPublishingUser_593643 = ref object of OpenApiRestCall_593421
proc url_ProviderGetPublishingUser_593645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetPublishingUser_593644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593804 = query.getOrDefault("api-version")
  valid_593804 = validateParameter(valid_593804, JString, required = true,
                                 default = nil)
  if valid_593804 != nil:
    section.add "api-version", valid_593804
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593827: Call_ProviderGetPublishingUser_593643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_593827.validator(path, query, header, formData, body)
  let scheme = call_593827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593827.url(scheme.get, call_593827.host, call_593827.base,
                         call_593827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593827, url, valid)

proc call*(call_593898: Call_ProviderGetPublishingUser_593643; apiVersion: string): Recallable =
  ## providerGetPublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  var query_593899 = newJObject()
  add(query_593899, "api-version", newJString(apiVersion))
  result = call_593898.call(nil, query_593899, nil, nil, nil)

var providerGetPublishingUser* = Call_ProviderGetPublishingUser_593643(
    name: "providerGetPublishingUser", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderGetPublishingUser_593644, base: "",
    url: url_ProviderGetPublishingUser_593645, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControls_593948 = ref object of OpenApiRestCall_593421
proc url_ProviderGetSourceControls_593950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetSourceControls_593949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593951 = query.getOrDefault("api-version")
  valid_593951 = validateParameter(valid_593951, JString, required = true,
                                 default = nil)
  if valid_593951 != nil:
    section.add "api-version", valid_593951
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593952: Call_ProviderGetSourceControls_593948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_593952.validator(path, query, header, formData, body)
  let scheme = call_593952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593952.url(scheme.get, call_593952.host, call_593952.base,
                         call_593952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593952, url, valid)

proc call*(call_593953: Call_ProviderGetSourceControls_593948; apiVersion: string): Recallable =
  ## providerGetSourceControls
  ##   apiVersion: string (required)
  ##             : API Version
  var query_593954 = newJObject()
  add(query_593954, "api-version", newJString(apiVersion))
  result = call_593953.call(nil, query_593954, nil, nil, nil)

var providerGetSourceControls* = Call_ProviderGetSourceControls_593948(
    name: "providerGetSourceControls", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols",
    validator: validate_ProviderGetSourceControls_593949, base: "",
    url: url_ProviderGetSourceControls_593950, schemes: {Scheme.Https})
type
  Call_ProviderUpdateSourceControl_593978 = ref object of OpenApiRestCall_593421
proc url_ProviderUpdateSourceControl_593980(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderUpdateSourceControl_593979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_593981 = path.getOrDefault("sourceControlType")
  valid_593981 = validateParameter(valid_593981, JString, required = true,
                                 default = nil)
  if valid_593981 != nil:
    section.add "sourceControlType", valid_593981
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593982 = query.getOrDefault("api-version")
  valid_593982 = validateParameter(valid_593982, JString, required = true,
                                 default = nil)
  if valid_593982 != nil:
    section.add "api-version", valid_593982
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593984: Call_ProviderUpdateSourceControl_593978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_593984.validator(path, query, header, formData, body)
  let scheme = call_593984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593984.url(scheme.get, call_593984.host, call_593984.base,
                         call_593984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593984, url, valid)

proc call*(call_593985: Call_ProviderUpdateSourceControl_593978;
          apiVersion: string; sourceControlType: string; requestMessage: JsonNode): Recallable =
  ## providerUpdateSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  var path_593986 = newJObject()
  var query_593987 = newJObject()
  var body_593988 = newJObject()
  add(query_593987, "api-version", newJString(apiVersion))
  add(path_593986, "sourceControlType", newJString(sourceControlType))
  if requestMessage != nil:
    body_593988 = requestMessage
  result = call_593985.call(path_593986, query_593987, nil, nil, body_593988)

var providerUpdateSourceControl* = Call_ProviderUpdateSourceControl_593978(
    name: "providerUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderUpdateSourceControl_593979, base: "",
    url: url_ProviderUpdateSourceControl_593980, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControl_593955 = ref object of OpenApiRestCall_593421
proc url_ProviderGetSourceControl_593957(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderGetSourceControl_593956(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_593972 = path.getOrDefault("sourceControlType")
  valid_593972 = validateParameter(valid_593972, JString, required = true,
                                 default = nil)
  if valid_593972 != nil:
    section.add "sourceControlType", valid_593972
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593973 = query.getOrDefault("api-version")
  valid_593973 = validateParameter(valid_593973, JString, required = true,
                                 default = nil)
  if valid_593973 != nil:
    section.add "api-version", valid_593973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593974: Call_ProviderGetSourceControl_593955; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_593974.validator(path, query, header, formData, body)
  let scheme = call_593974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593974.url(scheme.get, call_593974.host, call_593974.base,
                         call_593974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593974, url, valid)

proc call*(call_593975: Call_ProviderGetSourceControl_593955; apiVersion: string;
          sourceControlType: string): Recallable =
  ## providerGetSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  var path_593976 = newJObject()
  var query_593977 = newJObject()
  add(query_593977, "api-version", newJString(apiVersion))
  add(path_593976, "sourceControlType", newJString(sourceControlType))
  result = call_593975.call(path_593976, query_593977, nil, nil, nil)

var providerGetSourceControl* = Call_ProviderGetSourceControl_593955(
    name: "providerGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderGetSourceControl_593956, base: "",
    url: url_ProviderGetSourceControl_593957, schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderGetAllCertificateOrders_593989 = ref object of OpenApiRestCall_593421
proc url_GlobalCertificateOrderGetAllCertificateOrders_593991(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderGetAllCertificateOrders_593990(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_593992 = path.getOrDefault("subscriptionId")
  valid_593992 = validateParameter(valid_593992, JString, required = true,
                                 default = nil)
  if valid_593992 != nil:
    section.add "subscriptionId", valid_593992
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593993 = query.getOrDefault("api-version")
  valid_593993 = validateParameter(valid_593993, JString, required = true,
                                 default = nil)
  if valid_593993 != nil:
    section.add "api-version", valid_593993
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593994: Call_GlobalCertificateOrderGetAllCertificateOrders_593989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_593994.validator(path, query, header, formData, body)
  let scheme = call_593994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593994.url(scheme.get, call_593994.host, call_593994.base,
                         call_593994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593994, url, valid)

proc call*(call_593995: Call_GlobalCertificateOrderGetAllCertificateOrders_593989;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalCertificateOrderGetAllCertificateOrders
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_593996 = newJObject()
  var query_593997 = newJObject()
  add(query_593997, "api-version", newJString(apiVersion))
  add(path_593996, "subscriptionId", newJString(subscriptionId))
  result = call_593995.call(path_593996, query_593997, nil, nil, nil)

var globalCertificateOrderGetAllCertificateOrders* = Call_GlobalCertificateOrderGetAllCertificateOrders_593989(
    name: "globalCertificateOrderGetAllCertificateOrders",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_GlobalCertificateOrderGetAllCertificateOrders_593990,
    base: "", url: url_GlobalCertificateOrderGetAllCertificateOrders_593991,
    schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_593998 = ref object of OpenApiRestCall_593421
proc url_GlobalCertificateOrderValidateCertificatePurchaseInformation_594000(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_593999(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594001 = path.getOrDefault("subscriptionId")
  valid_594001 = validateParameter(valid_594001, JString, required = true,
                                 default = nil)
  if valid_594001 != nil:
    section.add "subscriptionId", valid_594001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594002 = query.getOrDefault("api-version")
  valid_594002 = validateParameter(valid_594002, JString, required = true,
                                 default = nil)
  if valid_594002 != nil:
    section.add "api-version", valid_594002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594004: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_593998;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594004.validator(path, query, header, formData, body)
  let scheme = call_594004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594004.url(scheme.get, call_594004.host, call_594004.base,
                         call_594004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594004, url, valid)

proc call*(call_594005: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_593998;
          apiVersion: string; certificateOrder: JsonNode; subscriptionId: string): Recallable =
  ## globalCertificateOrderValidateCertificatePurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594006 = newJObject()
  var query_594007 = newJObject()
  var body_594008 = newJObject()
  add(query_594007, "api-version", newJString(apiVersion))
  if certificateOrder != nil:
    body_594008 = certificateOrder
  add(path_594006, "subscriptionId", newJString(subscriptionId))
  result = call_594005.call(path_594006, query_594007, nil, nil, body_594008)

var globalCertificateOrderValidateCertificatePurchaseInformation* = Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_593998(
    name: "globalCertificateOrderValidateCertificatePurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation", validator: validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_593999,
    base: "",
    url: url_GlobalCertificateOrderValidateCertificatePurchaseInformation_594000,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationCheckDomainAvailability_594009 = ref object of OpenApiRestCall_593421
proc url_GlobalDomainRegistrationCheckDomainAvailability_594011(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/checkDomainAvailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationCheckDomainAvailability_594010(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594012 = path.getOrDefault("subscriptionId")
  valid_594012 = validateParameter(valid_594012, JString, required = true,
                                 default = nil)
  if valid_594012 != nil:
    section.add "subscriptionId", valid_594012
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594013 = query.getOrDefault("api-version")
  valid_594013 = validateParameter(valid_594013, JString, required = true,
                                 default = nil)
  if valid_594013 != nil:
    section.add "api-version", valid_594013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   identifier: JObject (required)
  ##             : Name of the domain
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594015: Call_GlobalDomainRegistrationCheckDomainAvailability_594009;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594015.validator(path, query, header, formData, body)
  let scheme = call_594015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594015.url(scheme.get, call_594015.host, call_594015.base,
                         call_594015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594015, url, valid)

proc call*(call_594016: Call_GlobalDomainRegistrationCheckDomainAvailability_594009;
          apiVersion: string; subscriptionId: string; identifier: JsonNode): Recallable =
  ## globalDomainRegistrationCheckDomainAvailability
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   identifier: JObject (required)
  ##             : Name of the domain
  var path_594017 = newJObject()
  var query_594018 = newJObject()
  var body_594019 = newJObject()
  add(query_594018, "api-version", newJString(apiVersion))
  add(path_594017, "subscriptionId", newJString(subscriptionId))
  if identifier != nil:
    body_594019 = identifier
  result = call_594016.call(path_594017, query_594018, nil, nil, body_594019)

var globalDomainRegistrationCheckDomainAvailability* = Call_GlobalDomainRegistrationCheckDomainAvailability_594009(
    name: "globalDomainRegistrationCheckDomainAvailability",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
    validator: validate_GlobalDomainRegistrationCheckDomainAvailability_594010,
    base: "", url: url_GlobalDomainRegistrationCheckDomainAvailability_594011,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetAllDomains_594020 = ref object of OpenApiRestCall_593421
proc url_GlobalDomainRegistrationGetAllDomains_594022(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetAllDomains_594021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594023 = path.getOrDefault("subscriptionId")
  valid_594023 = validateParameter(valid_594023, JString, required = true,
                                 default = nil)
  if valid_594023 != nil:
    section.add "subscriptionId", valid_594023
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594024 = query.getOrDefault("api-version")
  valid_594024 = validateParameter(valid_594024, JString, required = true,
                                 default = nil)
  if valid_594024 != nil:
    section.add "api-version", valid_594024
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594025: Call_GlobalDomainRegistrationGetAllDomains_594020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594025.validator(path, query, header, formData, body)
  let scheme = call_594025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594025.url(scheme.get, call_594025.host, call_594025.base,
                         call_594025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594025, url, valid)

proc call*(call_594026: Call_GlobalDomainRegistrationGetAllDomains_594020;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetAllDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594027 = newJObject()
  var query_594028 = newJObject()
  add(query_594028, "api-version", newJString(apiVersion))
  add(path_594027, "subscriptionId", newJString(subscriptionId))
  result = call_594026.call(path_594027, query_594028, nil, nil, nil)

var globalDomainRegistrationGetAllDomains* = Call_GlobalDomainRegistrationGetAllDomains_594020(
    name: "globalDomainRegistrationGetAllDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_GlobalDomainRegistrationGetAllDomains_594021, base: "",
    url: url_GlobalDomainRegistrationGetAllDomains_594022, schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594029 = ref object of OpenApiRestCall_593421
proc url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594031(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/generateSsoRequest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594030(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594032 = path.getOrDefault("subscriptionId")
  valid_594032 = validateParameter(valid_594032, JString, required = true,
                                 default = nil)
  if valid_594032 != nil:
    section.add "subscriptionId", valid_594032
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594033 = query.getOrDefault("api-version")
  valid_594033 = validateParameter(valid_594033, JString, required = true,
                                 default = nil)
  if valid_594033 != nil:
    section.add "api-version", valid_594033
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594034: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594029;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594034.validator(path, query, header, formData, body)
  let scheme = call_594034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594034.url(scheme.get, call_594034.host, call_594034.base,
                         call_594034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594034, url, valid)

proc call*(call_594035: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594029;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetDomainControlCenterSsoRequest
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594036 = newJObject()
  var query_594037 = newJObject()
  add(query_594037, "api-version", newJString(apiVersion))
  add(path_594036, "subscriptionId", newJString(subscriptionId))
  result = call_594035.call(path_594036, query_594037, nil, nil, nil)

var globalDomainRegistrationGetDomainControlCenterSsoRequest* = Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594029(
    name: "globalDomainRegistrationGetDomainControlCenterSsoRequest",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest", validator: validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594030,
    base: "", url: url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_594031,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationListDomainRecommendations_594038 = ref object of OpenApiRestCall_593421
proc url_GlobalDomainRegistrationListDomainRecommendations_594040(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/listDomainRecommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationListDomainRecommendations_594039(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594041 = path.getOrDefault("subscriptionId")
  valid_594041 = validateParameter(valid_594041, JString, required = true,
                                 default = nil)
  if valid_594041 != nil:
    section.add "subscriptionId", valid_594041
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594042 = query.getOrDefault("api-version")
  valid_594042 = validateParameter(valid_594042, JString, required = true,
                                 default = nil)
  if valid_594042 != nil:
    section.add "api-version", valid_594042
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594044: Call_GlobalDomainRegistrationListDomainRecommendations_594038;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594044.validator(path, query, header, formData, body)
  let scheme = call_594044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594044.url(scheme.get, call_594044.host, call_594044.base,
                         call_594044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594044, url, valid)

proc call*(call_594045: Call_GlobalDomainRegistrationListDomainRecommendations_594038;
          apiVersion: string; subscriptionId: string; parameters: JsonNode): Recallable =
  ## globalDomainRegistrationListDomainRecommendations
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  var path_594046 = newJObject()
  var query_594047 = newJObject()
  var body_594048 = newJObject()
  add(query_594047, "api-version", newJString(apiVersion))
  add(path_594046, "subscriptionId", newJString(subscriptionId))
  if parameters != nil:
    body_594048 = parameters
  result = call_594045.call(path_594046, query_594047, nil, nil, body_594048)

var globalDomainRegistrationListDomainRecommendations* = Call_GlobalDomainRegistrationListDomainRecommendations_594038(
    name: "globalDomainRegistrationListDomainRecommendations",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
    validator: validate_GlobalDomainRegistrationListDomainRecommendations_594039,
    base: "", url: url_GlobalDomainRegistrationListDomainRecommendations_594040,
    schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetGetTopLevelDomains_594049 = ref object of OpenApiRestCall_593421
proc url_TopLevelDomainsGetGetTopLevelDomains_594051(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetGetTopLevelDomains_594050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594052 = path.getOrDefault("subscriptionId")
  valid_594052 = validateParameter(valid_594052, JString, required = true,
                                 default = nil)
  if valid_594052 != nil:
    section.add "subscriptionId", valid_594052
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594053 = query.getOrDefault("api-version")
  valid_594053 = validateParameter(valid_594053, JString, required = true,
                                 default = nil)
  if valid_594053 != nil:
    section.add "api-version", valid_594053
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594054: Call_TopLevelDomainsGetGetTopLevelDomains_594049;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594054.validator(path, query, header, formData, body)
  let scheme = call_594054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594054.url(scheme.get, call_594054.host, call_594054.base,
                         call_594054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594054, url, valid)

proc call*(call_594055: Call_TopLevelDomainsGetGetTopLevelDomains_594049;
          apiVersion: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetGetTopLevelDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594056 = newJObject()
  var query_594057 = newJObject()
  add(query_594057, "api-version", newJString(apiVersion))
  add(path_594056, "subscriptionId", newJString(subscriptionId))
  result = call_594055.call(path_594056, query_594057, nil, nil, nil)

var topLevelDomainsGetGetTopLevelDomains* = Call_TopLevelDomainsGetGetTopLevelDomains_594049(
    name: "topLevelDomainsGetGetTopLevelDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
    validator: validate_TopLevelDomainsGetGetTopLevelDomains_594050, base: "",
    url: url_TopLevelDomainsGetGetTopLevelDomains_594051, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetTopLevelDomain_594058 = ref object of OpenApiRestCall_593421
proc url_TopLevelDomainsGetTopLevelDomain_594060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetTopLevelDomain_594059(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_594061 = path.getOrDefault("name")
  valid_594061 = validateParameter(valid_594061, JString, required = true,
                                 default = nil)
  if valid_594061 != nil:
    section.add "name", valid_594061
  var valid_594062 = path.getOrDefault("subscriptionId")
  valid_594062 = validateParameter(valid_594062, JString, required = true,
                                 default = nil)
  if valid_594062 != nil:
    section.add "subscriptionId", valid_594062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594063 = query.getOrDefault("api-version")
  valid_594063 = validateParameter(valid_594063, JString, required = true,
                                 default = nil)
  if valid_594063 != nil:
    section.add "api-version", valid_594063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594064: Call_TopLevelDomainsGetTopLevelDomain_594058;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594064.validator(path, query, header, formData, body)
  let scheme = call_594064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594064.url(scheme.get, call_594064.host, call_594064.base,
                         call_594064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594064, url, valid)

proc call*(call_594065: Call_TopLevelDomainsGetTopLevelDomain_594058;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetTopLevelDomain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594066 = newJObject()
  var query_594067 = newJObject()
  add(query_594067, "api-version", newJString(apiVersion))
  add(path_594066, "name", newJString(name))
  add(path_594066, "subscriptionId", newJString(subscriptionId))
  result = call_594065.call(path_594066, query_594067, nil, nil, nil)

var topLevelDomainsGetTopLevelDomain* = Call_TopLevelDomainsGetTopLevelDomain_594058(
    name: "topLevelDomainsGetTopLevelDomain", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
    validator: validate_TopLevelDomainsGetTopLevelDomain_594059, base: "",
    url: url_TopLevelDomainsGetTopLevelDomain_594060, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsListTopLevelDomainAgreements_594068 = ref object of OpenApiRestCall_593421
proc url_TopLevelDomainsListTopLevelDomainAgreements_594070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listAgreements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsListTopLevelDomainAgreements_594069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_594071 = path.getOrDefault("name")
  valid_594071 = validateParameter(valid_594071, JString, required = true,
                                 default = nil)
  if valid_594071 != nil:
    section.add "name", valid_594071
  var valid_594072 = path.getOrDefault("subscriptionId")
  valid_594072 = validateParameter(valid_594072, JString, required = true,
                                 default = nil)
  if valid_594072 != nil:
    section.add "subscriptionId", valid_594072
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594073 = query.getOrDefault("api-version")
  valid_594073 = validateParameter(valid_594073, JString, required = true,
                                 default = nil)
  if valid_594073 != nil:
    section.add "api-version", valid_594073
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594075: Call_TopLevelDomainsListTopLevelDomainAgreements_594068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594075.validator(path, query, header, formData, body)
  let scheme = call_594075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594075.url(scheme.get, call_594075.host, call_594075.base,
                         call_594075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594075, url, valid)

proc call*(call_594076: Call_TopLevelDomainsListTopLevelDomainAgreements_594068;
          apiVersion: string; name: string; agreementOption: JsonNode;
          subscriptionId: string): Recallable =
  ## topLevelDomainsListTopLevelDomainAgreements
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594077 = newJObject()
  var query_594078 = newJObject()
  var body_594079 = newJObject()
  add(query_594078, "api-version", newJString(apiVersion))
  add(path_594077, "name", newJString(name))
  if agreementOption != nil:
    body_594079 = agreementOption
  add(path_594077, "subscriptionId", newJString(subscriptionId))
  result = call_594076.call(path_594077, query_594078, nil, nil, body_594079)

var topLevelDomainsListTopLevelDomainAgreements* = Call_TopLevelDomainsListTopLevelDomainAgreements_594068(
    name: "topLevelDomainsListTopLevelDomainAgreements",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
    validator: validate_TopLevelDomainsListTopLevelDomainAgreements_594069,
    base: "", url: url_TopLevelDomainsListTopLevelDomainAgreements_594070,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_594080 = ref object of OpenApiRestCall_593421
proc url_GlobalDomainRegistrationValidateDomainPurchaseInformation_594082(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_594081(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594083 = path.getOrDefault("subscriptionId")
  valid_594083 = validateParameter(valid_594083, JString, required = true,
                                 default = nil)
  if valid_594083 != nil:
    section.add "subscriptionId", valid_594083
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594084 = query.getOrDefault("api-version")
  valid_594084 = validateParameter(valid_594084, JString, required = true,
                                 default = nil)
  if valid_594084 != nil:
    section.add "api-version", valid_594084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594086: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_594080;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594086.validator(path, query, header, formData, body)
  let scheme = call_594086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594086.url(scheme.get, call_594086.host, call_594086.base,
                         call_594086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594086, url, valid)

proc call*(call_594087: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_594080;
          apiVersion: string; subscriptionId: string;
          domainRegistrationInput: JsonNode): Recallable =
  ## globalDomainRegistrationValidateDomainPurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  var path_594088 = newJObject()
  var query_594089 = newJObject()
  var body_594090 = newJObject()
  add(query_594089, "api-version", newJString(apiVersion))
  add(path_594088, "subscriptionId", newJString(subscriptionId))
  if domainRegistrationInput != nil:
    body_594090 = domainRegistrationInput
  result = call_594087.call(path_594088, query_594089, nil, nil, body_594090)

var globalDomainRegistrationValidateDomainPurchaseInformation* = Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_594080(
    name: "globalDomainRegistrationValidateDomainPurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation", validator: validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_594081,
    base: "", url: url_GlobalDomainRegistrationValidateDomainPurchaseInformation_594082,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllCertificates_594091 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllCertificates_594093(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllCertificates_594092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594094 = path.getOrDefault("subscriptionId")
  valid_594094 = validateParameter(valid_594094, JString, required = true,
                                 default = nil)
  if valid_594094 != nil:
    section.add "subscriptionId", valid_594094
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594095 = query.getOrDefault("api-version")
  valid_594095 = validateParameter(valid_594095, JString, required = true,
                                 default = nil)
  if valid_594095 != nil:
    section.add "api-version", valid_594095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594096: Call_GlobalGetAllCertificates_594091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594096.validator(path, query, header, formData, body)
  let scheme = call_594096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594096.url(scheme.get, call_594096.host, call_594096.base,
                         call_594096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594096, url, valid)

proc call*(call_594097: Call_GlobalGetAllCertificates_594091; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllCertificates
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594098 = newJObject()
  var query_594099 = newJObject()
  add(query_594099, "api-version", newJString(apiVersion))
  add(path_594098, "subscriptionId", newJString(subscriptionId))
  result = call_594097.call(path_594098, query_594099, nil, nil, nil)

var globalGetAllCertificates* = Call_GlobalGetAllCertificates_594091(
    name: "globalGetAllCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
    validator: validate_GlobalGetAllCertificates_594092, base: "",
    url: url_GlobalGetAllCertificates_594093, schemes: {Scheme.Https})
type
  Call_GlobalCheckNameAvailability_594100 = ref object of OpenApiRestCall_593421
proc url_GlobalCheckNameAvailability_594102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/checknameavailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCheckNameAvailability_594101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594103 = path.getOrDefault("subscriptionId")
  valid_594103 = validateParameter(valid_594103, JString, required = true,
                                 default = nil)
  if valid_594103 != nil:
    section.add "subscriptionId", valid_594103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594104 = query.getOrDefault("api-version")
  valid_594104 = validateParameter(valid_594104, JString, required = true,
                                 default = nil)
  if valid_594104 != nil:
    section.add "api-version", valid_594104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Name availability request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594106: Call_GlobalCheckNameAvailability_594100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594106.validator(path, query, header, formData, body)
  let scheme = call_594106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594106.url(scheme.get, call_594106.host, call_594106.base,
                         call_594106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594106, url, valid)

proc call*(call_594107: Call_GlobalCheckNameAvailability_594100;
          apiVersion: string; subscriptionId: string; request: JsonNode): Recallable =
  ## globalCheckNameAvailability
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Name availability request
  var path_594108 = newJObject()
  var query_594109 = newJObject()
  var body_594110 = newJObject()
  add(query_594109, "api-version", newJString(apiVersion))
  add(path_594108, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594110 = request
  result = call_594107.call(path_594108, query_594109, nil, nil, body_594110)

var globalCheckNameAvailability* = Call_GlobalCheckNameAvailability_594100(
    name: "globalCheckNameAvailability", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
    validator: validate_GlobalCheckNameAvailability_594101, base: "",
    url: url_GlobalCheckNameAvailability_594102, schemes: {Scheme.Https})
type
  Call_GlobalGetAllClassicMobileServices_594111 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllClassicMobileServices_594113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllClassicMobileServices_594112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594114 = path.getOrDefault("subscriptionId")
  valid_594114 = validateParameter(valid_594114, JString, required = true,
                                 default = nil)
  if valid_594114 != nil:
    section.add "subscriptionId", valid_594114
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594115 = query.getOrDefault("api-version")
  valid_594115 = validateParameter(valid_594115, JString, required = true,
                                 default = nil)
  if valid_594115 != nil:
    section.add "api-version", valid_594115
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594116: Call_GlobalGetAllClassicMobileServices_594111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594116.validator(path, query, header, formData, body)
  let scheme = call_594116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594116.url(scheme.get, call_594116.host, call_594116.base,
                         call_594116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594116, url, valid)

proc call*(call_594117: Call_GlobalGetAllClassicMobileServices_594111;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllClassicMobileServices
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594118 = newJObject()
  var query_594119 = newJObject()
  add(query_594119, "api-version", newJString(apiVersion))
  add(path_594118, "subscriptionId", newJString(subscriptionId))
  result = call_594117.call(path_594118, query_594119, nil, nil, nil)

var globalGetAllClassicMobileServices* = Call_GlobalGetAllClassicMobileServices_594111(
    name: "globalGetAllClassicMobileServices", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_GlobalGetAllClassicMobileServices_594112, base: "",
    url: url_GlobalGetAllClassicMobileServices_594113, schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionGeoRegions_594120 = ref object of OpenApiRestCall_593421
proc url_GlobalGetSubscriptionGeoRegions_594122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/geoRegions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionGeoRegions_594121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594123 = path.getOrDefault("subscriptionId")
  valid_594123 = validateParameter(valid_594123, JString, required = true,
                                 default = nil)
  if valid_594123 != nil:
    section.add "subscriptionId", valid_594123
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   linuxWorkersEnabled: JBool
  ##                      : Filter only to regions that support linux workers
  ##   sku: JString
  ##      : Filter only to regions that support this sku
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594124 = query.getOrDefault("api-version")
  valid_594124 = validateParameter(valid_594124, JString, required = true,
                                 default = nil)
  if valid_594124 != nil:
    section.add "api-version", valid_594124
  var valid_594125 = query.getOrDefault("linuxWorkersEnabled")
  valid_594125 = validateParameter(valid_594125, JBool, required = false, default = nil)
  if valid_594125 != nil:
    section.add "linuxWorkersEnabled", valid_594125
  var valid_594126 = query.getOrDefault("sku")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "sku", valid_594126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594127: Call_GlobalGetSubscriptionGeoRegions_594120;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594127.validator(path, query, header, formData, body)
  let scheme = call_594127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594127.url(scheme.get, call_594127.host, call_594127.base,
                         call_594127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594127, url, valid)

proc call*(call_594128: Call_GlobalGetSubscriptionGeoRegions_594120;
          apiVersion: string; subscriptionId: string;
          linuxWorkersEnabled: bool = false; sku: string = ""): Recallable =
  ## globalGetSubscriptionGeoRegions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   linuxWorkersEnabled: bool
  ##                      : Filter only to regions that support linux workers
  ##   sku: string
  ##      : Filter only to regions that support this sku
  var path_594129 = newJObject()
  var query_594130 = newJObject()
  add(query_594130, "api-version", newJString(apiVersion))
  add(path_594129, "subscriptionId", newJString(subscriptionId))
  add(query_594130, "linuxWorkersEnabled", newJBool(linuxWorkersEnabled))
  add(query_594130, "sku", newJString(sku))
  result = call_594128.call(path_594129, query_594130, nil, nil, nil)

var globalGetSubscriptionGeoRegions* = Call_GlobalGetSubscriptionGeoRegions_594120(
    name: "globalGetSubscriptionGeoRegions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
    validator: validate_GlobalGetSubscriptionGeoRegions_594121, base: "",
    url: url_GlobalGetSubscriptionGeoRegions_594122, schemes: {Scheme.Https})
type
  Call_GlobalGetAllHostingEnvironments_594131 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllHostingEnvironments_594133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllHostingEnvironments_594132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594134 = path.getOrDefault("subscriptionId")
  valid_594134 = validateParameter(valid_594134, JString, required = true,
                                 default = nil)
  if valid_594134 != nil:
    section.add "subscriptionId", valid_594134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594135 = query.getOrDefault("api-version")
  valid_594135 = validateParameter(valid_594135, JString, required = true,
                                 default = nil)
  if valid_594135 != nil:
    section.add "api-version", valid_594135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594136: Call_GlobalGetAllHostingEnvironments_594131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594136.validator(path, query, header, formData, body)
  let scheme = call_594136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594136.url(scheme.get, call_594136.host, call_594136.base,
                         call_594136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594136, url, valid)

proc call*(call_594137: Call_GlobalGetAllHostingEnvironments_594131;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594138 = newJObject()
  var query_594139 = newJObject()
  add(query_594139, "api-version", newJString(apiVersion))
  add(path_594138, "subscriptionId", newJString(subscriptionId))
  result = call_594137.call(path_594138, query_594139, nil, nil, nil)

var globalGetAllHostingEnvironments* = Call_GlobalGetAllHostingEnvironments_594131(
    name: "globalGetAllHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_GlobalGetAllHostingEnvironments_594132, base: "",
    url: url_GlobalGetAllHostingEnvironments_594133, schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentNameAvailable_594140 = ref object of OpenApiRestCall_593421
proc url_GlobalIsHostingEnvironmentNameAvailable_594142(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentNameAvailable_594141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594143 = path.getOrDefault("subscriptionId")
  valid_594143 = validateParameter(valid_594143, JString, required = true,
                                 default = nil)
  if valid_594143 != nil:
    section.add "subscriptionId", valid_594143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   name: JString (required)
  ##       : Hosting environment name
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594144 = query.getOrDefault("api-version")
  valid_594144 = validateParameter(valid_594144, JString, required = true,
                                 default = nil)
  if valid_594144 != nil:
    section.add "api-version", valid_594144
  var valid_594145 = query.getOrDefault("name")
  valid_594145 = validateParameter(valid_594145, JString, required = true,
                                 default = nil)
  if valid_594145 != nil:
    section.add "name", valid_594145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594146: Call_GlobalIsHostingEnvironmentNameAvailable_594140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594146.validator(path, query, header, formData, body)
  let scheme = call_594146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594146.url(scheme.get, call_594146.host, call_594146.base,
                         call_594146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594146, url, valid)

proc call*(call_594147: Call_GlobalIsHostingEnvironmentNameAvailable_594140;
          apiVersion: string; subscriptionId: string; name: string): Recallable =
  ## globalIsHostingEnvironmentNameAvailable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   name: string (required)
  ##       : Hosting environment name
  var path_594148 = newJObject()
  var query_594149 = newJObject()
  add(query_594149, "api-version", newJString(apiVersion))
  add(path_594148, "subscriptionId", newJString(subscriptionId))
  add(query_594149, "name", newJString(name))
  result = call_594147.call(path_594148, query_594149, nil, nil, nil)

var globalIsHostingEnvironmentNameAvailable* = Call_GlobalIsHostingEnvironmentNameAvailable_594140(
    name: "globalIsHostingEnvironmentNameAvailable", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable",
    validator: validate_GlobalIsHostingEnvironmentNameAvailable_594141, base: "",
    url: url_GlobalIsHostingEnvironmentNameAvailable_594142,
    schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594150 = ref object of OpenApiRestCall_593421
proc url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594152(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594151(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Hosting environment name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_594153 = path.getOrDefault("name")
  valid_594153 = validateParameter(valid_594153, JString, required = true,
                                 default = nil)
  if valid_594153 != nil:
    section.add "name", valid_594153
  var valid_594154 = path.getOrDefault("subscriptionId")
  valid_594154 = validateParameter(valid_594154, JString, required = true,
                                 default = nil)
  if valid_594154 != nil:
    section.add "subscriptionId", valid_594154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594155 = query.getOrDefault("api-version")
  valid_594155 = validateParameter(valid_594155, JString, required = true,
                                 default = nil)
  if valid_594155 != nil:
    section.add "api-version", valid_594155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594156: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594156.validator(path, query, header, formData, body)
  let scheme = call_594156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594156.url(scheme.get, call_594156.host, call_594156.base,
                         call_594156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594156, url, valid)

proc call*(call_594157: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594150;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## globalIsHostingEnvironmentWithLegacyNameAvailable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Hosting environment name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594158 = newJObject()
  var query_594159 = newJObject()
  add(query_594159, "api-version", newJString(apiVersion))
  add(path_594158, "name", newJString(name))
  add(path_594158, "subscriptionId", newJString(subscriptionId))
  result = call_594157.call(path_594158, query_594159, nil, nil, nil)

var globalIsHostingEnvironmentWithLegacyNameAvailable* = Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594150(
    name: "globalIsHostingEnvironmentWithLegacyNameAvailable",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable/{name}",
    validator: validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594151,
    base: "", url: url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_594152,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllManagedHostingEnvironments_594160 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllManagedHostingEnvironments_594162(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllManagedHostingEnvironments_594161(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594163 = path.getOrDefault("subscriptionId")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "subscriptionId", valid_594163
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594164 = query.getOrDefault("api-version")
  valid_594164 = validateParameter(valid_594164, JString, required = true,
                                 default = nil)
  if valid_594164 != nil:
    section.add "api-version", valid_594164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594165: Call_GlobalGetAllManagedHostingEnvironments_594160;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594165.validator(path, query, header, formData, body)
  let scheme = call_594165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594165.url(scheme.get, call_594165.host, call_594165.base,
                         call_594165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594165, url, valid)

proc call*(call_594166: Call_GlobalGetAllManagedHostingEnvironments_594160;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllManagedHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594167 = newJObject()
  var query_594168 = newJObject()
  add(query_594168, "api-version", newJString(apiVersion))
  add(path_594167, "subscriptionId", newJString(subscriptionId))
  result = call_594166.call(path_594167, query_594168, nil, nil, nil)

var globalGetAllManagedHostingEnvironments* = Call_GlobalGetAllManagedHostingEnvironments_594160(
    name: "globalGetAllManagedHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments",
    validator: validate_GlobalGetAllManagedHostingEnvironments_594161, base: "",
    url: url_GlobalGetAllManagedHostingEnvironments_594162,
    schemes: {Scheme.Https})
type
  Call_GlobalListPremierAddOnOffers_594169 = ref object of OpenApiRestCall_593421
proc url_GlobalListPremierAddOnOffers_594171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/premieraddonoffers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalListPremierAddOnOffers_594170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594172 = path.getOrDefault("subscriptionId")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = nil)
  if valid_594172 != nil:
    section.add "subscriptionId", valid_594172
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594173 = query.getOrDefault("api-version")
  valid_594173 = validateParameter(valid_594173, JString, required = true,
                                 default = nil)
  if valid_594173 != nil:
    section.add "api-version", valid_594173
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594174: Call_GlobalListPremierAddOnOffers_594169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594174.validator(path, query, header, formData, body)
  let scheme = call_594174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594174.url(scheme.get, call_594174.host, call_594174.base,
                         call_594174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594174, url, valid)

proc call*(call_594175: Call_GlobalListPremierAddOnOffers_594169;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalListPremierAddOnOffers
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594176 = newJObject()
  var query_594177 = newJObject()
  add(query_594177, "api-version", newJString(apiVersion))
  add(path_594176, "subscriptionId", newJString(subscriptionId))
  result = call_594175.call(path_594176, query_594177, nil, nil, nil)

var globalListPremierAddOnOffers* = Call_GlobalListPremierAddOnOffers_594169(
    name: "globalListPremierAddOnOffers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
    validator: validate_GlobalListPremierAddOnOffers_594170, base: "",
    url: url_GlobalListPremierAddOnOffers_594171, schemes: {Scheme.Https})
type
  Call_GlobalUpdateSubscriptionPublishingCredentials_594187 = ref object of OpenApiRestCall_593421
proc url_GlobalUpdateSubscriptionPublishingCredentials_594189(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalUpdateSubscriptionPublishingCredentials_594188(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594190 = path.getOrDefault("subscriptionId")
  valid_594190 = validateParameter(valid_594190, JString, required = true,
                                 default = nil)
  if valid_594190 != nil:
    section.add "subscriptionId", valid_594190
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594191 = query.getOrDefault("api-version")
  valid_594191 = validateParameter(valid_594191, JString, required = true,
                                 default = nil)
  if valid_594191 != nil:
    section.add "api-version", valid_594191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594193: Call_GlobalUpdateSubscriptionPublishingCredentials_594187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594193.validator(path, query, header, formData, body)
  let scheme = call_594193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594193.url(scheme.get, call_594193.host, call_594193.base,
                         call_594193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594193, url, valid)

proc call*(call_594194: Call_GlobalUpdateSubscriptionPublishingCredentials_594187;
          apiVersion: string; subscriptionId: string; requestMessage: JsonNode): Recallable =
  ## globalUpdateSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  var path_594195 = newJObject()
  var query_594196 = newJObject()
  var body_594197 = newJObject()
  add(query_594196, "api-version", newJString(apiVersion))
  add(path_594195, "subscriptionId", newJString(subscriptionId))
  if requestMessage != nil:
    body_594197 = requestMessage
  result = call_594194.call(path_594195, query_594196, nil, nil, body_594197)

var globalUpdateSubscriptionPublishingCredentials* = Call_GlobalUpdateSubscriptionPublishingCredentials_594187(
    name: "globalUpdateSubscriptionPublishingCredentials",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalUpdateSubscriptionPublishingCredentials_594188,
    base: "", url: url_GlobalUpdateSubscriptionPublishingCredentials_594189,
    schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionPublishingCredentials_594178 = ref object of OpenApiRestCall_593421
proc url_GlobalGetSubscriptionPublishingCredentials_594180(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionPublishingCredentials_594179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594181 = path.getOrDefault("subscriptionId")
  valid_594181 = validateParameter(valid_594181, JString, required = true,
                                 default = nil)
  if valid_594181 != nil:
    section.add "subscriptionId", valid_594181
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594182 = query.getOrDefault("api-version")
  valid_594182 = validateParameter(valid_594182, JString, required = true,
                                 default = nil)
  if valid_594182 != nil:
    section.add "api-version", valid_594182
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594183: Call_GlobalGetSubscriptionPublishingCredentials_594178;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594183.validator(path, query, header, formData, body)
  let scheme = call_594183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594183.url(scheme.get, call_594183.host, call_594183.base,
                         call_594183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594183, url, valid)

proc call*(call_594184: Call_GlobalGetSubscriptionPublishingCredentials_594178;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594185 = newJObject()
  var query_594186 = newJObject()
  add(query_594186, "api-version", newJString(apiVersion))
  add(path_594185, "subscriptionId", newJString(subscriptionId))
  result = call_594184.call(path_594185, query_594186, nil, nil, nil)

var globalGetSubscriptionPublishingCredentials* = Call_GlobalGetSubscriptionPublishingCredentials_594178(
    name: "globalGetSubscriptionPublishingCredentials", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalGetSubscriptionPublishingCredentials_594179,
    base: "", url: url_GlobalGetSubscriptionPublishingCredentials_594180,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationBySubscription_594198 = ref object of OpenApiRestCall_593421
proc url_RecommendationsGetRecommendationBySubscription_594200(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationBySubscription_594199(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594202 = path.getOrDefault("subscriptionId")
  valid_594202 = validateParameter(valid_594202, JString, required = true,
                                 default = nil)
  if valid_594202 != nil:
    section.add "subscriptionId", valid_594202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   $filter: JString
  ##          : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594203 = query.getOrDefault("api-version")
  valid_594203 = validateParameter(valid_594203, JString, required = true,
                                 default = nil)
  if valid_594203 != nil:
    section.add "api-version", valid_594203
  var valid_594204 = query.getOrDefault("featured")
  valid_594204 = validateParameter(valid_594204, JBool, required = false, default = nil)
  if valid_594204 != nil:
    section.add "featured", valid_594204
  var valid_594205 = query.getOrDefault("$filter")
  valid_594205 = validateParameter(valid_594205, JString, required = false,
                                 default = nil)
  if valid_594205 != nil:
    section.add "$filter", valid_594205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594206: Call_RecommendationsGetRecommendationBySubscription_594198;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594206.validator(path, query, header, formData, body)
  let scheme = call_594206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594206.url(scheme.get, call_594206.host, call_594206.base,
                         call_594206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594206, url, valid)

proc call*(call_594207: Call_RecommendationsGetRecommendationBySubscription_594198;
          apiVersion: string; subscriptionId: string; featured: bool = false;
          Filter: string = ""): Recallable =
  ## recommendationsGetRecommendationBySubscription
  ##   apiVersion: string (required)
  ##             : API Version
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  var path_594208 = newJObject()
  var query_594209 = newJObject()
  add(query_594209, "api-version", newJString(apiVersion))
  add(query_594209, "featured", newJBool(featured))
  add(path_594208, "subscriptionId", newJString(subscriptionId))
  add(query_594209, "$filter", newJString(Filter))
  result = call_594207.call(path_594208, query_594209, nil, nil, nil)

var recommendationsGetRecommendationBySubscription* = Call_RecommendationsGetRecommendationBySubscription_594198(
    name: "recommendationsGetRecommendationBySubscription",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
    validator: validate_RecommendationsGetRecommendationBySubscription_594199,
    base: "", url: url_RecommendationsGetRecommendationBySubscription_594200,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllServerFarms_594210 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllServerFarms_594212(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllServerFarms_594211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594213 = path.getOrDefault("subscriptionId")
  valid_594213 = validateParameter(valid_594213, JString, required = true,
                                 default = nil)
  if valid_594213 != nil:
    section.add "subscriptionId", valid_594213
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   detailed: JBool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594214 = query.getOrDefault("api-version")
  valid_594214 = validateParameter(valid_594214, JString, required = true,
                                 default = nil)
  if valid_594214 != nil:
    section.add "api-version", valid_594214
  var valid_594215 = query.getOrDefault("detailed")
  valid_594215 = validateParameter(valid_594215, JBool, required = false, default = nil)
  if valid_594215 != nil:
    section.add "detailed", valid_594215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594216: Call_GlobalGetAllServerFarms_594210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594216.validator(path, query, header, formData, body)
  let scheme = call_594216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594216.url(scheme.get, call_594216.host, call_594216.base,
                         call_594216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594216, url, valid)

proc call*(call_594217: Call_GlobalGetAllServerFarms_594210; apiVersion: string;
          subscriptionId: string; detailed: bool = false): Recallable =
  ## globalGetAllServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   detailed: bool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594218 = newJObject()
  var query_594219 = newJObject()
  add(query_594219, "api-version", newJString(apiVersion))
  add(query_594219, "detailed", newJBool(detailed))
  add(path_594218, "subscriptionId", newJString(subscriptionId))
  result = call_594217.call(path_594218, query_594219, nil, nil, nil)

var globalGetAllServerFarms* = Call_GlobalGetAllServerFarms_594210(
    name: "globalGetAllServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
    validator: validate_GlobalGetAllServerFarms_594211, base: "",
    url: url_GlobalGetAllServerFarms_594212, schemes: {Scheme.Https})
type
  Call_GlobalGetAllSites_594220 = ref object of OpenApiRestCall_593421
proc url_GlobalGetAllSites_594222(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllSites_594221(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_594223 = path.getOrDefault("subscriptionId")
  valid_594223 = validateParameter(valid_594223, JString, required = true,
                                 default = nil)
  if valid_594223 != nil:
    section.add "subscriptionId", valid_594223
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594224 = query.getOrDefault("api-version")
  valid_594224 = validateParameter(valid_594224, JString, required = true,
                                 default = nil)
  if valid_594224 != nil:
    section.add "api-version", valid_594224
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594225: Call_GlobalGetAllSites_594220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594225.validator(path, query, header, formData, body)
  let scheme = call_594225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594225.url(scheme.get, call_594225.host, call_594225.base,
                         call_594225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594225, url, valid)

proc call*(call_594226: Call_GlobalGetAllSites_594220; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllSites
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594227 = newJObject()
  var query_594228 = newJObject()
  add(query_594228, "api-version", newJString(apiVersion))
  add(path_594227, "subscriptionId", newJString(subscriptionId))
  result = call_594226.call(path_594227, query_594228, nil, nil, nil)

var globalGetAllSites* = Call_GlobalGetAllSites_594220(name: "globalGetAllSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com",
    route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
    validator: validate_GlobalGetAllSites_594221, base: "",
    url: url_GlobalGetAllSites_594222, schemes: {Scheme.Https})
type
  Call_GlobalResourceGroupsMoveResources_594229 = ref object of OpenApiRestCall_593421
proc url_GlobalResourceGroupsMoveResources_594231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/moveResources")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalResourceGroupsMoveResources_594230(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594232 = path.getOrDefault("resourceGroupName")
  valid_594232 = validateParameter(valid_594232, JString, required = true,
                                 default = nil)
  if valid_594232 != nil:
    section.add "resourceGroupName", valid_594232
  var valid_594233 = path.getOrDefault("subscriptionId")
  valid_594233 = validateParameter(valid_594233, JString, required = true,
                                 default = nil)
  if valid_594233 != nil:
    section.add "subscriptionId", valid_594233
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594234 = query.getOrDefault("api-version")
  valid_594234 = validateParameter(valid_594234, JString, required = true,
                                 default = nil)
  if valid_594234 != nil:
    section.add "api-version", valid_594234
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   moveResourceEnvelope: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594236: Call_GlobalResourceGroupsMoveResources_594229;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594236.validator(path, query, header, formData, body)
  let scheme = call_594236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594236.url(scheme.get, call_594236.host, call_594236.base,
                         call_594236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594236, url, valid)

proc call*(call_594237: Call_GlobalResourceGroupsMoveResources_594229;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          moveResourceEnvelope: JsonNode): Recallable =
  ## globalResourceGroupsMoveResources
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   moveResourceEnvelope: JObject (required)
  var path_594238 = newJObject()
  var query_594239 = newJObject()
  var body_594240 = newJObject()
  add(path_594238, "resourceGroupName", newJString(resourceGroupName))
  add(query_594239, "api-version", newJString(apiVersion))
  add(path_594238, "subscriptionId", newJString(subscriptionId))
  if moveResourceEnvelope != nil:
    body_594240 = moveResourceEnvelope
  result = call_594237.call(path_594238, query_594239, nil, nil, body_594240)

var globalResourceGroupsMoveResources* = Call_GlobalResourceGroupsMoveResources_594229(
    name: "globalResourceGroupsMoveResources", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
    validator: validate_GlobalResourceGroupsMoveResources_594230, base: "",
    url: url_GlobalResourceGroupsMoveResources_594231, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrders_594241 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersGetCertificateOrders_594243(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrders_594242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594244 = path.getOrDefault("resourceGroupName")
  valid_594244 = validateParameter(valid_594244, JString, required = true,
                                 default = nil)
  if valid_594244 != nil:
    section.add "resourceGroupName", valid_594244
  var valid_594245 = path.getOrDefault("subscriptionId")
  valid_594245 = validateParameter(valid_594245, JString, required = true,
                                 default = nil)
  if valid_594245 != nil:
    section.add "subscriptionId", valid_594245
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594246 = query.getOrDefault("api-version")
  valid_594246 = validateParameter(valid_594246, JString, required = true,
                                 default = nil)
  if valid_594246 != nil:
    section.add "api-version", valid_594246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594247: Call_CertificateOrdersGetCertificateOrders_594241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594247.validator(path, query, header, formData, body)
  let scheme = call_594247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594247.url(scheme.get, call_594247.host, call_594247.base,
                         call_594247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594247, url, valid)

proc call*(call_594248: Call_CertificateOrdersGetCertificateOrders_594241;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificateOrders
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594249 = newJObject()
  var query_594250 = newJObject()
  add(path_594249, "resourceGroupName", newJString(resourceGroupName))
  add(query_594250, "api-version", newJString(apiVersion))
  add(path_594249, "subscriptionId", newJString(subscriptionId))
  result = call_594248.call(path_594249, query_594250, nil, nil, nil)

var certificateOrdersGetCertificateOrders* = Call_CertificateOrdersGetCertificateOrders_594241(
    name: "certificateOrdersGetCertificateOrders", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_CertificateOrdersGetCertificateOrders_594242, base: "",
    url: url_CertificateOrdersGetCertificateOrders_594243, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificates_594251 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersGetCertificates_594253(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificates_594252(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_594254 = path.getOrDefault("certificateOrderName")
  valid_594254 = validateParameter(valid_594254, JString, required = true,
                                 default = nil)
  if valid_594254 != nil:
    section.add "certificateOrderName", valid_594254
  var valid_594255 = path.getOrDefault("resourceGroupName")
  valid_594255 = validateParameter(valid_594255, JString, required = true,
                                 default = nil)
  if valid_594255 != nil:
    section.add "resourceGroupName", valid_594255
  var valid_594256 = path.getOrDefault("subscriptionId")
  valid_594256 = validateParameter(valid_594256, JString, required = true,
                                 default = nil)
  if valid_594256 != nil:
    section.add "subscriptionId", valid_594256
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594257 = query.getOrDefault("api-version")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = nil)
  if valid_594257 != nil:
    section.add "api-version", valid_594257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594258: Call_CertificateOrdersGetCertificates_594251;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594258.validator(path, query, header, formData, body)
  let scheme = call_594258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594258.url(scheme.get, call_594258.host, call_594258.base,
                         call_594258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594258, url, valid)

proc call*(call_594259: Call_CertificateOrdersGetCertificates_594251;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificates
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594260 = newJObject()
  var query_594261 = newJObject()
  add(path_594260, "certificateOrderName", newJString(certificateOrderName))
  add(path_594260, "resourceGroupName", newJString(resourceGroupName))
  add(query_594261, "api-version", newJString(apiVersion))
  add(path_594260, "subscriptionId", newJString(subscriptionId))
  result = call_594259.call(path_594260, query_594261, nil, nil, nil)

var certificateOrdersGetCertificates* = Call_CertificateOrdersGetCertificates_594251(
    name: "certificateOrdersGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
    validator: validate_CertificateOrdersGetCertificates_594252, base: "",
    url: url_CertificateOrdersGetCertificates_594253, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificate_594274 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersCreateOrUpdateCertificate_594276(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificate_594275(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_594277 = path.getOrDefault("certificateOrderName")
  valid_594277 = validateParameter(valid_594277, JString, required = true,
                                 default = nil)
  if valid_594277 != nil:
    section.add "certificateOrderName", valid_594277
  var valid_594278 = path.getOrDefault("resourceGroupName")
  valid_594278 = validateParameter(valid_594278, JString, required = true,
                                 default = nil)
  if valid_594278 != nil:
    section.add "resourceGroupName", valid_594278
  var valid_594279 = path.getOrDefault("name")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = nil)
  if valid_594279 != nil:
    section.add "name", valid_594279
  var valid_594280 = path.getOrDefault("subscriptionId")
  valid_594280 = validateParameter(valid_594280, JString, required = true,
                                 default = nil)
  if valid_594280 != nil:
    section.add "subscriptionId", valid_594280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594281 = query.getOrDefault("api-version")
  valid_594281 = validateParameter(valid_594281, JString, required = true,
                                 default = nil)
  if valid_594281 != nil:
    section.add "api-version", valid_594281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594283: Call_CertificateOrdersCreateOrUpdateCertificate_594274;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594283.validator(path, query, header, formData, body)
  let scheme = call_594283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594283.url(scheme.get, call_594283.host, call_594283.base,
                         call_594283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594283, url, valid)

proc call*(call_594284: Call_CertificateOrdersCreateOrUpdateCertificate_594274;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; keyVaultCertificate: JsonNode;
          subscriptionId: string): Recallable =
  ## certificateOrdersCreateOrUpdateCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594285 = newJObject()
  var query_594286 = newJObject()
  var body_594287 = newJObject()
  add(path_594285, "certificateOrderName", newJString(certificateOrderName))
  add(path_594285, "resourceGroupName", newJString(resourceGroupName))
  add(query_594286, "api-version", newJString(apiVersion))
  add(path_594285, "name", newJString(name))
  if keyVaultCertificate != nil:
    body_594287 = keyVaultCertificate
  add(path_594285, "subscriptionId", newJString(subscriptionId))
  result = call_594284.call(path_594285, query_594286, nil, nil, body_594287)

var certificateOrdersCreateOrUpdateCertificate* = Call_CertificateOrdersCreateOrUpdateCertificate_594274(
    name: "certificateOrdersCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificate_594275,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificate_594276,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificate_594262 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersGetCertificate_594264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificate_594263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_594265 = path.getOrDefault("certificateOrderName")
  valid_594265 = validateParameter(valid_594265, JString, required = true,
                                 default = nil)
  if valid_594265 != nil:
    section.add "certificateOrderName", valid_594265
  var valid_594266 = path.getOrDefault("resourceGroupName")
  valid_594266 = validateParameter(valid_594266, JString, required = true,
                                 default = nil)
  if valid_594266 != nil:
    section.add "resourceGroupName", valid_594266
  var valid_594267 = path.getOrDefault("name")
  valid_594267 = validateParameter(valid_594267, JString, required = true,
                                 default = nil)
  if valid_594267 != nil:
    section.add "name", valid_594267
  var valid_594268 = path.getOrDefault("subscriptionId")
  valid_594268 = validateParameter(valid_594268, JString, required = true,
                                 default = nil)
  if valid_594268 != nil:
    section.add "subscriptionId", valid_594268
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594269 = query.getOrDefault("api-version")
  valid_594269 = validateParameter(valid_594269, JString, required = true,
                                 default = nil)
  if valid_594269 != nil:
    section.add "api-version", valid_594269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594270: Call_CertificateOrdersGetCertificate_594262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594270.validator(path, query, header, formData, body)
  let scheme = call_594270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594270.url(scheme.get, call_594270.host, call_594270.base,
                         call_594270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594270, url, valid)

proc call*(call_594271: Call_CertificateOrdersGetCertificate_594262;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594272 = newJObject()
  var query_594273 = newJObject()
  add(path_594272, "certificateOrderName", newJString(certificateOrderName))
  add(path_594272, "resourceGroupName", newJString(resourceGroupName))
  add(query_594273, "api-version", newJString(apiVersion))
  add(path_594272, "name", newJString(name))
  add(path_594272, "subscriptionId", newJString(subscriptionId))
  result = call_594271.call(path_594272, query_594273, nil, nil, nil)

var certificateOrdersGetCertificate* = Call_CertificateOrdersGetCertificate_594262(
    name: "certificateOrdersGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersGetCertificate_594263, base: "",
    url: url_CertificateOrdersGetCertificate_594264, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificate_594300 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersUpdateCertificate_594302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificate_594301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_594303 = path.getOrDefault("certificateOrderName")
  valid_594303 = validateParameter(valid_594303, JString, required = true,
                                 default = nil)
  if valid_594303 != nil:
    section.add "certificateOrderName", valid_594303
  var valid_594304 = path.getOrDefault("resourceGroupName")
  valid_594304 = validateParameter(valid_594304, JString, required = true,
                                 default = nil)
  if valid_594304 != nil:
    section.add "resourceGroupName", valid_594304
  var valid_594305 = path.getOrDefault("name")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = nil)
  if valid_594305 != nil:
    section.add "name", valid_594305
  var valid_594306 = path.getOrDefault("subscriptionId")
  valid_594306 = validateParameter(valid_594306, JString, required = true,
                                 default = nil)
  if valid_594306 != nil:
    section.add "subscriptionId", valid_594306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594307 = query.getOrDefault("api-version")
  valid_594307 = validateParameter(valid_594307, JString, required = true,
                                 default = nil)
  if valid_594307 != nil:
    section.add "api-version", valid_594307
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594309: Call_CertificateOrdersUpdateCertificate_594300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594309.validator(path, query, header, formData, body)
  let scheme = call_594309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594309.url(scheme.get, call_594309.host, call_594309.base,
                         call_594309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594309, url, valid)

proc call*(call_594310: Call_CertificateOrdersUpdateCertificate_594300;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; keyVaultCertificate: JsonNode;
          subscriptionId: string): Recallable =
  ## certificateOrdersUpdateCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594311 = newJObject()
  var query_594312 = newJObject()
  var body_594313 = newJObject()
  add(path_594311, "certificateOrderName", newJString(certificateOrderName))
  add(path_594311, "resourceGroupName", newJString(resourceGroupName))
  add(query_594312, "api-version", newJString(apiVersion))
  add(path_594311, "name", newJString(name))
  if keyVaultCertificate != nil:
    body_594313 = keyVaultCertificate
  add(path_594311, "subscriptionId", newJString(subscriptionId))
  result = call_594310.call(path_594311, query_594312, nil, nil, body_594313)

var certificateOrdersUpdateCertificate* = Call_CertificateOrdersUpdateCertificate_594300(
    name: "certificateOrdersUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersUpdateCertificate_594301, base: "",
    url: url_CertificateOrdersUpdateCertificate_594302, schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificate_594288 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersDeleteCertificate_594290(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificate_594289(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_594291 = path.getOrDefault("certificateOrderName")
  valid_594291 = validateParameter(valid_594291, JString, required = true,
                                 default = nil)
  if valid_594291 != nil:
    section.add "certificateOrderName", valid_594291
  var valid_594292 = path.getOrDefault("resourceGroupName")
  valid_594292 = validateParameter(valid_594292, JString, required = true,
                                 default = nil)
  if valid_594292 != nil:
    section.add "resourceGroupName", valid_594292
  var valid_594293 = path.getOrDefault("name")
  valid_594293 = validateParameter(valid_594293, JString, required = true,
                                 default = nil)
  if valid_594293 != nil:
    section.add "name", valid_594293
  var valid_594294 = path.getOrDefault("subscriptionId")
  valid_594294 = validateParameter(valid_594294, JString, required = true,
                                 default = nil)
  if valid_594294 != nil:
    section.add "subscriptionId", valid_594294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594295 = query.getOrDefault("api-version")
  valid_594295 = validateParameter(valid_594295, JString, required = true,
                                 default = nil)
  if valid_594295 != nil:
    section.add "api-version", valid_594295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594296: Call_CertificateOrdersDeleteCertificate_594288;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594296.validator(path, query, header, formData, body)
  let scheme = call_594296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594296.url(scheme.get, call_594296.host, call_594296.base,
                         call_594296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594296, url, valid)

proc call*(call_594297: Call_CertificateOrdersDeleteCertificate_594288;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificateOrdersDeleteCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594298 = newJObject()
  var query_594299 = newJObject()
  add(path_594298, "certificateOrderName", newJString(certificateOrderName))
  add(path_594298, "resourceGroupName", newJString(resourceGroupName))
  add(query_594299, "api-version", newJString(apiVersion))
  add(path_594298, "name", newJString(name))
  add(path_594298, "subscriptionId", newJString(subscriptionId))
  result = call_594297.call(path_594298, query_594299, nil, nil, nil)

var certificateOrdersDeleteCertificate* = Call_CertificateOrdersDeleteCertificate_594288(
    name: "certificateOrdersDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersDeleteCertificate_594289, base: "",
    url: url_CertificateOrdersDeleteCertificate_594290, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificateOrder_594325 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersCreateOrUpdateCertificateOrder_594327(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificateOrder_594326(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594328 = path.getOrDefault("resourceGroupName")
  valid_594328 = validateParameter(valid_594328, JString, required = true,
                                 default = nil)
  if valid_594328 != nil:
    section.add "resourceGroupName", valid_594328
  var valid_594329 = path.getOrDefault("name")
  valid_594329 = validateParameter(valid_594329, JString, required = true,
                                 default = nil)
  if valid_594329 != nil:
    section.add "name", valid_594329
  var valid_594330 = path.getOrDefault("subscriptionId")
  valid_594330 = validateParameter(valid_594330, JString, required = true,
                                 default = nil)
  if valid_594330 != nil:
    section.add "subscriptionId", valid_594330
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594331 = query.getOrDefault("api-version")
  valid_594331 = validateParameter(valid_594331, JString, required = true,
                                 default = nil)
  if valid_594331 != nil:
    section.add "api-version", valid_594331
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594333: Call_CertificateOrdersCreateOrUpdateCertificateOrder_594325;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594333.validator(path, query, header, formData, body)
  let scheme = call_594333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594333.url(scheme.get, call_594333.host, call_594333.base,
                         call_594333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594333, url, valid)

proc call*(call_594334: Call_CertificateOrdersCreateOrUpdateCertificateOrder_594325;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateDistinguishedName: JsonNode): Recallable =
  ## certificateOrdersCreateOrUpdateCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  var path_594335 = newJObject()
  var query_594336 = newJObject()
  var body_594337 = newJObject()
  add(path_594335, "resourceGroupName", newJString(resourceGroupName))
  add(query_594336, "api-version", newJString(apiVersion))
  add(path_594335, "name", newJString(name))
  add(path_594335, "subscriptionId", newJString(subscriptionId))
  if certificateDistinguishedName != nil:
    body_594337 = certificateDistinguishedName
  result = call_594334.call(path_594335, query_594336, nil, nil, body_594337)

var certificateOrdersCreateOrUpdateCertificateOrder* = Call_CertificateOrdersCreateOrUpdateCertificateOrder_594325(
    name: "certificateOrdersCreateOrUpdateCertificateOrder",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificateOrder_594326,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificateOrder_594327,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrder_594314 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersGetCertificateOrder_594316(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrder_594315(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594317 = path.getOrDefault("resourceGroupName")
  valid_594317 = validateParameter(valid_594317, JString, required = true,
                                 default = nil)
  if valid_594317 != nil:
    section.add "resourceGroupName", valid_594317
  var valid_594318 = path.getOrDefault("name")
  valid_594318 = validateParameter(valid_594318, JString, required = true,
                                 default = nil)
  if valid_594318 != nil:
    section.add "name", valid_594318
  var valid_594319 = path.getOrDefault("subscriptionId")
  valid_594319 = validateParameter(valid_594319, JString, required = true,
                                 default = nil)
  if valid_594319 != nil:
    section.add "subscriptionId", valid_594319
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594320 = query.getOrDefault("api-version")
  valid_594320 = validateParameter(valid_594320, JString, required = true,
                                 default = nil)
  if valid_594320 != nil:
    section.add "api-version", valid_594320
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594321: Call_CertificateOrdersGetCertificateOrder_594314;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594321.validator(path, query, header, formData, body)
  let scheme = call_594321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594321.url(scheme.get, call_594321.host, call_594321.base,
                         call_594321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594321, url, valid)

proc call*(call_594322: Call_CertificateOrdersGetCertificateOrder_594314;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594323 = newJObject()
  var query_594324 = newJObject()
  add(path_594323, "resourceGroupName", newJString(resourceGroupName))
  add(query_594324, "api-version", newJString(apiVersion))
  add(path_594323, "name", newJString(name))
  add(path_594323, "subscriptionId", newJString(subscriptionId))
  result = call_594322.call(path_594323, query_594324, nil, nil, nil)

var certificateOrdersGetCertificateOrder* = Call_CertificateOrdersGetCertificateOrder_594314(
    name: "certificateOrdersGetCertificateOrder", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersGetCertificateOrder_594315, base: "",
    url: url_CertificateOrdersGetCertificateOrder_594316, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificateOrder_594349 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersUpdateCertificateOrder_594351(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificateOrder_594350(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594352 = path.getOrDefault("resourceGroupName")
  valid_594352 = validateParameter(valid_594352, JString, required = true,
                                 default = nil)
  if valid_594352 != nil:
    section.add "resourceGroupName", valid_594352
  var valid_594353 = path.getOrDefault("name")
  valid_594353 = validateParameter(valid_594353, JString, required = true,
                                 default = nil)
  if valid_594353 != nil:
    section.add "name", valid_594353
  var valid_594354 = path.getOrDefault("subscriptionId")
  valid_594354 = validateParameter(valid_594354, JString, required = true,
                                 default = nil)
  if valid_594354 != nil:
    section.add "subscriptionId", valid_594354
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594355 = query.getOrDefault("api-version")
  valid_594355 = validateParameter(valid_594355, JString, required = true,
                                 default = nil)
  if valid_594355 != nil:
    section.add "api-version", valid_594355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594357: Call_CertificateOrdersUpdateCertificateOrder_594349;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594357.validator(path, query, header, formData, body)
  let scheme = call_594357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594357.url(scheme.get, call_594357.host, call_594357.base,
                         call_594357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594357, url, valid)

proc call*(call_594358: Call_CertificateOrdersUpdateCertificateOrder_594349;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateDistinguishedName: JsonNode): Recallable =
  ## certificateOrdersUpdateCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  var path_594359 = newJObject()
  var query_594360 = newJObject()
  var body_594361 = newJObject()
  add(path_594359, "resourceGroupName", newJString(resourceGroupName))
  add(query_594360, "api-version", newJString(apiVersion))
  add(path_594359, "name", newJString(name))
  add(path_594359, "subscriptionId", newJString(subscriptionId))
  if certificateDistinguishedName != nil:
    body_594361 = certificateDistinguishedName
  result = call_594358.call(path_594359, query_594360, nil, nil, body_594361)

var certificateOrdersUpdateCertificateOrder* = Call_CertificateOrdersUpdateCertificateOrder_594349(
    name: "certificateOrdersUpdateCertificateOrder", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersUpdateCertificateOrder_594350, base: "",
    url: url_CertificateOrdersUpdateCertificateOrder_594351,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificateOrder_594338 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersDeleteCertificateOrder_594340(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificateOrder_594339(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594341 = path.getOrDefault("resourceGroupName")
  valid_594341 = validateParameter(valid_594341, JString, required = true,
                                 default = nil)
  if valid_594341 != nil:
    section.add "resourceGroupName", valid_594341
  var valid_594342 = path.getOrDefault("name")
  valid_594342 = validateParameter(valid_594342, JString, required = true,
                                 default = nil)
  if valid_594342 != nil:
    section.add "name", valid_594342
  var valid_594343 = path.getOrDefault("subscriptionId")
  valid_594343 = validateParameter(valid_594343, JString, required = true,
                                 default = nil)
  if valid_594343 != nil:
    section.add "subscriptionId", valid_594343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594344 = query.getOrDefault("api-version")
  valid_594344 = validateParameter(valid_594344, JString, required = true,
                                 default = nil)
  if valid_594344 != nil:
    section.add "api-version", valid_594344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594345: Call_CertificateOrdersDeleteCertificateOrder_594338;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594345.validator(path, query, header, formData, body)
  let scheme = call_594345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594345.url(scheme.get, call_594345.host, call_594345.base,
                         call_594345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594345, url, valid)

proc call*(call_594346: Call_CertificateOrdersDeleteCertificateOrder_594338;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersDeleteCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594347 = newJObject()
  var query_594348 = newJObject()
  add(path_594347, "resourceGroupName", newJString(resourceGroupName))
  add(query_594348, "api-version", newJString(apiVersion))
  add(path_594347, "name", newJString(name))
  add(path_594347, "subscriptionId", newJString(subscriptionId))
  result = call_594346.call(path_594347, query_594348, nil, nil, nil)

var certificateOrdersDeleteCertificateOrder* = Call_CertificateOrdersDeleteCertificateOrder_594338(
    name: "certificateOrdersDeleteCertificateOrder", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersDeleteCertificateOrder_594339, base: "",
    url: url_CertificateOrdersDeleteCertificateOrder_594340,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersReissueCertificateOrder_594362 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersReissueCertificateOrder_594364(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reissue")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersReissueCertificateOrder_594363(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594365 = path.getOrDefault("resourceGroupName")
  valid_594365 = validateParameter(valid_594365, JString, required = true,
                                 default = nil)
  if valid_594365 != nil:
    section.add "resourceGroupName", valid_594365
  var valid_594366 = path.getOrDefault("name")
  valid_594366 = validateParameter(valid_594366, JString, required = true,
                                 default = nil)
  if valid_594366 != nil:
    section.add "name", valid_594366
  var valid_594367 = path.getOrDefault("subscriptionId")
  valid_594367 = validateParameter(valid_594367, JString, required = true,
                                 default = nil)
  if valid_594367 != nil:
    section.add "subscriptionId", valid_594367
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594368 = query.getOrDefault("api-version")
  valid_594368 = validateParameter(valid_594368, JString, required = true,
                                 default = nil)
  if valid_594368 != nil:
    section.add "api-version", valid_594368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594370: Call_CertificateOrdersReissueCertificateOrder_594362;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594370.validator(path, query, header, formData, body)
  let scheme = call_594370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594370.url(scheme.get, call_594370.host, call_594370.base,
                         call_594370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594370, url, valid)

proc call*(call_594371: Call_CertificateOrdersReissueCertificateOrder_594362;
          resourceGroupName: string; apiVersion: string; name: string;
          reissueCertificateOrderRequest: JsonNode; subscriptionId: string): Recallable =
  ## certificateOrdersReissueCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594372 = newJObject()
  var query_594373 = newJObject()
  var body_594374 = newJObject()
  add(path_594372, "resourceGroupName", newJString(resourceGroupName))
  add(query_594373, "api-version", newJString(apiVersion))
  add(path_594372, "name", newJString(name))
  if reissueCertificateOrderRequest != nil:
    body_594374 = reissueCertificateOrderRequest
  add(path_594372, "subscriptionId", newJString(subscriptionId))
  result = call_594371.call(path_594372, query_594373, nil, nil, body_594374)

var certificateOrdersReissueCertificateOrder* = Call_CertificateOrdersReissueCertificateOrder_594362(
    name: "certificateOrdersReissueCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue",
    validator: validate_CertificateOrdersReissueCertificateOrder_594363, base: "",
    url: url_CertificateOrdersReissueCertificateOrder_594364,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRenewCertificateOrder_594375 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersRenewCertificateOrder_594377(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/renew")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRenewCertificateOrder_594376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594378 = path.getOrDefault("resourceGroupName")
  valid_594378 = validateParameter(valid_594378, JString, required = true,
                                 default = nil)
  if valid_594378 != nil:
    section.add "resourceGroupName", valid_594378
  var valid_594379 = path.getOrDefault("name")
  valid_594379 = validateParameter(valid_594379, JString, required = true,
                                 default = nil)
  if valid_594379 != nil:
    section.add "name", valid_594379
  var valid_594380 = path.getOrDefault("subscriptionId")
  valid_594380 = validateParameter(valid_594380, JString, required = true,
                                 default = nil)
  if valid_594380 != nil:
    section.add "subscriptionId", valid_594380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594381 = query.getOrDefault("api-version")
  valid_594381 = validateParameter(valid_594381, JString, required = true,
                                 default = nil)
  if valid_594381 != nil:
    section.add "api-version", valid_594381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594383: Call_CertificateOrdersRenewCertificateOrder_594375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594383.validator(path, query, header, formData, body)
  let scheme = call_594383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594383.url(scheme.get, call_594383.host, call_594383.base,
                         call_594383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594383, url, valid)

proc call*(call_594384: Call_CertificateOrdersRenewCertificateOrder_594375;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; renewCertificateOrderRequest: JsonNode): Recallable =
  ## certificateOrdersRenewCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  var path_594385 = newJObject()
  var query_594386 = newJObject()
  var body_594387 = newJObject()
  add(path_594385, "resourceGroupName", newJString(resourceGroupName))
  add(query_594386, "api-version", newJString(apiVersion))
  add(path_594385, "name", newJString(name))
  add(path_594385, "subscriptionId", newJString(subscriptionId))
  if renewCertificateOrderRequest != nil:
    body_594387 = renewCertificateOrderRequest
  result = call_594384.call(path_594385, query_594386, nil, nil, body_594387)

var certificateOrdersRenewCertificateOrder* = Call_CertificateOrdersRenewCertificateOrder_594375(
    name: "certificateOrdersRenewCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew",
    validator: validate_CertificateOrdersRenewCertificateOrder_594376, base: "",
    url: url_CertificateOrdersRenewCertificateOrder_594377,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersResendCertificateEmail_594388 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersResendCertificateEmail_594390(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resendEmail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersResendCertificateEmail_594389(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594391 = path.getOrDefault("resourceGroupName")
  valid_594391 = validateParameter(valid_594391, JString, required = true,
                                 default = nil)
  if valid_594391 != nil:
    section.add "resourceGroupName", valid_594391
  var valid_594392 = path.getOrDefault("name")
  valid_594392 = validateParameter(valid_594392, JString, required = true,
                                 default = nil)
  if valid_594392 != nil:
    section.add "name", valid_594392
  var valid_594393 = path.getOrDefault("subscriptionId")
  valid_594393 = validateParameter(valid_594393, JString, required = true,
                                 default = nil)
  if valid_594393 != nil:
    section.add "subscriptionId", valid_594393
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594394 = query.getOrDefault("api-version")
  valid_594394 = validateParameter(valid_594394, JString, required = true,
                                 default = nil)
  if valid_594394 != nil:
    section.add "api-version", valid_594394
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594395: Call_CertificateOrdersResendCertificateEmail_594388;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594395.validator(path, query, header, formData, body)
  let scheme = call_594395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594395.url(scheme.get, call_594395.host, call_594395.base,
                         call_594395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594395, url, valid)

proc call*(call_594396: Call_CertificateOrdersResendCertificateEmail_594388;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersResendCertificateEmail
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594397 = newJObject()
  var query_594398 = newJObject()
  add(path_594397, "resourceGroupName", newJString(resourceGroupName))
  add(query_594398, "api-version", newJString(apiVersion))
  add(path_594397, "name", newJString(name))
  add(path_594397, "subscriptionId", newJString(subscriptionId))
  result = call_594396.call(path_594397, query_594398, nil, nil, nil)

var certificateOrdersResendCertificateEmail* = Call_CertificateOrdersResendCertificateEmail_594388(
    name: "certificateOrdersResendCertificateEmail", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail",
    validator: validate_CertificateOrdersResendCertificateEmail_594389, base: "",
    url: url_CertificateOrdersResendCertificateEmail_594390,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateActions_594399 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersRetrieveCertificateActions_594401(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveCertificateActions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateActions_594400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594402 = path.getOrDefault("resourceGroupName")
  valid_594402 = validateParameter(valid_594402, JString, required = true,
                                 default = nil)
  if valid_594402 != nil:
    section.add "resourceGroupName", valid_594402
  var valid_594403 = path.getOrDefault("name")
  valid_594403 = validateParameter(valid_594403, JString, required = true,
                                 default = nil)
  if valid_594403 != nil:
    section.add "name", valid_594403
  var valid_594404 = path.getOrDefault("subscriptionId")
  valid_594404 = validateParameter(valid_594404, JString, required = true,
                                 default = nil)
  if valid_594404 != nil:
    section.add "subscriptionId", valid_594404
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594405 = query.getOrDefault("api-version")
  valid_594405 = validateParameter(valid_594405, JString, required = true,
                                 default = nil)
  if valid_594405 != nil:
    section.add "api-version", valid_594405
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594406: Call_CertificateOrdersRetrieveCertificateActions_594399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594406.validator(path, query, header, formData, body)
  let scheme = call_594406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594406.url(scheme.get, call_594406.host, call_594406.base,
                         call_594406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594406, url, valid)

proc call*(call_594407: Call_CertificateOrdersRetrieveCertificateActions_594399;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersRetrieveCertificateActions
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594408 = newJObject()
  var query_594409 = newJObject()
  add(path_594408, "resourceGroupName", newJString(resourceGroupName))
  add(query_594409, "api-version", newJString(apiVersion))
  add(path_594408, "name", newJString(name))
  add(path_594408, "subscriptionId", newJString(subscriptionId))
  result = call_594407.call(path_594408, query_594409, nil, nil, nil)

var certificateOrdersRetrieveCertificateActions* = Call_CertificateOrdersRetrieveCertificateActions_594399(
    name: "certificateOrdersRetrieveCertificateActions",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
    validator: validate_CertificateOrdersRetrieveCertificateActions_594400,
    base: "", url: url_CertificateOrdersRetrieveCertificateActions_594401,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateEmailHistory_594410 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersRetrieveCertificateEmailHistory_594412(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveEmailHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateEmailHistory_594411(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594413 = path.getOrDefault("resourceGroupName")
  valid_594413 = validateParameter(valid_594413, JString, required = true,
                                 default = nil)
  if valid_594413 != nil:
    section.add "resourceGroupName", valid_594413
  var valid_594414 = path.getOrDefault("name")
  valid_594414 = validateParameter(valid_594414, JString, required = true,
                                 default = nil)
  if valid_594414 != nil:
    section.add "name", valid_594414
  var valid_594415 = path.getOrDefault("subscriptionId")
  valid_594415 = validateParameter(valid_594415, JString, required = true,
                                 default = nil)
  if valid_594415 != nil:
    section.add "subscriptionId", valid_594415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594416 = query.getOrDefault("api-version")
  valid_594416 = validateParameter(valid_594416, JString, required = true,
                                 default = nil)
  if valid_594416 != nil:
    section.add "api-version", valid_594416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594417: Call_CertificateOrdersRetrieveCertificateEmailHistory_594410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594417.validator(path, query, header, formData, body)
  let scheme = call_594417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594417.url(scheme.get, call_594417.host, call_594417.base,
                         call_594417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594417, url, valid)

proc call*(call_594418: Call_CertificateOrdersRetrieveCertificateEmailHistory_594410;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersRetrieveCertificateEmailHistory
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594419 = newJObject()
  var query_594420 = newJObject()
  add(path_594419, "resourceGroupName", newJString(resourceGroupName))
  add(query_594420, "api-version", newJString(apiVersion))
  add(path_594419, "name", newJString(name))
  add(path_594419, "subscriptionId", newJString(subscriptionId))
  result = call_594418.call(path_594419, query_594420, nil, nil, nil)

var certificateOrdersRetrieveCertificateEmailHistory* = Call_CertificateOrdersRetrieveCertificateEmailHistory_594410(
    name: "certificateOrdersRetrieveCertificateEmailHistory",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
    validator: validate_CertificateOrdersRetrieveCertificateEmailHistory_594411,
    base: "", url: url_CertificateOrdersRetrieveCertificateEmailHistory_594412,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersVerifyDomainOwnership_594421 = ref object of OpenApiRestCall_593421
proc url_CertificateOrdersVerifyDomainOwnership_594423(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/verifyDomainOwnership")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersVerifyDomainOwnership_594422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594424 = path.getOrDefault("resourceGroupName")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = nil)
  if valid_594424 != nil:
    section.add "resourceGroupName", valid_594424
  var valid_594425 = path.getOrDefault("name")
  valid_594425 = validateParameter(valid_594425, JString, required = true,
                                 default = nil)
  if valid_594425 != nil:
    section.add "name", valid_594425
  var valid_594426 = path.getOrDefault("subscriptionId")
  valid_594426 = validateParameter(valid_594426, JString, required = true,
                                 default = nil)
  if valid_594426 != nil:
    section.add "subscriptionId", valid_594426
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594427 = query.getOrDefault("api-version")
  valid_594427 = validateParameter(valid_594427, JString, required = true,
                                 default = nil)
  if valid_594427 != nil:
    section.add "api-version", valid_594427
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594428: Call_CertificateOrdersVerifyDomainOwnership_594421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594428.validator(path, query, header, formData, body)
  let scheme = call_594428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594428.url(scheme.get, call_594428.host, call_594428.base,
                         call_594428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594428, url, valid)

proc call*(call_594429: Call_CertificateOrdersVerifyDomainOwnership_594421;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersVerifyDomainOwnership
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594430 = newJObject()
  var query_594431 = newJObject()
  add(path_594430, "resourceGroupName", newJString(resourceGroupName))
  add(query_594431, "api-version", newJString(apiVersion))
  add(path_594430, "name", newJString(name))
  add(path_594430, "subscriptionId", newJString(subscriptionId))
  result = call_594429.call(path_594430, query_594431, nil, nil, nil)

var certificateOrdersVerifyDomainOwnership* = Call_CertificateOrdersVerifyDomainOwnership_594421(
    name: "certificateOrdersVerifyDomainOwnership", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership",
    validator: validate_CertificateOrdersVerifyDomainOwnership_594422, base: "",
    url: url_CertificateOrdersVerifyDomainOwnership_594423,
    schemes: {Scheme.Https})
type
  Call_DomainsGetDomains_594432 = ref object of OpenApiRestCall_593421
proc url_DomainsGetDomains_594434(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomains_594433(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594435 = path.getOrDefault("resourceGroupName")
  valid_594435 = validateParameter(valid_594435, JString, required = true,
                                 default = nil)
  if valid_594435 != nil:
    section.add "resourceGroupName", valid_594435
  var valid_594436 = path.getOrDefault("subscriptionId")
  valid_594436 = validateParameter(valid_594436, JString, required = true,
                                 default = nil)
  if valid_594436 != nil:
    section.add "subscriptionId", valid_594436
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594437 = query.getOrDefault("api-version")
  valid_594437 = validateParameter(valid_594437, JString, required = true,
                                 default = nil)
  if valid_594437 != nil:
    section.add "api-version", valid_594437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594438: Call_DomainsGetDomains_594432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594438.validator(path, query, header, formData, body)
  let scheme = call_594438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594438.url(scheme.get, call_594438.host, call_594438.base,
                         call_594438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594438, url, valid)

proc call*(call_594439: Call_DomainsGetDomains_594432; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## domainsGetDomains
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594440 = newJObject()
  var query_594441 = newJObject()
  add(path_594440, "resourceGroupName", newJString(resourceGroupName))
  add(query_594441, "api-version", newJString(apiVersion))
  add(path_594440, "subscriptionId", newJString(subscriptionId))
  result = call_594439.call(path_594440, query_594441, nil, nil, nil)

var domainsGetDomains* = Call_DomainsGetDomains_594432(name: "domainsGetDomains",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_DomainsGetDomains_594433, base: "",
    url: url_DomainsGetDomains_594434, schemes: {Scheme.Https})
type
  Call_DomainsCreateOrUpdateDomain_594453 = ref object of OpenApiRestCall_593421
proc url_DomainsCreateOrUpdateDomain_594455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsCreateOrUpdateDomain_594454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594456 = path.getOrDefault("resourceGroupName")
  valid_594456 = validateParameter(valid_594456, JString, required = true,
                                 default = nil)
  if valid_594456 != nil:
    section.add "resourceGroupName", valid_594456
  var valid_594457 = path.getOrDefault("subscriptionId")
  valid_594457 = validateParameter(valid_594457, JString, required = true,
                                 default = nil)
  if valid_594457 != nil:
    section.add "subscriptionId", valid_594457
  var valid_594458 = path.getOrDefault("domainName")
  valid_594458 = validateParameter(valid_594458, JString, required = true,
                                 default = nil)
  if valid_594458 != nil:
    section.add "domainName", valid_594458
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594459 = query.getOrDefault("api-version")
  valid_594459 = validateParameter(valid_594459, JString, required = true,
                                 default = nil)
  if valid_594459 != nil:
    section.add "api-version", valid_594459
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594461: Call_DomainsCreateOrUpdateDomain_594453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594461.validator(path, query, header, formData, body)
  let scheme = call_594461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594461.url(scheme.get, call_594461.host, call_594461.base,
                         call_594461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594461, url, valid)

proc call*(call_594462: Call_DomainsCreateOrUpdateDomain_594453;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          domain: JsonNode; domainName: string): Recallable =
  ## domainsCreateOrUpdateDomain
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_594463 = newJObject()
  var query_594464 = newJObject()
  var body_594465 = newJObject()
  add(path_594463, "resourceGroupName", newJString(resourceGroupName))
  add(query_594464, "api-version", newJString(apiVersion))
  add(path_594463, "subscriptionId", newJString(subscriptionId))
  if domain != nil:
    body_594465 = domain
  add(path_594463, "domainName", newJString(domainName))
  result = call_594462.call(path_594463, query_594464, nil, nil, body_594465)

var domainsCreateOrUpdateDomain* = Call_DomainsCreateOrUpdateDomain_594453(
    name: "domainsCreateOrUpdateDomain", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsCreateOrUpdateDomain_594454, base: "",
    url: url_DomainsCreateOrUpdateDomain_594455, schemes: {Scheme.Https})
type
  Call_DomainsGetDomain_594442 = ref object of OpenApiRestCall_593421
proc url_DomainsGetDomain_594444(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomain_594443(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594445 = path.getOrDefault("resourceGroupName")
  valid_594445 = validateParameter(valid_594445, JString, required = true,
                                 default = nil)
  if valid_594445 != nil:
    section.add "resourceGroupName", valid_594445
  var valid_594446 = path.getOrDefault("subscriptionId")
  valid_594446 = validateParameter(valid_594446, JString, required = true,
                                 default = nil)
  if valid_594446 != nil:
    section.add "subscriptionId", valid_594446
  var valid_594447 = path.getOrDefault("domainName")
  valid_594447 = validateParameter(valid_594447, JString, required = true,
                                 default = nil)
  if valid_594447 != nil:
    section.add "domainName", valid_594447
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594448 = query.getOrDefault("api-version")
  valid_594448 = validateParameter(valid_594448, JString, required = true,
                                 default = nil)
  if valid_594448 != nil:
    section.add "api-version", valid_594448
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594449: Call_DomainsGetDomain_594442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594449.validator(path, query, header, formData, body)
  let scheme = call_594449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594449.url(scheme.get, call_594449.host, call_594449.base,
                         call_594449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594449, url, valid)

proc call*(call_594450: Call_DomainsGetDomain_594442; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domainName: string): Recallable =
  ## domainsGetDomain
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_594451 = newJObject()
  var query_594452 = newJObject()
  add(path_594451, "resourceGroupName", newJString(resourceGroupName))
  add(query_594452, "api-version", newJString(apiVersion))
  add(path_594451, "subscriptionId", newJString(subscriptionId))
  add(path_594451, "domainName", newJString(domainName))
  result = call_594450.call(path_594451, query_594452, nil, nil, nil)

var domainsGetDomain* = Call_DomainsGetDomain_594442(name: "domainsGetDomain",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsGetDomain_594443, base: "",
    url: url_DomainsGetDomain_594444, schemes: {Scheme.Https})
type
  Call_DomainsUpdateDomain_594478 = ref object of OpenApiRestCall_593421
proc url_DomainsUpdateDomain_594480(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsUpdateDomain_594479(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594481 = path.getOrDefault("resourceGroupName")
  valid_594481 = validateParameter(valid_594481, JString, required = true,
                                 default = nil)
  if valid_594481 != nil:
    section.add "resourceGroupName", valid_594481
  var valid_594482 = path.getOrDefault("subscriptionId")
  valid_594482 = validateParameter(valid_594482, JString, required = true,
                                 default = nil)
  if valid_594482 != nil:
    section.add "subscriptionId", valid_594482
  var valid_594483 = path.getOrDefault("domainName")
  valid_594483 = validateParameter(valid_594483, JString, required = true,
                                 default = nil)
  if valid_594483 != nil:
    section.add "domainName", valid_594483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594484 = query.getOrDefault("api-version")
  valid_594484 = validateParameter(valid_594484, JString, required = true,
                                 default = nil)
  if valid_594484 != nil:
    section.add "api-version", valid_594484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594486: Call_DomainsUpdateDomain_594478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594486.validator(path, query, header, formData, body)
  let scheme = call_594486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594486.url(scheme.get, call_594486.host, call_594486.base,
                         call_594486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594486, url, valid)

proc call*(call_594487: Call_DomainsUpdateDomain_594478; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domain: JsonNode;
          domainName: string): Recallable =
  ## domainsUpdateDomain
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_594488 = newJObject()
  var query_594489 = newJObject()
  var body_594490 = newJObject()
  add(path_594488, "resourceGroupName", newJString(resourceGroupName))
  add(query_594489, "api-version", newJString(apiVersion))
  add(path_594488, "subscriptionId", newJString(subscriptionId))
  if domain != nil:
    body_594490 = domain
  add(path_594488, "domainName", newJString(domainName))
  result = call_594487.call(path_594488, query_594489, nil, nil, body_594490)

var domainsUpdateDomain* = Call_DomainsUpdateDomain_594478(
    name: "domainsUpdateDomain", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsUpdateDomain_594479, base: "",
    url: url_DomainsUpdateDomain_594480, schemes: {Scheme.Https})
type
  Call_DomainsDeleteDomain_594466 = ref object of OpenApiRestCall_593421
proc url_DomainsDeleteDomain_594468(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsDeleteDomain_594467(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594469 = path.getOrDefault("resourceGroupName")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = nil)
  if valid_594469 != nil:
    section.add "resourceGroupName", valid_594469
  var valid_594470 = path.getOrDefault("subscriptionId")
  valid_594470 = validateParameter(valid_594470, JString, required = true,
                                 default = nil)
  if valid_594470 != nil:
    section.add "subscriptionId", valid_594470
  var valid_594471 = path.getOrDefault("domainName")
  valid_594471 = validateParameter(valid_594471, JString, required = true,
                                 default = nil)
  if valid_594471 != nil:
    section.add "domainName", valid_594471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceHardDeleteDomain: JBool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594472 = query.getOrDefault("api-version")
  valid_594472 = validateParameter(valid_594472, JString, required = true,
                                 default = nil)
  if valid_594472 != nil:
    section.add "api-version", valid_594472
  var valid_594473 = query.getOrDefault("forceHardDeleteDomain")
  valid_594473 = validateParameter(valid_594473, JBool, required = false, default = nil)
  if valid_594473 != nil:
    section.add "forceHardDeleteDomain", valid_594473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594474: Call_DomainsDeleteDomain_594466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594474.validator(path, query, header, formData, body)
  let scheme = call_594474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594474.url(scheme.get, call_594474.host, call_594474.base,
                         call_594474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594474, url, valid)

proc call*(call_594475: Call_DomainsDeleteDomain_594466; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domainName: string;
          forceHardDeleteDomain: bool = false): Recallable =
  ## domainsDeleteDomain
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  ##   forceHardDeleteDomain: bool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  var path_594476 = newJObject()
  var query_594477 = newJObject()
  add(path_594476, "resourceGroupName", newJString(resourceGroupName))
  add(query_594477, "api-version", newJString(apiVersion))
  add(path_594476, "subscriptionId", newJString(subscriptionId))
  add(path_594476, "domainName", newJString(domainName))
  add(query_594477, "forceHardDeleteDomain", newJBool(forceHardDeleteDomain))
  result = call_594475.call(path_594476, query_594477, nil, nil, nil)

var domainsDeleteDomain* = Call_DomainsDeleteDomain_594466(
    name: "domainsDeleteDomain", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsDeleteDomain_594467, base: "",
    url: url_DomainsDeleteDomain_594468, schemes: {Scheme.Https})
type
  Call_DomainsGetDomainOperation_594491 = ref object of OpenApiRestCall_593421
proc url_DomainsGetDomainOperation_594493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomainOperation_594492(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  ##   operationId: JString (required)
  ##              : Domain purchase operation Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594494 = path.getOrDefault("resourceGroupName")
  valid_594494 = validateParameter(valid_594494, JString, required = true,
                                 default = nil)
  if valid_594494 != nil:
    section.add "resourceGroupName", valid_594494
  var valid_594495 = path.getOrDefault("subscriptionId")
  valid_594495 = validateParameter(valid_594495, JString, required = true,
                                 default = nil)
  if valid_594495 != nil:
    section.add "subscriptionId", valid_594495
  var valid_594496 = path.getOrDefault("domainName")
  valid_594496 = validateParameter(valid_594496, JString, required = true,
                                 default = nil)
  if valid_594496 != nil:
    section.add "domainName", valid_594496
  var valid_594497 = path.getOrDefault("operationId")
  valid_594497 = validateParameter(valid_594497, JString, required = true,
                                 default = nil)
  if valid_594497 != nil:
    section.add "operationId", valid_594497
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594498 = query.getOrDefault("api-version")
  valid_594498 = validateParameter(valid_594498, JString, required = true,
                                 default = nil)
  if valid_594498 != nil:
    section.add "api-version", valid_594498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594499: Call_DomainsGetDomainOperation_594491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594499.validator(path, query, header, formData, body)
  let scheme = call_594499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594499.url(scheme.get, call_594499.host, call_594499.base,
                         call_594499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594499, url, valid)

proc call*(call_594500: Call_DomainsGetDomainOperation_594491;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          domainName: string; operationId: string): Recallable =
  ## domainsGetDomainOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  ##   operationId: string (required)
  ##              : Domain purchase operation Id
  var path_594501 = newJObject()
  var query_594502 = newJObject()
  add(path_594501, "resourceGroupName", newJString(resourceGroupName))
  add(query_594502, "api-version", newJString(apiVersion))
  add(path_594501, "subscriptionId", newJString(subscriptionId))
  add(path_594501, "domainName", newJString(domainName))
  add(path_594501, "operationId", newJString(operationId))
  result = call_594500.call(path_594501, query_594502, nil, nil, nil)

var domainsGetDomainOperation* = Call_DomainsGetDomainOperation_594491(
    name: "domainsGetDomainOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}",
    validator: validate_DomainsGetDomainOperation_594492, base: "",
    url: url_DomainsGetDomainOperation_594493, schemes: {Scheme.Https})
type
  Call_UsageGetUsage_594503 = ref object of OpenApiRestCall_593421
proc url_UsageGetUsage_594505(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "environmentName" in path, "`environmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web.Admin/environments/"),
               (kind: VariableSegment, value: "environmentName"),
               (kind: ConstantSegment, value: "/usage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UsageGetUsage_594504(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   environmentName: JString (required)
  ##                  : Environment name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594506 = path.getOrDefault("resourceGroupName")
  valid_594506 = validateParameter(valid_594506, JString, required = true,
                                 default = nil)
  if valid_594506 != nil:
    section.add "resourceGroupName", valid_594506
  var valid_594507 = path.getOrDefault("subscriptionId")
  valid_594507 = validateParameter(valid_594507, JString, required = true,
                                 default = nil)
  if valid_594507 != nil:
    section.add "subscriptionId", valid_594507
  var valid_594508 = path.getOrDefault("environmentName")
  valid_594508 = validateParameter(valid_594508, JString, required = true,
                                 default = nil)
  if valid_594508 != nil:
    section.add "environmentName", valid_594508
  result.add "path", section
  ## parameters in `query` object:
  ##   batchSize: JInt (required)
  ##            : size of the batch to be returned.
  ##   api-version: JString (required)
  ##              : API Version
  ##   lastId: JString (required)
  ##         : Last marker that was returned from the batch
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `batchSize` field"
  var valid_594509 = query.getOrDefault("batchSize")
  valid_594509 = validateParameter(valid_594509, JInt, required = true, default = nil)
  if valid_594509 != nil:
    section.add "batchSize", valid_594509
  var valid_594510 = query.getOrDefault("api-version")
  valid_594510 = validateParameter(valid_594510, JString, required = true,
                                 default = nil)
  if valid_594510 != nil:
    section.add "api-version", valid_594510
  var valid_594511 = query.getOrDefault("lastId")
  valid_594511 = validateParameter(valid_594511, JString, required = true,
                                 default = nil)
  if valid_594511 != nil:
    section.add "lastId", valid_594511
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594512: Call_UsageGetUsage_594503; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594512.validator(path, query, header, formData, body)
  let scheme = call_594512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594512.url(scheme.get, call_594512.host, call_594512.base,
                         call_594512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594512, url, valid)

proc call*(call_594513: Call_UsageGetUsage_594503; batchSize: int;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          lastId: string; environmentName: string): Recallable =
  ## usageGetUsage
  ##   batchSize: int (required)
  ##            : size of the batch to be returned.
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   lastId: string (required)
  ##         : Last marker that was returned from the batch
  ##   environmentName: string (required)
  ##                  : Environment name
  var path_594514 = newJObject()
  var query_594515 = newJObject()
  add(query_594515, "batchSize", newJInt(batchSize))
  add(path_594514, "resourceGroupName", newJString(resourceGroupName))
  add(query_594515, "api-version", newJString(apiVersion))
  add(path_594514, "subscriptionId", newJString(subscriptionId))
  add(query_594515, "lastId", newJString(lastId))
  add(path_594514, "environmentName", newJString(environmentName))
  result = call_594513.call(path_594514, query_594515, nil, nil, nil)

var usageGetUsage* = Call_UsageGetUsage_594503(name: "usageGetUsage",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environments/{environmentName}/usage",
    validator: validate_UsageGetUsage_594504, base: "", url: url_UsageGetUsage_594505,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificates_594516 = ref object of OpenApiRestCall_593421
proc url_CertificatesGetCertificates_594518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificates_594517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594519 = path.getOrDefault("resourceGroupName")
  valid_594519 = validateParameter(valid_594519, JString, required = true,
                                 default = nil)
  if valid_594519 != nil:
    section.add "resourceGroupName", valid_594519
  var valid_594520 = path.getOrDefault("subscriptionId")
  valid_594520 = validateParameter(valid_594520, JString, required = true,
                                 default = nil)
  if valid_594520 != nil:
    section.add "subscriptionId", valid_594520
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594521 = query.getOrDefault("api-version")
  valid_594521 = validateParameter(valid_594521, JString, required = true,
                                 default = nil)
  if valid_594521 != nil:
    section.add "api-version", valid_594521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594522: Call_CertificatesGetCertificates_594516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594522.validator(path, query, header, formData, body)
  let scheme = call_594522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594522.url(scheme.get, call_594522.host, call_594522.base,
                         call_594522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594522, url, valid)

proc call*(call_594523: Call_CertificatesGetCertificates_594516;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## certificatesGetCertificates
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594524 = newJObject()
  var query_594525 = newJObject()
  add(path_594524, "resourceGroupName", newJString(resourceGroupName))
  add(query_594525, "api-version", newJString(apiVersion))
  add(path_594524, "subscriptionId", newJString(subscriptionId))
  result = call_594523.call(path_594524, query_594525, nil, nil, nil)

var certificatesGetCertificates* = Call_CertificatesGetCertificates_594516(
    name: "certificatesGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
    validator: validate_CertificatesGetCertificates_594517, base: "",
    url: url_CertificatesGetCertificates_594518, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCertificate_594537 = ref object of OpenApiRestCall_593421
proc url_CertificatesCreateOrUpdateCertificate_594539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCertificate_594538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594540 = path.getOrDefault("resourceGroupName")
  valid_594540 = validateParameter(valid_594540, JString, required = true,
                                 default = nil)
  if valid_594540 != nil:
    section.add "resourceGroupName", valid_594540
  var valid_594541 = path.getOrDefault("name")
  valid_594541 = validateParameter(valid_594541, JString, required = true,
                                 default = nil)
  if valid_594541 != nil:
    section.add "name", valid_594541
  var valid_594542 = path.getOrDefault("subscriptionId")
  valid_594542 = validateParameter(valid_594542, JString, required = true,
                                 default = nil)
  if valid_594542 != nil:
    section.add "subscriptionId", valid_594542
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594543 = query.getOrDefault("api-version")
  valid_594543 = validateParameter(valid_594543, JString, required = true,
                                 default = nil)
  if valid_594543 != nil:
    section.add "api-version", valid_594543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594545: Call_CertificatesCreateOrUpdateCertificate_594537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594545.validator(path, query, header, formData, body)
  let scheme = call_594545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594545.url(scheme.get, call_594545.host, call_594545.base,
                         call_594545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594545, url, valid)

proc call*(call_594546: Call_CertificatesCreateOrUpdateCertificate_594537;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_594547 = newJObject()
  var query_594548 = newJObject()
  var body_594549 = newJObject()
  add(path_594547, "resourceGroupName", newJString(resourceGroupName))
  add(query_594548, "api-version", newJString(apiVersion))
  add(path_594547, "name", newJString(name))
  add(path_594547, "subscriptionId", newJString(subscriptionId))
  if certificateEnvelope != nil:
    body_594549 = certificateEnvelope
  result = call_594546.call(path_594547, query_594548, nil, nil, body_594549)

var certificatesCreateOrUpdateCertificate* = Call_CertificatesCreateOrUpdateCertificate_594537(
    name: "certificatesCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesCreateOrUpdateCertificate_594538, base: "",
    url: url_CertificatesCreateOrUpdateCertificate_594539, schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificate_594526 = ref object of OpenApiRestCall_593421
proc url_CertificatesGetCertificate_594528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificate_594527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594529 = path.getOrDefault("resourceGroupName")
  valid_594529 = validateParameter(valid_594529, JString, required = true,
                                 default = nil)
  if valid_594529 != nil:
    section.add "resourceGroupName", valid_594529
  var valid_594530 = path.getOrDefault("name")
  valid_594530 = validateParameter(valid_594530, JString, required = true,
                                 default = nil)
  if valid_594530 != nil:
    section.add "name", valid_594530
  var valid_594531 = path.getOrDefault("subscriptionId")
  valid_594531 = validateParameter(valid_594531, JString, required = true,
                                 default = nil)
  if valid_594531 != nil:
    section.add "subscriptionId", valid_594531
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594532 = query.getOrDefault("api-version")
  valid_594532 = validateParameter(valid_594532, JString, required = true,
                                 default = nil)
  if valid_594532 != nil:
    section.add "api-version", valid_594532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594533: Call_CertificatesGetCertificate_594526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594533.validator(path, query, header, formData, body)
  let scheme = call_594533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594533.url(scheme.get, call_594533.host, call_594533.base,
                         call_594533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594533, url, valid)

proc call*(call_594534: Call_CertificatesGetCertificate_594526;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesGetCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594535 = newJObject()
  var query_594536 = newJObject()
  add(path_594535, "resourceGroupName", newJString(resourceGroupName))
  add(query_594536, "api-version", newJString(apiVersion))
  add(path_594535, "name", newJString(name))
  add(path_594535, "subscriptionId", newJString(subscriptionId))
  result = call_594534.call(path_594535, query_594536, nil, nil, nil)

var certificatesGetCertificate* = Call_CertificatesGetCertificate_594526(
    name: "certificatesGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesGetCertificate_594527, base: "",
    url: url_CertificatesGetCertificate_594528, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCertificate_594561 = ref object of OpenApiRestCall_593421
proc url_CertificatesUpdateCertificate_594563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCertificate_594562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594564 = path.getOrDefault("resourceGroupName")
  valid_594564 = validateParameter(valid_594564, JString, required = true,
                                 default = nil)
  if valid_594564 != nil:
    section.add "resourceGroupName", valid_594564
  var valid_594565 = path.getOrDefault("name")
  valid_594565 = validateParameter(valid_594565, JString, required = true,
                                 default = nil)
  if valid_594565 != nil:
    section.add "name", valid_594565
  var valid_594566 = path.getOrDefault("subscriptionId")
  valid_594566 = validateParameter(valid_594566, JString, required = true,
                                 default = nil)
  if valid_594566 != nil:
    section.add "subscriptionId", valid_594566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594567 = query.getOrDefault("api-version")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = nil)
  if valid_594567 != nil:
    section.add "api-version", valid_594567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594569: Call_CertificatesUpdateCertificate_594561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594569.validator(path, query, header, formData, body)
  let scheme = call_594569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594569.url(scheme.get, call_594569.host, call_594569.base,
                         call_594569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594569, url, valid)

proc call*(call_594570: Call_CertificatesUpdateCertificate_594561;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_594571 = newJObject()
  var query_594572 = newJObject()
  var body_594573 = newJObject()
  add(path_594571, "resourceGroupName", newJString(resourceGroupName))
  add(query_594572, "api-version", newJString(apiVersion))
  add(path_594571, "name", newJString(name))
  add(path_594571, "subscriptionId", newJString(subscriptionId))
  if certificateEnvelope != nil:
    body_594573 = certificateEnvelope
  result = call_594570.call(path_594571, query_594572, nil, nil, body_594573)

var certificatesUpdateCertificate* = Call_CertificatesUpdateCertificate_594561(
    name: "certificatesUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesUpdateCertificate_594562, base: "",
    url: url_CertificatesUpdateCertificate_594563, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCertificate_594550 = ref object of OpenApiRestCall_593421
proc url_CertificatesDeleteCertificate_594552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCertificate_594551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594553 = path.getOrDefault("resourceGroupName")
  valid_594553 = validateParameter(valid_594553, JString, required = true,
                                 default = nil)
  if valid_594553 != nil:
    section.add "resourceGroupName", valid_594553
  var valid_594554 = path.getOrDefault("name")
  valid_594554 = validateParameter(valid_594554, JString, required = true,
                                 default = nil)
  if valid_594554 != nil:
    section.add "name", valid_594554
  var valid_594555 = path.getOrDefault("subscriptionId")
  valid_594555 = validateParameter(valid_594555, JString, required = true,
                                 default = nil)
  if valid_594555 != nil:
    section.add "subscriptionId", valid_594555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594556 = query.getOrDefault("api-version")
  valid_594556 = validateParameter(valid_594556, JString, required = true,
                                 default = nil)
  if valid_594556 != nil:
    section.add "api-version", valid_594556
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594557: Call_CertificatesDeleteCertificate_594550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594557.validator(path, query, header, formData, body)
  let scheme = call_594557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594557.url(scheme.get, call_594557.host, call_594557.base,
                         call_594557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594557, url, valid)

proc call*(call_594558: Call_CertificatesDeleteCertificate_594550;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesDeleteCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594559 = newJObject()
  var query_594560 = newJObject()
  add(path_594559, "resourceGroupName", newJString(resourceGroupName))
  add(query_594560, "api-version", newJString(apiVersion))
  add(path_594559, "name", newJString(name))
  add(path_594559, "subscriptionId", newJString(subscriptionId))
  result = call_594558.call(path_594559, query_594560, nil, nil, nil)

var certificatesDeleteCertificate* = Call_CertificatesDeleteCertificate_594550(
    name: "certificatesDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesDeleteCertificate_594551, base: "",
    url: url_CertificatesDeleteCertificate_594552, schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileServices_594574 = ref object of OpenApiRestCall_593421
proc url_ClassicMobileServicesGetClassicMobileServices_594576(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileServices_594575(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594577 = path.getOrDefault("resourceGroupName")
  valid_594577 = validateParameter(valid_594577, JString, required = true,
                                 default = nil)
  if valid_594577 != nil:
    section.add "resourceGroupName", valid_594577
  var valid_594578 = path.getOrDefault("subscriptionId")
  valid_594578 = validateParameter(valid_594578, JString, required = true,
                                 default = nil)
  if valid_594578 != nil:
    section.add "subscriptionId", valid_594578
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594579 = query.getOrDefault("api-version")
  valid_594579 = validateParameter(valid_594579, JString, required = true,
                                 default = nil)
  if valid_594579 != nil:
    section.add "api-version", valid_594579
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594580: Call_ClassicMobileServicesGetClassicMobileServices_594574;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594580.validator(path, query, header, formData, body)
  let scheme = call_594580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594580.url(scheme.get, call_594580.host, call_594580.base,
                         call_594580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594580, url, valid)

proc call*(call_594581: Call_ClassicMobileServicesGetClassicMobileServices_594574;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## classicMobileServicesGetClassicMobileServices
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594582 = newJObject()
  var query_594583 = newJObject()
  add(path_594582, "resourceGroupName", newJString(resourceGroupName))
  add(query_594583, "api-version", newJString(apiVersion))
  add(path_594582, "subscriptionId", newJString(subscriptionId))
  result = call_594581.call(path_594582, query_594583, nil, nil, nil)

var classicMobileServicesGetClassicMobileServices* = Call_ClassicMobileServicesGetClassicMobileServices_594574(
    name: "classicMobileServicesGetClassicMobileServices",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_ClassicMobileServicesGetClassicMobileServices_594575,
    base: "", url: url_ClassicMobileServicesGetClassicMobileServices_594576,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileService_594584 = ref object of OpenApiRestCall_593421
proc url_ClassicMobileServicesGetClassicMobileService_594586(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileService_594585(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594587 = path.getOrDefault("resourceGroupName")
  valid_594587 = validateParameter(valid_594587, JString, required = true,
                                 default = nil)
  if valid_594587 != nil:
    section.add "resourceGroupName", valid_594587
  var valid_594588 = path.getOrDefault("name")
  valid_594588 = validateParameter(valid_594588, JString, required = true,
                                 default = nil)
  if valid_594588 != nil:
    section.add "name", valid_594588
  var valid_594589 = path.getOrDefault("subscriptionId")
  valid_594589 = validateParameter(valid_594589, JString, required = true,
                                 default = nil)
  if valid_594589 != nil:
    section.add "subscriptionId", valid_594589
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594590 = query.getOrDefault("api-version")
  valid_594590 = validateParameter(valid_594590, JString, required = true,
                                 default = nil)
  if valid_594590 != nil:
    section.add "api-version", valid_594590
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594591: Call_ClassicMobileServicesGetClassicMobileService_594584;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594591.validator(path, query, header, formData, body)
  let scheme = call_594591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594591.url(scheme.get, call_594591.host, call_594591.base,
                         call_594591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594591, url, valid)

proc call*(call_594592: Call_ClassicMobileServicesGetClassicMobileService_594584;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## classicMobileServicesGetClassicMobileService
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594593 = newJObject()
  var query_594594 = newJObject()
  add(path_594593, "resourceGroupName", newJString(resourceGroupName))
  add(query_594594, "api-version", newJString(apiVersion))
  add(path_594593, "name", newJString(name))
  add(path_594593, "subscriptionId", newJString(subscriptionId))
  result = call_594592.call(path_594593, query_594594, nil, nil, nil)

var classicMobileServicesGetClassicMobileService* = Call_ClassicMobileServicesGetClassicMobileService_594584(
    name: "classicMobileServicesGetClassicMobileService",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesGetClassicMobileService_594585,
    base: "", url: url_ClassicMobileServicesGetClassicMobileService_594586,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesDeleteClassicMobileService_594595 = ref object of OpenApiRestCall_593421
proc url_ClassicMobileServicesDeleteClassicMobileService_594597(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesDeleteClassicMobileService_594596(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594598 = path.getOrDefault("resourceGroupName")
  valid_594598 = validateParameter(valid_594598, JString, required = true,
                                 default = nil)
  if valid_594598 != nil:
    section.add "resourceGroupName", valid_594598
  var valid_594599 = path.getOrDefault("name")
  valid_594599 = validateParameter(valid_594599, JString, required = true,
                                 default = nil)
  if valid_594599 != nil:
    section.add "name", valid_594599
  var valid_594600 = path.getOrDefault("subscriptionId")
  valid_594600 = validateParameter(valid_594600, JString, required = true,
                                 default = nil)
  if valid_594600 != nil:
    section.add "subscriptionId", valid_594600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594601 = query.getOrDefault("api-version")
  valid_594601 = validateParameter(valid_594601, JString, required = true,
                                 default = nil)
  if valid_594601 != nil:
    section.add "api-version", valid_594601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594602: Call_ClassicMobileServicesDeleteClassicMobileService_594595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594602.validator(path, query, header, formData, body)
  let scheme = call_594602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594602.url(scheme.get, call_594602.host, call_594602.base,
                         call_594602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594602, url, valid)

proc call*(call_594603: Call_ClassicMobileServicesDeleteClassicMobileService_594595;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## classicMobileServicesDeleteClassicMobileService
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594604 = newJObject()
  var query_594605 = newJObject()
  add(path_594604, "resourceGroupName", newJString(resourceGroupName))
  add(query_594605, "api-version", newJString(apiVersion))
  add(path_594604, "name", newJString(name))
  add(path_594604, "subscriptionId", newJString(subscriptionId))
  result = call_594603.call(path_594604, query_594605, nil, nil, nil)

var classicMobileServicesDeleteClassicMobileService* = Call_ClassicMobileServicesDeleteClassicMobileService_594595(
    name: "classicMobileServicesDeleteClassicMobileService",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesDeleteClassicMobileService_594596,
    base: "", url: url_ClassicMobileServicesDeleteClassicMobileService_594597,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCsrs_594606 = ref object of OpenApiRestCall_593421
proc url_CertificatesGetCsrs_594608(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsrs_594607(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594609 = path.getOrDefault("resourceGroupName")
  valid_594609 = validateParameter(valid_594609, JString, required = true,
                                 default = nil)
  if valid_594609 != nil:
    section.add "resourceGroupName", valid_594609
  var valid_594610 = path.getOrDefault("subscriptionId")
  valid_594610 = validateParameter(valid_594610, JString, required = true,
                                 default = nil)
  if valid_594610 != nil:
    section.add "subscriptionId", valid_594610
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594611 = query.getOrDefault("api-version")
  valid_594611 = validateParameter(valid_594611, JString, required = true,
                                 default = nil)
  if valid_594611 != nil:
    section.add "api-version", valid_594611
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594612: Call_CertificatesGetCsrs_594606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594612.validator(path, query, header, formData, body)
  let scheme = call_594612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594612.url(scheme.get, call_594612.host, call_594612.base,
                         call_594612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594612, url, valid)

proc call*(call_594613: Call_CertificatesGetCsrs_594606; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## certificatesGetCsrs
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594614 = newJObject()
  var query_594615 = newJObject()
  add(path_594614, "resourceGroupName", newJString(resourceGroupName))
  add(query_594615, "api-version", newJString(apiVersion))
  add(path_594614, "subscriptionId", newJString(subscriptionId))
  result = call_594613.call(path_594614, query_594615, nil, nil, nil)

var certificatesGetCsrs* = Call_CertificatesGetCsrs_594606(
    name: "certificatesGetCsrs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs",
    validator: validate_CertificatesGetCsrs_594607, base: "",
    url: url_CertificatesGetCsrs_594608, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCsr_594627 = ref object of OpenApiRestCall_593421
proc url_CertificatesCreateOrUpdateCsr_594629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCsr_594628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594630 = path.getOrDefault("resourceGroupName")
  valid_594630 = validateParameter(valid_594630, JString, required = true,
                                 default = nil)
  if valid_594630 != nil:
    section.add "resourceGroupName", valid_594630
  var valid_594631 = path.getOrDefault("name")
  valid_594631 = validateParameter(valid_594631, JString, required = true,
                                 default = nil)
  if valid_594631 != nil:
    section.add "name", valid_594631
  var valid_594632 = path.getOrDefault("subscriptionId")
  valid_594632 = validateParameter(valid_594632, JString, required = true,
                                 default = nil)
  if valid_594632 != nil:
    section.add "subscriptionId", valid_594632
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594633 = query.getOrDefault("api-version")
  valid_594633 = validateParameter(valid_594633, JString, required = true,
                                 default = nil)
  if valid_594633 != nil:
    section.add "api-version", valid_594633
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594635: Call_CertificatesCreateOrUpdateCsr_594627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594635.validator(path, query, header, formData, body)
  let scheme = call_594635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594635.url(scheme.get, call_594635.host, call_594635.base,
                         call_594635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594635, url, valid)

proc call*(call_594636: Call_CertificatesCreateOrUpdateCsr_594627;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; csrEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_594637 = newJObject()
  var query_594638 = newJObject()
  var body_594639 = newJObject()
  add(path_594637, "resourceGroupName", newJString(resourceGroupName))
  add(query_594638, "api-version", newJString(apiVersion))
  add(path_594637, "name", newJString(name))
  add(path_594637, "subscriptionId", newJString(subscriptionId))
  if csrEnvelope != nil:
    body_594639 = csrEnvelope
  result = call_594636.call(path_594637, query_594638, nil, nil, body_594639)

var certificatesCreateOrUpdateCsr* = Call_CertificatesCreateOrUpdateCsr_594627(
    name: "certificatesCreateOrUpdateCsr", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesCreateOrUpdateCsr_594628, base: "",
    url: url_CertificatesCreateOrUpdateCsr_594629, schemes: {Scheme.Https})
type
  Call_CertificatesGetCsr_594616 = ref object of OpenApiRestCall_593421
proc url_CertificatesGetCsr_594618(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsr_594617(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594619 = path.getOrDefault("resourceGroupName")
  valid_594619 = validateParameter(valid_594619, JString, required = true,
                                 default = nil)
  if valid_594619 != nil:
    section.add "resourceGroupName", valid_594619
  var valid_594620 = path.getOrDefault("name")
  valid_594620 = validateParameter(valid_594620, JString, required = true,
                                 default = nil)
  if valid_594620 != nil:
    section.add "name", valid_594620
  var valid_594621 = path.getOrDefault("subscriptionId")
  valid_594621 = validateParameter(valid_594621, JString, required = true,
                                 default = nil)
  if valid_594621 != nil:
    section.add "subscriptionId", valid_594621
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594622 = query.getOrDefault("api-version")
  valid_594622 = validateParameter(valid_594622, JString, required = true,
                                 default = nil)
  if valid_594622 != nil:
    section.add "api-version", valid_594622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594623: Call_CertificatesGetCsr_594616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594623.validator(path, query, header, formData, body)
  let scheme = call_594623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594623.url(scheme.get, call_594623.host, call_594623.base,
                         call_594623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594623, url, valid)

proc call*(call_594624: Call_CertificatesGetCsr_594616; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificatesGetCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594625 = newJObject()
  var query_594626 = newJObject()
  add(path_594625, "resourceGroupName", newJString(resourceGroupName))
  add(query_594626, "api-version", newJString(apiVersion))
  add(path_594625, "name", newJString(name))
  add(path_594625, "subscriptionId", newJString(subscriptionId))
  result = call_594624.call(path_594625, query_594626, nil, nil, nil)

var certificatesGetCsr* = Call_CertificatesGetCsr_594616(
    name: "certificatesGetCsr", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesGetCsr_594617, base: "",
    url: url_CertificatesGetCsr_594618, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCsr_594651 = ref object of OpenApiRestCall_593421
proc url_CertificatesUpdateCsr_594653(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCsr_594652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594654 = path.getOrDefault("resourceGroupName")
  valid_594654 = validateParameter(valid_594654, JString, required = true,
                                 default = nil)
  if valid_594654 != nil:
    section.add "resourceGroupName", valid_594654
  var valid_594655 = path.getOrDefault("name")
  valid_594655 = validateParameter(valid_594655, JString, required = true,
                                 default = nil)
  if valid_594655 != nil:
    section.add "name", valid_594655
  var valid_594656 = path.getOrDefault("subscriptionId")
  valid_594656 = validateParameter(valid_594656, JString, required = true,
                                 default = nil)
  if valid_594656 != nil:
    section.add "subscriptionId", valid_594656
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594657 = query.getOrDefault("api-version")
  valid_594657 = validateParameter(valid_594657, JString, required = true,
                                 default = nil)
  if valid_594657 != nil:
    section.add "api-version", valid_594657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594659: Call_CertificatesUpdateCsr_594651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594659.validator(path, query, header, formData, body)
  let scheme = call_594659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594659.url(scheme.get, call_594659.host, call_594659.base,
                         call_594659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594659, url, valid)

proc call*(call_594660: Call_CertificatesUpdateCsr_594651;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; csrEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_594661 = newJObject()
  var query_594662 = newJObject()
  var body_594663 = newJObject()
  add(path_594661, "resourceGroupName", newJString(resourceGroupName))
  add(query_594662, "api-version", newJString(apiVersion))
  add(path_594661, "name", newJString(name))
  add(path_594661, "subscriptionId", newJString(subscriptionId))
  if csrEnvelope != nil:
    body_594663 = csrEnvelope
  result = call_594660.call(path_594661, query_594662, nil, nil, body_594663)

var certificatesUpdateCsr* = Call_CertificatesUpdateCsr_594651(
    name: "certificatesUpdateCsr", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesUpdateCsr_594652, base: "",
    url: url_CertificatesUpdateCsr_594653, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCsr_594640 = ref object of OpenApiRestCall_593421
proc url_CertificatesDeleteCsr_594642(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCsr_594641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594643 = path.getOrDefault("resourceGroupName")
  valid_594643 = validateParameter(valid_594643, JString, required = true,
                                 default = nil)
  if valid_594643 != nil:
    section.add "resourceGroupName", valid_594643
  var valid_594644 = path.getOrDefault("name")
  valid_594644 = validateParameter(valid_594644, JString, required = true,
                                 default = nil)
  if valid_594644 != nil:
    section.add "name", valid_594644
  var valid_594645 = path.getOrDefault("subscriptionId")
  valid_594645 = validateParameter(valid_594645, JString, required = true,
                                 default = nil)
  if valid_594645 != nil:
    section.add "subscriptionId", valid_594645
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594646 = query.getOrDefault("api-version")
  valid_594646 = validateParameter(valid_594646, JString, required = true,
                                 default = nil)
  if valid_594646 != nil:
    section.add "api-version", valid_594646
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594647: Call_CertificatesDeleteCsr_594640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594647.validator(path, query, header, formData, body)
  let scheme = call_594647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594647.url(scheme.get, call_594647.host, call_594647.base,
                         call_594647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594647, url, valid)

proc call*(call_594648: Call_CertificatesDeleteCsr_594640;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesDeleteCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594649 = newJObject()
  var query_594650 = newJObject()
  add(path_594649, "resourceGroupName", newJString(resourceGroupName))
  add(query_594650, "api-version", newJString(apiVersion))
  add(path_594649, "name", newJString(name))
  add(path_594649, "subscriptionId", newJString(subscriptionId))
  result = call_594648.call(path_594649, query_594650, nil, nil, nil)

var certificatesDeleteCsr* = Call_CertificatesDeleteCsr_594640(
    name: "certificatesDeleteCsr", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesDeleteCsr_594641, base: "",
    url: url_CertificatesDeleteCsr_594642, schemes: {Scheme.Https})
type
  Call_SitesGetDeletedSites_594664 = ref object of OpenApiRestCall_593421
proc url_SitesGetDeletedSites_594666(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/deletedSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeletedSites_594665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594667 = path.getOrDefault("resourceGroupName")
  valid_594667 = validateParameter(valid_594667, JString, required = true,
                                 default = nil)
  if valid_594667 != nil:
    section.add "resourceGroupName", valid_594667
  var valid_594668 = path.getOrDefault("subscriptionId")
  valid_594668 = validateParameter(valid_594668, JString, required = true,
                                 default = nil)
  if valid_594668 != nil:
    section.add "subscriptionId", valid_594668
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  section = newJObject()
  var valid_594669 = query.getOrDefault("propertiesToInclude")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "propertiesToInclude", valid_594669
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594670 = query.getOrDefault("api-version")
  valid_594670 = validateParameter(valid_594670, JString, required = true,
                                 default = nil)
  if valid_594670 != nil:
    section.add "api-version", valid_594670
  var valid_594671 = query.getOrDefault("includeSiteTypes")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "includeSiteTypes", valid_594671
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594672: Call_SitesGetDeletedSites_594664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_594672.validator(path, query, header, formData, body)
  let scheme = call_594672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594672.url(scheme.get, call_594672.host, call_594672.base,
                         call_594672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594672, url, valid)

proc call*(call_594673: Call_SitesGetDeletedSites_594664;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          propertiesToInclude: string = ""; includeSiteTypes: string = ""): Recallable =
  ## sitesGetDeletedSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  var path_594674 = newJObject()
  var query_594675 = newJObject()
  add(path_594674, "resourceGroupName", newJString(resourceGroupName))
  add(query_594675, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_594675, "api-version", newJString(apiVersion))
  add(path_594674, "subscriptionId", newJString(subscriptionId))
  add(query_594675, "includeSiteTypes", newJString(includeSiteTypes))
  result = call_594673.call(path_594674, query_594675, nil, nil, nil)

var sitesGetDeletedSites* = Call_SitesGetDeletedSites_594664(
    name: "sitesGetDeletedSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites",
    validator: validate_SitesGetDeletedSites_594665, base: "",
    url: url_SitesGetDeletedSites_594666, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironments_594676 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironments_594678(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironments_594677(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594679 = path.getOrDefault("resourceGroupName")
  valid_594679 = validateParameter(valid_594679, JString, required = true,
                                 default = nil)
  if valid_594679 != nil:
    section.add "resourceGroupName", valid_594679
  var valid_594680 = path.getOrDefault("subscriptionId")
  valid_594680 = validateParameter(valid_594680, JString, required = true,
                                 default = nil)
  if valid_594680 != nil:
    section.add "subscriptionId", valid_594680
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594681 = query.getOrDefault("api-version")
  valid_594681 = validateParameter(valid_594681, JString, required = true,
                                 default = nil)
  if valid_594681 != nil:
    section.add "api-version", valid_594681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594682: Call_HostingEnvironmentsGetHostingEnvironments_594676;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594682.validator(path, query, header, formData, body)
  let scheme = call_594682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594682.url(scheme.get, call_594682.host, call_594682.base,
                         call_594682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594682, url, valid)

proc call*(call_594683: Call_HostingEnvironmentsGetHostingEnvironments_594676;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594684 = newJObject()
  var query_594685 = newJObject()
  add(path_594684, "resourceGroupName", newJString(resourceGroupName))
  add(query_594685, "api-version", newJString(apiVersion))
  add(path_594684, "subscriptionId", newJString(subscriptionId))
  result = call_594683.call(path_594684, query_594685, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironments* = Call_HostingEnvironmentsGetHostingEnvironments_594676(
    name: "hostingEnvironmentsGetHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_HostingEnvironmentsGetHostingEnvironments_594677,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironments_594678,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594697 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594699(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594698(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594700 = path.getOrDefault("resourceGroupName")
  valid_594700 = validateParameter(valid_594700, JString, required = true,
                                 default = nil)
  if valid_594700 != nil:
    section.add "resourceGroupName", valid_594700
  var valid_594701 = path.getOrDefault("name")
  valid_594701 = validateParameter(valid_594701, JString, required = true,
                                 default = nil)
  if valid_594701 != nil:
    section.add "name", valid_594701
  var valid_594702 = path.getOrDefault("subscriptionId")
  valid_594702 = validateParameter(valid_594702, JString, required = true,
                                 default = nil)
  if valid_594702 != nil:
    section.add "subscriptionId", valid_594702
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594703 = query.getOrDefault("api-version")
  valid_594703 = validateParameter(valid_594703, JString, required = true,
                                 default = nil)
  if valid_594703 != nil:
    section.add "api-version", valid_594703
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594705: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594697;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594705.validator(path, query, header, formData, body)
  let scheme = call_594705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594705.url(scheme.get, call_594705.host, call_594705.base,
                         call_594705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594705, url, valid)

proc call*(call_594706: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594697;
          resourceGroupName: string; apiVersion: string; name: string;
          hostingEnvironmentEnvelope: JsonNode; subscriptionId: string): Recallable =
  ## hostingEnvironmentsCreateOrUpdateHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594707 = newJObject()
  var query_594708 = newJObject()
  var body_594709 = newJObject()
  add(path_594707, "resourceGroupName", newJString(resourceGroupName))
  add(query_594708, "api-version", newJString(apiVersion))
  add(path_594707, "name", newJString(name))
  if hostingEnvironmentEnvelope != nil:
    body_594709 = hostingEnvironmentEnvelope
  add(path_594707, "subscriptionId", newJString(subscriptionId))
  result = call_594706.call(path_594707, query_594708, nil, nil, body_594709)

var hostingEnvironmentsCreateOrUpdateHostingEnvironment* = Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594697(
    name: "hostingEnvironmentsCreateOrUpdateHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594698,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_594699,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironment_594686 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironment_594688(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironment_594687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594689 = path.getOrDefault("resourceGroupName")
  valid_594689 = validateParameter(valid_594689, JString, required = true,
                                 default = nil)
  if valid_594689 != nil:
    section.add "resourceGroupName", valid_594689
  var valid_594690 = path.getOrDefault("name")
  valid_594690 = validateParameter(valid_594690, JString, required = true,
                                 default = nil)
  if valid_594690 != nil:
    section.add "name", valid_594690
  var valid_594691 = path.getOrDefault("subscriptionId")
  valid_594691 = validateParameter(valid_594691, JString, required = true,
                                 default = nil)
  if valid_594691 != nil:
    section.add "subscriptionId", valid_594691
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594692 = query.getOrDefault("api-version")
  valid_594692 = validateParameter(valid_594692, JString, required = true,
                                 default = nil)
  if valid_594692 != nil:
    section.add "api-version", valid_594692
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594693: Call_HostingEnvironmentsGetHostingEnvironment_594686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594693.validator(path, query, header, formData, body)
  let scheme = call_594693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594693.url(scheme.get, call_594693.host, call_594693.base,
                         call_594693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594693, url, valid)

proc call*(call_594694: Call_HostingEnvironmentsGetHostingEnvironment_594686;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594695 = newJObject()
  var query_594696 = newJObject()
  add(path_594695, "resourceGroupName", newJString(resourceGroupName))
  add(query_594696, "api-version", newJString(apiVersion))
  add(path_594695, "name", newJString(name))
  add(path_594695, "subscriptionId", newJString(subscriptionId))
  result = call_594694.call(path_594695, query_594696, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironment* = Call_HostingEnvironmentsGetHostingEnvironment_594686(
    name: "hostingEnvironmentsGetHostingEnvironment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsGetHostingEnvironment_594687, base: "",
    url: url_HostingEnvironmentsGetHostingEnvironment_594688,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsDeleteHostingEnvironment_594710 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsDeleteHostingEnvironment_594712(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsDeleteHostingEnvironment_594711(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594713 = path.getOrDefault("resourceGroupName")
  valid_594713 = validateParameter(valid_594713, JString, required = true,
                                 default = nil)
  if valid_594713 != nil:
    section.add "resourceGroupName", valid_594713
  var valid_594714 = path.getOrDefault("name")
  valid_594714 = validateParameter(valid_594714, JString, required = true,
                                 default = nil)
  if valid_594714 != nil:
    section.add "name", valid_594714
  var valid_594715 = path.getOrDefault("subscriptionId")
  valid_594715 = validateParameter(valid_594715, JString, required = true,
                                 default = nil)
  if valid_594715 != nil:
    section.add "subscriptionId", valid_594715
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594716 = query.getOrDefault("api-version")
  valid_594716 = validateParameter(valid_594716, JString, required = true,
                                 default = nil)
  if valid_594716 != nil:
    section.add "api-version", valid_594716
  var valid_594717 = query.getOrDefault("forceDelete")
  valid_594717 = validateParameter(valid_594717, JBool, required = false, default = nil)
  if valid_594717 != nil:
    section.add "forceDelete", valid_594717
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594718: Call_HostingEnvironmentsDeleteHostingEnvironment_594710;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594718.validator(path, query, header, formData, body)
  let scheme = call_594718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594718.url(scheme.get, call_594718.host, call_594718.base,
                         call_594718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594718, url, valid)

proc call*(call_594719: Call_HostingEnvironmentsDeleteHostingEnvironment_594710;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; forceDelete: bool = false): Recallable =
  ## hostingEnvironmentsDeleteHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   forceDelete: bool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594720 = newJObject()
  var query_594721 = newJObject()
  add(path_594720, "resourceGroupName", newJString(resourceGroupName))
  add(query_594721, "api-version", newJString(apiVersion))
  add(path_594720, "name", newJString(name))
  add(query_594721, "forceDelete", newJBool(forceDelete))
  add(path_594720, "subscriptionId", newJString(subscriptionId))
  result = call_594719.call(path_594720, query_594721, nil, nil, nil)

var hostingEnvironmentsDeleteHostingEnvironment* = Call_HostingEnvironmentsDeleteHostingEnvironment_594710(
    name: "hostingEnvironmentsDeleteHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsDeleteHostingEnvironment_594711,
    base: "", url: url_HostingEnvironmentsDeleteHostingEnvironment_594712,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentCapacities_594722 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentCapacities_594724(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/compute")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentCapacities_594723(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594725 = path.getOrDefault("resourceGroupName")
  valid_594725 = validateParameter(valid_594725, JString, required = true,
                                 default = nil)
  if valid_594725 != nil:
    section.add "resourceGroupName", valid_594725
  var valid_594726 = path.getOrDefault("name")
  valid_594726 = validateParameter(valid_594726, JString, required = true,
                                 default = nil)
  if valid_594726 != nil:
    section.add "name", valid_594726
  var valid_594727 = path.getOrDefault("subscriptionId")
  valid_594727 = validateParameter(valid_594727, JString, required = true,
                                 default = nil)
  if valid_594727 != nil:
    section.add "subscriptionId", valid_594727
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594728 = query.getOrDefault("api-version")
  valid_594728 = validateParameter(valid_594728, JString, required = true,
                                 default = nil)
  if valid_594728 != nil:
    section.add "api-version", valid_594728
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594729: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_594722;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594729.validator(path, query, header, formData, body)
  let scheme = call_594729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594729.url(scheme.get, call_594729.host, call_594729.base,
                         call_594729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594729, url, valid)

proc call*(call_594730: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_594722;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentCapacities
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594731 = newJObject()
  var query_594732 = newJObject()
  add(path_594731, "resourceGroupName", newJString(resourceGroupName))
  add(query_594732, "api-version", newJString(apiVersion))
  add(path_594731, "name", newJString(name))
  add(path_594731, "subscriptionId", newJString(subscriptionId))
  result = call_594730.call(path_594731, query_594732, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentCapacities* = Call_HostingEnvironmentsGetHostingEnvironmentCapacities_594722(
    name: "hostingEnvironmentsGetHostingEnvironmentCapacities",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentCapacities_594723,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentCapacities_594724,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentVips_594733 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentVips_594735(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentVips_594734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594736 = path.getOrDefault("resourceGroupName")
  valid_594736 = validateParameter(valid_594736, JString, required = true,
                                 default = nil)
  if valid_594736 != nil:
    section.add "resourceGroupName", valid_594736
  var valid_594737 = path.getOrDefault("name")
  valid_594737 = validateParameter(valid_594737, JString, required = true,
                                 default = nil)
  if valid_594737 != nil:
    section.add "name", valid_594737
  var valid_594738 = path.getOrDefault("subscriptionId")
  valid_594738 = validateParameter(valid_594738, JString, required = true,
                                 default = nil)
  if valid_594738 != nil:
    section.add "subscriptionId", valid_594738
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594739 = query.getOrDefault("api-version")
  valid_594739 = validateParameter(valid_594739, JString, required = true,
                                 default = nil)
  if valid_594739 != nil:
    section.add "api-version", valid_594739
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594740: Call_HostingEnvironmentsGetHostingEnvironmentVips_594733;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594740.validator(path, query, header, formData, body)
  let scheme = call_594740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594740.url(scheme.get, call_594740.host, call_594740.base,
                         call_594740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594740, url, valid)

proc call*(call_594741: Call_HostingEnvironmentsGetHostingEnvironmentVips_594733;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentVips
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594742 = newJObject()
  var query_594743 = newJObject()
  add(path_594742, "resourceGroupName", newJString(resourceGroupName))
  add(query_594743, "api-version", newJString(apiVersion))
  add(path_594742, "name", newJString(name))
  add(path_594742, "subscriptionId", newJString(subscriptionId))
  result = call_594741.call(path_594742, query_594743, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentVips* = Call_HostingEnvironmentsGetHostingEnvironmentVips_594733(
    name: "hostingEnvironmentsGetHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentVips_594734,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentVips_594735,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594744 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594746(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594745(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594747 = path.getOrDefault("resourceGroupName")
  valid_594747 = validateParameter(valid_594747, JString, required = true,
                                 default = nil)
  if valid_594747 != nil:
    section.add "resourceGroupName", valid_594747
  var valid_594748 = path.getOrDefault("name")
  valid_594748 = validateParameter(valid_594748, JString, required = true,
                                 default = nil)
  if valid_594748 != nil:
    section.add "name", valid_594748
  var valid_594749 = path.getOrDefault("subscriptionId")
  valid_594749 = validateParameter(valid_594749, JString, required = true,
                                 default = nil)
  if valid_594749 != nil:
    section.add "subscriptionId", valid_594749
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594750 = query.getOrDefault("api-version")
  valid_594750 = validateParameter(valid_594750, JString, required = true,
                                 default = nil)
  if valid_594750 != nil:
    section.add "api-version", valid_594750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594751: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594744;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594751.validator(path, query, header, formData, body)
  let scheme = call_594751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594751.url(scheme.get, call_594751.host, call_594751.base,
                         call_594751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594751, url, valid)

proc call*(call_594752: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594744;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnostics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594753 = newJObject()
  var query_594754 = newJObject()
  add(path_594753, "resourceGroupName", newJString(resourceGroupName))
  add(query_594754, "api-version", newJString(apiVersion))
  add(path_594753, "name", newJString(name))
  add(path_594753, "subscriptionId", newJString(subscriptionId))
  result = call_594752.call(path_594753, query_594754, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnostics* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594744(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnostics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594745,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_594746,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594755 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594757(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "diagnosticsName" in path, "`diagnosticsName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics/"),
               (kind: VariableSegment, value: "diagnosticsName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594756(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   diagnosticsName: JString (required)
  ##                  : Name of the diagnostics
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594758 = path.getOrDefault("resourceGroupName")
  valid_594758 = validateParameter(valid_594758, JString, required = true,
                                 default = nil)
  if valid_594758 != nil:
    section.add "resourceGroupName", valid_594758
  var valid_594759 = path.getOrDefault("name")
  valid_594759 = validateParameter(valid_594759, JString, required = true,
                                 default = nil)
  if valid_594759 != nil:
    section.add "name", valid_594759
  var valid_594760 = path.getOrDefault("subscriptionId")
  valid_594760 = validateParameter(valid_594760, JString, required = true,
                                 default = nil)
  if valid_594760 != nil:
    section.add "subscriptionId", valid_594760
  var valid_594761 = path.getOrDefault("diagnosticsName")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = nil)
  if valid_594761 != nil:
    section.add "diagnosticsName", valid_594761
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594762 = query.getOrDefault("api-version")
  valid_594762 = validateParameter(valid_594762, JString, required = true,
                                 default = nil)
  if valid_594762 != nil:
    section.add "api-version", valid_594762
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594763: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594755;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594763.validator(path, query, header, formData, body)
  let scheme = call_594763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594763.url(scheme.get, call_594763.host, call_594763.base,
                         call_594763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594763, url, valid)

proc call*(call_594764: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594755;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; diagnosticsName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   diagnosticsName: string (required)
  ##                  : Name of the diagnostics
  var path_594765 = newJObject()
  var query_594766 = newJObject()
  add(path_594765, "resourceGroupName", newJString(resourceGroupName))
  add(query_594766, "api-version", newJString(apiVersion))
  add(path_594765, "name", newJString(name))
  add(path_594765, "subscriptionId", newJString(subscriptionId))
  add(path_594765, "diagnosticsName", newJString(diagnosticsName))
  result = call_594764.call(path_594765, query_594766, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594755(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}", validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594756,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_594757,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594767 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594769(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594768(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594770 = path.getOrDefault("resourceGroupName")
  valid_594770 = validateParameter(valid_594770, JString, required = true,
                                 default = nil)
  if valid_594770 != nil:
    section.add "resourceGroupName", valid_594770
  var valid_594771 = path.getOrDefault("name")
  valid_594771 = validateParameter(valid_594771, JString, required = true,
                                 default = nil)
  if valid_594771 != nil:
    section.add "name", valid_594771
  var valid_594772 = path.getOrDefault("subscriptionId")
  valid_594772 = validateParameter(valid_594772, JString, required = true,
                                 default = nil)
  if valid_594772 != nil:
    section.add "subscriptionId", valid_594772
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594773 = query.getOrDefault("api-version")
  valid_594773 = validateParameter(valid_594773, JString, required = true,
                                 default = nil)
  if valid_594773 != nil:
    section.add "api-version", valid_594773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594774: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594767;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594774.validator(path, query, header, formData, body)
  let scheme = call_594774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594774.url(scheme.get, call_594774.host, call_594774.base,
                         call_594774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594774, url, valid)

proc call*(call_594775: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594767;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594776 = newJObject()
  var query_594777 = newJObject()
  add(path_594776, "resourceGroupName", newJString(resourceGroupName))
  add(query_594777, "api-version", newJString(apiVersion))
  add(path_594776, "name", newJString(name))
  add(path_594776, "subscriptionId", newJString(subscriptionId))
  result = call_594775.call(path_594776, query_594777, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594767(
    name: "hostingEnvironmentsGetHostingEnvironmentMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594768,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_594769,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetrics_594778 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentMetrics_594780(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetrics_594779(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594781 = path.getOrDefault("resourceGroupName")
  valid_594781 = validateParameter(valid_594781, JString, required = true,
                                 default = nil)
  if valid_594781 != nil:
    section.add "resourceGroupName", valid_594781
  var valid_594782 = path.getOrDefault("name")
  valid_594782 = validateParameter(valid_594782, JString, required = true,
                                 default = nil)
  if valid_594782 != nil:
    section.add "name", valid_594782
  var valid_594783 = path.getOrDefault("subscriptionId")
  valid_594783 = validateParameter(valid_594783, JString, required = true,
                                 default = nil)
  if valid_594783 != nil:
    section.add "subscriptionId", valid_594783
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594784 = query.getOrDefault("api-version")
  valid_594784 = validateParameter(valid_594784, JString, required = true,
                                 default = nil)
  if valid_594784 != nil:
    section.add "api-version", valid_594784
  var valid_594785 = query.getOrDefault("details")
  valid_594785 = validateParameter(valid_594785, JBool, required = false, default = nil)
  if valid_594785 != nil:
    section.add "details", valid_594785
  var valid_594786 = query.getOrDefault("$filter")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "$filter", valid_594786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594787: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_594778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594787.validator(path, query, header, formData, body)
  let scheme = call_594787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594787.url(scheme.get, call_594787.host, call_594787.base,
                         call_594787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594787, url, valid)

proc call*(call_594788: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_594778;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_594789 = newJObject()
  var query_594790 = newJObject()
  add(path_594789, "resourceGroupName", newJString(resourceGroupName))
  add(query_594790, "api-version", newJString(apiVersion))
  add(path_594789, "name", newJString(name))
  add(query_594790, "details", newJBool(details))
  add(path_594789, "subscriptionId", newJString(subscriptionId))
  add(query_594790, "$filter", newJString(Filter))
  result = call_594788.call(path_594789, query_594790, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMetrics_594778(
    name: "hostingEnvironmentsGetHostingEnvironmentMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentMetrics_594779,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetrics_594780,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePools_594791 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetMultiRolePools_594793(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePools_594792(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594794 = path.getOrDefault("resourceGroupName")
  valid_594794 = validateParameter(valid_594794, JString, required = true,
                                 default = nil)
  if valid_594794 != nil:
    section.add "resourceGroupName", valid_594794
  var valid_594795 = path.getOrDefault("name")
  valid_594795 = validateParameter(valid_594795, JString, required = true,
                                 default = nil)
  if valid_594795 != nil:
    section.add "name", valid_594795
  var valid_594796 = path.getOrDefault("subscriptionId")
  valid_594796 = validateParameter(valid_594796, JString, required = true,
                                 default = nil)
  if valid_594796 != nil:
    section.add "subscriptionId", valid_594796
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594797 = query.getOrDefault("api-version")
  valid_594797 = validateParameter(valid_594797, JString, required = true,
                                 default = nil)
  if valid_594797 != nil:
    section.add "api-version", valid_594797
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594798: Call_HostingEnvironmentsGetMultiRolePools_594791;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594798.validator(path, query, header, formData, body)
  let scheme = call_594798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594798.url(scheme.get, call_594798.host, call_594798.base,
                         call_594798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594798, url, valid)

proc call*(call_594799: Call_HostingEnvironmentsGetMultiRolePools_594791;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePools
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594800 = newJObject()
  var query_594801 = newJObject()
  add(path_594800, "resourceGroupName", newJString(resourceGroupName))
  add(query_594801, "api-version", newJString(apiVersion))
  add(path_594800, "name", newJString(name))
  add(path_594800, "subscriptionId", newJString(subscriptionId))
  result = call_594799.call(path_594800, query_594801, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePools* = Call_HostingEnvironmentsGetMultiRolePools_594791(
    name: "hostingEnvironmentsGetMultiRolePools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
    validator: validate_HostingEnvironmentsGetMultiRolePools_594792, base: "",
    url: url_HostingEnvironmentsGetMultiRolePools_594793, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_594813 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsCreateOrUpdateMultiRolePool_594815(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_594814(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594816 = path.getOrDefault("resourceGroupName")
  valid_594816 = validateParameter(valid_594816, JString, required = true,
                                 default = nil)
  if valid_594816 != nil:
    section.add "resourceGroupName", valid_594816
  var valid_594817 = path.getOrDefault("name")
  valid_594817 = validateParameter(valid_594817, JString, required = true,
                                 default = nil)
  if valid_594817 != nil:
    section.add "name", valid_594817
  var valid_594818 = path.getOrDefault("subscriptionId")
  valid_594818 = validateParameter(valid_594818, JString, required = true,
                                 default = nil)
  if valid_594818 != nil:
    section.add "subscriptionId", valid_594818
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594819 = query.getOrDefault("api-version")
  valid_594819 = validateParameter(valid_594819, JString, required = true,
                                 default = nil)
  if valid_594819 != nil:
    section.add "api-version", valid_594819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594821: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_594813;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594821.validator(path, query, header, formData, body)
  let scheme = call_594821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594821.url(scheme.get, call_594821.host, call_594821.base,
                         call_594821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594821, url, valid)

proc call*(call_594822: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_594813;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; multiRolePoolEnvelope: JsonNode): Recallable =
  ## hostingEnvironmentsCreateOrUpdateMultiRolePool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  var path_594823 = newJObject()
  var query_594824 = newJObject()
  var body_594825 = newJObject()
  add(path_594823, "resourceGroupName", newJString(resourceGroupName))
  add(query_594824, "api-version", newJString(apiVersion))
  add(path_594823, "name", newJString(name))
  add(path_594823, "subscriptionId", newJString(subscriptionId))
  if multiRolePoolEnvelope != nil:
    body_594825 = multiRolePoolEnvelope
  result = call_594822.call(path_594823, query_594824, nil, nil, body_594825)

var hostingEnvironmentsCreateOrUpdateMultiRolePool* = Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_594813(
    name: "hostingEnvironmentsCreateOrUpdateMultiRolePool",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_594814,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateMultiRolePool_594815,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePool_594802 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetMultiRolePool_594804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePool_594803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594805 = path.getOrDefault("resourceGroupName")
  valid_594805 = validateParameter(valid_594805, JString, required = true,
                                 default = nil)
  if valid_594805 != nil:
    section.add "resourceGroupName", valid_594805
  var valid_594806 = path.getOrDefault("name")
  valid_594806 = validateParameter(valid_594806, JString, required = true,
                                 default = nil)
  if valid_594806 != nil:
    section.add "name", valid_594806
  var valid_594807 = path.getOrDefault("subscriptionId")
  valid_594807 = validateParameter(valid_594807, JString, required = true,
                                 default = nil)
  if valid_594807 != nil:
    section.add "subscriptionId", valid_594807
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594808 = query.getOrDefault("api-version")
  valid_594808 = validateParameter(valid_594808, JString, required = true,
                                 default = nil)
  if valid_594808 != nil:
    section.add "api-version", valid_594808
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594809: Call_HostingEnvironmentsGetMultiRolePool_594802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594809.validator(path, query, header, formData, body)
  let scheme = call_594809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594809.url(scheme.get, call_594809.host, call_594809.base,
                         call_594809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594809, url, valid)

proc call*(call_594810: Call_HostingEnvironmentsGetMultiRolePool_594802;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594811 = newJObject()
  var query_594812 = newJObject()
  add(path_594811, "resourceGroupName", newJString(resourceGroupName))
  add(query_594812, "api-version", newJString(apiVersion))
  add(path_594811, "name", newJString(name))
  add(path_594811, "subscriptionId", newJString(subscriptionId))
  result = call_594810.call(path_594811, query_594812, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePool* = Call_HostingEnvironmentsGetMultiRolePool_594802(
    name: "hostingEnvironmentsGetMultiRolePool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsGetMultiRolePool_594803, base: "",
    url: url_HostingEnvironmentsGetMultiRolePool_594804, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594826 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594828(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594827(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool&gt;
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594829 = path.getOrDefault("resourceGroupName")
  valid_594829 = validateParameter(valid_594829, JString, required = true,
                                 default = nil)
  if valid_594829 != nil:
    section.add "resourceGroupName", valid_594829
  var valid_594830 = path.getOrDefault("name")
  valid_594830 = validateParameter(valid_594830, JString, required = true,
                                 default = nil)
  if valid_594830 != nil:
    section.add "name", valid_594830
  var valid_594831 = path.getOrDefault("subscriptionId")
  valid_594831 = validateParameter(valid_594831, JString, required = true,
                                 default = nil)
  if valid_594831 != nil:
    section.add "subscriptionId", valid_594831
  var valid_594832 = path.getOrDefault("instance")
  valid_594832 = validateParameter(valid_594832, JString, required = true,
                                 default = nil)
  if valid_594832 != nil:
    section.add "instance", valid_594832
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594833 = query.getOrDefault("api-version")
  valid_594833 = validateParameter(valid_594833, JString, required = true,
                                 default = nil)
  if valid_594833 != nil:
    section.add "api-version", valid_594833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594834: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594834.validator(path, query, header, formData, body)
  let scheme = call_594834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594834.url(scheme.get, call_594834.host, call_594834.base,
                         call_594834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594834, url, valid)

proc call*(call_594835: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594826;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instance: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool&gt;
  var path_594836 = newJObject()
  var query_594837 = newJObject()
  add(path_594836, "resourceGroupName", newJString(resourceGroupName))
  add(query_594837, "api-version", newJString(apiVersion))
  add(path_594836, "name", newJString(name))
  add(path_594836, "subscriptionId", newJString(subscriptionId))
  add(path_594836, "instance", newJString(instance))
  result = call_594835.call(path_594836, query_594837, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594826(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594827,
    base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_594828,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594838 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594840(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594839(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594841 = path.getOrDefault("resourceGroupName")
  valid_594841 = validateParameter(valid_594841, JString, required = true,
                                 default = nil)
  if valid_594841 != nil:
    section.add "resourceGroupName", valid_594841
  var valid_594842 = path.getOrDefault("name")
  valid_594842 = validateParameter(valid_594842, JString, required = true,
                                 default = nil)
  if valid_594842 != nil:
    section.add "name", valid_594842
  var valid_594843 = path.getOrDefault("subscriptionId")
  valid_594843 = validateParameter(valid_594843, JString, required = true,
                                 default = nil)
  if valid_594843 != nil:
    section.add "subscriptionId", valid_594843
  var valid_594844 = path.getOrDefault("instance")
  valid_594844 = validateParameter(valid_594844, JString, required = true,
                                 default = nil)
  if valid_594844 != nil:
    section.add "instance", valid_594844
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594845 = query.getOrDefault("api-version")
  valid_594845 = validateParameter(valid_594845, JString, required = true,
                                 default = nil)
  if valid_594845 != nil:
    section.add "api-version", valid_594845
  var valid_594846 = query.getOrDefault("details")
  valid_594846 = validateParameter(valid_594846, JBool, required = false, default = nil)
  if valid_594846 != nil:
    section.add "details", valid_594846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594847: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594847.validator(path, query, header, formData, body)
  let scheme = call_594847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594847.url(scheme.get, call_594847.host, call_594847.base,
                         call_594847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594847, url, valid)

proc call*(call_594848: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594838;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instance: string; details: bool = false): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool
  var path_594849 = newJObject()
  var query_594850 = newJObject()
  add(path_594849, "resourceGroupName", newJString(resourceGroupName))
  add(query_594850, "api-version", newJString(apiVersion))
  add(path_594849, "name", newJString(name))
  add(query_594850, "details", newJBool(details))
  add(path_594849, "subscriptionId", newJString(subscriptionId))
  add(path_594849, "instance", newJString(instance))
  result = call_594848.call(path_594849, query_594850, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetrics* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594838(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594839,
    base: "", url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_594840,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594851 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594853(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594852(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594854 = path.getOrDefault("resourceGroupName")
  valid_594854 = validateParameter(valid_594854, JString, required = true,
                                 default = nil)
  if valid_594854 != nil:
    section.add "resourceGroupName", valid_594854
  var valid_594855 = path.getOrDefault("name")
  valid_594855 = validateParameter(valid_594855, JString, required = true,
                                 default = nil)
  if valid_594855 != nil:
    section.add "name", valid_594855
  var valid_594856 = path.getOrDefault("subscriptionId")
  valid_594856 = validateParameter(valid_594856, JString, required = true,
                                 default = nil)
  if valid_594856 != nil:
    section.add "subscriptionId", valid_594856
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594857 = query.getOrDefault("api-version")
  valid_594857 = validateParameter(valid_594857, JString, required = true,
                                 default = nil)
  if valid_594857 != nil:
    section.add "api-version", valid_594857
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594858: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594858.validator(path, query, header, formData, body)
  let scheme = call_594858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594858.url(scheme.get, call_594858.host, call_594858.base,
                         call_594858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594858, url, valid)

proc call*(call_594859: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594851;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594860 = newJObject()
  var query_594861 = newJObject()
  add(path_594860, "resourceGroupName", newJString(resourceGroupName))
  add(query_594861, "api-version", newJString(apiVersion))
  add(path_594860, "name", newJString(name))
  add(path_594860, "subscriptionId", newJString(subscriptionId))
  result = call_594859.call(path_594860, query_594861, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594851(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594852,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_594853,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594862 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594864(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594863(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594865 = path.getOrDefault("resourceGroupName")
  valid_594865 = validateParameter(valid_594865, JString, required = true,
                                 default = nil)
  if valid_594865 != nil:
    section.add "resourceGroupName", valid_594865
  var valid_594866 = path.getOrDefault("name")
  valid_594866 = validateParameter(valid_594866, JString, required = true,
                                 default = nil)
  if valid_594866 != nil:
    section.add "name", valid_594866
  var valid_594867 = path.getOrDefault("subscriptionId")
  valid_594867 = validateParameter(valid_594867, JString, required = true,
                                 default = nil)
  if valid_594867 != nil:
    section.add "subscriptionId", valid_594867
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   endTime: JString
  ##          : End time of metrics query
  ##   timeGrain: JString
  ##            : Time granularity of metrics query
  ##   startTime: JString
  ##            : Beginning time of metrics query
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594868 = query.getOrDefault("api-version")
  valid_594868 = validateParameter(valid_594868, JString, required = true,
                                 default = nil)
  if valid_594868 != nil:
    section.add "api-version", valid_594868
  var valid_594869 = query.getOrDefault("details")
  valid_594869 = validateParameter(valid_594869, JBool, required = false, default = nil)
  if valid_594869 != nil:
    section.add "details", valid_594869
  var valid_594870 = query.getOrDefault("endTime")
  valid_594870 = validateParameter(valid_594870, JString, required = false,
                                 default = nil)
  if valid_594870 != nil:
    section.add "endTime", valid_594870
  var valid_594871 = query.getOrDefault("timeGrain")
  valid_594871 = validateParameter(valid_594871, JString, required = false,
                                 default = nil)
  if valid_594871 != nil:
    section.add "timeGrain", valid_594871
  var valid_594872 = query.getOrDefault("startTime")
  valid_594872 = validateParameter(valid_594872, JString, required = false,
                                 default = nil)
  if valid_594872 != nil:
    section.add "startTime", valid_594872
  var valid_594873 = query.getOrDefault("$filter")
  valid_594873 = validateParameter(valid_594873, JString, required = false,
                                 default = nil)
  if valid_594873 != nil:
    section.add "$filter", valid_594873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594874: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594862;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594874.validator(path, query, header, formData, body)
  let scheme = call_594874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594874.url(scheme.get, call_594874.host, call_594874.base,
                         call_594874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594874, url, valid)

proc call*(call_594875: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594862;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; endTime: string = "";
          timeGrain: string = ""; startTime: string = ""; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   endTime: string
  ##          : End time of metrics query
  ##   timeGrain: string
  ##            : Time granularity of metrics query
  ##   startTime: string
  ##            : Beginning time of metrics query
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_594876 = newJObject()
  var query_594877 = newJObject()
  add(path_594876, "resourceGroupName", newJString(resourceGroupName))
  add(query_594877, "api-version", newJString(apiVersion))
  add(path_594876, "name", newJString(name))
  add(query_594877, "details", newJBool(details))
  add(path_594876, "subscriptionId", newJString(subscriptionId))
  add(query_594877, "endTime", newJString(endTime))
  add(query_594877, "timeGrain", newJString(timeGrain))
  add(query_594877, "startTime", newJString(startTime))
  add(query_594877, "$filter", newJString(Filter))
  result = call_594875.call(path_594876, query_594877, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594862(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594863,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_594864,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolSkus_594878 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetMultiRolePoolSkus_594880(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolSkus_594879(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594881 = path.getOrDefault("resourceGroupName")
  valid_594881 = validateParameter(valid_594881, JString, required = true,
                                 default = nil)
  if valid_594881 != nil:
    section.add "resourceGroupName", valid_594881
  var valid_594882 = path.getOrDefault("name")
  valid_594882 = validateParameter(valid_594882, JString, required = true,
                                 default = nil)
  if valid_594882 != nil:
    section.add "name", valid_594882
  var valid_594883 = path.getOrDefault("subscriptionId")
  valid_594883 = validateParameter(valid_594883, JString, required = true,
                                 default = nil)
  if valid_594883 != nil:
    section.add "subscriptionId", valid_594883
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594884 = query.getOrDefault("api-version")
  valid_594884 = validateParameter(valid_594884, JString, required = true,
                                 default = nil)
  if valid_594884 != nil:
    section.add "api-version", valid_594884
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594885: Call_HostingEnvironmentsGetMultiRolePoolSkus_594878;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594885.validator(path, query, header, formData, body)
  let scheme = call_594885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594885.url(scheme.get, call_594885.host, call_594885.base,
                         call_594885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594885, url, valid)

proc call*(call_594886: Call_HostingEnvironmentsGetMultiRolePoolSkus_594878;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolSkus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594887 = newJObject()
  var query_594888 = newJObject()
  add(path_594887, "resourceGroupName", newJString(resourceGroupName))
  add(query_594888, "api-version", newJString(apiVersion))
  add(path_594887, "name", newJString(name))
  add(path_594887, "subscriptionId", newJString(subscriptionId))
  result = call_594886.call(path_594887, query_594888, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolSkus* = Call_HostingEnvironmentsGetMultiRolePoolSkus_594878(
    name: "hostingEnvironmentsGetMultiRolePoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
    validator: validate_HostingEnvironmentsGetMultiRolePoolSkus_594879, base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolSkus_594880,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594889 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594891(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594890(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594892 = path.getOrDefault("resourceGroupName")
  valid_594892 = validateParameter(valid_594892, JString, required = true,
                                 default = nil)
  if valid_594892 != nil:
    section.add "resourceGroupName", valid_594892
  var valid_594893 = path.getOrDefault("name")
  valid_594893 = validateParameter(valid_594893, JString, required = true,
                                 default = nil)
  if valid_594893 != nil:
    section.add "name", valid_594893
  var valid_594894 = path.getOrDefault("subscriptionId")
  valid_594894 = validateParameter(valid_594894, JString, required = true,
                                 default = nil)
  if valid_594894 != nil:
    section.add "subscriptionId", valid_594894
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594895 = query.getOrDefault("api-version")
  valid_594895 = validateParameter(valid_594895, JString, required = true,
                                 default = nil)
  if valid_594895 != nil:
    section.add "api-version", valid_594895
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594896: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594889;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594896.validator(path, query, header, formData, body)
  let scheme = call_594896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594896.url(scheme.get, call_594896.host, call_594896.base,
                         call_594896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594896, url, valid)

proc call*(call_594897: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594889;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594898 = newJObject()
  var query_594899 = newJObject()
  add(path_594898, "resourceGroupName", newJString(resourceGroupName))
  add(query_594899, "api-version", newJString(apiVersion))
  add(path_594898, "name", newJString(name))
  add(path_594898, "subscriptionId", newJString(subscriptionId))
  result = call_594897.call(path_594898, query_594899, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594889(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594890,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_594891,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperations_594900 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentOperations_594902(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperations_594901(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594903 = path.getOrDefault("resourceGroupName")
  valid_594903 = validateParameter(valid_594903, JString, required = true,
                                 default = nil)
  if valid_594903 != nil:
    section.add "resourceGroupName", valid_594903
  var valid_594904 = path.getOrDefault("name")
  valid_594904 = validateParameter(valid_594904, JString, required = true,
                                 default = nil)
  if valid_594904 != nil:
    section.add "name", valid_594904
  var valid_594905 = path.getOrDefault("subscriptionId")
  valid_594905 = validateParameter(valid_594905, JString, required = true,
                                 default = nil)
  if valid_594905 != nil:
    section.add "subscriptionId", valid_594905
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594906 = query.getOrDefault("api-version")
  valid_594906 = validateParameter(valid_594906, JString, required = true,
                                 default = nil)
  if valid_594906 != nil:
    section.add "api-version", valid_594906
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594907: Call_HostingEnvironmentsGetHostingEnvironmentOperations_594900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594907.validator(path, query, header, formData, body)
  let scheme = call_594907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594907.url(scheme.get, call_594907.host, call_594907.base,
                         call_594907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594907, url, valid)

proc call*(call_594908: Call_HostingEnvironmentsGetHostingEnvironmentOperations_594900;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperations
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594909 = newJObject()
  var query_594910 = newJObject()
  add(path_594909, "resourceGroupName", newJString(resourceGroupName))
  add(query_594910, "api-version", newJString(apiVersion))
  add(path_594909, "name", newJString(name))
  add(path_594909, "subscriptionId", newJString(subscriptionId))
  result = call_594908.call(path_594909, query_594910, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperations* = Call_HostingEnvironmentsGetHostingEnvironmentOperations_594900(
    name: "hostingEnvironmentsGetHostingEnvironmentOperations",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperations_594901,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperations_594902,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperation_594911 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentOperation_594913(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperation_594912(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594914 = path.getOrDefault("resourceGroupName")
  valid_594914 = validateParameter(valid_594914, JString, required = true,
                                 default = nil)
  if valid_594914 != nil:
    section.add "resourceGroupName", valid_594914
  var valid_594915 = path.getOrDefault("name")
  valid_594915 = validateParameter(valid_594915, JString, required = true,
                                 default = nil)
  if valid_594915 != nil:
    section.add "name", valid_594915
  var valid_594916 = path.getOrDefault("subscriptionId")
  valid_594916 = validateParameter(valid_594916, JString, required = true,
                                 default = nil)
  if valid_594916 != nil:
    section.add "subscriptionId", valid_594916
  var valid_594917 = path.getOrDefault("operationId")
  valid_594917 = validateParameter(valid_594917, JString, required = true,
                                 default = nil)
  if valid_594917 != nil:
    section.add "operationId", valid_594917
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594918 = query.getOrDefault("api-version")
  valid_594918 = validateParameter(valid_594918, JString, required = true,
                                 default = nil)
  if valid_594918 != nil:
    section.add "api-version", valid_594918
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594919: Call_HostingEnvironmentsGetHostingEnvironmentOperation_594911;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594919.validator(path, query, header, formData, body)
  let scheme = call_594919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594919.url(scheme.get, call_594919.host, call_594919.base,
                         call_594919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594919, url, valid)

proc call*(call_594920: Call_HostingEnvironmentsGetHostingEnvironmentOperation_594911;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : operation identifier GUID
  var path_594921 = newJObject()
  var query_594922 = newJObject()
  add(path_594921, "resourceGroupName", newJString(resourceGroupName))
  add(query_594922, "api-version", newJString(apiVersion))
  add(path_594921, "name", newJString(name))
  add(path_594921, "subscriptionId", newJString(subscriptionId))
  add(path_594921, "operationId", newJString(operationId))
  result = call_594920.call(path_594921, query_594922, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperation* = Call_HostingEnvironmentsGetHostingEnvironmentOperation_594911(
    name: "hostingEnvironmentsGetHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperation_594912,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperation_594913,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsRebootHostingEnvironment_594923 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsRebootHostingEnvironment_594925(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsRebootHostingEnvironment_594924(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594926 = path.getOrDefault("resourceGroupName")
  valid_594926 = validateParameter(valid_594926, JString, required = true,
                                 default = nil)
  if valid_594926 != nil:
    section.add "resourceGroupName", valid_594926
  var valid_594927 = path.getOrDefault("name")
  valid_594927 = validateParameter(valid_594927, JString, required = true,
                                 default = nil)
  if valid_594927 != nil:
    section.add "name", valid_594927
  var valid_594928 = path.getOrDefault("subscriptionId")
  valid_594928 = validateParameter(valid_594928, JString, required = true,
                                 default = nil)
  if valid_594928 != nil:
    section.add "subscriptionId", valid_594928
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594929 = query.getOrDefault("api-version")
  valid_594929 = validateParameter(valid_594929, JString, required = true,
                                 default = nil)
  if valid_594929 != nil:
    section.add "api-version", valid_594929
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594930: Call_HostingEnvironmentsRebootHostingEnvironment_594923;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594930.validator(path, query, header, formData, body)
  let scheme = call_594930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594930.url(scheme.get, call_594930.host, call_594930.base,
                         call_594930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594930, url, valid)

proc call*(call_594931: Call_HostingEnvironmentsRebootHostingEnvironment_594923;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsRebootHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594932 = newJObject()
  var query_594933 = newJObject()
  add(path_594932, "resourceGroupName", newJString(resourceGroupName))
  add(query_594933, "api-version", newJString(apiVersion))
  add(path_594932, "name", newJString(name))
  add(path_594932, "subscriptionId", newJString(subscriptionId))
  result = call_594931.call(path_594932, query_594933, nil, nil, nil)

var hostingEnvironmentsRebootHostingEnvironment* = Call_HostingEnvironmentsRebootHostingEnvironment_594923(
    name: "hostingEnvironmentsRebootHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
    validator: validate_HostingEnvironmentsRebootHostingEnvironment_594924,
    base: "", url: url_HostingEnvironmentsRebootHostingEnvironment_594925,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsResumeHostingEnvironment_594934 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsResumeHostingEnvironment_594936(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resume")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsResumeHostingEnvironment_594935(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594937 = path.getOrDefault("resourceGroupName")
  valid_594937 = validateParameter(valid_594937, JString, required = true,
                                 default = nil)
  if valid_594937 != nil:
    section.add "resourceGroupName", valid_594937
  var valid_594938 = path.getOrDefault("name")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = nil)
  if valid_594938 != nil:
    section.add "name", valid_594938
  var valid_594939 = path.getOrDefault("subscriptionId")
  valid_594939 = validateParameter(valid_594939, JString, required = true,
                                 default = nil)
  if valid_594939 != nil:
    section.add "subscriptionId", valid_594939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594940 = query.getOrDefault("api-version")
  valid_594940 = validateParameter(valid_594940, JString, required = true,
                                 default = nil)
  if valid_594940 != nil:
    section.add "api-version", valid_594940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594941: Call_HostingEnvironmentsResumeHostingEnvironment_594934;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594941.validator(path, query, header, formData, body)
  let scheme = call_594941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594941.url(scheme.get, call_594941.host, call_594941.base,
                         call_594941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594941, url, valid)

proc call*(call_594942: Call_HostingEnvironmentsResumeHostingEnvironment_594934;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsResumeHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594943 = newJObject()
  var query_594944 = newJObject()
  add(path_594943, "resourceGroupName", newJString(resourceGroupName))
  add(query_594944, "api-version", newJString(apiVersion))
  add(path_594943, "name", newJString(name))
  add(path_594943, "subscriptionId", newJString(subscriptionId))
  result = call_594942.call(path_594943, query_594944, nil, nil, nil)

var hostingEnvironmentsResumeHostingEnvironment* = Call_HostingEnvironmentsResumeHostingEnvironment_594934(
    name: "hostingEnvironmentsResumeHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
    validator: validate_HostingEnvironmentsResumeHostingEnvironment_594935,
    base: "", url: url_HostingEnvironmentsResumeHostingEnvironment_594936,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_594945 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentServerFarms_594947(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_594946(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594948 = path.getOrDefault("resourceGroupName")
  valid_594948 = validateParameter(valid_594948, JString, required = true,
                                 default = nil)
  if valid_594948 != nil:
    section.add "resourceGroupName", valid_594948
  var valid_594949 = path.getOrDefault("name")
  valid_594949 = validateParameter(valid_594949, JString, required = true,
                                 default = nil)
  if valid_594949 != nil:
    section.add "name", valid_594949
  var valid_594950 = path.getOrDefault("subscriptionId")
  valid_594950 = validateParameter(valid_594950, JString, required = true,
                                 default = nil)
  if valid_594950 != nil:
    section.add "subscriptionId", valid_594950
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594951 = query.getOrDefault("api-version")
  valid_594951 = validateParameter(valid_594951, JString, required = true,
                                 default = nil)
  if valid_594951 != nil:
    section.add "api-version", valid_594951
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594952: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_594945;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594952.validator(path, query, header, formData, body)
  let scheme = call_594952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594952.url(scheme.get, call_594952.host, call_594952.base,
                         call_594952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594952, url, valid)

proc call*(call_594953: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_594945;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594954 = newJObject()
  var query_594955 = newJObject()
  add(path_594954, "resourceGroupName", newJString(resourceGroupName))
  add(query_594955, "api-version", newJString(apiVersion))
  add(path_594954, "name", newJString(name))
  add(path_594954, "subscriptionId", newJString(subscriptionId))
  result = call_594953.call(path_594954, query_594955, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentServerFarms* = Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_594945(
    name: "hostingEnvironmentsGetHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_594946,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentServerFarms_594947,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentSites_594956 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentSites_594958(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentSites_594957(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594959 = path.getOrDefault("resourceGroupName")
  valid_594959 = validateParameter(valid_594959, JString, required = true,
                                 default = nil)
  if valid_594959 != nil:
    section.add "resourceGroupName", valid_594959
  var valid_594960 = path.getOrDefault("name")
  valid_594960 = validateParameter(valid_594960, JString, required = true,
                                 default = nil)
  if valid_594960 != nil:
    section.add "name", valid_594960
  var valid_594961 = path.getOrDefault("subscriptionId")
  valid_594961 = validateParameter(valid_594961, JString, required = true,
                                 default = nil)
  if valid_594961 != nil:
    section.add "subscriptionId", valid_594961
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_594962 = query.getOrDefault("propertiesToInclude")
  valid_594962 = validateParameter(valid_594962, JString, required = false,
                                 default = nil)
  if valid_594962 != nil:
    section.add "propertiesToInclude", valid_594962
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594963 = query.getOrDefault("api-version")
  valid_594963 = validateParameter(valid_594963, JString, required = true,
                                 default = nil)
  if valid_594963 != nil:
    section.add "api-version", valid_594963
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594964: Call_HostingEnvironmentsGetHostingEnvironmentSites_594956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594964.validator(path, query, header, formData, body)
  let scheme = call_594964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594964.url(scheme.get, call_594964.host, call_594964.base,
                         call_594964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594964, url, valid)

proc call*(call_594965: Call_HostingEnvironmentsGetHostingEnvironmentSites_594956;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; propertiesToInclude: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594966 = newJObject()
  var query_594967 = newJObject()
  add(path_594966, "resourceGroupName", newJString(resourceGroupName))
  add(query_594967, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_594967, "api-version", newJString(apiVersion))
  add(path_594966, "name", newJString(name))
  add(path_594966, "subscriptionId", newJString(subscriptionId))
  result = call_594965.call(path_594966, query_594967, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentSites* = Call_HostingEnvironmentsGetHostingEnvironmentSites_594956(
    name: "hostingEnvironmentsGetHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentSites_594957,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentSites_594958,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsSuspendHostingEnvironment_594968 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsSuspendHostingEnvironment_594970(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/suspend")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsSuspendHostingEnvironment_594969(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594971 = path.getOrDefault("resourceGroupName")
  valid_594971 = validateParameter(valid_594971, JString, required = true,
                                 default = nil)
  if valid_594971 != nil:
    section.add "resourceGroupName", valid_594971
  var valid_594972 = path.getOrDefault("name")
  valid_594972 = validateParameter(valid_594972, JString, required = true,
                                 default = nil)
  if valid_594972 != nil:
    section.add "name", valid_594972
  var valid_594973 = path.getOrDefault("subscriptionId")
  valid_594973 = validateParameter(valid_594973, JString, required = true,
                                 default = nil)
  if valid_594973 != nil:
    section.add "subscriptionId", valid_594973
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594974 = query.getOrDefault("api-version")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = nil)
  if valid_594974 != nil:
    section.add "api-version", valid_594974
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594975: Call_HostingEnvironmentsSuspendHostingEnvironment_594968;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594975.validator(path, query, header, formData, body)
  let scheme = call_594975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594975.url(scheme.get, call_594975.host, call_594975.base,
                         call_594975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594975, url, valid)

proc call*(call_594976: Call_HostingEnvironmentsSuspendHostingEnvironment_594968;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsSuspendHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_594977 = newJObject()
  var query_594978 = newJObject()
  add(path_594977, "resourceGroupName", newJString(resourceGroupName))
  add(query_594978, "api-version", newJString(apiVersion))
  add(path_594977, "name", newJString(name))
  add(path_594977, "subscriptionId", newJString(subscriptionId))
  result = call_594976.call(path_594977, query_594978, nil, nil, nil)

var hostingEnvironmentsSuspendHostingEnvironment* = Call_HostingEnvironmentsSuspendHostingEnvironment_594968(
    name: "hostingEnvironmentsSuspendHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
    validator: validate_HostingEnvironmentsSuspendHostingEnvironment_594969,
    base: "", url: url_HostingEnvironmentsSuspendHostingEnvironment_594970,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentUsages_594979 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentUsages_594981(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentUsages_594980(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594982 = path.getOrDefault("resourceGroupName")
  valid_594982 = validateParameter(valid_594982, JString, required = true,
                                 default = nil)
  if valid_594982 != nil:
    section.add "resourceGroupName", valid_594982
  var valid_594983 = path.getOrDefault("name")
  valid_594983 = validateParameter(valid_594983, JString, required = true,
                                 default = nil)
  if valid_594983 != nil:
    section.add "name", valid_594983
  var valid_594984 = path.getOrDefault("subscriptionId")
  valid_594984 = validateParameter(valid_594984, JString, required = true,
                                 default = nil)
  if valid_594984 != nil:
    section.add "subscriptionId", valid_594984
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594985 = query.getOrDefault("api-version")
  valid_594985 = validateParameter(valid_594985, JString, required = true,
                                 default = nil)
  if valid_594985 != nil:
    section.add "api-version", valid_594985
  var valid_594986 = query.getOrDefault("$filter")
  valid_594986 = validateParameter(valid_594986, JString, required = false,
                                 default = nil)
  if valid_594986 != nil:
    section.add "$filter", valid_594986
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594987: Call_HostingEnvironmentsGetHostingEnvironmentUsages_594979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594987.validator(path, query, header, formData, body)
  let scheme = call_594987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594987.url(scheme.get, call_594987.host, call_594987.base,
                         call_594987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594987, url, valid)

proc call*(call_594988: Call_HostingEnvironmentsGetHostingEnvironmentUsages_594979;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_594989 = newJObject()
  var query_594990 = newJObject()
  add(path_594989, "resourceGroupName", newJString(resourceGroupName))
  add(query_594990, "api-version", newJString(apiVersion))
  add(path_594989, "name", newJString(name))
  add(path_594989, "subscriptionId", newJString(subscriptionId))
  add(query_594990, "$filter", newJString(Filter))
  result = call_594988.call(path_594989, query_594990, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentUsages* = Call_HostingEnvironmentsGetHostingEnvironmentUsages_594979(
    name: "hostingEnvironmentsGetHostingEnvironmentUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentUsages_594980,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentUsages_594981,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594991 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594993(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594992(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594994 = path.getOrDefault("resourceGroupName")
  valid_594994 = validateParameter(valid_594994, JString, required = true,
                                 default = nil)
  if valid_594994 != nil:
    section.add "resourceGroupName", valid_594994
  var valid_594995 = path.getOrDefault("name")
  valid_594995 = validateParameter(valid_594995, JString, required = true,
                                 default = nil)
  if valid_594995 != nil:
    section.add "name", valid_594995
  var valid_594996 = path.getOrDefault("subscriptionId")
  valid_594996 = validateParameter(valid_594996, JString, required = true,
                                 default = nil)
  if valid_594996 != nil:
    section.add "subscriptionId", valid_594996
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594997 = query.getOrDefault("api-version")
  valid_594997 = validateParameter(valid_594997, JString, required = true,
                                 default = nil)
  if valid_594997 != nil:
    section.add "api-version", valid_594997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594998: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_594998.validator(path, query, header, formData, body)
  let scheme = call_594998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594998.url(scheme.get, call_594998.host, call_594998.base,
                         call_594998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594998, url, valid)

proc call*(call_594999: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594991;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebHostingPlans
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595000 = newJObject()
  var query_595001 = newJObject()
  add(path_595000, "resourceGroupName", newJString(resourceGroupName))
  add(query_595001, "api-version", newJString(apiVersion))
  add(path_595000, "name", newJString(name))
  add(path_595000, "subscriptionId", newJString(subscriptionId))
  result = call_594999.call(path_595000, query_595001, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebHostingPlans* = Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594991(
    name: "hostingEnvironmentsGetHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594992,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_594993,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPools_595002 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetWorkerPools_595004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPools_595003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595005 = path.getOrDefault("resourceGroupName")
  valid_595005 = validateParameter(valid_595005, JString, required = true,
                                 default = nil)
  if valid_595005 != nil:
    section.add "resourceGroupName", valid_595005
  var valid_595006 = path.getOrDefault("name")
  valid_595006 = validateParameter(valid_595006, JString, required = true,
                                 default = nil)
  if valid_595006 != nil:
    section.add "name", valid_595006
  var valid_595007 = path.getOrDefault("subscriptionId")
  valid_595007 = validateParameter(valid_595007, JString, required = true,
                                 default = nil)
  if valid_595007 != nil:
    section.add "subscriptionId", valid_595007
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595008 = query.getOrDefault("api-version")
  valid_595008 = validateParameter(valid_595008, JString, required = true,
                                 default = nil)
  if valid_595008 != nil:
    section.add "api-version", valid_595008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595009: Call_HostingEnvironmentsGetWorkerPools_595002;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595009.validator(path, query, header, formData, body)
  let scheme = call_595009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595009.url(scheme.get, call_595009.host, call_595009.base,
                         call_595009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595009, url, valid)

proc call*(call_595010: Call_HostingEnvironmentsGetWorkerPools_595002;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPools
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595011 = newJObject()
  var query_595012 = newJObject()
  add(path_595011, "resourceGroupName", newJString(resourceGroupName))
  add(query_595012, "api-version", newJString(apiVersion))
  add(path_595011, "name", newJString(name))
  add(path_595011, "subscriptionId", newJString(subscriptionId))
  result = call_595010.call(path_595011, query_595012, nil, nil, nil)

var hostingEnvironmentsGetWorkerPools* = Call_HostingEnvironmentsGetWorkerPools_595002(
    name: "hostingEnvironmentsGetWorkerPools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
    validator: validate_HostingEnvironmentsGetWorkerPools_595003, base: "",
    url: url_HostingEnvironmentsGetWorkerPools_595004, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateWorkerPool_595025 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsCreateOrUpdateWorkerPool_595027(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateWorkerPool_595026(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595028 = path.getOrDefault("resourceGroupName")
  valid_595028 = validateParameter(valid_595028, JString, required = true,
                                 default = nil)
  if valid_595028 != nil:
    section.add "resourceGroupName", valid_595028
  var valid_595029 = path.getOrDefault("name")
  valid_595029 = validateParameter(valid_595029, JString, required = true,
                                 default = nil)
  if valid_595029 != nil:
    section.add "name", valid_595029
  var valid_595030 = path.getOrDefault("workerPoolName")
  valid_595030 = validateParameter(valid_595030, JString, required = true,
                                 default = nil)
  if valid_595030 != nil:
    section.add "workerPoolName", valid_595030
  var valid_595031 = path.getOrDefault("subscriptionId")
  valid_595031 = validateParameter(valid_595031, JString, required = true,
                                 default = nil)
  if valid_595031 != nil:
    section.add "subscriptionId", valid_595031
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595032 = query.getOrDefault("api-version")
  valid_595032 = validateParameter(valid_595032, JString, required = true,
                                 default = nil)
  if valid_595032 != nil:
    section.add "api-version", valid_595032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595034: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_595025;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595034.validator(path, query, header, formData, body)
  let scheme = call_595034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595034.url(scheme.get, call_595034.host, call_595034.base,
                         call_595034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595034, url, valid)

proc call*(call_595035: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_595025;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string;
          workerPoolEnvelope: JsonNode): Recallable =
  ## hostingEnvironmentsCreateOrUpdateWorkerPool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  var path_595036 = newJObject()
  var query_595037 = newJObject()
  var body_595038 = newJObject()
  add(path_595036, "resourceGroupName", newJString(resourceGroupName))
  add(query_595037, "api-version", newJString(apiVersion))
  add(path_595036, "name", newJString(name))
  add(path_595036, "workerPoolName", newJString(workerPoolName))
  add(path_595036, "subscriptionId", newJString(subscriptionId))
  if workerPoolEnvelope != nil:
    body_595038 = workerPoolEnvelope
  result = call_595035.call(path_595036, query_595037, nil, nil, body_595038)

var hostingEnvironmentsCreateOrUpdateWorkerPool* = Call_HostingEnvironmentsCreateOrUpdateWorkerPool_595025(
    name: "hostingEnvironmentsCreateOrUpdateWorkerPool", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsCreateOrUpdateWorkerPool_595026,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateWorkerPool_595027,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPool_595013 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetWorkerPool_595015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPool_595014(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595016 = path.getOrDefault("resourceGroupName")
  valid_595016 = validateParameter(valid_595016, JString, required = true,
                                 default = nil)
  if valid_595016 != nil:
    section.add "resourceGroupName", valid_595016
  var valid_595017 = path.getOrDefault("name")
  valid_595017 = validateParameter(valid_595017, JString, required = true,
                                 default = nil)
  if valid_595017 != nil:
    section.add "name", valid_595017
  var valid_595018 = path.getOrDefault("workerPoolName")
  valid_595018 = validateParameter(valid_595018, JString, required = true,
                                 default = nil)
  if valid_595018 != nil:
    section.add "workerPoolName", valid_595018
  var valid_595019 = path.getOrDefault("subscriptionId")
  valid_595019 = validateParameter(valid_595019, JString, required = true,
                                 default = nil)
  if valid_595019 != nil:
    section.add "subscriptionId", valid_595019
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595020 = query.getOrDefault("api-version")
  valid_595020 = validateParameter(valid_595020, JString, required = true,
                                 default = nil)
  if valid_595020 != nil:
    section.add "api-version", valid_595020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595021: Call_HostingEnvironmentsGetWorkerPool_595013;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595021.validator(path, query, header, formData, body)
  let scheme = call_595021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595021.url(scheme.get, call_595021.host, call_595021.base,
                         call_595021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595021, url, valid)

proc call*(call_595022: Call_HostingEnvironmentsGetWorkerPool_595013;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595023 = newJObject()
  var query_595024 = newJObject()
  add(path_595023, "resourceGroupName", newJString(resourceGroupName))
  add(query_595024, "api-version", newJString(apiVersion))
  add(path_595023, "name", newJString(name))
  add(path_595023, "workerPoolName", newJString(workerPoolName))
  add(path_595023, "subscriptionId", newJString(subscriptionId))
  result = call_595022.call(path_595023, query_595024, nil, nil, nil)

var hostingEnvironmentsGetWorkerPool* = Call_HostingEnvironmentsGetWorkerPool_595013(
    name: "hostingEnvironmentsGetWorkerPool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsGetWorkerPool_595014, base: "",
    url: url_HostingEnvironmentsGetWorkerPool_595015, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595039 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595041(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595040(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595042 = path.getOrDefault("resourceGroupName")
  valid_595042 = validateParameter(valid_595042, JString, required = true,
                                 default = nil)
  if valid_595042 != nil:
    section.add "resourceGroupName", valid_595042
  var valid_595043 = path.getOrDefault("name")
  valid_595043 = validateParameter(valid_595043, JString, required = true,
                                 default = nil)
  if valid_595043 != nil:
    section.add "name", valid_595043
  var valid_595044 = path.getOrDefault("workerPoolName")
  valid_595044 = validateParameter(valid_595044, JString, required = true,
                                 default = nil)
  if valid_595044 != nil:
    section.add "workerPoolName", valid_595044
  var valid_595045 = path.getOrDefault("subscriptionId")
  valid_595045 = validateParameter(valid_595045, JString, required = true,
                                 default = nil)
  if valid_595045 != nil:
    section.add "subscriptionId", valid_595045
  var valid_595046 = path.getOrDefault("instance")
  valid_595046 = validateParameter(valid_595046, JString, required = true,
                                 default = nil)
  if valid_595046 != nil:
    section.add "instance", valid_595046
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595047 = query.getOrDefault("api-version")
  valid_595047 = validateParameter(valid_595047, JString, required = true,
                                 default = nil)
  if valid_595047 != nil:
    section.add "api-version", valid_595047
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595048: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595048.validator(path, query, header, formData, body)
  let scheme = call_595048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595048.url(scheme.get, call_595048.host, call_595048.base,
                         call_595048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595048, url, valid)

proc call*(call_595049: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595039;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; instance: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  var path_595050 = newJObject()
  var query_595051 = newJObject()
  add(path_595050, "resourceGroupName", newJString(resourceGroupName))
  add(query_595051, "api-version", newJString(apiVersion))
  add(path_595050, "name", newJString(name))
  add(path_595050, "workerPoolName", newJString(workerPoolName))
  add(path_595050, "subscriptionId", newJString(subscriptionId))
  add(path_595050, "instance", newJString(instance))
  result = call_595049.call(path_595050, query_595051, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595039(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595040,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_595041,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595052 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595054(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595053(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595055 = path.getOrDefault("resourceGroupName")
  valid_595055 = validateParameter(valid_595055, JString, required = true,
                                 default = nil)
  if valid_595055 != nil:
    section.add "resourceGroupName", valid_595055
  var valid_595056 = path.getOrDefault("name")
  valid_595056 = validateParameter(valid_595056, JString, required = true,
                                 default = nil)
  if valid_595056 != nil:
    section.add "name", valid_595056
  var valid_595057 = path.getOrDefault("workerPoolName")
  valid_595057 = validateParameter(valid_595057, JString, required = true,
                                 default = nil)
  if valid_595057 != nil:
    section.add "workerPoolName", valid_595057
  var valid_595058 = path.getOrDefault("subscriptionId")
  valid_595058 = validateParameter(valid_595058, JString, required = true,
                                 default = nil)
  if valid_595058 != nil:
    section.add "subscriptionId", valid_595058
  var valid_595059 = path.getOrDefault("instance")
  valid_595059 = validateParameter(valid_595059, JString, required = true,
                                 default = nil)
  if valid_595059 != nil:
    section.add "instance", valid_595059
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595060 = query.getOrDefault("api-version")
  valid_595060 = validateParameter(valid_595060, JString, required = true,
                                 default = nil)
  if valid_595060 != nil:
    section.add "api-version", valid_595060
  var valid_595061 = query.getOrDefault("details")
  valid_595061 = validateParameter(valid_595061, JBool, required = false, default = nil)
  if valid_595061 != nil:
    section.add "details", valid_595061
  var valid_595062 = query.getOrDefault("$filter")
  valid_595062 = validateParameter(valid_595062, JString, required = false,
                                 default = nil)
  if valid_595062 != nil:
    section.add "$filter", valid_595062
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595063: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595063.validator(path, query, header, formData, body)
  let scheme = call_595063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595063.url(scheme.get, call_595063.host, call_595063.base,
                         call_595063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595063, url, valid)

proc call*(call_595064: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595052;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; instance: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595065 = newJObject()
  var query_595066 = newJObject()
  add(path_595065, "resourceGroupName", newJString(resourceGroupName))
  add(query_595066, "api-version", newJString(apiVersion))
  add(path_595065, "name", newJString(name))
  add(query_595066, "details", newJBool(details))
  add(path_595065, "workerPoolName", newJString(workerPoolName))
  add(path_595065, "subscriptionId", newJString(subscriptionId))
  add(path_595065, "instance", newJString(instance))
  add(query_595066, "$filter", newJString(Filter))
  result = call_595064.call(path_595065, query_595066, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetrics* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595052(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595053,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_595054,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595067 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595069(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595068(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595070 = path.getOrDefault("resourceGroupName")
  valid_595070 = validateParameter(valid_595070, JString, required = true,
                                 default = nil)
  if valid_595070 != nil:
    section.add "resourceGroupName", valid_595070
  var valid_595071 = path.getOrDefault("name")
  valid_595071 = validateParameter(valid_595071, JString, required = true,
                                 default = nil)
  if valid_595071 != nil:
    section.add "name", valid_595071
  var valid_595072 = path.getOrDefault("workerPoolName")
  valid_595072 = validateParameter(valid_595072, JString, required = true,
                                 default = nil)
  if valid_595072 != nil:
    section.add "workerPoolName", valid_595072
  var valid_595073 = path.getOrDefault("subscriptionId")
  valid_595073 = validateParameter(valid_595073, JString, required = true,
                                 default = nil)
  if valid_595073 != nil:
    section.add "subscriptionId", valid_595073
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595074 = query.getOrDefault("api-version")
  valid_595074 = validateParameter(valid_595074, JString, required = true,
                                 default = nil)
  if valid_595074 != nil:
    section.add "api-version", valid_595074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595075: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595075.validator(path, query, header, formData, body)
  let scheme = call_595075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595075.url(scheme.get, call_595075.host, call_595075.base,
                         call_595075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595075, url, valid)

proc call*(call_595076: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595067;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595077 = newJObject()
  var query_595078 = newJObject()
  add(path_595077, "resourceGroupName", newJString(resourceGroupName))
  add(query_595078, "api-version", newJString(apiVersion))
  add(path_595077, "name", newJString(name))
  add(path_595077, "workerPoolName", newJString(workerPoolName))
  add(path_595077, "subscriptionId", newJString(subscriptionId))
  result = call_595076.call(path_595077, query_595078, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595067(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595068,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_595069,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595079 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595081(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595080(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595082 = path.getOrDefault("resourceGroupName")
  valid_595082 = validateParameter(valid_595082, JString, required = true,
                                 default = nil)
  if valid_595082 != nil:
    section.add "resourceGroupName", valid_595082
  var valid_595083 = path.getOrDefault("name")
  valid_595083 = validateParameter(valid_595083, JString, required = true,
                                 default = nil)
  if valid_595083 != nil:
    section.add "name", valid_595083
  var valid_595084 = path.getOrDefault("workerPoolName")
  valid_595084 = validateParameter(valid_595084, JString, required = true,
                                 default = nil)
  if valid_595084 != nil:
    section.add "workerPoolName", valid_595084
  var valid_595085 = path.getOrDefault("subscriptionId")
  valid_595085 = validateParameter(valid_595085, JString, required = true,
                                 default = nil)
  if valid_595085 != nil:
    section.add "subscriptionId", valid_595085
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595086 = query.getOrDefault("api-version")
  valid_595086 = validateParameter(valid_595086, JString, required = true,
                                 default = nil)
  if valid_595086 != nil:
    section.add "api-version", valid_595086
  var valid_595087 = query.getOrDefault("details")
  valid_595087 = validateParameter(valid_595087, JBool, required = false, default = nil)
  if valid_595087 != nil:
    section.add "details", valid_595087
  var valid_595088 = query.getOrDefault("$filter")
  valid_595088 = validateParameter(valid_595088, JString, required = false,
                                 default = nil)
  if valid_595088 != nil:
    section.add "$filter", valid_595088
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595089: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595079;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595089.validator(path, query, header, formData, body)
  let scheme = call_595089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595089.url(scheme.get, call_595089.host, call_595089.base,
                         call_595089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595089, url, valid)

proc call*(call_595090: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595079;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; details: bool = false;
          Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595091 = newJObject()
  var query_595092 = newJObject()
  add(path_595091, "resourceGroupName", newJString(resourceGroupName))
  add(query_595092, "api-version", newJString(apiVersion))
  add(path_595091, "name", newJString(name))
  add(query_595092, "details", newJBool(details))
  add(path_595091, "workerPoolName", newJString(workerPoolName))
  add(path_595091, "subscriptionId", newJString(subscriptionId))
  add(query_595092, "$filter", newJString(Filter))
  result = call_595090.call(path_595091, query_595092, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595079(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595080,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_595081,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolSkus_595093 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetWorkerPoolSkus_595095(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolSkus_595094(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595096 = path.getOrDefault("resourceGroupName")
  valid_595096 = validateParameter(valid_595096, JString, required = true,
                                 default = nil)
  if valid_595096 != nil:
    section.add "resourceGroupName", valid_595096
  var valid_595097 = path.getOrDefault("name")
  valid_595097 = validateParameter(valid_595097, JString, required = true,
                                 default = nil)
  if valid_595097 != nil:
    section.add "name", valid_595097
  var valid_595098 = path.getOrDefault("workerPoolName")
  valid_595098 = validateParameter(valid_595098, JString, required = true,
                                 default = nil)
  if valid_595098 != nil:
    section.add "workerPoolName", valid_595098
  var valid_595099 = path.getOrDefault("subscriptionId")
  valid_595099 = validateParameter(valid_595099, JString, required = true,
                                 default = nil)
  if valid_595099 != nil:
    section.add "subscriptionId", valid_595099
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595100 = query.getOrDefault("api-version")
  valid_595100 = validateParameter(valid_595100, JString, required = true,
                                 default = nil)
  if valid_595100 != nil:
    section.add "api-version", valid_595100
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595101: Call_HostingEnvironmentsGetWorkerPoolSkus_595093;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595101.validator(path, query, header, formData, body)
  let scheme = call_595101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595101.url(scheme.get, call_595101.host, call_595101.base,
                         call_595101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595101, url, valid)

proc call*(call_595102: Call_HostingEnvironmentsGetWorkerPoolSkus_595093;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolSkus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595103 = newJObject()
  var query_595104 = newJObject()
  add(path_595103, "resourceGroupName", newJString(resourceGroupName))
  add(query_595104, "api-version", newJString(apiVersion))
  add(path_595103, "name", newJString(name))
  add(path_595103, "workerPoolName", newJString(workerPoolName))
  add(path_595103, "subscriptionId", newJString(subscriptionId))
  result = call_595102.call(path_595103, query_595104, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolSkus* = Call_HostingEnvironmentsGetWorkerPoolSkus_595093(
    name: "hostingEnvironmentsGetWorkerPoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
    validator: validate_HostingEnvironmentsGetWorkerPoolSkus_595094, base: "",
    url: url_HostingEnvironmentsGetWorkerPoolSkus_595095, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595105 = ref object of OpenApiRestCall_593421
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595107(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595106(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595108 = path.getOrDefault("resourceGroupName")
  valid_595108 = validateParameter(valid_595108, JString, required = true,
                                 default = nil)
  if valid_595108 != nil:
    section.add "resourceGroupName", valid_595108
  var valid_595109 = path.getOrDefault("name")
  valid_595109 = validateParameter(valid_595109, JString, required = true,
                                 default = nil)
  if valid_595109 != nil:
    section.add "name", valid_595109
  var valid_595110 = path.getOrDefault("workerPoolName")
  valid_595110 = validateParameter(valid_595110, JString, required = true,
                                 default = nil)
  if valid_595110 != nil:
    section.add "workerPoolName", valid_595110
  var valid_595111 = path.getOrDefault("subscriptionId")
  valid_595111 = validateParameter(valid_595111, JString, required = true,
                                 default = nil)
  if valid_595111 != nil:
    section.add "subscriptionId", valid_595111
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595112 = query.getOrDefault("api-version")
  valid_595112 = validateParameter(valid_595112, JString, required = true,
                                 default = nil)
  if valid_595112 != nil:
    section.add "api-version", valid_595112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595113: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595113.validator(path, query, header, formData, body)
  let scheme = call_595113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595113.url(scheme.get, call_595113.host, call_595113.base,
                         call_595113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595113, url, valid)

proc call*(call_595114: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595105;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595115 = newJObject()
  var query_595116 = newJObject()
  add(path_595115, "resourceGroupName", newJString(resourceGroupName))
  add(query_595116, "api-version", newJString(apiVersion))
  add(path_595115, "name", newJString(name))
  add(path_595115, "workerPoolName", newJString(workerPoolName))
  add(path_595115, "subscriptionId", newJString(subscriptionId))
  result = call_595114.call(path_595115, query_595116, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595105(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595106,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_595107,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595117 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595119(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595118(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595120 = path.getOrDefault("resourceGroupName")
  valid_595120 = validateParameter(valid_595120, JString, required = true,
                                 default = nil)
  if valid_595120 != nil:
    section.add "resourceGroupName", valid_595120
  var valid_595121 = path.getOrDefault("subscriptionId")
  valid_595121 = validateParameter(valid_595121, JString, required = true,
                                 default = nil)
  if valid_595121 != nil:
    section.add "subscriptionId", valid_595121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595122 = query.getOrDefault("api-version")
  valid_595122 = validateParameter(valid_595122, JString, required = true,
                                 default = nil)
  if valid_595122 != nil:
    section.add "api-version", valid_595122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595123: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595117;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595123.validator(path, query, header, formData, body)
  let scheme = call_595123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595123.url(scheme.get, call_595123.host, call_595123.base,
                         call_595123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595123, url, valid)

proc call*(call_595124: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595117;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595125 = newJObject()
  var query_595126 = newJObject()
  add(path_595125, "resourceGroupName", newJString(resourceGroupName))
  add(query_595126, "api-version", newJString(apiVersion))
  add(path_595125, "subscriptionId", newJString(subscriptionId))
  result = call_595124.call(path_595125, query_595126, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironments* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595117(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironments",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595118,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_595119,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595138 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595140(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595139(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595141 = path.getOrDefault("resourceGroupName")
  valid_595141 = validateParameter(valid_595141, JString, required = true,
                                 default = nil)
  if valid_595141 != nil:
    section.add "resourceGroupName", valid_595141
  var valid_595142 = path.getOrDefault("name")
  valid_595142 = validateParameter(valid_595142, JString, required = true,
                                 default = nil)
  if valid_595142 != nil:
    section.add "name", valid_595142
  var valid_595143 = path.getOrDefault("subscriptionId")
  valid_595143 = validateParameter(valid_595143, JString, required = true,
                                 default = nil)
  if valid_595143 != nil:
    section.add "subscriptionId", valid_595143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595144 = query.getOrDefault("api-version")
  valid_595144 = validateParameter(valid_595144, JString, required = true,
                                 default = nil)
  if valid_595144 != nil:
    section.add "api-version", valid_595144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595146: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595138;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595146.validator(path, query, header, formData, body)
  let scheme = call_595146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595146.url(scheme.get, call_595146.host, call_595146.base,
                         call_595146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595146, url, valid)

proc call*(call_595147: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595138;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; ManagedHostingEnvironmentEnvelope: JsonNode): Recallable =
  ## managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  var path_595148 = newJObject()
  var query_595149 = newJObject()
  var body_595150 = newJObject()
  add(path_595148, "resourceGroupName", newJString(resourceGroupName))
  add(query_595149, "api-version", newJString(apiVersion))
  add(path_595148, "name", newJString(name))
  add(path_595148, "subscriptionId", newJString(subscriptionId))
  if ManagedHostingEnvironmentEnvelope != nil:
    body_595150 = ManagedHostingEnvironmentEnvelope
  result = call_595147.call(path_595148, query_595149, nil, nil, body_595150)

var managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595138(
    name: "managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595139,
    base: "",
    url: url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_595140,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595127 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595129(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595128(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595130 = path.getOrDefault("resourceGroupName")
  valid_595130 = validateParameter(valid_595130, JString, required = true,
                                 default = nil)
  if valid_595130 != nil:
    section.add "resourceGroupName", valid_595130
  var valid_595131 = path.getOrDefault("name")
  valid_595131 = validateParameter(valid_595131, JString, required = true,
                                 default = nil)
  if valid_595131 != nil:
    section.add "name", valid_595131
  var valid_595132 = path.getOrDefault("subscriptionId")
  valid_595132 = validateParameter(valid_595132, JString, required = true,
                                 default = nil)
  if valid_595132 != nil:
    section.add "subscriptionId", valid_595132
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595133 = query.getOrDefault("api-version")
  valid_595133 = validateParameter(valid_595133, JString, required = true,
                                 default = nil)
  if valid_595133 != nil:
    section.add "api-version", valid_595133
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595134: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595127;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595134.validator(path, query, header, formData, body)
  let scheme = call_595134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595134.url(scheme.get, call_595134.host, call_595134.base,
                         call_595134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595134, url, valid)

proc call*(call_595135: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595127;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595136 = newJObject()
  var query_595137 = newJObject()
  add(path_595136, "resourceGroupName", newJString(resourceGroupName))
  add(query_595137, "api-version", newJString(apiVersion))
  add(path_595136, "name", newJString(name))
  add(path_595136, "subscriptionId", newJString(subscriptionId))
  result = call_595135.call(path_595136, query_595137, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595127(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironment",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
    validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595128,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_595129,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595151 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595153(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595152(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595154 = path.getOrDefault("resourceGroupName")
  valid_595154 = validateParameter(valid_595154, JString, required = true,
                                 default = nil)
  if valid_595154 != nil:
    section.add "resourceGroupName", valid_595154
  var valid_595155 = path.getOrDefault("name")
  valid_595155 = validateParameter(valid_595155, JString, required = true,
                                 default = nil)
  if valid_595155 != nil:
    section.add "name", valid_595155
  var valid_595156 = path.getOrDefault("subscriptionId")
  valid_595156 = validateParameter(valid_595156, JString, required = true,
                                 default = nil)
  if valid_595156 != nil:
    section.add "subscriptionId", valid_595156
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the managed hosting environment contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595157 = query.getOrDefault("api-version")
  valid_595157 = validateParameter(valid_595157, JString, required = true,
                                 default = nil)
  if valid_595157 != nil:
    section.add "api-version", valid_595157
  var valid_595158 = query.getOrDefault("forceDelete")
  valid_595158 = validateParameter(valid_595158, JBool, required = false, default = nil)
  if valid_595158 != nil:
    section.add "forceDelete", valid_595158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595159: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595151;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595159.validator(path, query, header, formData, body)
  let scheme = call_595159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595159.url(scheme.get, call_595159.host, call_595159.base,
                         call_595159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595159, url, valid)

proc call*(call_595160: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595151;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; forceDelete: bool = false): Recallable =
  ## managedHostingEnvironmentsDeleteManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   forceDelete: bool
  ##              : Delete even if the managed hosting environment contains resources
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595161 = newJObject()
  var query_595162 = newJObject()
  add(path_595161, "resourceGroupName", newJString(resourceGroupName))
  add(query_595162, "api-version", newJString(apiVersion))
  add(path_595161, "name", newJString(name))
  add(query_595162, "forceDelete", newJBool(forceDelete))
  add(path_595161, "subscriptionId", newJString(subscriptionId))
  result = call_595160.call(path_595161, query_595162, nil, nil, nil)

var managedHostingEnvironmentsDeleteManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595151(
    name: "managedHostingEnvironmentsDeleteManagedHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595152,
    base: "", url: url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_595153,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595163 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595165(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595164(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595166 = path.getOrDefault("resourceGroupName")
  valid_595166 = validateParameter(valid_595166, JString, required = true,
                                 default = nil)
  if valid_595166 != nil:
    section.add "resourceGroupName", valid_595166
  var valid_595167 = path.getOrDefault("name")
  valid_595167 = validateParameter(valid_595167, JString, required = true,
                                 default = nil)
  if valid_595167 != nil:
    section.add "name", valid_595167
  var valid_595168 = path.getOrDefault("subscriptionId")
  valid_595168 = validateParameter(valid_595168, JString, required = true,
                                 default = nil)
  if valid_595168 != nil:
    section.add "subscriptionId", valid_595168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595169 = query.getOrDefault("api-version")
  valid_595169 = validateParameter(valid_595169, JString, required = true,
                                 default = nil)
  if valid_595169 != nil:
    section.add "api-version", valid_595169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595170: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595170.validator(path, query, header, formData, body)
  let scheme = call_595170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595170.url(scheme.get, call_595170.host, call_595170.base,
                         call_595170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595170, url, valid)

proc call*(call_595171: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595163;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentVips
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595172 = newJObject()
  var query_595173 = newJObject()
  add(path_595172, "resourceGroupName", newJString(resourceGroupName))
  add(query_595173, "api-version", newJString(apiVersion))
  add(path_595172, "name", newJString(name))
  add(path_595172, "subscriptionId", newJString(subscriptionId))
  result = call_595171.call(path_595172, query_595173, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentVips* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595163(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595164,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_595165,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595174 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595176(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595175(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595177 = path.getOrDefault("resourceGroupName")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = nil)
  if valid_595177 != nil:
    section.add "resourceGroupName", valid_595177
  var valid_595178 = path.getOrDefault("name")
  valid_595178 = validateParameter(valid_595178, JString, required = true,
                                 default = nil)
  if valid_595178 != nil:
    section.add "name", valid_595178
  var valid_595179 = path.getOrDefault("subscriptionId")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = nil)
  if valid_595179 != nil:
    section.add "subscriptionId", valid_595179
  var valid_595180 = path.getOrDefault("operationId")
  valid_595180 = validateParameter(valid_595180, JString, required = true,
                                 default = nil)
  if valid_595180 != nil:
    section.add "operationId", valid_595180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595181 = query.getOrDefault("api-version")
  valid_595181 = validateParameter(valid_595181, JString, required = true,
                                 default = nil)
  if valid_595181 != nil:
    section.add "api-version", valid_595181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595182: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595182.validator(path, query, header, formData, body)
  let scheme = call_595182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595182.url(scheme.get, call_595182.host, call_595182.base,
                         call_595182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595182, url, valid)

proc call*(call_595183: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595174;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : operation identifier GUID
  var path_595184 = newJObject()
  var query_595185 = newJObject()
  add(path_595184, "resourceGroupName", newJString(resourceGroupName))
  add(query_595185, "api-version", newJString(apiVersion))
  add(path_595184, "name", newJString(name))
  add(path_595184, "subscriptionId", newJString(subscriptionId))
  add(path_595184, "operationId", newJString(operationId))
  result = call_595183.call(path_595184, query_595185, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentOperation* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595174(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595175,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_595176,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595186 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595188(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595187(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595189 = path.getOrDefault("resourceGroupName")
  valid_595189 = validateParameter(valid_595189, JString, required = true,
                                 default = nil)
  if valid_595189 != nil:
    section.add "resourceGroupName", valid_595189
  var valid_595190 = path.getOrDefault("name")
  valid_595190 = validateParameter(valid_595190, JString, required = true,
                                 default = nil)
  if valid_595190 != nil:
    section.add "name", valid_595190
  var valid_595191 = path.getOrDefault("subscriptionId")
  valid_595191 = validateParameter(valid_595191, JString, required = true,
                                 default = nil)
  if valid_595191 != nil:
    section.add "subscriptionId", valid_595191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595192 = query.getOrDefault("api-version")
  valid_595192 = validateParameter(valid_595192, JString, required = true,
                                 default = nil)
  if valid_595192 != nil:
    section.add "api-version", valid_595192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595193: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595193.validator(path, query, header, formData, body)
  let scheme = call_595193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595193.url(scheme.get, call_595193.host, call_595193.base,
                         call_595193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595193, url, valid)

proc call*(call_595194: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595186;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595195 = newJObject()
  var query_595196 = newJObject()
  add(path_595195, "resourceGroupName", newJString(resourceGroupName))
  add(query_595196, "api-version", newJString(apiVersion))
  add(path_595195, "name", newJString(name))
  add(path_595195, "subscriptionId", newJString(subscriptionId))
  result = call_595194.call(path_595195, query_595196, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595186(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595187,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_595188,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595197 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595199(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595198(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595200 = path.getOrDefault("resourceGroupName")
  valid_595200 = validateParameter(valid_595200, JString, required = true,
                                 default = nil)
  if valid_595200 != nil:
    section.add "resourceGroupName", valid_595200
  var valid_595201 = path.getOrDefault("name")
  valid_595201 = validateParameter(valid_595201, JString, required = true,
                                 default = nil)
  if valid_595201 != nil:
    section.add "name", valid_595201
  var valid_595202 = path.getOrDefault("subscriptionId")
  valid_595202 = validateParameter(valid_595202, JString, required = true,
                                 default = nil)
  if valid_595202 != nil:
    section.add "subscriptionId", valid_595202
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_595203 = query.getOrDefault("propertiesToInclude")
  valid_595203 = validateParameter(valid_595203, JString, required = false,
                                 default = nil)
  if valid_595203 != nil:
    section.add "propertiesToInclude", valid_595203
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595204 = query.getOrDefault("api-version")
  valid_595204 = validateParameter(valid_595204, JString, required = true,
                                 default = nil)
  if valid_595204 != nil:
    section.add "api-version", valid_595204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595205: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595205.validator(path, query, header, formData, body)
  let scheme = call_595205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595205.url(scheme.get, call_595205.host, call_595205.base,
                         call_595205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595205, url, valid)

proc call*(call_595206: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595197;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; propertiesToInclude: string = ""): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595207 = newJObject()
  var query_595208 = newJObject()
  add(path_595207, "resourceGroupName", newJString(resourceGroupName))
  add(query_595208, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_595208, "api-version", newJString(apiVersion))
  add(path_595207, "name", newJString(name))
  add(path_595207, "subscriptionId", newJString(subscriptionId))
  result = call_595206.call(path_595207, query_595208, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentSites* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595197(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595198,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_595199,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595209 = ref object of OpenApiRestCall_593421
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595211(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595210(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595212 = path.getOrDefault("resourceGroupName")
  valid_595212 = validateParameter(valid_595212, JString, required = true,
                                 default = nil)
  if valid_595212 != nil:
    section.add "resourceGroupName", valid_595212
  var valid_595213 = path.getOrDefault("name")
  valid_595213 = validateParameter(valid_595213, JString, required = true,
                                 default = nil)
  if valid_595213 != nil:
    section.add "name", valid_595213
  var valid_595214 = path.getOrDefault("subscriptionId")
  valid_595214 = validateParameter(valid_595214, JString, required = true,
                                 default = nil)
  if valid_595214 != nil:
    section.add "subscriptionId", valid_595214
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595215 = query.getOrDefault("api-version")
  valid_595215 = validateParameter(valid_595215, JString, required = true,
                                 default = nil)
  if valid_595215 != nil:
    section.add "api-version", valid_595215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595216: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595216.validator(path, query, header, formData, body)
  let scheme = call_595216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595216.url(scheme.get, call_595216.host, call_595216.base,
                         call_595216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595216, url, valid)

proc call*(call_595217: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595209;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595218 = newJObject()
  var query_595219 = newJObject()
  add(path_595218, "resourceGroupName", newJString(resourceGroupName))
  add(query_595219, "api-version", newJString(apiVersion))
  add(path_595218, "name", newJString(name))
  add(path_595218, "subscriptionId", newJString(subscriptionId))
  result = call_595217.call(path_595218, query_595219, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595209(name: "managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595210,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_595211,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarms_595220 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarms_595222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarms_595221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595223 = path.getOrDefault("resourceGroupName")
  valid_595223 = validateParameter(valid_595223, JString, required = true,
                                 default = nil)
  if valid_595223 != nil:
    section.add "resourceGroupName", valid_595223
  var valid_595224 = path.getOrDefault("subscriptionId")
  valid_595224 = validateParameter(valid_595224, JString, required = true,
                                 default = nil)
  if valid_595224 != nil:
    section.add "subscriptionId", valid_595224
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595225 = query.getOrDefault("api-version")
  valid_595225 = validateParameter(valid_595225, JString, required = true,
                                 default = nil)
  if valid_595225 != nil:
    section.add "api-version", valid_595225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595226: Call_ServerFarmsGetServerFarms_595220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595226.validator(path, query, header, formData, body)
  let scheme = call_595226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595226.url(scheme.get, call_595226.host, call_595226.base,
                         call_595226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595226, url, valid)

proc call*(call_595227: Call_ServerFarmsGetServerFarms_595220;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595228 = newJObject()
  var query_595229 = newJObject()
  add(path_595228, "resourceGroupName", newJString(resourceGroupName))
  add(query_595229, "api-version", newJString(apiVersion))
  add(path_595228, "subscriptionId", newJString(subscriptionId))
  result = call_595227.call(path_595228, query_595229, nil, nil, nil)

var serverFarmsGetServerFarms* = Call_ServerFarmsGetServerFarms_595220(
    name: "serverFarmsGetServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
    validator: validate_ServerFarmsGetServerFarms_595221, base: "",
    url: url_ServerFarmsGetServerFarms_595222, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateServerFarm_595241 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsCreateOrUpdateServerFarm_595243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateServerFarm_595242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595244 = path.getOrDefault("resourceGroupName")
  valid_595244 = validateParameter(valid_595244, JString, required = true,
                                 default = nil)
  if valid_595244 != nil:
    section.add "resourceGroupName", valid_595244
  var valid_595245 = path.getOrDefault("name")
  valid_595245 = validateParameter(valid_595245, JString, required = true,
                                 default = nil)
  if valid_595245 != nil:
    section.add "name", valid_595245
  var valid_595246 = path.getOrDefault("subscriptionId")
  valid_595246 = validateParameter(valid_595246, JString, required = true,
                                 default = nil)
  if valid_595246 != nil:
    section.add "subscriptionId", valid_595246
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   allowPendingState: JBool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595247 = query.getOrDefault("api-version")
  valid_595247 = validateParameter(valid_595247, JString, required = true,
                                 default = nil)
  if valid_595247 != nil:
    section.add "api-version", valid_595247
  var valid_595248 = query.getOrDefault("allowPendingState")
  valid_595248 = validateParameter(valid_595248, JBool, required = false, default = nil)
  if valid_595248 != nil:
    section.add "allowPendingState", valid_595248
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595250: Call_ServerFarmsCreateOrUpdateServerFarm_595241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595250.validator(path, query, header, formData, body)
  let scheme = call_595250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595250.url(scheme.get, call_595250.host, call_595250.base,
                         call_595250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595250, url, valid)

proc call*(call_595251: Call_ServerFarmsCreateOrUpdateServerFarm_595241;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; serverFarmEnvelope: JsonNode;
          allowPendingState: bool = false): Recallable =
  ## serverFarmsCreateOrUpdateServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   allowPendingState: bool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  var path_595252 = newJObject()
  var query_595253 = newJObject()
  var body_595254 = newJObject()
  add(path_595252, "resourceGroupName", newJString(resourceGroupName))
  add(query_595253, "api-version", newJString(apiVersion))
  add(path_595252, "name", newJString(name))
  add(path_595252, "subscriptionId", newJString(subscriptionId))
  add(query_595253, "allowPendingState", newJBool(allowPendingState))
  if serverFarmEnvelope != nil:
    body_595254 = serverFarmEnvelope
  result = call_595251.call(path_595252, query_595253, nil, nil, body_595254)

var serverFarmsCreateOrUpdateServerFarm* = Call_ServerFarmsCreateOrUpdateServerFarm_595241(
    name: "serverFarmsCreateOrUpdateServerFarm", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsCreateOrUpdateServerFarm_595242, base: "",
    url: url_ServerFarmsCreateOrUpdateServerFarm_595243, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarm_595230 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarm_595232(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarm_595231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595233 = path.getOrDefault("resourceGroupName")
  valid_595233 = validateParameter(valid_595233, JString, required = true,
                                 default = nil)
  if valid_595233 != nil:
    section.add "resourceGroupName", valid_595233
  var valid_595234 = path.getOrDefault("name")
  valid_595234 = validateParameter(valid_595234, JString, required = true,
                                 default = nil)
  if valid_595234 != nil:
    section.add "name", valid_595234
  var valid_595235 = path.getOrDefault("subscriptionId")
  valid_595235 = validateParameter(valid_595235, JString, required = true,
                                 default = nil)
  if valid_595235 != nil:
    section.add "subscriptionId", valid_595235
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595236 = query.getOrDefault("api-version")
  valid_595236 = validateParameter(valid_595236, JString, required = true,
                                 default = nil)
  if valid_595236 != nil:
    section.add "api-version", valid_595236
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595237: Call_ServerFarmsGetServerFarm_595230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595237.validator(path, query, header, formData, body)
  let scheme = call_595237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595237.url(scheme.get, call_595237.host, call_595237.base,
                         call_595237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595237, url, valid)

proc call*(call_595238: Call_ServerFarmsGetServerFarm_595230;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595239 = newJObject()
  var query_595240 = newJObject()
  add(path_595239, "resourceGroupName", newJString(resourceGroupName))
  add(query_595240, "api-version", newJString(apiVersion))
  add(path_595239, "name", newJString(name))
  add(path_595239, "subscriptionId", newJString(subscriptionId))
  result = call_595238.call(path_595239, query_595240, nil, nil, nil)

var serverFarmsGetServerFarm* = Call_ServerFarmsGetServerFarm_595230(
    name: "serverFarmsGetServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsGetServerFarm_595231, base: "",
    url: url_ServerFarmsGetServerFarm_595232, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteServerFarm_595255 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsDeleteServerFarm_595257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteServerFarm_595256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595258 = path.getOrDefault("resourceGroupName")
  valid_595258 = validateParameter(valid_595258, JString, required = true,
                                 default = nil)
  if valid_595258 != nil:
    section.add "resourceGroupName", valid_595258
  var valid_595259 = path.getOrDefault("name")
  valid_595259 = validateParameter(valid_595259, JString, required = true,
                                 default = nil)
  if valid_595259 != nil:
    section.add "name", valid_595259
  var valid_595260 = path.getOrDefault("subscriptionId")
  valid_595260 = validateParameter(valid_595260, JString, required = true,
                                 default = nil)
  if valid_595260 != nil:
    section.add "subscriptionId", valid_595260
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595261 = query.getOrDefault("api-version")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = nil)
  if valid_595261 != nil:
    section.add "api-version", valid_595261
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595262: Call_ServerFarmsDeleteServerFarm_595255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595262.validator(path, query, header, formData, body)
  let scheme = call_595262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595262.url(scheme.get, call_595262.host, call_595262.base,
                         call_595262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595262, url, valid)

proc call*(call_595263: Call_ServerFarmsDeleteServerFarm_595255;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsDeleteServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595264 = newJObject()
  var query_595265 = newJObject()
  add(path_595264, "resourceGroupName", newJString(resourceGroupName))
  add(query_595265, "api-version", newJString(apiVersion))
  add(path_595264, "name", newJString(name))
  add(path_595264, "subscriptionId", newJString(subscriptionId))
  result = call_595263.call(path_595264, query_595265, nil, nil, nil)

var serverFarmsDeleteServerFarm* = Call_ServerFarmsDeleteServerFarm_595255(
    name: "serverFarmsDeleteServerFarm", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsDeleteServerFarm_595256, base: "",
    url: url_ServerFarmsDeleteServerFarm_595257, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetricDefintions_595266 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarmMetricDefintions_595268(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetricDefintions_595267(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595269 = path.getOrDefault("resourceGroupName")
  valid_595269 = validateParameter(valid_595269, JString, required = true,
                                 default = nil)
  if valid_595269 != nil:
    section.add "resourceGroupName", valid_595269
  var valid_595270 = path.getOrDefault("name")
  valid_595270 = validateParameter(valid_595270, JString, required = true,
                                 default = nil)
  if valid_595270 != nil:
    section.add "name", valid_595270
  var valid_595271 = path.getOrDefault("subscriptionId")
  valid_595271 = validateParameter(valid_595271, JString, required = true,
                                 default = nil)
  if valid_595271 != nil:
    section.add "subscriptionId", valid_595271
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595272 = query.getOrDefault("api-version")
  valid_595272 = validateParameter(valid_595272, JString, required = true,
                                 default = nil)
  if valid_595272 != nil:
    section.add "api-version", valid_595272
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595273: Call_ServerFarmsGetServerFarmMetricDefintions_595266;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595273.validator(path, query, header, formData, body)
  let scheme = call_595273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595273.url(scheme.get, call_595273.host, call_595273.base,
                         call_595273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595273, url, valid)

proc call*(call_595274: Call_ServerFarmsGetServerFarmMetricDefintions_595266;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarmMetricDefintions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595275 = newJObject()
  var query_595276 = newJObject()
  add(path_595275, "resourceGroupName", newJString(resourceGroupName))
  add(query_595276, "api-version", newJString(apiVersion))
  add(path_595275, "name", newJString(name))
  add(path_595275, "subscriptionId", newJString(subscriptionId))
  result = call_595274.call(path_595275, query_595276, nil, nil, nil)

var serverFarmsGetServerFarmMetricDefintions* = Call_ServerFarmsGetServerFarmMetricDefintions_595266(
    name: "serverFarmsGetServerFarmMetricDefintions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
    validator: validate_ServerFarmsGetServerFarmMetricDefintions_595267, base: "",
    url: url_ServerFarmsGetServerFarmMetricDefintions_595268,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetrics_595277 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarmMetrics_595279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetrics_595278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595280 = path.getOrDefault("resourceGroupName")
  valid_595280 = validateParameter(valid_595280, JString, required = true,
                                 default = nil)
  if valid_595280 != nil:
    section.add "resourceGroupName", valid_595280
  var valid_595281 = path.getOrDefault("name")
  valid_595281 = validateParameter(valid_595281, JString, required = true,
                                 default = nil)
  if valid_595281 != nil:
    section.add "name", valid_595281
  var valid_595282 = path.getOrDefault("subscriptionId")
  valid_595282 = validateParameter(valid_595282, JString, required = true,
                                 default = nil)
  if valid_595282 != nil:
    section.add "subscriptionId", valid_595282
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595283 = query.getOrDefault("api-version")
  valid_595283 = validateParameter(valid_595283, JString, required = true,
                                 default = nil)
  if valid_595283 != nil:
    section.add "api-version", valid_595283
  var valid_595284 = query.getOrDefault("details")
  valid_595284 = validateParameter(valid_595284, JBool, required = false, default = nil)
  if valid_595284 != nil:
    section.add "details", valid_595284
  var valid_595285 = query.getOrDefault("$filter")
  valid_595285 = validateParameter(valid_595285, JString, required = false,
                                 default = nil)
  if valid_595285 != nil:
    section.add "$filter", valid_595285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595286: Call_ServerFarmsGetServerFarmMetrics_595277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595286.validator(path, query, header, formData, body)
  let scheme = call_595286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595286.url(scheme.get, call_595286.host, call_595286.base,
                         call_595286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595286, url, valid)

proc call*(call_595287: Call_ServerFarmsGetServerFarmMetrics_595277;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   details: bool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595288 = newJObject()
  var query_595289 = newJObject()
  add(path_595288, "resourceGroupName", newJString(resourceGroupName))
  add(query_595289, "api-version", newJString(apiVersion))
  add(path_595288, "name", newJString(name))
  add(query_595289, "details", newJBool(details))
  add(path_595288, "subscriptionId", newJString(subscriptionId))
  add(query_595289, "$filter", newJString(Filter))
  result = call_595287.call(path_595288, query_595289, nil, nil, nil)

var serverFarmsGetServerFarmMetrics* = Call_ServerFarmsGetServerFarmMetrics_595277(
    name: "serverFarmsGetServerFarmMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics",
    validator: validate_ServerFarmsGetServerFarmMetrics_595278, base: "",
    url: url_ServerFarmsGetServerFarmMetrics_595279, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmOperation_595290 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarmOperation_595292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmOperation_595291(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of Server farm operation"&gt;
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595293 = path.getOrDefault("resourceGroupName")
  valid_595293 = validateParameter(valid_595293, JString, required = true,
                                 default = nil)
  if valid_595293 != nil:
    section.add "resourceGroupName", valid_595293
  var valid_595294 = path.getOrDefault("name")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = nil)
  if valid_595294 != nil:
    section.add "name", valid_595294
  var valid_595295 = path.getOrDefault("subscriptionId")
  valid_595295 = validateParameter(valid_595295, JString, required = true,
                                 default = nil)
  if valid_595295 != nil:
    section.add "subscriptionId", valid_595295
  var valid_595296 = path.getOrDefault("operationId")
  valid_595296 = validateParameter(valid_595296, JString, required = true,
                                 default = nil)
  if valid_595296 != nil:
    section.add "operationId", valid_595296
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595297 = query.getOrDefault("api-version")
  valid_595297 = validateParameter(valid_595297, JString, required = true,
                                 default = nil)
  if valid_595297 != nil:
    section.add "api-version", valid_595297
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595298: Call_ServerFarmsGetServerFarmOperation_595290;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595298.validator(path, query, header, formData, body)
  let scheme = call_595298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595298.url(scheme.get, call_595298.host, call_595298.base,
                         call_595298.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595298, url, valid)

proc call*(call_595299: Call_ServerFarmsGetServerFarmOperation_595290;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## serverFarmsGetServerFarmOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of Server farm operation"&gt;
  var path_595300 = newJObject()
  var query_595301 = newJObject()
  add(path_595300, "resourceGroupName", newJString(resourceGroupName))
  add(query_595301, "api-version", newJString(apiVersion))
  add(path_595300, "name", newJString(name))
  add(path_595300, "subscriptionId", newJString(subscriptionId))
  add(path_595300, "operationId", newJString(operationId))
  result = call_595299.call(path_595300, query_595301, nil, nil, nil)

var serverFarmsGetServerFarmOperation* = Call_ServerFarmsGetServerFarmOperation_595290(
    name: "serverFarmsGetServerFarmOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}",
    validator: validate_ServerFarmsGetServerFarmOperation_595291, base: "",
    url: url_ServerFarmsGetServerFarmOperation_595292, schemes: {Scheme.Https})
type
  Call_ServerFarmsRestartSitesForServerFarm_595302 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsRestartSitesForServerFarm_595304(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restartSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRestartSitesForServerFarm_595303(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595305 = path.getOrDefault("resourceGroupName")
  valid_595305 = validateParameter(valid_595305, JString, required = true,
                                 default = nil)
  if valid_595305 != nil:
    section.add "resourceGroupName", valid_595305
  var valid_595306 = path.getOrDefault("name")
  valid_595306 = validateParameter(valid_595306, JString, required = true,
                                 default = nil)
  if valid_595306 != nil:
    section.add "name", valid_595306
  var valid_595307 = path.getOrDefault("subscriptionId")
  valid_595307 = validateParameter(valid_595307, JString, required = true,
                                 default = nil)
  if valid_595307 != nil:
    section.add "subscriptionId", valid_595307
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595308 = query.getOrDefault("api-version")
  valid_595308 = validateParameter(valid_595308, JString, required = true,
                                 default = nil)
  if valid_595308 != nil:
    section.add "api-version", valid_595308
  var valid_595309 = query.getOrDefault("softRestart")
  valid_595309 = validateParameter(valid_595309, JBool, required = false, default = nil)
  if valid_595309 != nil:
    section.add "softRestart", valid_595309
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595310: Call_ServerFarmsRestartSitesForServerFarm_595302;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595310.validator(path, query, header, formData, body)
  let scheme = call_595310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595310.url(scheme.get, call_595310.host, call_595310.base,
                         call_595310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595310, url, valid)

proc call*(call_595311: Call_ServerFarmsRestartSitesForServerFarm_595302;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; softRestart: bool = false): Recallable =
  ## serverFarmsRestartSitesForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  var path_595312 = newJObject()
  var query_595313 = newJObject()
  add(path_595312, "resourceGroupName", newJString(resourceGroupName))
  add(query_595313, "api-version", newJString(apiVersion))
  add(path_595312, "name", newJString(name))
  add(path_595312, "subscriptionId", newJString(subscriptionId))
  add(query_595313, "softRestart", newJBool(softRestart))
  result = call_595311.call(path_595312, query_595313, nil, nil, nil)

var serverFarmsRestartSitesForServerFarm* = Call_ServerFarmsRestartSitesForServerFarm_595302(
    name: "serverFarmsRestartSitesForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
    validator: validate_ServerFarmsRestartSitesForServerFarm_595303, base: "",
    url: url_ServerFarmsRestartSitesForServerFarm_595304, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmSites_595314 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarmSites_595316(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmSites_595315(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595317 = path.getOrDefault("resourceGroupName")
  valid_595317 = validateParameter(valid_595317, JString, required = true,
                                 default = nil)
  if valid_595317 != nil:
    section.add "resourceGroupName", valid_595317
  var valid_595318 = path.getOrDefault("name")
  valid_595318 = validateParameter(valid_595318, JString, required = true,
                                 default = nil)
  if valid_595318 != nil:
    section.add "name", valid_595318
  var valid_595319 = path.getOrDefault("subscriptionId")
  valid_595319 = validateParameter(valid_595319, JString, required = true,
                                 default = nil)
  if valid_595319 != nil:
    section.add "subscriptionId", valid_595319
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $top: JString
  ##       : List page size. If specified, results are paged.
  ##   $skipToken: JString
  ##             : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   $filter: JString
  ##          : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595320 = query.getOrDefault("api-version")
  valid_595320 = validateParameter(valid_595320, JString, required = true,
                                 default = nil)
  if valid_595320 != nil:
    section.add "api-version", valid_595320
  var valid_595321 = query.getOrDefault("$top")
  valid_595321 = validateParameter(valid_595321, JString, required = false,
                                 default = nil)
  if valid_595321 != nil:
    section.add "$top", valid_595321
  var valid_595322 = query.getOrDefault("$skipToken")
  valid_595322 = validateParameter(valid_595322, JString, required = false,
                                 default = nil)
  if valid_595322 != nil:
    section.add "$skipToken", valid_595322
  var valid_595323 = query.getOrDefault("$filter")
  valid_595323 = validateParameter(valid_595323, JString, required = false,
                                 default = nil)
  if valid_595323 != nil:
    section.add "$filter", valid_595323
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595324: Call_ServerFarmsGetServerFarmSites_595314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595324.validator(path, query, header, formData, body)
  let scheme = call_595324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595324.url(scheme.get, call_595324.host, call_595324.base,
                         call_595324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595324, url, valid)

proc call*(call_595325: Call_ServerFarmsGetServerFarmSites_595314;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Top: string = ""; SkipToken: string = "";
          Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Top: string
  ##      : List page size. If specified, results are paged.
  ##   SkipToken: string
  ##            : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   Filter: string
  ##         : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  var path_595326 = newJObject()
  var query_595327 = newJObject()
  add(path_595326, "resourceGroupName", newJString(resourceGroupName))
  add(query_595327, "api-version", newJString(apiVersion))
  add(path_595326, "name", newJString(name))
  add(path_595326, "subscriptionId", newJString(subscriptionId))
  add(query_595327, "$top", newJString(Top))
  add(query_595327, "$skipToken", newJString(SkipToken))
  add(query_595327, "$filter", newJString(Filter))
  result = call_595325.call(path_595326, query_595327, nil, nil, nil)

var serverFarmsGetServerFarmSites* = Call_ServerFarmsGetServerFarmSites_595314(
    name: "serverFarmsGetServerFarmSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
    validator: validate_ServerFarmsGetServerFarmSites_595315, base: "",
    url: url_ServerFarmsGetServerFarmSites_595316, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetsForServerFarm_595328 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetVnetsForServerFarm_595330(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetsForServerFarm_595329(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595331 = path.getOrDefault("resourceGroupName")
  valid_595331 = validateParameter(valid_595331, JString, required = true,
                                 default = nil)
  if valid_595331 != nil:
    section.add "resourceGroupName", valid_595331
  var valid_595332 = path.getOrDefault("name")
  valid_595332 = validateParameter(valid_595332, JString, required = true,
                                 default = nil)
  if valid_595332 != nil:
    section.add "name", valid_595332
  var valid_595333 = path.getOrDefault("subscriptionId")
  valid_595333 = validateParameter(valid_595333, JString, required = true,
                                 default = nil)
  if valid_595333 != nil:
    section.add "subscriptionId", valid_595333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595334 = query.getOrDefault("api-version")
  valid_595334 = validateParameter(valid_595334, JString, required = true,
                                 default = nil)
  if valid_595334 != nil:
    section.add "api-version", valid_595334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595335: Call_ServerFarmsGetVnetsForServerFarm_595328;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595335.validator(path, query, header, formData, body)
  let scheme = call_595335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595335.url(scheme.get, call_595335.host, call_595335.base,
                         call_595335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595335, url, valid)

proc call*(call_595336: Call_ServerFarmsGetVnetsForServerFarm_595328;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetVnetsForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595337 = newJObject()
  var query_595338 = newJObject()
  add(path_595337, "resourceGroupName", newJString(resourceGroupName))
  add(query_595338, "api-version", newJString(apiVersion))
  add(path_595337, "name", newJString(name))
  add(path_595337, "subscriptionId", newJString(subscriptionId))
  result = call_595336.call(path_595337, query_595338, nil, nil, nil)

var serverFarmsGetVnetsForServerFarm* = Call_ServerFarmsGetVnetsForServerFarm_595328(
    name: "serverFarmsGetVnetsForServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
    validator: validate_ServerFarmsGetVnetsForServerFarm_595329, base: "",
    url: url_ServerFarmsGetVnetsForServerFarm_595330, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetFromServerFarm_595339 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetVnetFromServerFarm_595341(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetFromServerFarm_595340(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595342 = path.getOrDefault("resourceGroupName")
  valid_595342 = validateParameter(valid_595342, JString, required = true,
                                 default = nil)
  if valid_595342 != nil:
    section.add "resourceGroupName", valid_595342
  var valid_595343 = path.getOrDefault("name")
  valid_595343 = validateParameter(valid_595343, JString, required = true,
                                 default = nil)
  if valid_595343 != nil:
    section.add "name", valid_595343
  var valid_595344 = path.getOrDefault("vnetName")
  valid_595344 = validateParameter(valid_595344, JString, required = true,
                                 default = nil)
  if valid_595344 != nil:
    section.add "vnetName", valid_595344
  var valid_595345 = path.getOrDefault("subscriptionId")
  valid_595345 = validateParameter(valid_595345, JString, required = true,
                                 default = nil)
  if valid_595345 != nil:
    section.add "subscriptionId", valid_595345
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595346 = query.getOrDefault("api-version")
  valid_595346 = validateParameter(valid_595346, JString, required = true,
                                 default = nil)
  if valid_595346 != nil:
    section.add "api-version", valid_595346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595347: Call_ServerFarmsGetVnetFromServerFarm_595339;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595347.validator(path, query, header, formData, body)
  let scheme = call_595347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595347.url(scheme.get, call_595347.host, call_595347.base,
                         call_595347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595347, url, valid)

proc call*(call_595348: Call_ServerFarmsGetVnetFromServerFarm_595339;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetVnetFromServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595349 = newJObject()
  var query_595350 = newJObject()
  add(path_595349, "resourceGroupName", newJString(resourceGroupName))
  add(query_595350, "api-version", newJString(apiVersion))
  add(path_595349, "name", newJString(name))
  add(path_595349, "vnetName", newJString(vnetName))
  add(path_595349, "subscriptionId", newJString(subscriptionId))
  result = call_595348.call(path_595349, query_595350, nil, nil, nil)

var serverFarmsGetVnetFromServerFarm* = Call_ServerFarmsGetVnetFromServerFarm_595339(
    name: "serverFarmsGetVnetFromServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_ServerFarmsGetVnetFromServerFarm_595340, base: "",
    url: url_ServerFarmsGetVnetFromServerFarm_595341, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateServerFarmVnetGateway_595364 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsUpdateServerFarmVnetGateway_595366(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateServerFarmVnetGateway_595365(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group
  ##   name: JString (required)
  ##       : The name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : The name of the virtual network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595367 = path.getOrDefault("resourceGroupName")
  valid_595367 = validateParameter(valid_595367, JString, required = true,
                                 default = nil)
  if valid_595367 != nil:
    section.add "resourceGroupName", valid_595367
  var valid_595368 = path.getOrDefault("name")
  valid_595368 = validateParameter(valid_595368, JString, required = true,
                                 default = nil)
  if valid_595368 != nil:
    section.add "name", valid_595368
  var valid_595369 = path.getOrDefault("vnetName")
  valid_595369 = validateParameter(valid_595369, JString, required = true,
                                 default = nil)
  if valid_595369 != nil:
    section.add "vnetName", valid_595369
  var valid_595370 = path.getOrDefault("gatewayName")
  valid_595370 = validateParameter(valid_595370, JString, required = true,
                                 default = nil)
  if valid_595370 != nil:
    section.add "gatewayName", valid_595370
  var valid_595371 = path.getOrDefault("subscriptionId")
  valid_595371 = validateParameter(valid_595371, JString, required = true,
                                 default = nil)
  if valid_595371 != nil:
    section.add "subscriptionId", valid_595371
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595372 = query.getOrDefault("api-version")
  valid_595372 = validateParameter(valid_595372, JString, required = true,
                                 default = nil)
  if valid_595372 != nil:
    section.add "api-version", valid_595372
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595374: Call_ServerFarmsUpdateServerFarmVnetGateway_595364;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595374.validator(path, query, header, formData, body)
  let scheme = call_595374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595374.url(scheme.get, call_595374.host, call_595374.base,
                         call_595374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595374, url, valid)

proc call*(call_595375: Call_ServerFarmsUpdateServerFarmVnetGateway_595364;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## serverFarmsUpdateServerFarmVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  ##   name: string (required)
  ##       : The name of the App Service Plan
  ##   vnetName: string (required)
  ##           : The name of the virtual network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595376 = newJObject()
  var query_595377 = newJObject()
  var body_595378 = newJObject()
  add(path_595376, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_595378 = connectionEnvelope
  add(path_595376, "name", newJString(name))
  add(path_595376, "vnetName", newJString(vnetName))
  add(query_595377, "api-version", newJString(apiVersion))
  add(path_595376, "gatewayName", newJString(gatewayName))
  add(path_595376, "subscriptionId", newJString(subscriptionId))
  result = call_595375.call(path_595376, query_595377, nil, nil, body_595378)

var serverFarmsUpdateServerFarmVnetGateway* = Call_ServerFarmsUpdateServerFarmVnetGateway_595364(
    name: "serverFarmsUpdateServerFarmVnetGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsUpdateServerFarmVnetGateway_595365, base: "",
    url: url_ServerFarmsUpdateServerFarmVnetGateway_595366,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmVnetGateway_595351 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetServerFarmVnetGateway_595353(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmVnetGateway_595352(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of the virtual network
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595354 = path.getOrDefault("resourceGroupName")
  valid_595354 = validateParameter(valid_595354, JString, required = true,
                                 default = nil)
  if valid_595354 != nil:
    section.add "resourceGroupName", valid_595354
  var valid_595355 = path.getOrDefault("name")
  valid_595355 = validateParameter(valid_595355, JString, required = true,
                                 default = nil)
  if valid_595355 != nil:
    section.add "name", valid_595355
  var valid_595356 = path.getOrDefault("vnetName")
  valid_595356 = validateParameter(valid_595356, JString, required = true,
                                 default = nil)
  if valid_595356 != nil:
    section.add "vnetName", valid_595356
  var valid_595357 = path.getOrDefault("gatewayName")
  valid_595357 = validateParameter(valid_595357, JString, required = true,
                                 default = nil)
  if valid_595357 != nil:
    section.add "gatewayName", valid_595357
  var valid_595358 = path.getOrDefault("subscriptionId")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "subscriptionId", valid_595358
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595359 = query.getOrDefault("api-version")
  valid_595359 = validateParameter(valid_595359, JString, required = true,
                                 default = nil)
  if valid_595359 != nil:
    section.add "api-version", valid_595359
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595360: Call_ServerFarmsGetServerFarmVnetGateway_595351;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595360.validator(path, query, header, formData, body)
  let scheme = call_595360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595360.url(scheme.get, call_595360.host, call_595360.base,
                         call_595360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595360, url, valid)

proc call*(call_595361: Call_ServerFarmsGetServerFarmVnetGateway_595351;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarmVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the App Service Plan
  ##   vnetName: string (required)
  ##           : Name of the virtual network
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595362 = newJObject()
  var query_595363 = newJObject()
  add(path_595362, "resourceGroupName", newJString(resourceGroupName))
  add(query_595363, "api-version", newJString(apiVersion))
  add(path_595362, "name", newJString(name))
  add(path_595362, "vnetName", newJString(vnetName))
  add(path_595362, "gatewayName", newJString(gatewayName))
  add(path_595362, "subscriptionId", newJString(subscriptionId))
  result = call_595361.call(path_595362, query_595363, nil, nil, nil)

var serverFarmsGetServerFarmVnetGateway* = Call_ServerFarmsGetServerFarmVnetGateway_595351(
    name: "serverFarmsGetServerFarmVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsGetServerFarmVnetGateway_595352, base: "",
    url: url_ServerFarmsGetServerFarmVnetGateway_595353, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRoutesForVnet_595379 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetRoutesForVnet_595381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRoutesForVnet_595380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595382 = path.getOrDefault("resourceGroupName")
  valid_595382 = validateParameter(valid_595382, JString, required = true,
                                 default = nil)
  if valid_595382 != nil:
    section.add "resourceGroupName", valid_595382
  var valid_595383 = path.getOrDefault("name")
  valid_595383 = validateParameter(valid_595383, JString, required = true,
                                 default = nil)
  if valid_595383 != nil:
    section.add "name", valid_595383
  var valid_595384 = path.getOrDefault("vnetName")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "vnetName", valid_595384
  var valid_595385 = path.getOrDefault("subscriptionId")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = nil)
  if valid_595385 != nil:
    section.add "subscriptionId", valid_595385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595386 = query.getOrDefault("api-version")
  valid_595386 = validateParameter(valid_595386, JString, required = true,
                                 default = nil)
  if valid_595386 != nil:
    section.add "api-version", valid_595386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595387: Call_ServerFarmsGetRoutesForVnet_595379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595387.validator(path, query, header, formData, body)
  let scheme = call_595387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595387.url(scheme.get, call_595387.host, call_595387.base,
                         call_595387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595387, url, valid)

proc call*(call_595388: Call_ServerFarmsGetRoutesForVnet_595379;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetRoutesForVnet
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595389 = newJObject()
  var query_595390 = newJObject()
  add(path_595389, "resourceGroupName", newJString(resourceGroupName))
  add(query_595390, "api-version", newJString(apiVersion))
  add(path_595389, "name", newJString(name))
  add(path_595389, "vnetName", newJString(vnetName))
  add(path_595389, "subscriptionId", newJString(subscriptionId))
  result = call_595388.call(path_595389, query_595390, nil, nil, nil)

var serverFarmsGetRoutesForVnet* = Call_ServerFarmsGetRoutesForVnet_595379(
    name: "serverFarmsGetRoutesForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
    validator: validate_ServerFarmsGetRoutesForVnet_595380, base: "",
    url: url_ServerFarmsGetRoutesForVnet_595381, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateVnetRoute_595404 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsCreateOrUpdateVnetRoute_595406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateVnetRoute_595405(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595407 = path.getOrDefault("resourceGroupName")
  valid_595407 = validateParameter(valid_595407, JString, required = true,
                                 default = nil)
  if valid_595407 != nil:
    section.add "resourceGroupName", valid_595407
  var valid_595408 = path.getOrDefault("name")
  valid_595408 = validateParameter(valid_595408, JString, required = true,
                                 default = nil)
  if valid_595408 != nil:
    section.add "name", valid_595408
  var valid_595409 = path.getOrDefault("vnetName")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = nil)
  if valid_595409 != nil:
    section.add "vnetName", valid_595409
  var valid_595410 = path.getOrDefault("subscriptionId")
  valid_595410 = validateParameter(valid_595410, JString, required = true,
                                 default = nil)
  if valid_595410 != nil:
    section.add "subscriptionId", valid_595410
  var valid_595411 = path.getOrDefault("routeName")
  valid_595411 = validateParameter(valid_595411, JString, required = true,
                                 default = nil)
  if valid_595411 != nil:
    section.add "routeName", valid_595411
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595412 = query.getOrDefault("api-version")
  valid_595412 = validateParameter(valid_595412, JString, required = true,
                                 default = nil)
  if valid_595412 != nil:
    section.add "api-version", valid_595412
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595414: Call_ServerFarmsCreateOrUpdateVnetRoute_595404;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595414.validator(path, query, header, formData, body)
  let scheme = call_595414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595414.url(scheme.get, call_595414.host, call_595414.base,
                         call_595414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595414, url, valid)

proc call*(call_595415: Call_ServerFarmsCreateOrUpdateVnetRoute_595404;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string; route: JsonNode): Recallable =
  ## serverFarmsCreateOrUpdateVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   route: JObject (required)
  ##        : The route object
  var path_595416 = newJObject()
  var query_595417 = newJObject()
  var body_595418 = newJObject()
  add(path_595416, "resourceGroupName", newJString(resourceGroupName))
  add(query_595417, "api-version", newJString(apiVersion))
  add(path_595416, "name", newJString(name))
  add(path_595416, "vnetName", newJString(vnetName))
  add(path_595416, "subscriptionId", newJString(subscriptionId))
  add(path_595416, "routeName", newJString(routeName))
  if route != nil:
    body_595418 = route
  result = call_595415.call(path_595416, query_595417, nil, nil, body_595418)

var serverFarmsCreateOrUpdateVnetRoute* = Call_ServerFarmsCreateOrUpdateVnetRoute_595404(
    name: "serverFarmsCreateOrUpdateVnetRoute", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsCreateOrUpdateVnetRoute_595405, base: "",
    url: url_ServerFarmsCreateOrUpdateVnetRoute_595406, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRouteForVnet_595391 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsGetRouteForVnet_595393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRouteForVnet_595392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595394 = path.getOrDefault("resourceGroupName")
  valid_595394 = validateParameter(valid_595394, JString, required = true,
                                 default = nil)
  if valid_595394 != nil:
    section.add "resourceGroupName", valid_595394
  var valid_595395 = path.getOrDefault("name")
  valid_595395 = validateParameter(valid_595395, JString, required = true,
                                 default = nil)
  if valid_595395 != nil:
    section.add "name", valid_595395
  var valid_595396 = path.getOrDefault("vnetName")
  valid_595396 = validateParameter(valid_595396, JString, required = true,
                                 default = nil)
  if valid_595396 != nil:
    section.add "vnetName", valid_595396
  var valid_595397 = path.getOrDefault("subscriptionId")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = nil)
  if valid_595397 != nil:
    section.add "subscriptionId", valid_595397
  var valid_595398 = path.getOrDefault("routeName")
  valid_595398 = validateParameter(valid_595398, JString, required = true,
                                 default = nil)
  if valid_595398 != nil:
    section.add "routeName", valid_595398
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595399 = query.getOrDefault("api-version")
  valid_595399 = validateParameter(valid_595399, JString, required = true,
                                 default = nil)
  if valid_595399 != nil:
    section.add "api-version", valid_595399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595400: Call_ServerFarmsGetRouteForVnet_595391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595400.validator(path, query, header, formData, body)
  let scheme = call_595400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595400.url(scheme.get, call_595400.host, call_595400.base,
                         call_595400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595400, url, valid)

proc call*(call_595401: Call_ServerFarmsGetRouteForVnet_595391;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string): Recallable =
  ## serverFarmsGetRouteForVnet
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  var path_595402 = newJObject()
  var query_595403 = newJObject()
  add(path_595402, "resourceGroupName", newJString(resourceGroupName))
  add(query_595403, "api-version", newJString(apiVersion))
  add(path_595402, "name", newJString(name))
  add(path_595402, "vnetName", newJString(vnetName))
  add(path_595402, "subscriptionId", newJString(subscriptionId))
  add(path_595402, "routeName", newJString(routeName))
  result = call_595401.call(path_595402, query_595403, nil, nil, nil)

var serverFarmsGetRouteForVnet* = Call_ServerFarmsGetRouteForVnet_595391(
    name: "serverFarmsGetRouteForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsGetRouteForVnet_595392, base: "",
    url: url_ServerFarmsGetRouteForVnet_595393, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateVnetRoute_595432 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsUpdateVnetRoute_595434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateVnetRoute_595433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595435 = path.getOrDefault("resourceGroupName")
  valid_595435 = validateParameter(valid_595435, JString, required = true,
                                 default = nil)
  if valid_595435 != nil:
    section.add "resourceGroupName", valid_595435
  var valid_595436 = path.getOrDefault("name")
  valid_595436 = validateParameter(valid_595436, JString, required = true,
                                 default = nil)
  if valid_595436 != nil:
    section.add "name", valid_595436
  var valid_595437 = path.getOrDefault("vnetName")
  valid_595437 = validateParameter(valid_595437, JString, required = true,
                                 default = nil)
  if valid_595437 != nil:
    section.add "vnetName", valid_595437
  var valid_595438 = path.getOrDefault("subscriptionId")
  valid_595438 = validateParameter(valid_595438, JString, required = true,
                                 default = nil)
  if valid_595438 != nil:
    section.add "subscriptionId", valid_595438
  var valid_595439 = path.getOrDefault("routeName")
  valid_595439 = validateParameter(valid_595439, JString, required = true,
                                 default = nil)
  if valid_595439 != nil:
    section.add "routeName", valid_595439
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595440 = query.getOrDefault("api-version")
  valid_595440 = validateParameter(valid_595440, JString, required = true,
                                 default = nil)
  if valid_595440 != nil:
    section.add "api-version", valid_595440
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595442: Call_ServerFarmsUpdateVnetRoute_595432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595442.validator(path, query, header, formData, body)
  let scheme = call_595442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595442.url(scheme.get, call_595442.host, call_595442.base,
                         call_595442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595442, url, valid)

proc call*(call_595443: Call_ServerFarmsUpdateVnetRoute_595432;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string; route: JsonNode): Recallable =
  ## serverFarmsUpdateVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   route: JObject (required)
  ##        : The route object
  var path_595444 = newJObject()
  var query_595445 = newJObject()
  var body_595446 = newJObject()
  add(path_595444, "resourceGroupName", newJString(resourceGroupName))
  add(query_595445, "api-version", newJString(apiVersion))
  add(path_595444, "name", newJString(name))
  add(path_595444, "vnetName", newJString(vnetName))
  add(path_595444, "subscriptionId", newJString(subscriptionId))
  add(path_595444, "routeName", newJString(routeName))
  if route != nil:
    body_595446 = route
  result = call_595443.call(path_595444, query_595445, nil, nil, body_595446)

var serverFarmsUpdateVnetRoute* = Call_ServerFarmsUpdateVnetRoute_595432(
    name: "serverFarmsUpdateVnetRoute", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsUpdateVnetRoute_595433, base: "",
    url: url_ServerFarmsUpdateVnetRoute_595434, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteVnetRoute_595419 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsDeleteVnetRoute_595421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteVnetRoute_595420(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595422 = path.getOrDefault("resourceGroupName")
  valid_595422 = validateParameter(valid_595422, JString, required = true,
                                 default = nil)
  if valid_595422 != nil:
    section.add "resourceGroupName", valid_595422
  var valid_595423 = path.getOrDefault("name")
  valid_595423 = validateParameter(valid_595423, JString, required = true,
                                 default = nil)
  if valid_595423 != nil:
    section.add "name", valid_595423
  var valid_595424 = path.getOrDefault("vnetName")
  valid_595424 = validateParameter(valid_595424, JString, required = true,
                                 default = nil)
  if valid_595424 != nil:
    section.add "vnetName", valid_595424
  var valid_595425 = path.getOrDefault("subscriptionId")
  valid_595425 = validateParameter(valid_595425, JString, required = true,
                                 default = nil)
  if valid_595425 != nil:
    section.add "subscriptionId", valid_595425
  var valid_595426 = path.getOrDefault("routeName")
  valid_595426 = validateParameter(valid_595426, JString, required = true,
                                 default = nil)
  if valid_595426 != nil:
    section.add "routeName", valid_595426
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595427 = query.getOrDefault("api-version")
  valid_595427 = validateParameter(valid_595427, JString, required = true,
                                 default = nil)
  if valid_595427 != nil:
    section.add "api-version", valid_595427
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595428: Call_ServerFarmsDeleteVnetRoute_595419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595428.validator(path, query, header, formData, body)
  let scheme = call_595428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595428.url(scheme.get, call_595428.host, call_595428.base,
                         call_595428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595428, url, valid)

proc call*(call_595429: Call_ServerFarmsDeleteVnetRoute_595419;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string): Recallable =
  ## serverFarmsDeleteVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  var path_595430 = newJObject()
  var query_595431 = newJObject()
  add(path_595430, "resourceGroupName", newJString(resourceGroupName))
  add(query_595431, "api-version", newJString(apiVersion))
  add(path_595430, "name", newJString(name))
  add(path_595430, "vnetName", newJString(vnetName))
  add(path_595430, "subscriptionId", newJString(subscriptionId))
  add(path_595430, "routeName", newJString(routeName))
  result = call_595429.call(path_595430, query_595431, nil, nil, nil)

var serverFarmsDeleteVnetRoute* = Call_ServerFarmsDeleteVnetRoute_595419(
    name: "serverFarmsDeleteVnetRoute", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsDeleteVnetRoute_595420, base: "",
    url: url_ServerFarmsDeleteVnetRoute_595421, schemes: {Scheme.Https})
type
  Call_ServerFarmsRebootWorkerForServerFarm_595447 = ref object of OpenApiRestCall_593421
proc url_ServerFarmsRebootWorkerForServerFarm_595449(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerName" in path, "`workerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workers/"),
               (kind: VariableSegment, value: "workerName"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRebootWorkerForServerFarm_595448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   workerName: JString (required)
  ##             : Name of worker machine, typically starts with RD
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595450 = path.getOrDefault("resourceGroupName")
  valid_595450 = validateParameter(valid_595450, JString, required = true,
                                 default = nil)
  if valid_595450 != nil:
    section.add "resourceGroupName", valid_595450
  var valid_595451 = path.getOrDefault("name")
  valid_595451 = validateParameter(valid_595451, JString, required = true,
                                 default = nil)
  if valid_595451 != nil:
    section.add "name", valid_595451
  var valid_595452 = path.getOrDefault("subscriptionId")
  valid_595452 = validateParameter(valid_595452, JString, required = true,
                                 default = nil)
  if valid_595452 != nil:
    section.add "subscriptionId", valid_595452
  var valid_595453 = path.getOrDefault("workerName")
  valid_595453 = validateParameter(valid_595453, JString, required = true,
                                 default = nil)
  if valid_595453 != nil:
    section.add "workerName", valid_595453
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595454 = query.getOrDefault("api-version")
  valid_595454 = validateParameter(valid_595454, JString, required = true,
                                 default = nil)
  if valid_595454 != nil:
    section.add "api-version", valid_595454
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595455: Call_ServerFarmsRebootWorkerForServerFarm_595447;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595455.validator(path, query, header, formData, body)
  let scheme = call_595455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595455.url(scheme.get, call_595455.host, call_595455.base,
                         call_595455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595455, url, valid)

proc call*(call_595456: Call_ServerFarmsRebootWorkerForServerFarm_595447;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; workerName: string): Recallable =
  ## serverFarmsRebootWorkerForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   workerName: string (required)
  ##             : Name of worker machine, typically starts with RD
  var path_595457 = newJObject()
  var query_595458 = newJObject()
  add(path_595457, "resourceGroupName", newJString(resourceGroupName))
  add(query_595458, "api-version", newJString(apiVersion))
  add(path_595457, "name", newJString(name))
  add(path_595457, "subscriptionId", newJString(subscriptionId))
  add(path_595457, "workerName", newJString(workerName))
  result = call_595456.call(path_595457, query_595458, nil, nil, nil)

var serverFarmsRebootWorkerForServerFarm* = Call_ServerFarmsRebootWorkerForServerFarm_595447(
    name: "serverFarmsRebootWorkerForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
    validator: validate_ServerFarmsRebootWorkerForServerFarm_595448, base: "",
    url: url_ServerFarmsRebootWorkerForServerFarm_595449, schemes: {Scheme.Https})
type
  Call_SitesGetSites_595459 = ref object of OpenApiRestCall_593421
proc url_SitesGetSites_595461(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSites_595460(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595462 = path.getOrDefault("resourceGroupName")
  valid_595462 = validateParameter(valid_595462, JString, required = true,
                                 default = nil)
  if valid_595462 != nil:
    section.add "resourceGroupName", valid_595462
  var valid_595463 = path.getOrDefault("subscriptionId")
  valid_595463 = validateParameter(valid_595463, JString, required = true,
                                 default = nil)
  if valid_595463 != nil:
    section.add "subscriptionId", valid_595463
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  ##   includeSlots: JBool
  ##               : Whether or not to include deployments slots in results
  section = newJObject()
  var valid_595464 = query.getOrDefault("propertiesToInclude")
  valid_595464 = validateParameter(valid_595464, JString, required = false,
                                 default = nil)
  if valid_595464 != nil:
    section.add "propertiesToInclude", valid_595464
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595465 = query.getOrDefault("api-version")
  valid_595465 = validateParameter(valid_595465, JString, required = true,
                                 default = nil)
  if valid_595465 != nil:
    section.add "api-version", valid_595465
  var valid_595466 = query.getOrDefault("includeSiteTypes")
  valid_595466 = validateParameter(valid_595466, JString, required = false,
                                 default = nil)
  if valid_595466 != nil:
    section.add "includeSiteTypes", valid_595466
  var valid_595467 = query.getOrDefault("includeSlots")
  valid_595467 = validateParameter(valid_595467, JBool, required = false, default = nil)
  if valid_595467 != nil:
    section.add "includeSlots", valid_595467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595468: Call_SitesGetSites_595459; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595468.validator(path, query, header, formData, body)
  let scheme = call_595468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595468.url(scheme.get, call_595468.host, call_595468.base,
                         call_595468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595468, url, valid)

proc call*(call_595469: Call_SitesGetSites_595459; resourceGroupName: string;
          apiVersion: string; subscriptionId: string;
          propertiesToInclude: string = ""; includeSiteTypes: string = "";
          includeSlots: bool = false): Recallable =
  ## sitesGetSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  ##   includeSlots: bool
  ##               : Whether or not to include deployments slots in results
  var path_595470 = newJObject()
  var query_595471 = newJObject()
  add(path_595470, "resourceGroupName", newJString(resourceGroupName))
  add(query_595471, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_595471, "api-version", newJString(apiVersion))
  add(path_595470, "subscriptionId", newJString(subscriptionId))
  add(query_595471, "includeSiteTypes", newJString(includeSiteTypes))
  add(query_595471, "includeSlots", newJBool(includeSlots))
  result = call_595469.call(path_595470, query_595471, nil, nil, nil)

var sitesGetSites* = Call_SitesGetSites_595459(name: "sitesGetSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_SitesGetSites_595460, base: "", url: url_SitesGetSites_595461,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSite_595484 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSite_595486(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSite_595485(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595487 = path.getOrDefault("resourceGroupName")
  valid_595487 = validateParameter(valid_595487, JString, required = true,
                                 default = nil)
  if valid_595487 != nil:
    section.add "resourceGroupName", valid_595487
  var valid_595488 = path.getOrDefault("name")
  valid_595488 = validateParameter(valid_595488, JString, required = true,
                                 default = nil)
  if valid_595488 != nil:
    section.add "name", valid_595488
  var valid_595489 = path.getOrDefault("subscriptionId")
  valid_595489 = validateParameter(valid_595489, JString, required = true,
                                 default = nil)
  if valid_595489 != nil:
    section.add "subscriptionId", valid_595489
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  section = newJObject()
  var valid_595490 = query.getOrDefault("skipDnsRegistration")
  valid_595490 = validateParameter(valid_595490, JString, required = false,
                                 default = nil)
  if valid_595490 != nil:
    section.add "skipDnsRegistration", valid_595490
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595491 = query.getOrDefault("api-version")
  valid_595491 = validateParameter(valid_595491, JString, required = true,
                                 default = nil)
  if valid_595491 != nil:
    section.add "api-version", valid_595491
  var valid_595492 = query.getOrDefault("skipCustomDomainVerification")
  valid_595492 = validateParameter(valid_595492, JString, required = false,
                                 default = nil)
  if valid_595492 != nil:
    section.add "skipCustomDomainVerification", valid_595492
  var valid_595493 = query.getOrDefault("forceDnsRegistration")
  valid_595493 = validateParameter(valid_595493, JString, required = false,
                                 default = nil)
  if valid_595493 != nil:
    section.add "forceDnsRegistration", valid_595493
  var valid_595494 = query.getOrDefault("ttlInSeconds")
  valid_595494 = validateParameter(valid_595494, JString, required = false,
                                 default = nil)
  if valid_595494 != nil:
    section.add "ttlInSeconds", valid_595494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595496: Call_SitesCreateOrUpdateSite_595484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595496.validator(path, query, header, formData, body)
  let scheme = call_595496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595496.url(scheme.get, call_595496.host, call_595496.base,
                         call_595496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595496, url, valid)

proc call*(call_595497: Call_SitesCreateOrUpdateSite_595484;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; skipDnsRegistration: string = "";
          skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; ttlInSeconds: string = ""): Recallable =
  ## sitesCreateOrUpdateSite
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  var path_595498 = newJObject()
  var query_595499 = newJObject()
  var body_595500 = newJObject()
  if siteEnvelope != nil:
    body_595500 = siteEnvelope
  add(path_595498, "resourceGroupName", newJString(resourceGroupName))
  add(query_595499, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_595499, "api-version", newJString(apiVersion))
  add(path_595498, "name", newJString(name))
  add(query_595499, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(path_595498, "subscriptionId", newJString(subscriptionId))
  add(query_595499, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(query_595499, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_595497.call(path_595498, query_595499, nil, nil, body_595500)

var sitesCreateOrUpdateSite* = Call_SitesCreateOrUpdateSite_595484(
    name: "sitesCreateOrUpdateSite", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesCreateOrUpdateSite_595485, base: "",
    url: url_SitesCreateOrUpdateSite_595486, schemes: {Scheme.Https})
type
  Call_SitesGetSite_595472 = ref object of OpenApiRestCall_593421
proc url_SitesGetSite_595474(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSite_595473(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595475 = path.getOrDefault("resourceGroupName")
  valid_595475 = validateParameter(valid_595475, JString, required = true,
                                 default = nil)
  if valid_595475 != nil:
    section.add "resourceGroupName", valid_595475
  var valid_595476 = path.getOrDefault("name")
  valid_595476 = validateParameter(valid_595476, JString, required = true,
                                 default = nil)
  if valid_595476 != nil:
    section.add "name", valid_595476
  var valid_595477 = path.getOrDefault("subscriptionId")
  valid_595477 = validateParameter(valid_595477, JString, required = true,
                                 default = nil)
  if valid_595477 != nil:
    section.add "subscriptionId", valid_595477
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_595478 = query.getOrDefault("propertiesToInclude")
  valid_595478 = validateParameter(valid_595478, JString, required = false,
                                 default = nil)
  if valid_595478 != nil:
    section.add "propertiesToInclude", valid_595478
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595479 = query.getOrDefault("api-version")
  valid_595479 = validateParameter(valid_595479, JString, required = true,
                                 default = nil)
  if valid_595479 != nil:
    section.add "api-version", valid_595479
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595480: Call_SitesGetSite_595472; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595480.validator(path, query, header, formData, body)
  let scheme = call_595480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595480.url(scheme.get, call_595480.host, call_595480.base,
                         call_595480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595480, url, valid)

proc call*(call_595481: Call_SitesGetSite_595472; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595482 = newJObject()
  var query_595483 = newJObject()
  add(path_595482, "resourceGroupName", newJString(resourceGroupName))
  add(query_595483, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_595483, "api-version", newJString(apiVersion))
  add(path_595482, "name", newJString(name))
  add(path_595482, "subscriptionId", newJString(subscriptionId))
  result = call_595481.call(path_595482, query_595483, nil, nil, nil)

var sitesGetSite* = Call_SitesGetSite_595472(name: "sitesGetSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesGetSite_595473, base: "", url: url_SitesGetSite_595474,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSite_595501 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSite_595503(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSite_595502(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595504 = path.getOrDefault("resourceGroupName")
  valid_595504 = validateParameter(valid_595504, JString, required = true,
                                 default = nil)
  if valid_595504 != nil:
    section.add "resourceGroupName", valid_595504
  var valid_595505 = path.getOrDefault("name")
  valid_595505 = validateParameter(valid_595505, JString, required = true,
                                 default = nil)
  if valid_595505 != nil:
    section.add "name", valid_595505
  var valid_595506 = path.getOrDefault("subscriptionId")
  valid_595506 = validateParameter(valid_595506, JString, required = true,
                                 default = nil)
  if valid_595506 != nil:
    section.add "subscriptionId", valid_595506
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  var valid_595507 = query.getOrDefault("skipDnsRegistration")
  valid_595507 = validateParameter(valid_595507, JString, required = false,
                                 default = nil)
  if valid_595507 != nil:
    section.add "skipDnsRegistration", valid_595507
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595508 = query.getOrDefault("api-version")
  valid_595508 = validateParameter(valid_595508, JString, required = true,
                                 default = nil)
  if valid_595508 != nil:
    section.add "api-version", valid_595508
  var valid_595509 = query.getOrDefault("deleteMetrics")
  valid_595509 = validateParameter(valid_595509, JString, required = false,
                                 default = nil)
  if valid_595509 != nil:
    section.add "deleteMetrics", valid_595509
  var valid_595510 = query.getOrDefault("deleteEmptyServerFarm")
  valid_595510 = validateParameter(valid_595510, JString, required = false,
                                 default = nil)
  if valid_595510 != nil:
    section.add "deleteEmptyServerFarm", valid_595510
  var valid_595511 = query.getOrDefault("deleteAllSlots")
  valid_595511 = validateParameter(valid_595511, JString, required = false,
                                 default = nil)
  if valid_595511 != nil:
    section.add "deleteAllSlots", valid_595511
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595512: Call_SitesDeleteSite_595501; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595512.validator(path, query, header, formData, body)
  let scheme = call_595512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595512.url(scheme.get, call_595512.host, call_595512.base,
                         call_595512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595512, url, valid)

proc call*(call_595513: Call_SitesDeleteSite_595501; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          skipDnsRegistration: string = ""; deleteMetrics: string = "";
          deleteEmptyServerFarm: string = ""; deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_595514 = newJObject()
  var query_595515 = newJObject()
  add(path_595514, "resourceGroupName", newJString(resourceGroupName))
  add(query_595515, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_595515, "api-version", newJString(apiVersion))
  add(path_595514, "name", newJString(name))
  add(path_595514, "subscriptionId", newJString(subscriptionId))
  add(query_595515, "deleteMetrics", newJString(deleteMetrics))
  add(query_595515, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(query_595515, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_595513.call(path_595514, query_595515, nil, nil, nil)

var sitesDeleteSite* = Call_SitesDeleteSite_595501(name: "sitesDeleteSite",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesDeleteSite_595502, base: "", url: url_SitesDeleteSite_595503,
    schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigToProduction_595516 = ref object of OpenApiRestCall_593421
proc url_SitesApplySlotConfigToProduction_595518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigToProduction_595517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595519 = path.getOrDefault("resourceGroupName")
  valid_595519 = validateParameter(valid_595519, JString, required = true,
                                 default = nil)
  if valid_595519 != nil:
    section.add "resourceGroupName", valid_595519
  var valid_595520 = path.getOrDefault("name")
  valid_595520 = validateParameter(valid_595520, JString, required = true,
                                 default = nil)
  if valid_595520 != nil:
    section.add "name", valid_595520
  var valid_595521 = path.getOrDefault("subscriptionId")
  valid_595521 = validateParameter(valid_595521, JString, required = true,
                                 default = nil)
  if valid_595521 != nil:
    section.add "subscriptionId", valid_595521
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595522 = query.getOrDefault("api-version")
  valid_595522 = validateParameter(valid_595522, JString, required = true,
                                 default = nil)
  if valid_595522 != nil:
    section.add "api-version", valid_595522
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595524: Call_SitesApplySlotConfigToProduction_595516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595524.validator(path, query, header, formData, body)
  let scheme = call_595524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595524.url(scheme.get, call_595524.host, call_595524.base,
                         call_595524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595524, url, valid)

proc call*(call_595525: Call_SitesApplySlotConfigToProduction_595516;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesApplySlotConfigToProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  var path_595526 = newJObject()
  var query_595527 = newJObject()
  var body_595528 = newJObject()
  add(path_595526, "resourceGroupName", newJString(resourceGroupName))
  add(query_595527, "api-version", newJString(apiVersion))
  add(path_595526, "name", newJString(name))
  add(path_595526, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_595528 = slotSwapEntity
  result = call_595525.call(path_595526, query_595527, nil, nil, body_595528)

var sitesApplySlotConfigToProduction* = Call_SitesApplySlotConfigToProduction_595516(
    name: "sitesApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_SitesApplySlotConfigToProduction_595517, base: "",
    url: url_SitesApplySlotConfigToProduction_595518, schemes: {Scheme.Https})
type
  Call_SitesBackupSite_595529 = ref object of OpenApiRestCall_593421
proc url_SitesBackupSite_595531(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSite_595530(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595532 = path.getOrDefault("resourceGroupName")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = nil)
  if valid_595532 != nil:
    section.add "resourceGroupName", valid_595532
  var valid_595533 = path.getOrDefault("name")
  valid_595533 = validateParameter(valid_595533, JString, required = true,
                                 default = nil)
  if valid_595533 != nil:
    section.add "name", valid_595533
  var valid_595534 = path.getOrDefault("subscriptionId")
  valid_595534 = validateParameter(valid_595534, JString, required = true,
                                 default = nil)
  if valid_595534 != nil:
    section.add "subscriptionId", valid_595534
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595535 = query.getOrDefault("api-version")
  valid_595535 = validateParameter(valid_595535, JString, required = true,
                                 default = nil)
  if valid_595535 != nil:
    section.add "api-version", valid_595535
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595537: Call_SitesBackupSite_595529; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595537.validator(path, query, header, formData, body)
  let scheme = call_595537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595537.url(scheme.get, call_595537.host, call_595537.base,
                         call_595537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595537, url, valid)

proc call*(call_595538: Call_SitesBackupSite_595529; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## sitesBackupSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_595539 = newJObject()
  var query_595540 = newJObject()
  var body_595541 = newJObject()
  add(path_595539, "resourceGroupName", newJString(resourceGroupName))
  add(query_595540, "api-version", newJString(apiVersion))
  add(path_595539, "name", newJString(name))
  add(path_595539, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595541 = request
  result = call_595538.call(path_595539, query_595540, nil, nil, body_595541)

var sitesBackupSite* = Call_SitesBackupSite_595529(name: "sitesBackupSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_SitesBackupSite_595530, base: "", url: url_SitesBackupSite_595531,
    schemes: {Scheme.Https})
type
  Call_SitesListSiteBackups_595542 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteBackups_595544(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackups_595543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595545 = path.getOrDefault("resourceGroupName")
  valid_595545 = validateParameter(valid_595545, JString, required = true,
                                 default = nil)
  if valid_595545 != nil:
    section.add "resourceGroupName", valid_595545
  var valid_595546 = path.getOrDefault("name")
  valid_595546 = validateParameter(valid_595546, JString, required = true,
                                 default = nil)
  if valid_595546 != nil:
    section.add "name", valid_595546
  var valid_595547 = path.getOrDefault("subscriptionId")
  valid_595547 = validateParameter(valid_595547, JString, required = true,
                                 default = nil)
  if valid_595547 != nil:
    section.add "subscriptionId", valid_595547
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595548 = query.getOrDefault("api-version")
  valid_595548 = validateParameter(valid_595548, JString, required = true,
                                 default = nil)
  if valid_595548 != nil:
    section.add "api-version", valid_595548
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595549: Call_SitesListSiteBackups_595542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595549.validator(path, query, header, formData, body)
  let scheme = call_595549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595549.url(scheme.get, call_595549.host, call_595549.base,
                         call_595549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595549, url, valid)

proc call*(call_595550: Call_SitesListSiteBackups_595542;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteBackups
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595551 = newJObject()
  var query_595552 = newJObject()
  add(path_595551, "resourceGroupName", newJString(resourceGroupName))
  add(query_595552, "api-version", newJString(apiVersion))
  add(path_595551, "name", newJString(name))
  add(path_595551, "subscriptionId", newJString(subscriptionId))
  result = call_595550.call(path_595551, query_595552, nil, nil, nil)

var sitesListSiteBackups* = Call_SitesListSiteBackups_595542(
    name: "sitesListSiteBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_SitesListSiteBackups_595543, base: "",
    url: url_SitesListSiteBackups_595544, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestore_595553 = ref object of OpenApiRestCall_593421
proc url_SitesDiscoverSiteRestore_595555(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestore_595554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595556 = path.getOrDefault("resourceGroupName")
  valid_595556 = validateParameter(valid_595556, JString, required = true,
                                 default = nil)
  if valid_595556 != nil:
    section.add "resourceGroupName", valid_595556
  var valid_595557 = path.getOrDefault("name")
  valid_595557 = validateParameter(valid_595557, JString, required = true,
                                 default = nil)
  if valid_595557 != nil:
    section.add "name", valid_595557
  var valid_595558 = path.getOrDefault("subscriptionId")
  valid_595558 = validateParameter(valid_595558, JString, required = true,
                                 default = nil)
  if valid_595558 != nil:
    section.add "subscriptionId", valid_595558
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595559 = query.getOrDefault("api-version")
  valid_595559 = validateParameter(valid_595559, JString, required = true,
                                 default = nil)
  if valid_595559 != nil:
    section.add "api-version", valid_595559
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595561: Call_SitesDiscoverSiteRestore_595553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595561.validator(path, query, header, formData, body)
  let scheme = call_595561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595561.url(scheme.get, call_595561.host, call_595561.base,
                         call_595561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595561, url, valid)

proc call*(call_595562: Call_SitesDiscoverSiteRestore_595553;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestore
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_595563 = newJObject()
  var query_595564 = newJObject()
  var body_595565 = newJObject()
  add(path_595563, "resourceGroupName", newJString(resourceGroupName))
  add(query_595564, "api-version", newJString(apiVersion))
  add(path_595563, "name", newJString(name))
  add(path_595563, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595565 = request
  result = call_595562.call(path_595563, query_595564, nil, nil, body_595565)

var sitesDiscoverSiteRestore* = Call_SitesDiscoverSiteRestore_595553(
    name: "sitesDiscoverSiteRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_SitesDiscoverSiteRestore_595554, base: "",
    url: url_SitesDiscoverSiteRestore_595555, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatus_595566 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupStatus_595568(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatus_595567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595569 = path.getOrDefault("resourceGroupName")
  valid_595569 = validateParameter(valid_595569, JString, required = true,
                                 default = nil)
  if valid_595569 != nil:
    section.add "resourceGroupName", valid_595569
  var valid_595570 = path.getOrDefault("name")
  valid_595570 = validateParameter(valid_595570, JString, required = true,
                                 default = nil)
  if valid_595570 != nil:
    section.add "name", valid_595570
  var valid_595571 = path.getOrDefault("subscriptionId")
  valid_595571 = validateParameter(valid_595571, JString, required = true,
                                 default = nil)
  if valid_595571 != nil:
    section.add "subscriptionId", valid_595571
  var valid_595572 = path.getOrDefault("backupId")
  valid_595572 = validateParameter(valid_595572, JString, required = true,
                                 default = nil)
  if valid_595572 != nil:
    section.add "backupId", valid_595572
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595573 = query.getOrDefault("api-version")
  valid_595573 = validateParameter(valid_595573, JString, required = true,
                                 default = nil)
  if valid_595573 != nil:
    section.add "api-version", valid_595573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595574: Call_SitesGetSiteBackupStatus_595566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595574.validator(path, query, header, formData, body)
  let scheme = call_595574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595574.url(scheme.get, call_595574.host, call_595574.base,
                         call_595574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595574, url, valid)

proc call*(call_595575: Call_SitesGetSiteBackupStatus_595566;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesGetSiteBackupStatus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_595576 = newJObject()
  var query_595577 = newJObject()
  add(path_595576, "resourceGroupName", newJString(resourceGroupName))
  add(query_595577, "api-version", newJString(apiVersion))
  add(path_595576, "name", newJString(name))
  add(path_595576, "subscriptionId", newJString(subscriptionId))
  add(path_595576, "backupId", newJString(backupId))
  result = call_595575.call(path_595576, query_595577, nil, nil, nil)

var sitesGetSiteBackupStatus* = Call_SitesGetSiteBackupStatus_595566(
    name: "sitesGetSiteBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatus_595567, base: "",
    url: url_SitesGetSiteBackupStatus_595568, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackup_595578 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteBackup_595580(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackup_595579(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595581 = path.getOrDefault("resourceGroupName")
  valid_595581 = validateParameter(valid_595581, JString, required = true,
                                 default = nil)
  if valid_595581 != nil:
    section.add "resourceGroupName", valid_595581
  var valid_595582 = path.getOrDefault("name")
  valid_595582 = validateParameter(valid_595582, JString, required = true,
                                 default = nil)
  if valid_595582 != nil:
    section.add "name", valid_595582
  var valid_595583 = path.getOrDefault("subscriptionId")
  valid_595583 = validateParameter(valid_595583, JString, required = true,
                                 default = nil)
  if valid_595583 != nil:
    section.add "subscriptionId", valid_595583
  var valid_595584 = path.getOrDefault("backupId")
  valid_595584 = validateParameter(valid_595584, JString, required = true,
                                 default = nil)
  if valid_595584 != nil:
    section.add "backupId", valid_595584
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595585 = query.getOrDefault("api-version")
  valid_595585 = validateParameter(valid_595585, JString, required = true,
                                 default = nil)
  if valid_595585 != nil:
    section.add "api-version", valid_595585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595586: Call_SitesDeleteBackup_595578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595586.validator(path, query, header, formData, body)
  let scheme = call_595586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595586.url(scheme.get, call_595586.host, call_595586.base,
                         call_595586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595586, url, valid)

proc call*(call_595587: Call_SitesDeleteBackup_595578; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## sitesDeleteBackup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_595588 = newJObject()
  var query_595589 = newJObject()
  add(path_595588, "resourceGroupName", newJString(resourceGroupName))
  add(query_595589, "api-version", newJString(apiVersion))
  add(path_595588, "name", newJString(name))
  add(path_595588, "subscriptionId", newJString(subscriptionId))
  add(path_595588, "backupId", newJString(backupId))
  result = call_595587.call(path_595588, query_595589, nil, nil, nil)

var sitesDeleteBackup* = Call_SitesDeleteBackup_595578(name: "sitesDeleteBackup",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesDeleteBackup_595579, base: "",
    url: url_SitesDeleteBackup_595580, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecrets_595590 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupStatusSecrets_595592(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecrets_595591(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595593 = path.getOrDefault("resourceGroupName")
  valid_595593 = validateParameter(valid_595593, JString, required = true,
                                 default = nil)
  if valid_595593 != nil:
    section.add "resourceGroupName", valid_595593
  var valid_595594 = path.getOrDefault("name")
  valid_595594 = validateParameter(valid_595594, JString, required = true,
                                 default = nil)
  if valid_595594 != nil:
    section.add "name", valid_595594
  var valid_595595 = path.getOrDefault("subscriptionId")
  valid_595595 = validateParameter(valid_595595, JString, required = true,
                                 default = nil)
  if valid_595595 != nil:
    section.add "subscriptionId", valid_595595
  var valid_595596 = path.getOrDefault("backupId")
  valid_595596 = validateParameter(valid_595596, JString, required = true,
                                 default = nil)
  if valid_595596 != nil:
    section.add "backupId", valid_595596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595597 = query.getOrDefault("api-version")
  valid_595597 = validateParameter(valid_595597, JString, required = true,
                                 default = nil)
  if valid_595597 != nil:
    section.add "api-version", valid_595597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595599: Call_SitesGetSiteBackupStatusSecrets_595590;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595599.validator(path, query, header, formData, body)
  let scheme = call_595599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595599.url(scheme.get, call_595599.host, call_595599.base,
                         call_595599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595599, url, valid)

proc call*(call_595600: Call_SitesGetSiteBackupStatusSecrets_595590;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSecrets
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  ##   backupId: string (required)
  ##           : Id of backup
  var path_595601 = newJObject()
  var query_595602 = newJObject()
  var body_595603 = newJObject()
  add(path_595601, "resourceGroupName", newJString(resourceGroupName))
  add(query_595602, "api-version", newJString(apiVersion))
  add(path_595601, "name", newJString(name))
  add(path_595601, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595603 = request
  add(path_595601, "backupId", newJString(backupId))
  result = call_595600.call(path_595601, query_595602, nil, nil, body_595603)

var sitesGetSiteBackupStatusSecrets* = Call_SitesGetSiteBackupStatusSecrets_595590(
    name: "sitesGetSiteBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecrets_595591, base: "",
    url: url_SitesGetSiteBackupStatusSecrets_595592, schemes: {Scheme.Https})
type
  Call_SitesRestoreSite_595604 = ref object of OpenApiRestCall_593421
proc url_SitesRestoreSite_595606(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSite_595605(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595607 = path.getOrDefault("resourceGroupName")
  valid_595607 = validateParameter(valid_595607, JString, required = true,
                                 default = nil)
  if valid_595607 != nil:
    section.add "resourceGroupName", valid_595607
  var valid_595608 = path.getOrDefault("name")
  valid_595608 = validateParameter(valid_595608, JString, required = true,
                                 default = nil)
  if valid_595608 != nil:
    section.add "name", valid_595608
  var valid_595609 = path.getOrDefault("subscriptionId")
  valid_595609 = validateParameter(valid_595609, JString, required = true,
                                 default = nil)
  if valid_595609 != nil:
    section.add "subscriptionId", valid_595609
  var valid_595610 = path.getOrDefault("backupId")
  valid_595610 = validateParameter(valid_595610, JString, required = true,
                                 default = nil)
  if valid_595610 != nil:
    section.add "backupId", valid_595610
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595611 = query.getOrDefault("api-version")
  valid_595611 = validateParameter(valid_595611, JString, required = true,
                                 default = nil)
  if valid_595611 != nil:
    section.add "api-version", valid_595611
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595613: Call_SitesRestoreSite_595604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595613.validator(path, query, header, formData, body)
  let scheme = call_595613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595613.url(scheme.get, call_595613.host, call_595613.base,
                         call_595613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595613, url, valid)

proc call*(call_595614: Call_SitesRestoreSite_595604; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## sitesRestoreSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  ##   backupId: string (required)
  ##           : Id of backup to restore
  var path_595615 = newJObject()
  var query_595616 = newJObject()
  var body_595617 = newJObject()
  add(path_595615, "resourceGroupName", newJString(resourceGroupName))
  add(query_595616, "api-version", newJString(apiVersion))
  add(path_595615, "name", newJString(name))
  add(path_595615, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595617 = request
  add(path_595615, "backupId", newJString(backupId))
  result = call_595614.call(path_595615, query_595616, nil, nil, body_595617)

var sitesRestoreSite* = Call_SitesRestoreSite_595604(name: "sitesRestoreSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSite_595605, base: "",
    url: url_SitesRestoreSite_595606, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettings_595618 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteAppSettings_595620(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettings_595619(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595621 = path.getOrDefault("resourceGroupName")
  valid_595621 = validateParameter(valid_595621, JString, required = true,
                                 default = nil)
  if valid_595621 != nil:
    section.add "resourceGroupName", valid_595621
  var valid_595622 = path.getOrDefault("name")
  valid_595622 = validateParameter(valid_595622, JString, required = true,
                                 default = nil)
  if valid_595622 != nil:
    section.add "name", valid_595622
  var valid_595623 = path.getOrDefault("subscriptionId")
  valid_595623 = validateParameter(valid_595623, JString, required = true,
                                 default = nil)
  if valid_595623 != nil:
    section.add "subscriptionId", valid_595623
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595624 = query.getOrDefault("api-version")
  valid_595624 = validateParameter(valid_595624, JString, required = true,
                                 default = nil)
  if valid_595624 != nil:
    section.add "api-version", valid_595624
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595626: Call_SitesUpdateSiteAppSettings_595618; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595626.validator(path, query, header, formData, body)
  let scheme = call_595626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595626.url(scheme.get, call_595626.host, call_595626.base,
                         call_595626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595626, url, valid)

proc call*(call_595627: Call_SitesUpdateSiteAppSettings_595618;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteAppSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595628 = newJObject()
  var query_595629 = newJObject()
  var body_595630 = newJObject()
  add(path_595628, "resourceGroupName", newJString(resourceGroupName))
  add(query_595629, "api-version", newJString(apiVersion))
  add(path_595628, "name", newJString(name))
  if appSettings != nil:
    body_595630 = appSettings
  add(path_595628, "subscriptionId", newJString(subscriptionId))
  result = call_595627.call(path_595628, query_595629, nil, nil, body_595630)

var sitesUpdateSiteAppSettings* = Call_SitesUpdateSiteAppSettings_595618(
    name: "sitesUpdateSiteAppSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettings_595619, base: "",
    url: url_SitesUpdateSiteAppSettings_595620, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettings_595631 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteAppSettings_595633(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettings_595632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595634 = path.getOrDefault("resourceGroupName")
  valid_595634 = validateParameter(valid_595634, JString, required = true,
                                 default = nil)
  if valid_595634 != nil:
    section.add "resourceGroupName", valid_595634
  var valid_595635 = path.getOrDefault("name")
  valid_595635 = validateParameter(valid_595635, JString, required = true,
                                 default = nil)
  if valid_595635 != nil:
    section.add "name", valid_595635
  var valid_595636 = path.getOrDefault("subscriptionId")
  valid_595636 = validateParameter(valid_595636, JString, required = true,
                                 default = nil)
  if valid_595636 != nil:
    section.add "subscriptionId", valid_595636
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595637 = query.getOrDefault("api-version")
  valid_595637 = validateParameter(valid_595637, JString, required = true,
                                 default = nil)
  if valid_595637 != nil:
    section.add "api-version", valid_595637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595638: Call_SitesListSiteAppSettings_595631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595638.validator(path, query, header, formData, body)
  let scheme = call_595638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595638.url(scheme.get, call_595638.host, call_595638.base,
                         call_595638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595638, url, valid)

proc call*(call_595639: Call_SitesListSiteAppSettings_595631;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAppSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595640 = newJObject()
  var query_595641 = newJObject()
  add(path_595640, "resourceGroupName", newJString(resourceGroupName))
  add(query_595641, "api-version", newJString(apiVersion))
  add(path_595640, "name", newJString(name))
  add(path_595640, "subscriptionId", newJString(subscriptionId))
  result = call_595639.call(path_595640, query_595641, nil, nil, nil)

var sitesListSiteAppSettings* = Call_SitesListSiteAppSettings_595631(
    name: "sitesListSiteAppSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettings_595632, base: "",
    url: url_SitesListSiteAppSettings_595633, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettings_595642 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteAuthSettings_595644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettings_595643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595645 = path.getOrDefault("resourceGroupName")
  valid_595645 = validateParameter(valid_595645, JString, required = true,
                                 default = nil)
  if valid_595645 != nil:
    section.add "resourceGroupName", valid_595645
  var valid_595646 = path.getOrDefault("name")
  valid_595646 = validateParameter(valid_595646, JString, required = true,
                                 default = nil)
  if valid_595646 != nil:
    section.add "name", valid_595646
  var valid_595647 = path.getOrDefault("subscriptionId")
  valid_595647 = validateParameter(valid_595647, JString, required = true,
                                 default = nil)
  if valid_595647 != nil:
    section.add "subscriptionId", valid_595647
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595648 = query.getOrDefault("api-version")
  valid_595648 = validateParameter(valid_595648, JString, required = true,
                                 default = nil)
  if valid_595648 != nil:
    section.add "api-version", valid_595648
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595650: Call_SitesUpdateSiteAuthSettings_595642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595650.validator(path, query, header, formData, body)
  let scheme = call_595650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595650.url(scheme.get, call_595650.host, call_595650.base,
                         call_595650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595650, url, valid)

proc call*(call_595651: Call_SitesUpdateSiteAuthSettings_595642;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## sitesUpdateSiteAuthSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  var path_595652 = newJObject()
  var query_595653 = newJObject()
  var body_595654 = newJObject()
  add(path_595652, "resourceGroupName", newJString(resourceGroupName))
  add(query_595653, "api-version", newJString(apiVersion))
  add(path_595652, "name", newJString(name))
  add(path_595652, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_595654 = siteAuthSettings
  result = call_595651.call(path_595652, query_595653, nil, nil, body_595654)

var sitesUpdateSiteAuthSettings* = Call_SitesUpdateSiteAuthSettings_595642(
    name: "sitesUpdateSiteAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettings_595643, base: "",
    url: url_SitesUpdateSiteAuthSettings_595644, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettings_595655 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteAuthSettings_595657(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettings_595656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595658 = path.getOrDefault("resourceGroupName")
  valid_595658 = validateParameter(valid_595658, JString, required = true,
                                 default = nil)
  if valid_595658 != nil:
    section.add "resourceGroupName", valid_595658
  var valid_595659 = path.getOrDefault("name")
  valid_595659 = validateParameter(valid_595659, JString, required = true,
                                 default = nil)
  if valid_595659 != nil:
    section.add "name", valid_595659
  var valid_595660 = path.getOrDefault("subscriptionId")
  valid_595660 = validateParameter(valid_595660, JString, required = true,
                                 default = nil)
  if valid_595660 != nil:
    section.add "subscriptionId", valid_595660
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595661 = query.getOrDefault("api-version")
  valid_595661 = validateParameter(valid_595661, JString, required = true,
                                 default = nil)
  if valid_595661 != nil:
    section.add "api-version", valid_595661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595662: Call_SitesListSiteAuthSettings_595655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595662.validator(path, query, header, formData, body)
  let scheme = call_595662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595662.url(scheme.get, call_595662.host, call_595662.base,
                         call_595662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595662, url, valid)

proc call*(call_595663: Call_SitesListSiteAuthSettings_595655;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAuthSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595664 = newJObject()
  var query_595665 = newJObject()
  add(path_595664, "resourceGroupName", newJString(resourceGroupName))
  add(query_595665, "api-version", newJString(apiVersion))
  add(path_595664, "name", newJString(name))
  add(path_595664, "subscriptionId", newJString(subscriptionId))
  result = call_595663.call(path_595664, query_595665, nil, nil, nil)

var sitesListSiteAuthSettings* = Call_SitesListSiteAuthSettings_595655(
    name: "sitesListSiteAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettings_595656, base: "",
    url: url_SitesListSiteAuthSettings_595657, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfiguration_595666 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteBackupConfiguration_595668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfiguration_595667(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595669 = path.getOrDefault("resourceGroupName")
  valid_595669 = validateParameter(valid_595669, JString, required = true,
                                 default = nil)
  if valid_595669 != nil:
    section.add "resourceGroupName", valid_595669
  var valid_595670 = path.getOrDefault("name")
  valid_595670 = validateParameter(valid_595670, JString, required = true,
                                 default = nil)
  if valid_595670 != nil:
    section.add "name", valid_595670
  var valid_595671 = path.getOrDefault("subscriptionId")
  valid_595671 = validateParameter(valid_595671, JString, required = true,
                                 default = nil)
  if valid_595671 != nil:
    section.add "subscriptionId", valid_595671
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595672 = query.getOrDefault("api-version")
  valid_595672 = validateParameter(valid_595672, JString, required = true,
                                 default = nil)
  if valid_595672 != nil:
    section.add "api-version", valid_595672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595674: Call_SitesUpdateSiteBackupConfiguration_595666;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595674.validator(path, query, header, formData, body)
  let scheme = call_595674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595674.url(scheme.get, call_595674.host, call_595674.base,
                         call_595674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595674, url, valid)

proc call*(call_595675: Call_SitesUpdateSiteBackupConfiguration_595666;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfiguration
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_595676 = newJObject()
  var query_595677 = newJObject()
  var body_595678 = newJObject()
  add(path_595676, "resourceGroupName", newJString(resourceGroupName))
  add(query_595677, "api-version", newJString(apiVersion))
  add(path_595676, "name", newJString(name))
  add(path_595676, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595678 = request
  result = call_595675.call(path_595676, query_595677, nil, nil, body_595678)

var sitesUpdateSiteBackupConfiguration* = Call_SitesUpdateSiteBackupConfiguration_595666(
    name: "sitesUpdateSiteBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfiguration_595667, base: "",
    url: url_SitesUpdateSiteBackupConfiguration_595668, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfiguration_595679 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupConfiguration_595681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfiguration_595680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595682 = path.getOrDefault("resourceGroupName")
  valid_595682 = validateParameter(valid_595682, JString, required = true,
                                 default = nil)
  if valid_595682 != nil:
    section.add "resourceGroupName", valid_595682
  var valid_595683 = path.getOrDefault("name")
  valid_595683 = validateParameter(valid_595683, JString, required = true,
                                 default = nil)
  if valid_595683 != nil:
    section.add "name", valid_595683
  var valid_595684 = path.getOrDefault("subscriptionId")
  valid_595684 = validateParameter(valid_595684, JString, required = true,
                                 default = nil)
  if valid_595684 != nil:
    section.add "subscriptionId", valid_595684
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595685 = query.getOrDefault("api-version")
  valid_595685 = validateParameter(valid_595685, JString, required = true,
                                 default = nil)
  if valid_595685 != nil:
    section.add "api-version", valid_595685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595686: Call_SitesGetSiteBackupConfiguration_595679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595686.validator(path, query, header, formData, body)
  let scheme = call_595686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595686.url(scheme.get, call_595686.host, call_595686.base,
                         call_595686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595686, url, valid)

proc call*(call_595687: Call_SitesGetSiteBackupConfiguration_595679;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteBackupConfiguration
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595688 = newJObject()
  var query_595689 = newJObject()
  add(path_595688, "resourceGroupName", newJString(resourceGroupName))
  add(query_595689, "api-version", newJString(apiVersion))
  add(path_595688, "name", newJString(name))
  add(path_595688, "subscriptionId", newJString(subscriptionId))
  result = call_595687.call(path_595688, query_595689, nil, nil, nil)

var sitesGetSiteBackupConfiguration* = Call_SitesGetSiteBackupConfiguration_595679(
    name: "sitesGetSiteBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfiguration_595680, base: "",
    url: url_SitesGetSiteBackupConfiguration_595681, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStrings_595690 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteConnectionStrings_595692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStrings_595691(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595693 = path.getOrDefault("resourceGroupName")
  valid_595693 = validateParameter(valid_595693, JString, required = true,
                                 default = nil)
  if valid_595693 != nil:
    section.add "resourceGroupName", valid_595693
  var valid_595694 = path.getOrDefault("name")
  valid_595694 = validateParameter(valid_595694, JString, required = true,
                                 default = nil)
  if valid_595694 != nil:
    section.add "name", valid_595694
  var valid_595695 = path.getOrDefault("subscriptionId")
  valid_595695 = validateParameter(valid_595695, JString, required = true,
                                 default = nil)
  if valid_595695 != nil:
    section.add "subscriptionId", valid_595695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595696 = query.getOrDefault("api-version")
  valid_595696 = validateParameter(valid_595696, JString, required = true,
                                 default = nil)
  if valid_595696 != nil:
    section.add "api-version", valid_595696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595698: Call_SitesUpdateSiteConnectionStrings_595690;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595698.validator(path, query, header, formData, body)
  let scheme = call_595698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595698.url(scheme.get, call_595698.host, call_595698.base,
                         call_595698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595698, url, valid)

proc call*(call_595699: Call_SitesUpdateSiteConnectionStrings_595690;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConnectionStrings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595700 = newJObject()
  var query_595701 = newJObject()
  var body_595702 = newJObject()
  add(path_595700, "resourceGroupName", newJString(resourceGroupName))
  add(query_595701, "api-version", newJString(apiVersion))
  add(path_595700, "name", newJString(name))
  if connectionStrings != nil:
    body_595702 = connectionStrings
  add(path_595700, "subscriptionId", newJString(subscriptionId))
  result = call_595699.call(path_595700, query_595701, nil, nil, body_595702)

var sitesUpdateSiteConnectionStrings* = Call_SitesUpdateSiteConnectionStrings_595690(
    name: "sitesUpdateSiteConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStrings_595691, base: "",
    url: url_SitesUpdateSiteConnectionStrings_595692, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStrings_595703 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteConnectionStrings_595705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStrings_595704(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595706 = path.getOrDefault("resourceGroupName")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = nil)
  if valid_595706 != nil:
    section.add "resourceGroupName", valid_595706
  var valid_595707 = path.getOrDefault("name")
  valid_595707 = validateParameter(valid_595707, JString, required = true,
                                 default = nil)
  if valid_595707 != nil:
    section.add "name", valid_595707
  var valid_595708 = path.getOrDefault("subscriptionId")
  valid_595708 = validateParameter(valid_595708, JString, required = true,
                                 default = nil)
  if valid_595708 != nil:
    section.add "subscriptionId", valid_595708
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595709 = query.getOrDefault("api-version")
  valid_595709 = validateParameter(valid_595709, JString, required = true,
                                 default = nil)
  if valid_595709 != nil:
    section.add "api-version", valid_595709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595710: Call_SitesListSiteConnectionStrings_595703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595710.validator(path, query, header, formData, body)
  let scheme = call_595710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595710.url(scheme.get, call_595710.host, call_595710.base,
                         call_595710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595710, url, valid)

proc call*(call_595711: Call_SitesListSiteConnectionStrings_595703;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteConnectionStrings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595712 = newJObject()
  var query_595713 = newJObject()
  add(path_595712, "resourceGroupName", newJString(resourceGroupName))
  add(query_595713, "api-version", newJString(apiVersion))
  add(path_595712, "name", newJString(name))
  add(path_595712, "subscriptionId", newJString(subscriptionId))
  result = call_595711.call(path_595712, query_595713, nil, nil, nil)

var sitesListSiteConnectionStrings* = Call_SitesListSiteConnectionStrings_595703(
    name: "sitesListSiteConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStrings_595704, base: "",
    url: url_SitesListSiteConnectionStrings_595705, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfig_595725 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteLogsConfig_595727(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfig_595726(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595728 = path.getOrDefault("resourceGroupName")
  valid_595728 = validateParameter(valid_595728, JString, required = true,
                                 default = nil)
  if valid_595728 != nil:
    section.add "resourceGroupName", valid_595728
  var valid_595729 = path.getOrDefault("name")
  valid_595729 = validateParameter(valid_595729, JString, required = true,
                                 default = nil)
  if valid_595729 != nil:
    section.add "name", valid_595729
  var valid_595730 = path.getOrDefault("subscriptionId")
  valid_595730 = validateParameter(valid_595730, JString, required = true,
                                 default = nil)
  if valid_595730 != nil:
    section.add "subscriptionId", valid_595730
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595731 = query.getOrDefault("api-version")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = nil)
  if valid_595731 != nil:
    section.add "api-version", valid_595731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595733: Call_SitesUpdateSiteLogsConfig_595725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595733.validator(path, query, header, formData, body)
  let scheme = call_595733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595733.url(scheme.get, call_595733.host, call_595733.base,
                         call_595733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595733, url, valid)

proc call*(call_595734: Call_SitesUpdateSiteLogsConfig_595725;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteLogsConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595735 = newJObject()
  var query_595736 = newJObject()
  var body_595737 = newJObject()
  add(path_595735, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_595737 = siteLogsConfig
  add(query_595736, "api-version", newJString(apiVersion))
  add(path_595735, "name", newJString(name))
  add(path_595735, "subscriptionId", newJString(subscriptionId))
  result = call_595734.call(path_595735, query_595736, nil, nil, body_595737)

var sitesUpdateSiteLogsConfig* = Call_SitesUpdateSiteLogsConfig_595725(
    name: "sitesUpdateSiteLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfig_595726, base: "",
    url: url_SitesUpdateSiteLogsConfig_595727, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfig_595714 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteLogsConfig_595716(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfig_595715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595717 = path.getOrDefault("resourceGroupName")
  valid_595717 = validateParameter(valid_595717, JString, required = true,
                                 default = nil)
  if valid_595717 != nil:
    section.add "resourceGroupName", valid_595717
  var valid_595718 = path.getOrDefault("name")
  valid_595718 = validateParameter(valid_595718, JString, required = true,
                                 default = nil)
  if valid_595718 != nil:
    section.add "name", valid_595718
  var valid_595719 = path.getOrDefault("subscriptionId")
  valid_595719 = validateParameter(valid_595719, JString, required = true,
                                 default = nil)
  if valid_595719 != nil:
    section.add "subscriptionId", valid_595719
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595720 = query.getOrDefault("api-version")
  valid_595720 = validateParameter(valid_595720, JString, required = true,
                                 default = nil)
  if valid_595720 != nil:
    section.add "api-version", valid_595720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595721: Call_SitesGetSiteLogsConfig_595714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595721.validator(path, query, header, formData, body)
  let scheme = call_595721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595721.url(scheme.get, call_595721.host, call_595721.base,
                         call_595721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595721, url, valid)

proc call*(call_595722: Call_SitesGetSiteLogsConfig_595714;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteLogsConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595723 = newJObject()
  var query_595724 = newJObject()
  add(path_595723, "resourceGroupName", newJString(resourceGroupName))
  add(query_595724, "api-version", newJString(apiVersion))
  add(path_595723, "name", newJString(name))
  add(path_595723, "subscriptionId", newJString(subscriptionId))
  result = call_595722.call(path_595723, query_595724, nil, nil, nil)

var sitesGetSiteLogsConfig* = Call_SitesGetSiteLogsConfig_595714(
    name: "sitesGetSiteLogsConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesGetSiteLogsConfig_595715, base: "",
    url: url_SitesGetSiteLogsConfig_595716, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadata_595738 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteMetadata_595740(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadata_595739(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595741 = path.getOrDefault("resourceGroupName")
  valid_595741 = validateParameter(valid_595741, JString, required = true,
                                 default = nil)
  if valid_595741 != nil:
    section.add "resourceGroupName", valid_595741
  var valid_595742 = path.getOrDefault("name")
  valid_595742 = validateParameter(valid_595742, JString, required = true,
                                 default = nil)
  if valid_595742 != nil:
    section.add "name", valid_595742
  var valid_595743 = path.getOrDefault("subscriptionId")
  valid_595743 = validateParameter(valid_595743, JString, required = true,
                                 default = nil)
  if valid_595743 != nil:
    section.add "subscriptionId", valid_595743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595744 = query.getOrDefault("api-version")
  valid_595744 = validateParameter(valid_595744, JString, required = true,
                                 default = nil)
  if valid_595744 != nil:
    section.add "api-version", valid_595744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595746: Call_SitesUpdateSiteMetadata_595738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595746.validator(path, query, header, formData, body)
  let scheme = call_595746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595746.url(scheme.get, call_595746.host, call_595746.base,
                         call_595746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595746, url, valid)

proc call*(call_595747: Call_SitesUpdateSiteMetadata_595738;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## sitesUpdateSiteMetadata
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  var path_595748 = newJObject()
  var query_595749 = newJObject()
  var body_595750 = newJObject()
  add(path_595748, "resourceGroupName", newJString(resourceGroupName))
  add(query_595749, "api-version", newJString(apiVersion))
  add(path_595748, "name", newJString(name))
  add(path_595748, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_595750 = metadata
  result = call_595747.call(path_595748, query_595749, nil, nil, body_595750)

var sitesUpdateSiteMetadata* = Call_SitesUpdateSiteMetadata_595738(
    name: "sitesUpdateSiteMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_SitesUpdateSiteMetadata_595739, base: "",
    url: url_SitesUpdateSiteMetadata_595740, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadata_595751 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteMetadata_595753(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadata_595752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595754 = path.getOrDefault("resourceGroupName")
  valid_595754 = validateParameter(valid_595754, JString, required = true,
                                 default = nil)
  if valid_595754 != nil:
    section.add "resourceGroupName", valid_595754
  var valid_595755 = path.getOrDefault("name")
  valid_595755 = validateParameter(valid_595755, JString, required = true,
                                 default = nil)
  if valid_595755 != nil:
    section.add "name", valid_595755
  var valid_595756 = path.getOrDefault("subscriptionId")
  valid_595756 = validateParameter(valid_595756, JString, required = true,
                                 default = nil)
  if valid_595756 != nil:
    section.add "subscriptionId", valid_595756
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595757 = query.getOrDefault("api-version")
  valid_595757 = validateParameter(valid_595757, JString, required = true,
                                 default = nil)
  if valid_595757 != nil:
    section.add "api-version", valid_595757
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595758: Call_SitesListSiteMetadata_595751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595758.validator(path, query, header, formData, body)
  let scheme = call_595758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595758.url(scheme.get, call_595758.host, call_595758.base,
                         call_595758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595758, url, valid)

proc call*(call_595759: Call_SitesListSiteMetadata_595751;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteMetadata
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595760 = newJObject()
  var query_595761 = newJObject()
  add(path_595760, "resourceGroupName", newJString(resourceGroupName))
  add(query_595761, "api-version", newJString(apiVersion))
  add(path_595760, "name", newJString(name))
  add(path_595760, "subscriptionId", newJString(subscriptionId))
  result = call_595759.call(path_595760, query_595761, nil, nil, nil)

var sitesListSiteMetadata* = Call_SitesListSiteMetadata_595751(
    name: "sitesListSiteMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_SitesListSiteMetadata_595752, base: "",
    url: url_SitesListSiteMetadata_595753, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentials_595762 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePublishingCredentials_595764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentials_595763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595765 = path.getOrDefault("resourceGroupName")
  valid_595765 = validateParameter(valid_595765, JString, required = true,
                                 default = nil)
  if valid_595765 != nil:
    section.add "resourceGroupName", valid_595765
  var valid_595766 = path.getOrDefault("name")
  valid_595766 = validateParameter(valid_595766, JString, required = true,
                                 default = nil)
  if valid_595766 != nil:
    section.add "name", valid_595766
  var valid_595767 = path.getOrDefault("subscriptionId")
  valid_595767 = validateParameter(valid_595767, JString, required = true,
                                 default = nil)
  if valid_595767 != nil:
    section.add "subscriptionId", valid_595767
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595768 = query.getOrDefault("api-version")
  valid_595768 = validateParameter(valid_595768, JString, required = true,
                                 default = nil)
  if valid_595768 != nil:
    section.add "api-version", valid_595768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595769: Call_SitesListSitePublishingCredentials_595762;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595769.validator(path, query, header, formData, body)
  let scheme = call_595769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595769.url(scheme.get, call_595769.host, call_595769.base,
                         call_595769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595769, url, valid)

proc call*(call_595770: Call_SitesListSitePublishingCredentials_595762;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePublishingCredentials
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595771 = newJObject()
  var query_595772 = newJObject()
  add(path_595771, "resourceGroupName", newJString(resourceGroupName))
  add(query_595772, "api-version", newJString(apiVersion))
  add(path_595771, "name", newJString(name))
  add(path_595771, "subscriptionId", newJString(subscriptionId))
  result = call_595770.call(path_595771, query_595772, nil, nil, nil)

var sitesListSitePublishingCredentials* = Call_SitesListSitePublishingCredentials_595762(
    name: "sitesListSitePublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentials_595763, base: "",
    url: url_SitesListSitePublishingCredentials_595764, schemes: {Scheme.Https})
type
  Call_SitesUpdateSlotConfigNames_595784 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSlotConfigNames_595786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSlotConfigNames_595785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595787 = path.getOrDefault("resourceGroupName")
  valid_595787 = validateParameter(valid_595787, JString, required = true,
                                 default = nil)
  if valid_595787 != nil:
    section.add "resourceGroupName", valid_595787
  var valid_595788 = path.getOrDefault("name")
  valid_595788 = validateParameter(valid_595788, JString, required = true,
                                 default = nil)
  if valid_595788 != nil:
    section.add "name", valid_595788
  var valid_595789 = path.getOrDefault("subscriptionId")
  valid_595789 = validateParameter(valid_595789, JString, required = true,
                                 default = nil)
  if valid_595789 != nil:
    section.add "subscriptionId", valid_595789
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595790 = query.getOrDefault("api-version")
  valid_595790 = validateParameter(valid_595790, JString, required = true,
                                 default = nil)
  if valid_595790 != nil:
    section.add "api-version", valid_595790
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595792: Call_SitesUpdateSlotConfigNames_595784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595792.validator(path, query, header, formData, body)
  let scheme = call_595792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595792.url(scheme.get, call_595792.host, call_595792.base,
                         call_595792.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595792, url, valid)

proc call*(call_595793: Call_SitesUpdateSlotConfigNames_595784;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSlotConfigNames
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595794 = newJObject()
  var query_595795 = newJObject()
  var body_595796 = newJObject()
  add(path_595794, "resourceGroupName", newJString(resourceGroupName))
  add(query_595795, "api-version", newJString(apiVersion))
  add(path_595794, "name", newJString(name))
  if slotConfigNames != nil:
    body_595796 = slotConfigNames
  add(path_595794, "subscriptionId", newJString(subscriptionId))
  result = call_595793.call(path_595794, query_595795, nil, nil, body_595796)

var sitesUpdateSlotConfigNames* = Call_SitesUpdateSlotConfigNames_595784(
    name: "sitesUpdateSlotConfigNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesUpdateSlotConfigNames_595785, base: "",
    url: url_SitesUpdateSlotConfigNames_595786, schemes: {Scheme.Https})
type
  Call_SitesGetSlotConfigNames_595773 = ref object of OpenApiRestCall_593421
proc url_SitesGetSlotConfigNames_595775(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotConfigNames_595774(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595776 = path.getOrDefault("resourceGroupName")
  valid_595776 = validateParameter(valid_595776, JString, required = true,
                                 default = nil)
  if valid_595776 != nil:
    section.add "resourceGroupName", valid_595776
  var valid_595777 = path.getOrDefault("name")
  valid_595777 = validateParameter(valid_595777, JString, required = true,
                                 default = nil)
  if valid_595777 != nil:
    section.add "name", valid_595777
  var valid_595778 = path.getOrDefault("subscriptionId")
  valid_595778 = validateParameter(valid_595778, JString, required = true,
                                 default = nil)
  if valid_595778 != nil:
    section.add "subscriptionId", valid_595778
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595779 = query.getOrDefault("api-version")
  valid_595779 = validateParameter(valid_595779, JString, required = true,
                                 default = nil)
  if valid_595779 != nil:
    section.add "api-version", valid_595779
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595780: Call_SitesGetSlotConfigNames_595773; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595780.validator(path, query, header, formData, body)
  let scheme = call_595780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595780.url(scheme.get, call_595780.host, call_595780.base,
                         call_595780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595780, url, valid)

proc call*(call_595781: Call_SitesGetSlotConfigNames_595773;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSlotConfigNames
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595782 = newJObject()
  var query_595783 = newJObject()
  add(path_595782, "resourceGroupName", newJString(resourceGroupName))
  add(query_595783, "api-version", newJString(apiVersion))
  add(path_595782, "name", newJString(name))
  add(path_595782, "subscriptionId", newJString(subscriptionId))
  result = call_595781.call(path_595782, query_595783, nil, nil, nil)

var sitesGetSlotConfigNames* = Call_SitesGetSlotConfigNames_595773(
    name: "sitesGetSlotConfigNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesGetSlotConfigNames_595774, base: "",
    url: url_SitesGetSlotConfigNames_595775, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfig_595808 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteConfig_595810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfig_595809(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595811 = path.getOrDefault("resourceGroupName")
  valid_595811 = validateParameter(valid_595811, JString, required = true,
                                 default = nil)
  if valid_595811 != nil:
    section.add "resourceGroupName", valid_595811
  var valid_595812 = path.getOrDefault("name")
  valid_595812 = validateParameter(valid_595812, JString, required = true,
                                 default = nil)
  if valid_595812 != nil:
    section.add "name", valid_595812
  var valid_595813 = path.getOrDefault("subscriptionId")
  valid_595813 = validateParameter(valid_595813, JString, required = true,
                                 default = nil)
  if valid_595813 != nil:
    section.add "subscriptionId", valid_595813
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595814 = query.getOrDefault("api-version")
  valid_595814 = validateParameter(valid_595814, JString, required = true,
                                 default = nil)
  if valid_595814 != nil:
    section.add "api-version", valid_595814
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595816: Call_SitesCreateOrUpdateSiteConfig_595808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595816.validator(path, query, header, formData, body)
  let scheme = call_595816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595816.url(scheme.get, call_595816.host, call_595816.base,
                         call_595816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595816, url, valid)

proc call*(call_595817: Call_SitesCreateOrUpdateSiteConfig_595808;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595818 = newJObject()
  var query_595819 = newJObject()
  var body_595820 = newJObject()
  add(path_595818, "resourceGroupName", newJString(resourceGroupName))
  add(query_595819, "api-version", newJString(apiVersion))
  add(path_595818, "name", newJString(name))
  if siteConfig != nil:
    body_595820 = siteConfig
  add(path_595818, "subscriptionId", newJString(subscriptionId))
  result = call_595817.call(path_595818, query_595819, nil, nil, body_595820)

var sitesCreateOrUpdateSiteConfig* = Call_SitesCreateOrUpdateSiteConfig_595808(
    name: "sitesCreateOrUpdateSiteConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfig_595809, base: "",
    url: url_SitesCreateOrUpdateSiteConfig_595810, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfig_595797 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteConfig_595799(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfig_595798(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595800 = path.getOrDefault("resourceGroupName")
  valid_595800 = validateParameter(valid_595800, JString, required = true,
                                 default = nil)
  if valid_595800 != nil:
    section.add "resourceGroupName", valid_595800
  var valid_595801 = path.getOrDefault("name")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = nil)
  if valid_595801 != nil:
    section.add "name", valid_595801
  var valid_595802 = path.getOrDefault("subscriptionId")
  valid_595802 = validateParameter(valid_595802, JString, required = true,
                                 default = nil)
  if valid_595802 != nil:
    section.add "subscriptionId", valid_595802
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595803 = query.getOrDefault("api-version")
  valid_595803 = validateParameter(valid_595803, JString, required = true,
                                 default = nil)
  if valid_595803 != nil:
    section.add "api-version", valid_595803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595804: Call_SitesGetSiteConfig_595797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595804.validator(path, query, header, formData, body)
  let scheme = call_595804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595804.url(scheme.get, call_595804.host, call_595804.base,
                         call_595804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595804, url, valid)

proc call*(call_595805: Call_SitesGetSiteConfig_595797; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesGetSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595806 = newJObject()
  var query_595807 = newJObject()
  add(path_595806, "resourceGroupName", newJString(resourceGroupName))
  add(query_595807, "api-version", newJString(apiVersion))
  add(path_595806, "name", newJString(name))
  add(path_595806, "subscriptionId", newJString(subscriptionId))
  result = call_595805.call(path_595806, query_595807, nil, nil, nil)

var sitesGetSiteConfig* = Call_SitesGetSiteConfig_595797(
    name: "sitesGetSiteConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesGetSiteConfig_595798, base: "",
    url: url_SitesGetSiteConfig_595799, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfig_595821 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteConfig_595823(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfig_595822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595824 = path.getOrDefault("resourceGroupName")
  valid_595824 = validateParameter(valid_595824, JString, required = true,
                                 default = nil)
  if valid_595824 != nil:
    section.add "resourceGroupName", valid_595824
  var valid_595825 = path.getOrDefault("name")
  valid_595825 = validateParameter(valid_595825, JString, required = true,
                                 default = nil)
  if valid_595825 != nil:
    section.add "name", valid_595825
  var valid_595826 = path.getOrDefault("subscriptionId")
  valid_595826 = validateParameter(valid_595826, JString, required = true,
                                 default = nil)
  if valid_595826 != nil:
    section.add "subscriptionId", valid_595826
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595827 = query.getOrDefault("api-version")
  valid_595827 = validateParameter(valid_595827, JString, required = true,
                                 default = nil)
  if valid_595827 != nil:
    section.add "api-version", valid_595827
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595829: Call_SitesUpdateSiteConfig_595821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595829.validator(path, query, header, formData, body)
  let scheme = call_595829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595829.url(scheme.get, call_595829.host, call_595829.base,
                         call_595829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595829, url, valid)

proc call*(call_595830: Call_SitesUpdateSiteConfig_595821;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595831 = newJObject()
  var query_595832 = newJObject()
  var body_595833 = newJObject()
  add(path_595831, "resourceGroupName", newJString(resourceGroupName))
  add(query_595832, "api-version", newJString(apiVersion))
  add(path_595831, "name", newJString(name))
  if siteConfig != nil:
    body_595833 = siteConfig
  add(path_595831, "subscriptionId", newJString(subscriptionId))
  result = call_595830.call(path_595831, query_595832, nil, nil, body_595833)

var sitesUpdateSiteConfig* = Call_SitesUpdateSiteConfig_595821(
    name: "sitesUpdateSiteConfig", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesUpdateSiteConfig_595822, base: "",
    url: url_SitesUpdateSiteConfig_595823, schemes: {Scheme.Https})
type
  Call_SitesGetDeployments_595834 = ref object of OpenApiRestCall_593421
proc url_SitesGetDeployments_595836(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployments_595835(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595837 = path.getOrDefault("resourceGroupName")
  valid_595837 = validateParameter(valid_595837, JString, required = true,
                                 default = nil)
  if valid_595837 != nil:
    section.add "resourceGroupName", valid_595837
  var valid_595838 = path.getOrDefault("name")
  valid_595838 = validateParameter(valid_595838, JString, required = true,
                                 default = nil)
  if valid_595838 != nil:
    section.add "name", valid_595838
  var valid_595839 = path.getOrDefault("subscriptionId")
  valid_595839 = validateParameter(valid_595839, JString, required = true,
                                 default = nil)
  if valid_595839 != nil:
    section.add "subscriptionId", valid_595839
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595840 = query.getOrDefault("api-version")
  valid_595840 = validateParameter(valid_595840, JString, required = true,
                                 default = nil)
  if valid_595840 != nil:
    section.add "api-version", valid_595840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595841: Call_SitesGetDeployments_595834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595841.validator(path, query, header, formData, body)
  let scheme = call_595841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595841.url(scheme.get, call_595841.host, call_595841.base,
                         call_595841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595841, url, valid)

proc call*(call_595842: Call_SitesGetDeployments_595834; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesGetDeployments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595843 = newJObject()
  var query_595844 = newJObject()
  add(path_595843, "resourceGroupName", newJString(resourceGroupName))
  add(query_595844, "api-version", newJString(apiVersion))
  add(path_595843, "name", newJString(name))
  add(path_595843, "subscriptionId", newJString(subscriptionId))
  result = call_595842.call(path_595843, query_595844, nil, nil, nil)

var sitesGetDeployments* = Call_SitesGetDeployments_595834(
    name: "sitesGetDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_SitesGetDeployments_595835, base: "",
    url: url_SitesGetDeployments_595836, schemes: {Scheme.Https})
type
  Call_SitesCreateDeployment_595857 = ref object of OpenApiRestCall_593421
proc url_SitesCreateDeployment_595859(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeployment_595858(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595860 = path.getOrDefault("resourceGroupName")
  valid_595860 = validateParameter(valid_595860, JString, required = true,
                                 default = nil)
  if valid_595860 != nil:
    section.add "resourceGroupName", valid_595860
  var valid_595861 = path.getOrDefault("name")
  valid_595861 = validateParameter(valid_595861, JString, required = true,
                                 default = nil)
  if valid_595861 != nil:
    section.add "name", valid_595861
  var valid_595862 = path.getOrDefault("subscriptionId")
  valid_595862 = validateParameter(valid_595862, JString, required = true,
                                 default = nil)
  if valid_595862 != nil:
    section.add "subscriptionId", valid_595862
  var valid_595863 = path.getOrDefault("id")
  valid_595863 = validateParameter(valid_595863, JString, required = true,
                                 default = nil)
  if valid_595863 != nil:
    section.add "id", valid_595863
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595864 = query.getOrDefault("api-version")
  valid_595864 = validateParameter(valid_595864, JString, required = true,
                                 default = nil)
  if valid_595864 != nil:
    section.add "api-version", valid_595864
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595866: Call_SitesCreateDeployment_595857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595866.validator(path, query, header, formData, body)
  let scheme = call_595866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595866.url(scheme.get, call_595866.host, call_595866.base,
                         call_595866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595866, url, valid)

proc call*(call_595867: Call_SitesCreateDeployment_595857;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_595868 = newJObject()
  var query_595869 = newJObject()
  var body_595870 = newJObject()
  add(path_595868, "resourceGroupName", newJString(resourceGroupName))
  add(query_595869, "api-version", newJString(apiVersion))
  add(path_595868, "name", newJString(name))
  add(path_595868, "subscriptionId", newJString(subscriptionId))
  add(path_595868, "id", newJString(id))
  if deployment != nil:
    body_595870 = deployment
  result = call_595867.call(path_595868, query_595869, nil, nil, body_595870)

var sitesCreateDeployment* = Call_SitesCreateDeployment_595857(
    name: "sitesCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesCreateDeployment_595858, base: "",
    url: url_SitesCreateDeployment_595859, schemes: {Scheme.Https})
type
  Call_SitesGetDeployment_595845 = ref object of OpenApiRestCall_593421
proc url_SitesGetDeployment_595847(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployment_595846(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595848 = path.getOrDefault("resourceGroupName")
  valid_595848 = validateParameter(valid_595848, JString, required = true,
                                 default = nil)
  if valid_595848 != nil:
    section.add "resourceGroupName", valid_595848
  var valid_595849 = path.getOrDefault("name")
  valid_595849 = validateParameter(valid_595849, JString, required = true,
                                 default = nil)
  if valid_595849 != nil:
    section.add "name", valid_595849
  var valid_595850 = path.getOrDefault("subscriptionId")
  valid_595850 = validateParameter(valid_595850, JString, required = true,
                                 default = nil)
  if valid_595850 != nil:
    section.add "subscriptionId", valid_595850
  var valid_595851 = path.getOrDefault("id")
  valid_595851 = validateParameter(valid_595851, JString, required = true,
                                 default = nil)
  if valid_595851 != nil:
    section.add "id", valid_595851
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595852 = query.getOrDefault("api-version")
  valid_595852 = validateParameter(valid_595852, JString, required = true,
                                 default = nil)
  if valid_595852 != nil:
    section.add "api-version", valid_595852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595853: Call_SitesGetDeployment_595845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595853.validator(path, query, header, formData, body)
  let scheme = call_595853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595853.url(scheme.get, call_595853.host, call_595853.base,
                         call_595853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595853, url, valid)

proc call*(call_595854: Call_SitesGetDeployment_595845; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; id: string): Recallable =
  ## sitesGetDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_595855 = newJObject()
  var query_595856 = newJObject()
  add(path_595855, "resourceGroupName", newJString(resourceGroupName))
  add(query_595856, "api-version", newJString(apiVersion))
  add(path_595855, "name", newJString(name))
  add(path_595855, "subscriptionId", newJString(subscriptionId))
  add(path_595855, "id", newJString(id))
  result = call_595854.call(path_595855, query_595856, nil, nil, nil)

var sitesGetDeployment* = Call_SitesGetDeployment_595845(
    name: "sitesGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesGetDeployment_595846, base: "",
    url: url_SitesGetDeployment_595847, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeployment_595871 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteDeployment_595873(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeployment_595872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595874 = path.getOrDefault("resourceGroupName")
  valid_595874 = validateParameter(valid_595874, JString, required = true,
                                 default = nil)
  if valid_595874 != nil:
    section.add "resourceGroupName", valid_595874
  var valid_595875 = path.getOrDefault("name")
  valid_595875 = validateParameter(valid_595875, JString, required = true,
                                 default = nil)
  if valid_595875 != nil:
    section.add "name", valid_595875
  var valid_595876 = path.getOrDefault("subscriptionId")
  valid_595876 = validateParameter(valid_595876, JString, required = true,
                                 default = nil)
  if valid_595876 != nil:
    section.add "subscriptionId", valid_595876
  var valid_595877 = path.getOrDefault("id")
  valid_595877 = validateParameter(valid_595877, JString, required = true,
                                 default = nil)
  if valid_595877 != nil:
    section.add "id", valid_595877
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595878 = query.getOrDefault("api-version")
  valid_595878 = validateParameter(valid_595878, JString, required = true,
                                 default = nil)
  if valid_595878 != nil:
    section.add "api-version", valid_595878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595879: Call_SitesDeleteDeployment_595871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595879.validator(path, query, header, formData, body)
  let scheme = call_595879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595879.url(scheme.get, call_595879.host, call_595879.base,
                         call_595879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595879, url, valid)

proc call*(call_595880: Call_SitesDeleteDeployment_595871;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesDeleteDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_595881 = newJObject()
  var query_595882 = newJObject()
  add(path_595881, "resourceGroupName", newJString(resourceGroupName))
  add(query_595882, "api-version", newJString(apiVersion))
  add(path_595881, "name", newJString(name))
  add(path_595881, "subscriptionId", newJString(subscriptionId))
  add(path_595881, "id", newJString(id))
  result = call_595880.call(path_595881, query_595882, nil, nil, nil)

var sitesDeleteDeployment* = Call_SitesDeleteDeployment_595871(
    name: "sitesDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesDeleteDeployment_595872, base: "",
    url: url_SitesDeleteDeployment_595873, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindings_595883 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteHostNameBindings_595885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindings_595884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595886 = path.getOrDefault("resourceGroupName")
  valid_595886 = validateParameter(valid_595886, JString, required = true,
                                 default = nil)
  if valid_595886 != nil:
    section.add "resourceGroupName", valid_595886
  var valid_595887 = path.getOrDefault("name")
  valid_595887 = validateParameter(valid_595887, JString, required = true,
                                 default = nil)
  if valid_595887 != nil:
    section.add "name", valid_595887
  var valid_595888 = path.getOrDefault("subscriptionId")
  valid_595888 = validateParameter(valid_595888, JString, required = true,
                                 default = nil)
  if valid_595888 != nil:
    section.add "subscriptionId", valid_595888
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595889 = query.getOrDefault("api-version")
  valid_595889 = validateParameter(valid_595889, JString, required = true,
                                 default = nil)
  if valid_595889 != nil:
    section.add "api-version", valid_595889
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595890: Call_SitesGetSiteHostNameBindings_595883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595890.validator(path, query, header, formData, body)
  let scheme = call_595890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595890.url(scheme.get, call_595890.host, call_595890.base,
                         call_595890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595890, url, valid)

proc call*(call_595891: Call_SitesGetSiteHostNameBindings_595883;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteHostNameBindings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595892 = newJObject()
  var query_595893 = newJObject()
  add(path_595892, "resourceGroupName", newJString(resourceGroupName))
  add(query_595893, "api-version", newJString(apiVersion))
  add(path_595892, "name", newJString(name))
  add(path_595892, "subscriptionId", newJString(subscriptionId))
  result = call_595891.call(path_595892, query_595893, nil, nil, nil)

var sitesGetSiteHostNameBindings* = Call_SitesGetSiteHostNameBindings_595883(
    name: "sitesGetSiteHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindings_595884, base: "",
    url: url_SitesGetSiteHostNameBindings_595885, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBinding_595906 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteHostNameBinding_595908(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBinding_595907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595909 = path.getOrDefault("resourceGroupName")
  valid_595909 = validateParameter(valid_595909, JString, required = true,
                                 default = nil)
  if valid_595909 != nil:
    section.add "resourceGroupName", valid_595909
  var valid_595910 = path.getOrDefault("name")
  valid_595910 = validateParameter(valid_595910, JString, required = true,
                                 default = nil)
  if valid_595910 != nil:
    section.add "name", valid_595910
  var valid_595911 = path.getOrDefault("subscriptionId")
  valid_595911 = validateParameter(valid_595911, JString, required = true,
                                 default = nil)
  if valid_595911 != nil:
    section.add "subscriptionId", valid_595911
  var valid_595912 = path.getOrDefault("hostName")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = nil)
  if valid_595912 != nil:
    section.add "hostName", valid_595912
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595913 = query.getOrDefault("api-version")
  valid_595913 = validateParameter(valid_595913, JString, required = true,
                                 default = nil)
  if valid_595913 != nil:
    section.add "api-version", valid_595913
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595915: Call_SitesCreateOrUpdateSiteHostNameBinding_595906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595915.validator(path, query, header, formData, body)
  let scheme = call_595915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595915.url(scheme.get, call_595915.host, call_595915.base,
                         call_595915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595915, url, valid)

proc call*(call_595916: Call_SitesCreateOrUpdateSiteHostNameBinding_595906;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  var path_595917 = newJObject()
  var query_595918 = newJObject()
  var body_595919 = newJObject()
  add(path_595917, "resourceGroupName", newJString(resourceGroupName))
  add(query_595918, "api-version", newJString(apiVersion))
  add(path_595917, "name", newJString(name))
  add(path_595917, "subscriptionId", newJString(subscriptionId))
  add(path_595917, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_595919 = hostNameBinding
  result = call_595916.call(path_595917, query_595918, nil, nil, body_595919)

var sitesCreateOrUpdateSiteHostNameBinding* = Call_SitesCreateOrUpdateSiteHostNameBinding_595906(
    name: "sitesCreateOrUpdateSiteHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBinding_595907, base: "",
    url: url_SitesCreateOrUpdateSiteHostNameBinding_595908,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBinding_595894 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteHostNameBinding_595896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBinding_595895(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595897 = path.getOrDefault("resourceGroupName")
  valid_595897 = validateParameter(valid_595897, JString, required = true,
                                 default = nil)
  if valid_595897 != nil:
    section.add "resourceGroupName", valid_595897
  var valid_595898 = path.getOrDefault("name")
  valid_595898 = validateParameter(valid_595898, JString, required = true,
                                 default = nil)
  if valid_595898 != nil:
    section.add "name", valid_595898
  var valid_595899 = path.getOrDefault("subscriptionId")
  valid_595899 = validateParameter(valid_595899, JString, required = true,
                                 default = nil)
  if valid_595899 != nil:
    section.add "subscriptionId", valid_595899
  var valid_595900 = path.getOrDefault("hostName")
  valid_595900 = validateParameter(valid_595900, JString, required = true,
                                 default = nil)
  if valid_595900 != nil:
    section.add "hostName", valid_595900
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595901 = query.getOrDefault("api-version")
  valid_595901 = validateParameter(valid_595901, JString, required = true,
                                 default = nil)
  if valid_595901 != nil:
    section.add "api-version", valid_595901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595902: Call_SitesGetSiteHostNameBinding_595894; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595902.validator(path, query, header, formData, body)
  let scheme = call_595902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595902.url(scheme.get, call_595902.host, call_595902.base,
                         call_595902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595902, url, valid)

proc call*(call_595903: Call_SitesGetSiteHostNameBinding_595894;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_595904 = newJObject()
  var query_595905 = newJObject()
  add(path_595904, "resourceGroupName", newJString(resourceGroupName))
  add(query_595905, "api-version", newJString(apiVersion))
  add(path_595904, "name", newJString(name))
  add(path_595904, "subscriptionId", newJString(subscriptionId))
  add(path_595904, "hostName", newJString(hostName))
  result = call_595903.call(path_595904, query_595905, nil, nil, nil)

var sitesGetSiteHostNameBinding* = Call_SitesGetSiteHostNameBinding_595894(
    name: "sitesGetSiteHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBinding_595895, base: "",
    url: url_SitesGetSiteHostNameBinding_595896, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBinding_595920 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteHostNameBinding_595922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBinding_595921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595923 = path.getOrDefault("resourceGroupName")
  valid_595923 = validateParameter(valid_595923, JString, required = true,
                                 default = nil)
  if valid_595923 != nil:
    section.add "resourceGroupName", valid_595923
  var valid_595924 = path.getOrDefault("name")
  valid_595924 = validateParameter(valid_595924, JString, required = true,
                                 default = nil)
  if valid_595924 != nil:
    section.add "name", valid_595924
  var valid_595925 = path.getOrDefault("subscriptionId")
  valid_595925 = validateParameter(valid_595925, JString, required = true,
                                 default = nil)
  if valid_595925 != nil:
    section.add "subscriptionId", valid_595925
  var valid_595926 = path.getOrDefault("hostName")
  valid_595926 = validateParameter(valid_595926, JString, required = true,
                                 default = nil)
  if valid_595926 != nil:
    section.add "hostName", valid_595926
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595927 = query.getOrDefault("api-version")
  valid_595927 = validateParameter(valid_595927, JString, required = true,
                                 default = nil)
  if valid_595927 != nil:
    section.add "api-version", valid_595927
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595928: Call_SitesDeleteSiteHostNameBinding_595920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_595928.validator(path, query, header, formData, body)
  let scheme = call_595928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595928.url(scheme.get, call_595928.host, call_595928.base,
                         call_595928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595928, url, valid)

proc call*(call_595929: Call_SitesDeleteSiteHostNameBinding_595920;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_595930 = newJObject()
  var query_595931 = newJObject()
  add(path_595930, "resourceGroupName", newJString(resourceGroupName))
  add(query_595931, "api-version", newJString(apiVersion))
  add(path_595930, "name", newJString(name))
  add(path_595930, "subscriptionId", newJString(subscriptionId))
  add(path_595930, "hostName", newJString(hostName))
  result = call_595929.call(path_595930, query_595931, nil, nil, nil)

var sitesDeleteSiteHostNameBinding* = Call_SitesDeleteSiteHostNameBinding_595920(
    name: "sitesDeleteSiteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBinding_595921, base: "",
    url: url_SitesDeleteSiteHostNameBinding_595922, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnections_595932 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteRelayServiceConnections_595934(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnections_595933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595935 = path.getOrDefault("resourceGroupName")
  valid_595935 = validateParameter(valid_595935, JString, required = true,
                                 default = nil)
  if valid_595935 != nil:
    section.add "resourceGroupName", valid_595935
  var valid_595936 = path.getOrDefault("name")
  valid_595936 = validateParameter(valid_595936, JString, required = true,
                                 default = nil)
  if valid_595936 != nil:
    section.add "name", valid_595936
  var valid_595937 = path.getOrDefault("subscriptionId")
  valid_595937 = validateParameter(valid_595937, JString, required = true,
                                 default = nil)
  if valid_595937 != nil:
    section.add "subscriptionId", valid_595937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595938 = query.getOrDefault("api-version")
  valid_595938 = validateParameter(valid_595938, JString, required = true,
                                 default = nil)
  if valid_595938 != nil:
    section.add "api-version", valid_595938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595939: Call_SitesListSiteRelayServiceConnections_595932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595939.validator(path, query, header, formData, body)
  let scheme = call_595939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595939.url(scheme.get, call_595939.host, call_595939.base,
                         call_595939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595939, url, valid)

proc call*(call_595940: Call_SitesListSiteRelayServiceConnections_595932;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteRelayServiceConnections
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_595941 = newJObject()
  var query_595942 = newJObject()
  add(path_595941, "resourceGroupName", newJString(resourceGroupName))
  add(query_595942, "api-version", newJString(apiVersion))
  add(path_595941, "name", newJString(name))
  add(path_595941, "subscriptionId", newJString(subscriptionId))
  result = call_595940.call(path_595941, query_595942, nil, nil, nil)

var sitesListSiteRelayServiceConnections* = Call_SitesListSiteRelayServiceConnections_595932(
    name: "sitesListSiteRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnections_595933, base: "",
    url: url_SitesListSiteRelayServiceConnections_595934, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnection_595955 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteRelayServiceConnection_595957(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnection_595956(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595958 = path.getOrDefault("resourceGroupName")
  valid_595958 = validateParameter(valid_595958, JString, required = true,
                                 default = nil)
  if valid_595958 != nil:
    section.add "resourceGroupName", valid_595958
  var valid_595959 = path.getOrDefault("name")
  valid_595959 = validateParameter(valid_595959, JString, required = true,
                                 default = nil)
  if valid_595959 != nil:
    section.add "name", valid_595959
  var valid_595960 = path.getOrDefault("subscriptionId")
  valid_595960 = validateParameter(valid_595960, JString, required = true,
                                 default = nil)
  if valid_595960 != nil:
    section.add "subscriptionId", valid_595960
  var valid_595961 = path.getOrDefault("entityName")
  valid_595961 = validateParameter(valid_595961, JString, required = true,
                                 default = nil)
  if valid_595961 != nil:
    section.add "entityName", valid_595961
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595962 = query.getOrDefault("api-version")
  valid_595962 = validateParameter(valid_595962, JString, required = true,
                                 default = nil)
  if valid_595962 != nil:
    section.add "api-version", valid_595962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595964: Call_SitesCreateOrUpdateSiteRelayServiceConnection_595955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595964.validator(path, query, header, formData, body)
  let scheme = call_595964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595964.url(scheme.get, call_595964.host, call_595964.base,
                         call_595964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595964, url, valid)

proc call*(call_595965: Call_SitesCreateOrUpdateSiteRelayServiceConnection_595955;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_595966 = newJObject()
  var query_595967 = newJObject()
  var body_595968 = newJObject()
  add(path_595966, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_595968 = connectionEnvelope
  add(path_595966, "name", newJString(name))
  add(query_595967, "api-version", newJString(apiVersion))
  add(path_595966, "subscriptionId", newJString(subscriptionId))
  add(path_595966, "entityName", newJString(entityName))
  result = call_595965.call(path_595966, query_595967, nil, nil, body_595968)

var sitesCreateOrUpdateSiteRelayServiceConnection* = Call_SitesCreateOrUpdateSiteRelayServiceConnection_595955(
    name: "sitesCreateOrUpdateSiteRelayServiceConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnection_595956,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnection_595957,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnection_595943 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteRelayServiceConnection_595945(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnection_595944(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595946 = path.getOrDefault("resourceGroupName")
  valid_595946 = validateParameter(valid_595946, JString, required = true,
                                 default = nil)
  if valid_595946 != nil:
    section.add "resourceGroupName", valid_595946
  var valid_595947 = path.getOrDefault("name")
  valid_595947 = validateParameter(valid_595947, JString, required = true,
                                 default = nil)
  if valid_595947 != nil:
    section.add "name", valid_595947
  var valid_595948 = path.getOrDefault("subscriptionId")
  valid_595948 = validateParameter(valid_595948, JString, required = true,
                                 default = nil)
  if valid_595948 != nil:
    section.add "subscriptionId", valid_595948
  var valid_595949 = path.getOrDefault("entityName")
  valid_595949 = validateParameter(valid_595949, JString, required = true,
                                 default = nil)
  if valid_595949 != nil:
    section.add "entityName", valid_595949
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595950 = query.getOrDefault("api-version")
  valid_595950 = validateParameter(valid_595950, JString, required = true,
                                 default = nil)
  if valid_595950 != nil:
    section.add "api-version", valid_595950
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595951: Call_SitesGetSiteRelayServiceConnection_595943;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595951.validator(path, query, header, formData, body)
  let scheme = call_595951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595951.url(scheme.get, call_595951.host, call_595951.base,
                         call_595951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595951, url, valid)

proc call*(call_595952: Call_SitesGetSiteRelayServiceConnection_595943;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_595953 = newJObject()
  var query_595954 = newJObject()
  add(path_595953, "resourceGroupName", newJString(resourceGroupName))
  add(query_595954, "api-version", newJString(apiVersion))
  add(path_595953, "name", newJString(name))
  add(path_595953, "subscriptionId", newJString(subscriptionId))
  add(path_595953, "entityName", newJString(entityName))
  result = call_595952.call(path_595953, query_595954, nil, nil, nil)

var sitesGetSiteRelayServiceConnection* = Call_SitesGetSiteRelayServiceConnection_595943(
    name: "sitesGetSiteRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnection_595944, base: "",
    url: url_SitesGetSiteRelayServiceConnection_595945, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnection_595981 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteRelayServiceConnection_595983(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnection_595982(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595984 = path.getOrDefault("resourceGroupName")
  valid_595984 = validateParameter(valid_595984, JString, required = true,
                                 default = nil)
  if valid_595984 != nil:
    section.add "resourceGroupName", valid_595984
  var valid_595985 = path.getOrDefault("name")
  valid_595985 = validateParameter(valid_595985, JString, required = true,
                                 default = nil)
  if valid_595985 != nil:
    section.add "name", valid_595985
  var valid_595986 = path.getOrDefault("subscriptionId")
  valid_595986 = validateParameter(valid_595986, JString, required = true,
                                 default = nil)
  if valid_595986 != nil:
    section.add "subscriptionId", valid_595986
  var valid_595987 = path.getOrDefault("entityName")
  valid_595987 = validateParameter(valid_595987, JString, required = true,
                                 default = nil)
  if valid_595987 != nil:
    section.add "entityName", valid_595987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595988 = query.getOrDefault("api-version")
  valid_595988 = validateParameter(valid_595988, JString, required = true,
                                 default = nil)
  if valid_595988 != nil:
    section.add "api-version", valid_595988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595990: Call_SitesUpdateSiteRelayServiceConnection_595981;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595990.validator(path, query, header, formData, body)
  let scheme = call_595990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595990.url(scheme.get, call_595990.host, call_595990.base,
                         call_595990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595990, url, valid)

proc call*(call_595991: Call_SitesUpdateSiteRelayServiceConnection_595981;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_595992 = newJObject()
  var query_595993 = newJObject()
  var body_595994 = newJObject()
  add(path_595992, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_595994 = connectionEnvelope
  add(path_595992, "name", newJString(name))
  add(query_595993, "api-version", newJString(apiVersion))
  add(path_595992, "subscriptionId", newJString(subscriptionId))
  add(path_595992, "entityName", newJString(entityName))
  result = call_595991.call(path_595992, query_595993, nil, nil, body_595994)

var sitesUpdateSiteRelayServiceConnection* = Call_SitesUpdateSiteRelayServiceConnection_595981(
    name: "sitesUpdateSiteRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnection_595982, base: "",
    url: url_SitesUpdateSiteRelayServiceConnection_595983, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnection_595969 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteRelayServiceConnection_595971(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnection_595970(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595972 = path.getOrDefault("resourceGroupName")
  valid_595972 = validateParameter(valid_595972, JString, required = true,
                                 default = nil)
  if valid_595972 != nil:
    section.add "resourceGroupName", valid_595972
  var valid_595973 = path.getOrDefault("name")
  valid_595973 = validateParameter(valid_595973, JString, required = true,
                                 default = nil)
  if valid_595973 != nil:
    section.add "name", valid_595973
  var valid_595974 = path.getOrDefault("subscriptionId")
  valid_595974 = validateParameter(valid_595974, JString, required = true,
                                 default = nil)
  if valid_595974 != nil:
    section.add "subscriptionId", valid_595974
  var valid_595975 = path.getOrDefault("entityName")
  valid_595975 = validateParameter(valid_595975, JString, required = true,
                                 default = nil)
  if valid_595975 != nil:
    section.add "entityName", valid_595975
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595976 = query.getOrDefault("api-version")
  valid_595976 = validateParameter(valid_595976, JString, required = true,
                                 default = nil)
  if valid_595976 != nil:
    section.add "api-version", valid_595976
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595977: Call_SitesDeleteSiteRelayServiceConnection_595969;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_595977.validator(path, query, header, formData, body)
  let scheme = call_595977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595977.url(scheme.get, call_595977.host, call_595977.base,
                         call_595977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595977, url, valid)

proc call*(call_595978: Call_SitesDeleteSiteRelayServiceConnection_595969;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_595979 = newJObject()
  var query_595980 = newJObject()
  add(path_595979, "resourceGroupName", newJString(resourceGroupName))
  add(query_595980, "api-version", newJString(apiVersion))
  add(path_595979, "name", newJString(name))
  add(path_595979, "subscriptionId", newJString(subscriptionId))
  add(path_595979, "entityName", newJString(entityName))
  result = call_595978.call(path_595979, query_595980, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnection* = Call_SitesDeleteSiteRelayServiceConnection_595969(
    name: "sitesDeleteSiteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnection_595970, base: "",
    url: url_SitesDeleteSiteRelayServiceConnection_595971, schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiers_595995 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteInstanceIdentifiers_595997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiers_595996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595998 = path.getOrDefault("resourceGroupName")
  valid_595998 = validateParameter(valid_595998, JString, required = true,
                                 default = nil)
  if valid_595998 != nil:
    section.add "resourceGroupName", valid_595998
  var valid_595999 = path.getOrDefault("name")
  valid_595999 = validateParameter(valid_595999, JString, required = true,
                                 default = nil)
  if valid_595999 != nil:
    section.add "name", valid_595999
  var valid_596000 = path.getOrDefault("subscriptionId")
  valid_596000 = validateParameter(valid_596000, JString, required = true,
                                 default = nil)
  if valid_596000 != nil:
    section.add "subscriptionId", valid_596000
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596001 = query.getOrDefault("api-version")
  valid_596001 = validateParameter(valid_596001, JString, required = true,
                                 default = nil)
  if valid_596001 != nil:
    section.add "api-version", valid_596001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596002: Call_SitesGetSiteInstanceIdentifiers_595995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596002.validator(path, query, header, formData, body)
  let scheme = call_596002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596002.url(scheme.get, call_596002.host, call_596002.base,
                         call_596002.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596002, url, valid)

proc call*(call_596003: Call_SitesGetSiteInstanceIdentifiers_595995;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteInstanceIdentifiers
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596004 = newJObject()
  var query_596005 = newJObject()
  add(path_596004, "resourceGroupName", newJString(resourceGroupName))
  add(query_596005, "api-version", newJString(apiVersion))
  add(path_596004, "name", newJString(name))
  add(path_596004, "subscriptionId", newJString(subscriptionId))
  result = call_596003.call(path_596004, query_596005, nil, nil, nil)

var sitesGetSiteInstanceIdentifiers* = Call_SitesGetSiteInstanceIdentifiers_595995(
    name: "sitesGetSiteInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiers_595996, base: "",
    url: url_SitesGetSiteInstanceIdentifiers_595997, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployments_596006 = ref object of OpenApiRestCall_593421
proc url_SitesGetInstanceDeployments_596008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployments_596007(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596009 = path.getOrDefault("resourceGroupName")
  valid_596009 = validateParameter(valid_596009, JString, required = true,
                                 default = nil)
  if valid_596009 != nil:
    section.add "resourceGroupName", valid_596009
  var valid_596010 = path.getOrDefault("name")
  valid_596010 = validateParameter(valid_596010, JString, required = true,
                                 default = nil)
  if valid_596010 != nil:
    section.add "name", valid_596010
  var valid_596011 = path.getOrDefault("subscriptionId")
  valid_596011 = validateParameter(valid_596011, JString, required = true,
                                 default = nil)
  if valid_596011 != nil:
    section.add "subscriptionId", valid_596011
  var valid_596012 = path.getOrDefault("instanceId")
  valid_596012 = validateParameter(valid_596012, JString, required = true,
                                 default = nil)
  if valid_596012 != nil:
    section.add "instanceId", valid_596012
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596013 = query.getOrDefault("api-version")
  valid_596013 = validateParameter(valid_596013, JString, required = true,
                                 default = nil)
  if valid_596013 != nil:
    section.add "api-version", valid_596013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596014: Call_SitesGetInstanceDeployments_596006; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596014.validator(path, query, header, formData, body)
  let scheme = call_596014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596014.url(scheme.get, call_596014.host, call_596014.base,
                         call_596014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596014, url, valid)

proc call*(call_596015: Call_SitesGetInstanceDeployments_596006;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeployments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_596016 = newJObject()
  var query_596017 = newJObject()
  add(path_596016, "resourceGroupName", newJString(resourceGroupName))
  add(query_596017, "api-version", newJString(apiVersion))
  add(path_596016, "name", newJString(name))
  add(path_596016, "subscriptionId", newJString(subscriptionId))
  add(path_596016, "instanceId", newJString(instanceId))
  result = call_596015.call(path_596016, query_596017, nil, nil, nil)

var sitesGetInstanceDeployments* = Call_SitesGetInstanceDeployments_596006(
    name: "sitesGetInstanceDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeployments_596007, base: "",
    url: url_SitesGetInstanceDeployments_596008, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeployment_596031 = ref object of OpenApiRestCall_593421
proc url_SitesCreateInstanceDeployment_596033(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeployment_596032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596034 = path.getOrDefault("resourceGroupName")
  valid_596034 = validateParameter(valid_596034, JString, required = true,
                                 default = nil)
  if valid_596034 != nil:
    section.add "resourceGroupName", valid_596034
  var valid_596035 = path.getOrDefault("name")
  valid_596035 = validateParameter(valid_596035, JString, required = true,
                                 default = nil)
  if valid_596035 != nil:
    section.add "name", valid_596035
  var valid_596036 = path.getOrDefault("subscriptionId")
  valid_596036 = validateParameter(valid_596036, JString, required = true,
                                 default = nil)
  if valid_596036 != nil:
    section.add "subscriptionId", valid_596036
  var valid_596037 = path.getOrDefault("instanceId")
  valid_596037 = validateParameter(valid_596037, JString, required = true,
                                 default = nil)
  if valid_596037 != nil:
    section.add "instanceId", valid_596037
  var valid_596038 = path.getOrDefault("id")
  valid_596038 = validateParameter(valid_596038, JString, required = true,
                                 default = nil)
  if valid_596038 != nil:
    section.add "id", valid_596038
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596039 = query.getOrDefault("api-version")
  valid_596039 = validateParameter(valid_596039, JString, required = true,
                                 default = nil)
  if valid_596039 != nil:
    section.add "api-version", valid_596039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596041: Call_SitesCreateInstanceDeployment_596031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596041.validator(path, query, header, formData, body)
  let scheme = call_596041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596041.url(scheme.get, call_596041.host, call_596041.base,
                         call_596041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596041, url, valid)

proc call*(call_596042: Call_SitesCreateInstanceDeployment_596031;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_596043 = newJObject()
  var query_596044 = newJObject()
  var body_596045 = newJObject()
  add(path_596043, "resourceGroupName", newJString(resourceGroupName))
  add(query_596044, "api-version", newJString(apiVersion))
  add(path_596043, "name", newJString(name))
  add(path_596043, "subscriptionId", newJString(subscriptionId))
  add(path_596043, "instanceId", newJString(instanceId))
  add(path_596043, "id", newJString(id))
  if deployment != nil:
    body_596045 = deployment
  result = call_596042.call(path_596043, query_596044, nil, nil, body_596045)

var sitesCreateInstanceDeployment* = Call_SitesCreateInstanceDeployment_596031(
    name: "sitesCreateInstanceDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeployment_596032, base: "",
    url: url_SitesCreateInstanceDeployment_596033, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployment_596018 = ref object of OpenApiRestCall_593421
proc url_SitesGetInstanceDeployment_596020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployment_596019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596021 = path.getOrDefault("resourceGroupName")
  valid_596021 = validateParameter(valid_596021, JString, required = true,
                                 default = nil)
  if valid_596021 != nil:
    section.add "resourceGroupName", valid_596021
  var valid_596022 = path.getOrDefault("name")
  valid_596022 = validateParameter(valid_596022, JString, required = true,
                                 default = nil)
  if valid_596022 != nil:
    section.add "name", valid_596022
  var valid_596023 = path.getOrDefault("subscriptionId")
  valid_596023 = validateParameter(valid_596023, JString, required = true,
                                 default = nil)
  if valid_596023 != nil:
    section.add "subscriptionId", valid_596023
  var valid_596024 = path.getOrDefault("instanceId")
  valid_596024 = validateParameter(valid_596024, JString, required = true,
                                 default = nil)
  if valid_596024 != nil:
    section.add "instanceId", valid_596024
  var valid_596025 = path.getOrDefault("id")
  valid_596025 = validateParameter(valid_596025, JString, required = true,
                                 default = nil)
  if valid_596025 != nil:
    section.add "id", valid_596025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596026 = query.getOrDefault("api-version")
  valid_596026 = validateParameter(valid_596026, JString, required = true,
                                 default = nil)
  if valid_596026 != nil:
    section.add "api-version", valid_596026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596027: Call_SitesGetInstanceDeployment_596018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596027.validator(path, query, header, formData, body)
  let scheme = call_596027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596027.url(scheme.get, call_596027.host, call_596027.base,
                         call_596027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596027, url, valid)

proc call*(call_596028: Call_SitesGetInstanceDeployment_596018;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesGetInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596029 = newJObject()
  var query_596030 = newJObject()
  add(path_596029, "resourceGroupName", newJString(resourceGroupName))
  add(query_596030, "api-version", newJString(apiVersion))
  add(path_596029, "name", newJString(name))
  add(path_596029, "subscriptionId", newJString(subscriptionId))
  add(path_596029, "instanceId", newJString(instanceId))
  add(path_596029, "id", newJString(id))
  result = call_596028.call(path_596029, query_596030, nil, nil, nil)

var sitesGetInstanceDeployment* = Call_SitesGetInstanceDeployment_596018(
    name: "sitesGetInstanceDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeployment_596019, base: "",
    url: url_SitesGetInstanceDeployment_596020, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeployment_596046 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteInstanceDeployment_596048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeployment_596047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596049 = path.getOrDefault("resourceGroupName")
  valid_596049 = validateParameter(valid_596049, JString, required = true,
                                 default = nil)
  if valid_596049 != nil:
    section.add "resourceGroupName", valid_596049
  var valid_596050 = path.getOrDefault("name")
  valid_596050 = validateParameter(valid_596050, JString, required = true,
                                 default = nil)
  if valid_596050 != nil:
    section.add "name", valid_596050
  var valid_596051 = path.getOrDefault("subscriptionId")
  valid_596051 = validateParameter(valid_596051, JString, required = true,
                                 default = nil)
  if valid_596051 != nil:
    section.add "subscriptionId", valid_596051
  var valid_596052 = path.getOrDefault("instanceId")
  valid_596052 = validateParameter(valid_596052, JString, required = true,
                                 default = nil)
  if valid_596052 != nil:
    section.add "instanceId", valid_596052
  var valid_596053 = path.getOrDefault("id")
  valid_596053 = validateParameter(valid_596053, JString, required = true,
                                 default = nil)
  if valid_596053 != nil:
    section.add "id", valid_596053
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596054 = query.getOrDefault("api-version")
  valid_596054 = validateParameter(valid_596054, JString, required = true,
                                 default = nil)
  if valid_596054 != nil:
    section.add "api-version", valid_596054
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596055: Call_SitesDeleteInstanceDeployment_596046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596055.validator(path, query, header, formData, body)
  let scheme = call_596055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596055.url(scheme.get, call_596055.host, call_596055.base,
                         call_596055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596055, url, valid)

proc call*(call_596056: Call_SitesDeleteInstanceDeployment_596046;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesDeleteInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596057 = newJObject()
  var query_596058 = newJObject()
  add(path_596057, "resourceGroupName", newJString(resourceGroupName))
  add(query_596058, "api-version", newJString(apiVersion))
  add(path_596057, "name", newJString(name))
  add(path_596057, "subscriptionId", newJString(subscriptionId))
  add(path_596057, "instanceId", newJString(instanceId))
  add(path_596057, "id", newJString(id))
  result = call_596056.call(path_596057, query_596058, nil, nil, nil)

var sitesDeleteInstanceDeployment* = Call_SitesDeleteInstanceDeployment_596046(
    name: "sitesDeleteInstanceDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeployment_596047, base: "",
    url: url_SitesDeleteInstanceDeployment_596048, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneable_596059 = ref object of OpenApiRestCall_593421
proc url_SitesIsSiteCloneable_596061(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneable_596060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596062 = path.getOrDefault("resourceGroupName")
  valid_596062 = validateParameter(valid_596062, JString, required = true,
                                 default = nil)
  if valid_596062 != nil:
    section.add "resourceGroupName", valid_596062
  var valid_596063 = path.getOrDefault("name")
  valid_596063 = validateParameter(valid_596063, JString, required = true,
                                 default = nil)
  if valid_596063 != nil:
    section.add "name", valid_596063
  var valid_596064 = path.getOrDefault("subscriptionId")
  valid_596064 = validateParameter(valid_596064, JString, required = true,
                                 default = nil)
  if valid_596064 != nil:
    section.add "subscriptionId", valid_596064
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596065 = query.getOrDefault("api-version")
  valid_596065 = validateParameter(valid_596065, JString, required = true,
                                 default = nil)
  if valid_596065 != nil:
    section.add "api-version", valid_596065
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596066: Call_SitesIsSiteCloneable_596059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596066.validator(path, query, header, formData, body)
  let scheme = call_596066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596066.url(scheme.get, call_596066.host, call_596066.base,
                         call_596066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596066, url, valid)

proc call*(call_596067: Call_SitesIsSiteCloneable_596059;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesIsSiteCloneable
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596068 = newJObject()
  var query_596069 = newJObject()
  add(path_596068, "resourceGroupName", newJString(resourceGroupName))
  add(query_596069, "api-version", newJString(apiVersion))
  add(path_596068, "name", newJString(name))
  add(path_596068, "subscriptionId", newJString(subscriptionId))
  result = call_596067.call(path_596068, query_596069, nil, nil, nil)

var sitesIsSiteCloneable* = Call_SitesIsSiteCloneable_596059(
    name: "sitesIsSiteCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_SitesIsSiteCloneable_596060, base: "",
    url: url_SitesIsSiteCloneable_596061, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitions_596070 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteMetricDefinitions_596072(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitions_596071(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596073 = path.getOrDefault("resourceGroupName")
  valid_596073 = validateParameter(valid_596073, JString, required = true,
                                 default = nil)
  if valid_596073 != nil:
    section.add "resourceGroupName", valid_596073
  var valid_596074 = path.getOrDefault("name")
  valid_596074 = validateParameter(valid_596074, JString, required = true,
                                 default = nil)
  if valid_596074 != nil:
    section.add "name", valid_596074
  var valid_596075 = path.getOrDefault("subscriptionId")
  valid_596075 = validateParameter(valid_596075, JString, required = true,
                                 default = nil)
  if valid_596075 != nil:
    section.add "subscriptionId", valid_596075
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596076 = query.getOrDefault("api-version")
  valid_596076 = validateParameter(valid_596076, JString, required = true,
                                 default = nil)
  if valid_596076 != nil:
    section.add "api-version", valid_596076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596077: Call_SitesGetSiteMetricDefinitions_596070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596077.validator(path, query, header, formData, body)
  let scheme = call_596077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596077.url(scheme.get, call_596077.host, call_596077.base,
                         call_596077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596077, url, valid)

proc call*(call_596078: Call_SitesGetSiteMetricDefinitions_596070;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596079 = newJObject()
  var query_596080 = newJObject()
  add(path_596079, "resourceGroupName", newJString(resourceGroupName))
  add(query_596080, "api-version", newJString(apiVersion))
  add(path_596079, "name", newJString(name))
  add(path_596079, "subscriptionId", newJString(subscriptionId))
  result = call_596078.call(path_596079, query_596080, nil, nil, nil)

var sitesGetSiteMetricDefinitions* = Call_SitesGetSiteMetricDefinitions_596070(
    name: "sitesGetSiteMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitions_596071, base: "",
    url: url_SitesGetSiteMetricDefinitions_596072, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetrics_596081 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteMetrics_596083(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetrics_596082(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596084 = path.getOrDefault("resourceGroupName")
  valid_596084 = validateParameter(valid_596084, JString, required = true,
                                 default = nil)
  if valid_596084 != nil:
    section.add "resourceGroupName", valid_596084
  var valid_596085 = path.getOrDefault("name")
  valid_596085 = validateParameter(valid_596085, JString, required = true,
                                 default = nil)
  if valid_596085 != nil:
    section.add "name", valid_596085
  var valid_596086 = path.getOrDefault("subscriptionId")
  valid_596086 = validateParameter(valid_596086, JString, required = true,
                                 default = nil)
  if valid_596086 != nil:
    section.add "subscriptionId", valid_596086
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596087 = query.getOrDefault("api-version")
  valid_596087 = validateParameter(valid_596087, JString, required = true,
                                 default = nil)
  if valid_596087 != nil:
    section.add "api-version", valid_596087
  var valid_596088 = query.getOrDefault("details")
  valid_596088 = validateParameter(valid_596088, JBool, required = false, default = nil)
  if valid_596088 != nil:
    section.add "details", valid_596088
  var valid_596089 = query.getOrDefault("$filter")
  valid_596089 = validateParameter(valid_596089, JString, required = false,
                                 default = nil)
  if valid_596089 != nil:
    section.add "$filter", valid_596089
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596090: Call_SitesGetSiteMetrics_596081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596090.validator(path, query, header, formData, body)
  let scheme = call_596090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596090.url(scheme.get, call_596090.host, call_596090.base,
                         call_596090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596090, url, valid)

proc call*(call_596091: Call_SitesGetSiteMetrics_596081; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_596092 = newJObject()
  var query_596093 = newJObject()
  add(path_596092, "resourceGroupName", newJString(resourceGroupName))
  add(query_596093, "api-version", newJString(apiVersion))
  add(path_596092, "name", newJString(name))
  add(query_596093, "details", newJBool(details))
  add(path_596092, "subscriptionId", newJString(subscriptionId))
  add(query_596093, "$filter", newJString(Filter))
  result = call_596091.call(path_596092, query_596093, nil, nil, nil)

var sitesGetSiteMetrics* = Call_SitesGetSiteMetrics_596081(
    name: "sitesGetSiteMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_SitesGetSiteMetrics_596082, base: "",
    url: url_SitesGetSiteMetrics_596083, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeatures_596094 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteNetworkFeatures_596096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeatures_596095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596097 = path.getOrDefault("resourceGroupName")
  valid_596097 = validateParameter(valid_596097, JString, required = true,
                                 default = nil)
  if valid_596097 != nil:
    section.add "resourceGroupName", valid_596097
  var valid_596098 = path.getOrDefault("name")
  valid_596098 = validateParameter(valid_596098, JString, required = true,
                                 default = nil)
  if valid_596098 != nil:
    section.add "name", valid_596098
  var valid_596099 = path.getOrDefault("subscriptionId")
  valid_596099 = validateParameter(valid_596099, JString, required = true,
                                 default = nil)
  if valid_596099 != nil:
    section.add "subscriptionId", valid_596099
  var valid_596100 = path.getOrDefault("view")
  valid_596100 = validateParameter(valid_596100, JString, required = true,
                                 default = nil)
  if valid_596100 != nil:
    section.add "view", valid_596100
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596101 = query.getOrDefault("api-version")
  valid_596101 = validateParameter(valid_596101, JString, required = true,
                                 default = nil)
  if valid_596101 != nil:
    section.add "api-version", valid_596101
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596102: Call_SitesGetSiteNetworkFeatures_596094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596102.validator(path, query, header, formData, body)
  let scheme = call_596102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596102.url(scheme.get, call_596102.host, call_596102.base,
                         call_596102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596102, url, valid)

proc call*(call_596103: Call_SitesGetSiteNetworkFeatures_596094;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## sitesGetSiteNetworkFeatures
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_596104 = newJObject()
  var query_596105 = newJObject()
  add(path_596104, "resourceGroupName", newJString(resourceGroupName))
  add(query_596105, "api-version", newJString(apiVersion))
  add(path_596104, "name", newJString(name))
  add(path_596104, "subscriptionId", newJString(subscriptionId))
  add(path_596104, "view", newJString(view))
  result = call_596103.call(path_596104, query_596105, nil, nil, nil)

var sitesGetSiteNetworkFeatures* = Call_SitesGetSiteNetworkFeatures_596094(
    name: "sitesGetSiteNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeatures_596095, base: "",
    url: url_SitesGetSiteNetworkFeatures_596096, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPassword_596106 = ref object of OpenApiRestCall_593421
proc url_SitesGenerateNewSitePublishingPassword_596108(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPassword_596107(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596109 = path.getOrDefault("resourceGroupName")
  valid_596109 = validateParameter(valid_596109, JString, required = true,
                                 default = nil)
  if valid_596109 != nil:
    section.add "resourceGroupName", valid_596109
  var valid_596110 = path.getOrDefault("name")
  valid_596110 = validateParameter(valid_596110, JString, required = true,
                                 default = nil)
  if valid_596110 != nil:
    section.add "name", valid_596110
  var valid_596111 = path.getOrDefault("subscriptionId")
  valid_596111 = validateParameter(valid_596111, JString, required = true,
                                 default = nil)
  if valid_596111 != nil:
    section.add "subscriptionId", valid_596111
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596112 = query.getOrDefault("api-version")
  valid_596112 = validateParameter(valid_596112, JString, required = true,
                                 default = nil)
  if valid_596112 != nil:
    section.add "api-version", valid_596112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596113: Call_SitesGenerateNewSitePublishingPassword_596106;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596113.validator(path, query, header, formData, body)
  let scheme = call_596113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596113.url(scheme.get, call_596113.host, call_596113.base,
                         call_596113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596113, url, valid)

proc call*(call_596114: Call_SitesGenerateNewSitePublishingPassword_596106;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGenerateNewSitePublishingPassword
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596115 = newJObject()
  var query_596116 = newJObject()
  add(path_596115, "resourceGroupName", newJString(resourceGroupName))
  add(query_596116, "api-version", newJString(apiVersion))
  add(path_596115, "name", newJString(name))
  add(path_596115, "subscriptionId", newJString(subscriptionId))
  result = call_596114.call(path_596115, query_596116, nil, nil, nil)

var sitesGenerateNewSitePublishingPassword* = Call_SitesGenerateNewSitePublishingPassword_596106(
    name: "sitesGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPassword_596107, base: "",
    url: url_SitesGenerateNewSitePublishingPassword_596108,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperation_596117 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteOperation_596119(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperation_596118(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of an operation
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596120 = path.getOrDefault("resourceGroupName")
  valid_596120 = validateParameter(valid_596120, JString, required = true,
                                 default = nil)
  if valid_596120 != nil:
    section.add "resourceGroupName", valid_596120
  var valid_596121 = path.getOrDefault("name")
  valid_596121 = validateParameter(valid_596121, JString, required = true,
                                 default = nil)
  if valid_596121 != nil:
    section.add "name", valid_596121
  var valid_596122 = path.getOrDefault("subscriptionId")
  valid_596122 = validateParameter(valid_596122, JString, required = true,
                                 default = nil)
  if valid_596122 != nil:
    section.add "subscriptionId", valid_596122
  var valid_596123 = path.getOrDefault("operationId")
  valid_596123 = validateParameter(valid_596123, JString, required = true,
                                 default = nil)
  if valid_596123 != nil:
    section.add "operationId", valid_596123
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596124 = query.getOrDefault("api-version")
  valid_596124 = validateParameter(valid_596124, JString, required = true,
                                 default = nil)
  if valid_596124 != nil:
    section.add "api-version", valid_596124
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596125: Call_SitesGetSiteOperation_596117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596125.validator(path, query, header, formData, body)
  let scheme = call_596125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596125.url(scheme.get, call_596125.host, call_596125.base,
                         call_596125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596125, url, valid)

proc call*(call_596126: Call_SitesGetSiteOperation_596117;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## sitesGetSiteOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of an operation
  var path_596127 = newJObject()
  var query_596128 = newJObject()
  add(path_596127, "resourceGroupName", newJString(resourceGroupName))
  add(query_596128, "api-version", newJString(apiVersion))
  add(path_596127, "name", newJString(name))
  add(path_596127, "subscriptionId", newJString(subscriptionId))
  add(path_596127, "operationId", newJString(operationId))
  result = call_596126.call(path_596127, query_596128, nil, nil, nil)

var sitesGetSiteOperation* = Call_SitesGetSiteOperation_596117(
    name: "sitesGetSiteOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperation_596118, base: "",
    url: url_SitesGetSiteOperation_596119, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOns_596129 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePremierAddOns_596131(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOns_596130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596132 = path.getOrDefault("resourceGroupName")
  valid_596132 = validateParameter(valid_596132, JString, required = true,
                                 default = nil)
  if valid_596132 != nil:
    section.add "resourceGroupName", valid_596132
  var valid_596133 = path.getOrDefault("name")
  valid_596133 = validateParameter(valid_596133, JString, required = true,
                                 default = nil)
  if valid_596133 != nil:
    section.add "name", valid_596133
  var valid_596134 = path.getOrDefault("subscriptionId")
  valid_596134 = validateParameter(valid_596134, JString, required = true,
                                 default = nil)
  if valid_596134 != nil:
    section.add "subscriptionId", valid_596134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596135 = query.getOrDefault("api-version")
  valid_596135 = validateParameter(valid_596135, JString, required = true,
                                 default = nil)
  if valid_596135 != nil:
    section.add "api-version", valid_596135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596136: Call_SitesListSitePremierAddOns_596129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596136.validator(path, query, header, formData, body)
  let scheme = call_596136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596136.url(scheme.get, call_596136.host, call_596136.base,
                         call_596136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596136, url, valid)

proc call*(call_596137: Call_SitesListSitePremierAddOns_596129;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePremierAddOns
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596138 = newJObject()
  var query_596139 = newJObject()
  add(path_596138, "resourceGroupName", newJString(resourceGroupName))
  add(query_596139, "api-version", newJString(apiVersion))
  add(path_596138, "name", newJString(name))
  add(path_596138, "subscriptionId", newJString(subscriptionId))
  result = call_596137.call(path_596138, query_596139, nil, nil, nil)

var sitesListSitePremierAddOns* = Call_SitesListSitePremierAddOns_596129(
    name: "sitesListSitePremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_SitesListSitePremierAddOns_596130, base: "",
    url: url_SitesListSitePremierAddOns_596131, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOn_596152 = ref object of OpenApiRestCall_593421
proc url_SitesAddSitePremierAddOn_596154(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOn_596153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596155 = path.getOrDefault("resourceGroupName")
  valid_596155 = validateParameter(valid_596155, JString, required = true,
                                 default = nil)
  if valid_596155 != nil:
    section.add "resourceGroupName", valid_596155
  var valid_596156 = path.getOrDefault("name")
  valid_596156 = validateParameter(valid_596156, JString, required = true,
                                 default = nil)
  if valid_596156 != nil:
    section.add "name", valid_596156
  var valid_596157 = path.getOrDefault("subscriptionId")
  valid_596157 = validateParameter(valid_596157, JString, required = true,
                                 default = nil)
  if valid_596157 != nil:
    section.add "subscriptionId", valid_596157
  var valid_596158 = path.getOrDefault("premierAddOnName")
  valid_596158 = validateParameter(valid_596158, JString, required = true,
                                 default = nil)
  if valid_596158 != nil:
    section.add "premierAddOnName", valid_596158
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596159 = query.getOrDefault("api-version")
  valid_596159 = validateParameter(valid_596159, JString, required = true,
                                 default = nil)
  if valid_596159 != nil:
    section.add "api-version", valid_596159
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596161: Call_SitesAddSitePremierAddOn_596152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596161.validator(path, query, header, formData, body)
  let scheme = call_596161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596161.url(scheme.get, call_596161.host, call_596161.base,
                         call_596161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596161, url, valid)

proc call*(call_596162: Call_SitesAddSitePremierAddOn_596152;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesAddSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   premierAddOn: JObject (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596163 = newJObject()
  var query_596164 = newJObject()
  var body_596165 = newJObject()
  add(path_596163, "resourceGroupName", newJString(resourceGroupName))
  add(query_596164, "api-version", newJString(apiVersion))
  add(path_596163, "name", newJString(name))
  if premierAddOn != nil:
    body_596165 = premierAddOn
  add(path_596163, "subscriptionId", newJString(subscriptionId))
  add(path_596163, "premierAddOnName", newJString(premierAddOnName))
  result = call_596162.call(path_596163, query_596164, nil, nil, body_596165)

var sitesAddSitePremierAddOn* = Call_SitesAddSitePremierAddOn_596152(
    name: "sitesAddSitePremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOn_596153, base: "",
    url: url_SitesAddSitePremierAddOn_596154, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOn_596140 = ref object of OpenApiRestCall_593421
proc url_SitesGetSitePremierAddOn_596142(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOn_596141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596143 = path.getOrDefault("resourceGroupName")
  valid_596143 = validateParameter(valid_596143, JString, required = true,
                                 default = nil)
  if valid_596143 != nil:
    section.add "resourceGroupName", valid_596143
  var valid_596144 = path.getOrDefault("name")
  valid_596144 = validateParameter(valid_596144, JString, required = true,
                                 default = nil)
  if valid_596144 != nil:
    section.add "name", valid_596144
  var valid_596145 = path.getOrDefault("subscriptionId")
  valid_596145 = validateParameter(valid_596145, JString, required = true,
                                 default = nil)
  if valid_596145 != nil:
    section.add "subscriptionId", valid_596145
  var valid_596146 = path.getOrDefault("premierAddOnName")
  valid_596146 = validateParameter(valid_596146, JString, required = true,
                                 default = nil)
  if valid_596146 != nil:
    section.add "premierAddOnName", valid_596146
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596147 = query.getOrDefault("api-version")
  valid_596147 = validateParameter(valid_596147, JString, required = true,
                                 default = nil)
  if valid_596147 != nil:
    section.add "api-version", valid_596147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596148: Call_SitesGetSitePremierAddOn_596140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596148.validator(path, query, header, formData, body)
  let scheme = call_596148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596148.url(scheme.get, call_596148.host, call_596148.base,
                         call_596148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596148, url, valid)

proc call*(call_596149: Call_SitesGetSitePremierAddOn_596140;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesGetSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596150 = newJObject()
  var query_596151 = newJObject()
  add(path_596150, "resourceGroupName", newJString(resourceGroupName))
  add(query_596151, "api-version", newJString(apiVersion))
  add(path_596150, "name", newJString(name))
  add(path_596150, "subscriptionId", newJString(subscriptionId))
  add(path_596150, "premierAddOnName", newJString(premierAddOnName))
  result = call_596149.call(path_596150, query_596151, nil, nil, nil)

var sitesGetSitePremierAddOn* = Call_SitesGetSitePremierAddOn_596140(
    name: "sitesGetSitePremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOn_596141, base: "",
    url: url_SitesGetSitePremierAddOn_596142, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOn_596166 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSitePremierAddOn_596168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOn_596167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596169 = path.getOrDefault("resourceGroupName")
  valid_596169 = validateParameter(valid_596169, JString, required = true,
                                 default = nil)
  if valid_596169 != nil:
    section.add "resourceGroupName", valid_596169
  var valid_596170 = path.getOrDefault("name")
  valid_596170 = validateParameter(valid_596170, JString, required = true,
                                 default = nil)
  if valid_596170 != nil:
    section.add "name", valid_596170
  var valid_596171 = path.getOrDefault("subscriptionId")
  valid_596171 = validateParameter(valid_596171, JString, required = true,
                                 default = nil)
  if valid_596171 != nil:
    section.add "subscriptionId", valid_596171
  var valid_596172 = path.getOrDefault("premierAddOnName")
  valid_596172 = validateParameter(valid_596172, JString, required = true,
                                 default = nil)
  if valid_596172 != nil:
    section.add "premierAddOnName", valid_596172
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596173 = query.getOrDefault("api-version")
  valid_596173 = validateParameter(valid_596173, JString, required = true,
                                 default = nil)
  if valid_596173 != nil:
    section.add "api-version", valid_596173
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596174: Call_SitesDeleteSitePremierAddOn_596166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596174.validator(path, query, header, formData, body)
  let scheme = call_596174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596174.url(scheme.get, call_596174.host, call_596174.base,
                         call_596174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596174, url, valid)

proc call*(call_596175: Call_SitesDeleteSitePremierAddOn_596166;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesDeleteSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596176 = newJObject()
  var query_596177 = newJObject()
  add(path_596176, "resourceGroupName", newJString(resourceGroupName))
  add(query_596177, "api-version", newJString(apiVersion))
  add(path_596176, "name", newJString(name))
  add(path_596176, "subscriptionId", newJString(subscriptionId))
  add(path_596176, "premierAddOnName", newJString(premierAddOnName))
  result = call_596175.call(path_596176, query_596177, nil, nil, nil)

var sitesDeleteSitePremierAddOn* = Call_SitesDeleteSitePremierAddOn_596166(
    name: "sitesDeleteSitePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOn_596167, base: "",
    url: url_SitesDeleteSitePremierAddOn_596168, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXml_596178 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePublishingProfileXml_596180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXml_596179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596181 = path.getOrDefault("resourceGroupName")
  valid_596181 = validateParameter(valid_596181, JString, required = true,
                                 default = nil)
  if valid_596181 != nil:
    section.add "resourceGroupName", valid_596181
  var valid_596182 = path.getOrDefault("name")
  valid_596182 = validateParameter(valid_596182, JString, required = true,
                                 default = nil)
  if valid_596182 != nil:
    section.add "name", valid_596182
  var valid_596183 = path.getOrDefault("subscriptionId")
  valid_596183 = validateParameter(valid_596183, JString, required = true,
                                 default = nil)
  if valid_596183 != nil:
    section.add "subscriptionId", valid_596183
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596184 = query.getOrDefault("api-version")
  valid_596184 = validateParameter(valid_596184, JString, required = true,
                                 default = nil)
  if valid_596184 != nil:
    section.add "api-version", valid_596184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596186: Call_SitesListSitePublishingProfileXml_596178;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596186.validator(path, query, header, formData, body)
  let scheme = call_596186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596186.url(scheme.get, call_596186.host, call_596186.base,
                         call_596186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596186, url, valid)

proc call*(call_596187: Call_SitesListSitePublishingProfileXml_596178;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; options: JsonNode): Recallable =
  ## sitesListSitePublishingProfileXml
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  var path_596188 = newJObject()
  var query_596189 = newJObject()
  var body_596190 = newJObject()
  add(path_596188, "resourceGroupName", newJString(resourceGroupName))
  add(query_596189, "api-version", newJString(apiVersion))
  add(path_596188, "name", newJString(name))
  add(path_596188, "subscriptionId", newJString(subscriptionId))
  if options != nil:
    body_596190 = options
  result = call_596187.call(path_596188, query_596189, nil, nil, body_596190)

var sitesListSitePublishingProfileXml* = Call_SitesListSitePublishingProfileXml_596178(
    name: "sitesListSitePublishingProfileXml", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_SitesListSitePublishingProfileXml_596179, base: "",
    url: url_SitesListSitePublishingProfileXml_596180, schemes: {Scheme.Https})
type
  Call_SitesRecoverSite_596191 = ref object of OpenApiRestCall_593421
proc url_SitesRecoverSite_596193(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSite_596192(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596194 = path.getOrDefault("resourceGroupName")
  valid_596194 = validateParameter(valid_596194, JString, required = true,
                                 default = nil)
  if valid_596194 != nil:
    section.add "resourceGroupName", valid_596194
  var valid_596195 = path.getOrDefault("name")
  valid_596195 = validateParameter(valid_596195, JString, required = true,
                                 default = nil)
  if valid_596195 != nil:
    section.add "name", valid_596195
  var valid_596196 = path.getOrDefault("subscriptionId")
  valid_596196 = validateParameter(valid_596196, JString, required = true,
                                 default = nil)
  if valid_596196 != nil:
    section.add "subscriptionId", valid_596196
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596197 = query.getOrDefault("api-version")
  valid_596197 = validateParameter(valid_596197, JString, required = true,
                                 default = nil)
  if valid_596197 != nil:
    section.add "api-version", valid_596197
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596199: Call_SitesRecoverSite_596191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596199.validator(path, query, header, formData, body)
  let scheme = call_596199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596199.url(scheme.get, call_596199.host, call_596199.base,
                         call_596199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596199, url, valid)

proc call*(call_596200: Call_SitesRecoverSite_596191; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_596201 = newJObject()
  var query_596202 = newJObject()
  var body_596203 = newJObject()
  add(path_596201, "resourceGroupName", newJString(resourceGroupName))
  add(query_596202, "api-version", newJString(apiVersion))
  add(path_596201, "name", newJString(name))
  add(path_596201, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_596203 = recoveryEntity
  result = call_596200.call(path_596201, query_596202, nil, nil, body_596203)

var sitesRecoverSite* = Call_SitesRecoverSite_596191(name: "sitesRecoverSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_SitesRecoverSite_596192, base: "",
    url: url_SitesRecoverSite_596193, schemes: {Scheme.Https})
type
  Call_SitesResetProductionSlotConfig_596204 = ref object of OpenApiRestCall_593421
proc url_SitesResetProductionSlotConfig_596206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetProductionSlotConfig_596205(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596207 = path.getOrDefault("resourceGroupName")
  valid_596207 = validateParameter(valid_596207, JString, required = true,
                                 default = nil)
  if valid_596207 != nil:
    section.add "resourceGroupName", valid_596207
  var valid_596208 = path.getOrDefault("name")
  valid_596208 = validateParameter(valid_596208, JString, required = true,
                                 default = nil)
  if valid_596208 != nil:
    section.add "name", valid_596208
  var valid_596209 = path.getOrDefault("subscriptionId")
  valid_596209 = validateParameter(valid_596209, JString, required = true,
                                 default = nil)
  if valid_596209 != nil:
    section.add "subscriptionId", valid_596209
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596210 = query.getOrDefault("api-version")
  valid_596210 = validateParameter(valid_596210, JString, required = true,
                                 default = nil)
  if valid_596210 != nil:
    section.add "api-version", valid_596210
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596211: Call_SitesResetProductionSlotConfig_596204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596211.validator(path, query, header, formData, body)
  let scheme = call_596211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596211.url(scheme.get, call_596211.host, call_596211.base,
                         call_596211.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596211, url, valid)

proc call*(call_596212: Call_SitesResetProductionSlotConfig_596204;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesResetProductionSlotConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596213 = newJObject()
  var query_596214 = newJObject()
  add(path_596213, "resourceGroupName", newJString(resourceGroupName))
  add(query_596214, "api-version", newJString(apiVersion))
  add(path_596213, "name", newJString(name))
  add(path_596213, "subscriptionId", newJString(subscriptionId))
  result = call_596212.call(path_596213, query_596214, nil, nil, nil)

var sitesResetProductionSlotConfig* = Call_SitesResetProductionSlotConfig_596204(
    name: "sitesResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_SitesResetProductionSlotConfig_596205, base: "",
    url: url_SitesResetProductionSlotConfig_596206, schemes: {Scheme.Https})
type
  Call_SitesRestartSite_596215 = ref object of OpenApiRestCall_593421
proc url_SitesRestartSite_596217(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSite_596216(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596218 = path.getOrDefault("resourceGroupName")
  valid_596218 = validateParameter(valid_596218, JString, required = true,
                                 default = nil)
  if valid_596218 != nil:
    section.add "resourceGroupName", valid_596218
  var valid_596219 = path.getOrDefault("name")
  valid_596219 = validateParameter(valid_596219, JString, required = true,
                                 default = nil)
  if valid_596219 != nil:
    section.add "name", valid_596219
  var valid_596220 = path.getOrDefault("subscriptionId")
  valid_596220 = validateParameter(valid_596220, JString, required = true,
                                 default = nil)
  if valid_596220 != nil:
    section.add "subscriptionId", valid_596220
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596221 = query.getOrDefault("api-version")
  valid_596221 = validateParameter(valid_596221, JString, required = true,
                                 default = nil)
  if valid_596221 != nil:
    section.add "api-version", valid_596221
  var valid_596222 = query.getOrDefault("synchronous")
  valid_596222 = validateParameter(valid_596222, JBool, required = false, default = nil)
  if valid_596222 != nil:
    section.add "synchronous", valid_596222
  var valid_596223 = query.getOrDefault("softRestart")
  valid_596223 = validateParameter(valid_596223, JBool, required = false, default = nil)
  if valid_596223 != nil:
    section.add "softRestart", valid_596223
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596224: Call_SitesRestartSite_596215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596224.validator(path, query, header, formData, body)
  let scheme = call_596224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596224.url(scheme.get, call_596224.host, call_596224.base,
                         call_596224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596224, url, valid)

proc call*(call_596225: Call_SitesRestartSite_596215; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## sitesRestartSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_596226 = newJObject()
  var query_596227 = newJObject()
  add(path_596226, "resourceGroupName", newJString(resourceGroupName))
  add(query_596227, "api-version", newJString(apiVersion))
  add(path_596226, "name", newJString(name))
  add(path_596226, "subscriptionId", newJString(subscriptionId))
  add(query_596227, "synchronous", newJBool(synchronous))
  add(query_596227, "softRestart", newJBool(softRestart))
  result = call_596225.call(path_596226, query_596227, nil, nil, nil)

var sitesRestartSite* = Call_SitesRestartSite_596215(name: "sitesRestartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_SitesRestartSite_596216, base: "",
    url: url_SitesRestartSite_596217, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlots_596228 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSlots_596230(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlots_596229(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596231 = path.getOrDefault("resourceGroupName")
  valid_596231 = validateParameter(valid_596231, JString, required = true,
                                 default = nil)
  if valid_596231 != nil:
    section.add "resourceGroupName", valid_596231
  var valid_596232 = path.getOrDefault("name")
  valid_596232 = validateParameter(valid_596232, JString, required = true,
                                 default = nil)
  if valid_596232 != nil:
    section.add "name", valid_596232
  var valid_596233 = path.getOrDefault("subscriptionId")
  valid_596233 = validateParameter(valid_596233, JString, required = true,
                                 default = nil)
  if valid_596233 != nil:
    section.add "subscriptionId", valid_596233
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : List of app properties to include in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_596234 = query.getOrDefault("propertiesToInclude")
  valid_596234 = validateParameter(valid_596234, JString, required = false,
                                 default = nil)
  if valid_596234 != nil:
    section.add "propertiesToInclude", valid_596234
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596235 = query.getOrDefault("api-version")
  valid_596235 = validateParameter(valid_596235, JString, required = true,
                                 default = nil)
  if valid_596235 != nil:
    section.add "api-version", valid_596235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596236: Call_SitesGetSiteSlots_596228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596236.validator(path, query, header, formData, body)
  let scheme = call_596236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596236.url(scheme.get, call_596236.host, call_596236.base,
                         call_596236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596236, url, valid)

proc call*(call_596237: Call_SitesGetSiteSlots_596228; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlots
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : List of app properties to include in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596238 = newJObject()
  var query_596239 = newJObject()
  add(path_596238, "resourceGroupName", newJString(resourceGroupName))
  add(query_596239, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_596239, "api-version", newJString(apiVersion))
  add(path_596238, "name", newJString(name))
  add(path_596238, "subscriptionId", newJString(subscriptionId))
  result = call_596237.call(path_596238, query_596239, nil, nil, nil)

var sitesGetSiteSlots* = Call_SitesGetSiteSlots_596228(name: "sitesGetSiteSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_SitesGetSiteSlots_596229, base: "",
    url: url_SitesGetSiteSlots_596230, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSlot_596253 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteSlot_596255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSlot_596254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596256 = path.getOrDefault("resourceGroupName")
  valid_596256 = validateParameter(valid_596256, JString, required = true,
                                 default = nil)
  if valid_596256 != nil:
    section.add "resourceGroupName", valid_596256
  var valid_596257 = path.getOrDefault("name")
  valid_596257 = validateParameter(valid_596257, JString, required = true,
                                 default = nil)
  if valid_596257 != nil:
    section.add "name", valid_596257
  var valid_596258 = path.getOrDefault("slot")
  valid_596258 = validateParameter(valid_596258, JString, required = true,
                                 default = nil)
  if valid_596258 != nil:
    section.add "slot", valid_596258
  var valid_596259 = path.getOrDefault("subscriptionId")
  valid_596259 = validateParameter(valid_596259, JString, required = true,
                                 default = nil)
  if valid_596259 != nil:
    section.add "subscriptionId", valid_596259
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  section = newJObject()
  var valid_596260 = query.getOrDefault("skipDnsRegistration")
  valid_596260 = validateParameter(valid_596260, JString, required = false,
                                 default = nil)
  if valid_596260 != nil:
    section.add "skipDnsRegistration", valid_596260
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596261 = query.getOrDefault("api-version")
  valid_596261 = validateParameter(valid_596261, JString, required = true,
                                 default = nil)
  if valid_596261 != nil:
    section.add "api-version", valid_596261
  var valid_596262 = query.getOrDefault("skipCustomDomainVerification")
  valid_596262 = validateParameter(valid_596262, JString, required = false,
                                 default = nil)
  if valid_596262 != nil:
    section.add "skipCustomDomainVerification", valid_596262
  var valid_596263 = query.getOrDefault("forceDnsRegistration")
  valid_596263 = validateParameter(valid_596263, JString, required = false,
                                 default = nil)
  if valid_596263 != nil:
    section.add "forceDnsRegistration", valid_596263
  var valid_596264 = query.getOrDefault("ttlInSeconds")
  valid_596264 = validateParameter(valid_596264, JString, required = false,
                                 default = nil)
  if valid_596264 != nil:
    section.add "ttlInSeconds", valid_596264
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596266: Call_SitesCreateOrUpdateSiteSlot_596253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596266.validator(path, query, header, formData, body)
  let scheme = call_596266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596266.url(scheme.get, call_596266.host, call_596266.base,
                         call_596266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596266, url, valid)

proc call*(call_596267: Call_SitesCreateOrUpdateSiteSlot_596253;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: string = "";
          skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; ttlInSeconds: string = ""): Recallable =
  ## sitesCreateOrUpdateSiteSlot
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  var path_596268 = newJObject()
  var query_596269 = newJObject()
  var body_596270 = newJObject()
  if siteEnvelope != nil:
    body_596270 = siteEnvelope
  add(path_596268, "resourceGroupName", newJString(resourceGroupName))
  add(query_596269, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_596269, "api-version", newJString(apiVersion))
  add(path_596268, "name", newJString(name))
  add(query_596269, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(path_596268, "slot", newJString(slot))
  add(path_596268, "subscriptionId", newJString(subscriptionId))
  add(query_596269, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(query_596269, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_596267.call(path_596268, query_596269, nil, nil, body_596270)

var sitesCreateOrUpdateSiteSlot* = Call_SitesCreateOrUpdateSiteSlot_596253(
    name: "sitesCreateOrUpdateSiteSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesCreateOrUpdateSiteSlot_596254, base: "",
    url: url_SitesCreateOrUpdateSiteSlot_596255, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlot_596240 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSlot_596242(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlot_596241(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596243 = path.getOrDefault("resourceGroupName")
  valid_596243 = validateParameter(valid_596243, JString, required = true,
                                 default = nil)
  if valid_596243 != nil:
    section.add "resourceGroupName", valid_596243
  var valid_596244 = path.getOrDefault("name")
  valid_596244 = validateParameter(valid_596244, JString, required = true,
                                 default = nil)
  if valid_596244 != nil:
    section.add "name", valid_596244
  var valid_596245 = path.getOrDefault("slot")
  valid_596245 = validateParameter(valid_596245, JString, required = true,
                                 default = nil)
  if valid_596245 != nil:
    section.add "slot", valid_596245
  var valid_596246 = path.getOrDefault("subscriptionId")
  valid_596246 = validateParameter(valid_596246, JString, required = true,
                                 default = nil)
  if valid_596246 != nil:
    section.add "subscriptionId", valid_596246
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_596247 = query.getOrDefault("propertiesToInclude")
  valid_596247 = validateParameter(valid_596247, JString, required = false,
                                 default = nil)
  if valid_596247 != nil:
    section.add "propertiesToInclude", valid_596247
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596248 = query.getOrDefault("api-version")
  valid_596248 = validateParameter(valid_596248, JString, required = true,
                                 default = nil)
  if valid_596248 != nil:
    section.add "api-version", valid_596248
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596249: Call_SitesGetSiteSlot_596240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596249.validator(path, query, header, formData, body)
  let scheme = call_596249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596249.url(scheme.get, call_596249.host, call_596249.base,
                         call_596249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596249, url, valid)

proc call*(call_596250: Call_SitesGetSiteSlot_596240; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596251 = newJObject()
  var query_596252 = newJObject()
  add(path_596251, "resourceGroupName", newJString(resourceGroupName))
  add(query_596252, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_596252, "api-version", newJString(apiVersion))
  add(path_596251, "name", newJString(name))
  add(path_596251, "slot", newJString(slot))
  add(path_596251, "subscriptionId", newJString(subscriptionId))
  result = call_596250.call(path_596251, query_596252, nil, nil, nil)

var sitesGetSiteSlot* = Call_SitesGetSiteSlot_596240(name: "sitesGetSiteSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesGetSiteSlot_596241, base: "",
    url: url_SitesGetSiteSlot_596242, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSlot_596271 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteSlot_596273(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSlot_596272(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596274 = path.getOrDefault("resourceGroupName")
  valid_596274 = validateParameter(valid_596274, JString, required = true,
                                 default = nil)
  if valid_596274 != nil:
    section.add "resourceGroupName", valid_596274
  var valid_596275 = path.getOrDefault("name")
  valid_596275 = validateParameter(valid_596275, JString, required = true,
                                 default = nil)
  if valid_596275 != nil:
    section.add "name", valid_596275
  var valid_596276 = path.getOrDefault("slot")
  valid_596276 = validateParameter(valid_596276, JString, required = true,
                                 default = nil)
  if valid_596276 != nil:
    section.add "slot", valid_596276
  var valid_596277 = path.getOrDefault("subscriptionId")
  valid_596277 = validateParameter(valid_596277, JString, required = true,
                                 default = nil)
  if valid_596277 != nil:
    section.add "subscriptionId", valid_596277
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  var valid_596278 = query.getOrDefault("skipDnsRegistration")
  valid_596278 = validateParameter(valid_596278, JString, required = false,
                                 default = nil)
  if valid_596278 != nil:
    section.add "skipDnsRegistration", valid_596278
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596279 = query.getOrDefault("api-version")
  valid_596279 = validateParameter(valid_596279, JString, required = true,
                                 default = nil)
  if valid_596279 != nil:
    section.add "api-version", valid_596279
  var valid_596280 = query.getOrDefault("deleteMetrics")
  valid_596280 = validateParameter(valid_596280, JString, required = false,
                                 default = nil)
  if valid_596280 != nil:
    section.add "deleteMetrics", valid_596280
  var valid_596281 = query.getOrDefault("deleteEmptyServerFarm")
  valid_596281 = validateParameter(valid_596281, JString, required = false,
                                 default = nil)
  if valid_596281 != nil:
    section.add "deleteEmptyServerFarm", valid_596281
  var valid_596282 = query.getOrDefault("deleteAllSlots")
  valid_596282 = validateParameter(valid_596282, JString, required = false,
                                 default = nil)
  if valid_596282 != nil:
    section.add "deleteAllSlots", valid_596282
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596283: Call_SitesDeleteSiteSlot_596271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596283.validator(path, query, header, formData, body)
  let scheme = call_596283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596283.url(scheme.get, call_596283.host, call_596283.base,
                         call_596283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596283, url, valid)

proc call*(call_596284: Call_SitesDeleteSiteSlot_596271; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: string = ""; deleteMetrics: string = "";
          deleteEmptyServerFarm: string = ""; deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_596285 = newJObject()
  var query_596286 = newJObject()
  add(path_596285, "resourceGroupName", newJString(resourceGroupName))
  add(query_596286, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_596286, "api-version", newJString(apiVersion))
  add(path_596285, "name", newJString(name))
  add(path_596285, "slot", newJString(slot))
  add(path_596285, "subscriptionId", newJString(subscriptionId))
  add(query_596286, "deleteMetrics", newJString(deleteMetrics))
  add(query_596286, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(query_596286, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_596284.call(path_596285, query_596286, nil, nil, nil)

var sitesDeleteSiteSlot* = Call_SitesDeleteSiteSlot_596271(
    name: "sitesDeleteSiteSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesDeleteSiteSlot_596272, base: "",
    url: url_SitesDeleteSiteSlot_596273, schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigSlot_596287 = ref object of OpenApiRestCall_593421
proc url_SitesApplySlotConfigSlot_596289(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigSlot_596288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596290 = path.getOrDefault("resourceGroupName")
  valid_596290 = validateParameter(valid_596290, JString, required = true,
                                 default = nil)
  if valid_596290 != nil:
    section.add "resourceGroupName", valid_596290
  var valid_596291 = path.getOrDefault("name")
  valid_596291 = validateParameter(valid_596291, JString, required = true,
                                 default = nil)
  if valid_596291 != nil:
    section.add "name", valid_596291
  var valid_596292 = path.getOrDefault("slot")
  valid_596292 = validateParameter(valid_596292, JString, required = true,
                                 default = nil)
  if valid_596292 != nil:
    section.add "slot", valid_596292
  var valid_596293 = path.getOrDefault("subscriptionId")
  valid_596293 = validateParameter(valid_596293, JString, required = true,
                                 default = nil)
  if valid_596293 != nil:
    section.add "subscriptionId", valid_596293
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596294 = query.getOrDefault("api-version")
  valid_596294 = validateParameter(valid_596294, JString, required = true,
                                 default = nil)
  if valid_596294 != nil:
    section.add "api-version", valid_596294
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596296: Call_SitesApplySlotConfigSlot_596287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596296.validator(path, query, header, formData, body)
  let scheme = call_596296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596296.url(scheme.get, call_596296.host, call_596296.base,
                         call_596296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596296, url, valid)

proc call*(call_596297: Call_SitesApplySlotConfigSlot_596287;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesApplySlotConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  var path_596298 = newJObject()
  var query_596299 = newJObject()
  var body_596300 = newJObject()
  add(path_596298, "resourceGroupName", newJString(resourceGroupName))
  add(query_596299, "api-version", newJString(apiVersion))
  add(path_596298, "name", newJString(name))
  add(path_596298, "slot", newJString(slot))
  add(path_596298, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_596300 = slotSwapEntity
  result = call_596297.call(path_596298, query_596299, nil, nil, body_596300)

var sitesApplySlotConfigSlot* = Call_SitesApplySlotConfigSlot_596287(
    name: "sitesApplySlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_SitesApplySlotConfigSlot_596288, base: "",
    url: url_SitesApplySlotConfigSlot_596289, schemes: {Scheme.Https})
type
  Call_SitesBackupSiteSlot_596301 = ref object of OpenApiRestCall_593421
proc url_SitesBackupSiteSlot_596303(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSiteSlot_596302(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596304 = path.getOrDefault("resourceGroupName")
  valid_596304 = validateParameter(valid_596304, JString, required = true,
                                 default = nil)
  if valid_596304 != nil:
    section.add "resourceGroupName", valid_596304
  var valid_596305 = path.getOrDefault("name")
  valid_596305 = validateParameter(valid_596305, JString, required = true,
                                 default = nil)
  if valid_596305 != nil:
    section.add "name", valid_596305
  var valid_596306 = path.getOrDefault("slot")
  valid_596306 = validateParameter(valid_596306, JString, required = true,
                                 default = nil)
  if valid_596306 != nil:
    section.add "slot", valid_596306
  var valid_596307 = path.getOrDefault("subscriptionId")
  valid_596307 = validateParameter(valid_596307, JString, required = true,
                                 default = nil)
  if valid_596307 != nil:
    section.add "subscriptionId", valid_596307
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596308 = query.getOrDefault("api-version")
  valid_596308 = validateParameter(valid_596308, JString, required = true,
                                 default = nil)
  if valid_596308 != nil:
    section.add "api-version", valid_596308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596310: Call_SitesBackupSiteSlot_596301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596310.validator(path, query, header, formData, body)
  let scheme = call_596310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596310.url(scheme.get, call_596310.host, call_596310.base,
                         call_596310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596310, url, valid)

proc call*(call_596311: Call_SitesBackupSiteSlot_596301; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## sitesBackupSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_596312 = newJObject()
  var query_596313 = newJObject()
  var body_596314 = newJObject()
  add(path_596312, "resourceGroupName", newJString(resourceGroupName))
  add(query_596313, "api-version", newJString(apiVersion))
  add(path_596312, "name", newJString(name))
  add(path_596312, "slot", newJString(slot))
  add(path_596312, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596314 = request
  result = call_596311.call(path_596312, query_596313, nil, nil, body_596314)

var sitesBackupSiteSlot* = Call_SitesBackupSiteSlot_596301(
    name: "sitesBackupSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_SitesBackupSiteSlot_596302, base: "",
    url: url_SitesBackupSiteSlot_596303, schemes: {Scheme.Https})
type
  Call_SitesListSiteBackupsSlot_596315 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteBackupsSlot_596317(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackupsSlot_596316(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596318 = path.getOrDefault("resourceGroupName")
  valid_596318 = validateParameter(valid_596318, JString, required = true,
                                 default = nil)
  if valid_596318 != nil:
    section.add "resourceGroupName", valid_596318
  var valid_596319 = path.getOrDefault("name")
  valid_596319 = validateParameter(valid_596319, JString, required = true,
                                 default = nil)
  if valid_596319 != nil:
    section.add "name", valid_596319
  var valid_596320 = path.getOrDefault("slot")
  valid_596320 = validateParameter(valid_596320, JString, required = true,
                                 default = nil)
  if valid_596320 != nil:
    section.add "slot", valid_596320
  var valid_596321 = path.getOrDefault("subscriptionId")
  valid_596321 = validateParameter(valid_596321, JString, required = true,
                                 default = nil)
  if valid_596321 != nil:
    section.add "subscriptionId", valid_596321
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596322 = query.getOrDefault("api-version")
  valid_596322 = validateParameter(valid_596322, JString, required = true,
                                 default = nil)
  if valid_596322 != nil:
    section.add "api-version", valid_596322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596323: Call_SitesListSiteBackupsSlot_596315; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596323.validator(path, query, header, formData, body)
  let scheme = call_596323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596323.url(scheme.get, call_596323.host, call_596323.base,
                         call_596323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596323, url, valid)

proc call*(call_596324: Call_SitesListSiteBackupsSlot_596315;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteBackupsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596325 = newJObject()
  var query_596326 = newJObject()
  add(path_596325, "resourceGroupName", newJString(resourceGroupName))
  add(query_596326, "api-version", newJString(apiVersion))
  add(path_596325, "name", newJString(name))
  add(path_596325, "slot", newJString(slot))
  add(path_596325, "subscriptionId", newJString(subscriptionId))
  result = call_596324.call(path_596325, query_596326, nil, nil, nil)

var sitesListSiteBackupsSlot* = Call_SitesListSiteBackupsSlot_596315(
    name: "sitesListSiteBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_SitesListSiteBackupsSlot_596316, base: "",
    url: url_SitesListSiteBackupsSlot_596317, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestoreSlot_596327 = ref object of OpenApiRestCall_593421
proc url_SitesDiscoverSiteRestoreSlot_596329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestoreSlot_596328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596330 = path.getOrDefault("resourceGroupName")
  valid_596330 = validateParameter(valid_596330, JString, required = true,
                                 default = nil)
  if valid_596330 != nil:
    section.add "resourceGroupName", valid_596330
  var valid_596331 = path.getOrDefault("name")
  valid_596331 = validateParameter(valid_596331, JString, required = true,
                                 default = nil)
  if valid_596331 != nil:
    section.add "name", valid_596331
  var valid_596332 = path.getOrDefault("slot")
  valid_596332 = validateParameter(valid_596332, JString, required = true,
                                 default = nil)
  if valid_596332 != nil:
    section.add "slot", valid_596332
  var valid_596333 = path.getOrDefault("subscriptionId")
  valid_596333 = validateParameter(valid_596333, JString, required = true,
                                 default = nil)
  if valid_596333 != nil:
    section.add "subscriptionId", valid_596333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596334 = query.getOrDefault("api-version")
  valid_596334 = validateParameter(valid_596334, JString, required = true,
                                 default = nil)
  if valid_596334 != nil:
    section.add "api-version", valid_596334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596336: Call_SitesDiscoverSiteRestoreSlot_596327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596336.validator(path, query, header, formData, body)
  let scheme = call_596336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596336.url(scheme.get, call_596336.host, call_596336.base,
                         call_596336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596336, url, valid)

proc call*(call_596337: Call_SitesDiscoverSiteRestoreSlot_596327;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestoreSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_596338 = newJObject()
  var query_596339 = newJObject()
  var body_596340 = newJObject()
  add(path_596338, "resourceGroupName", newJString(resourceGroupName))
  add(query_596339, "api-version", newJString(apiVersion))
  add(path_596338, "name", newJString(name))
  add(path_596338, "slot", newJString(slot))
  add(path_596338, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596340 = request
  result = call_596337.call(path_596338, query_596339, nil, nil, body_596340)

var sitesDiscoverSiteRestoreSlot* = Call_SitesDiscoverSiteRestoreSlot_596327(
    name: "sitesDiscoverSiteRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_SitesDiscoverSiteRestoreSlot_596328, base: "",
    url: url_SitesDiscoverSiteRestoreSlot_596329, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSlot_596341 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupStatusSlot_596343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSlot_596342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596344 = path.getOrDefault("resourceGroupName")
  valid_596344 = validateParameter(valid_596344, JString, required = true,
                                 default = nil)
  if valid_596344 != nil:
    section.add "resourceGroupName", valid_596344
  var valid_596345 = path.getOrDefault("name")
  valid_596345 = validateParameter(valid_596345, JString, required = true,
                                 default = nil)
  if valid_596345 != nil:
    section.add "name", valid_596345
  var valid_596346 = path.getOrDefault("slot")
  valid_596346 = validateParameter(valid_596346, JString, required = true,
                                 default = nil)
  if valid_596346 != nil:
    section.add "slot", valid_596346
  var valid_596347 = path.getOrDefault("subscriptionId")
  valid_596347 = validateParameter(valid_596347, JString, required = true,
                                 default = nil)
  if valid_596347 != nil:
    section.add "subscriptionId", valid_596347
  var valid_596348 = path.getOrDefault("backupId")
  valid_596348 = validateParameter(valid_596348, JString, required = true,
                                 default = nil)
  if valid_596348 != nil:
    section.add "backupId", valid_596348
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596349 = query.getOrDefault("api-version")
  valid_596349 = validateParameter(valid_596349, JString, required = true,
                                 default = nil)
  if valid_596349 != nil:
    section.add "api-version", valid_596349
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596350: Call_SitesGetSiteBackupStatusSlot_596341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596350.validator(path, query, header, formData, body)
  let scheme = call_596350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596350.url(scheme.get, call_596350.host, call_596350.base,
                         call_596350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596350, url, valid)

proc call*(call_596351: Call_SitesGetSiteBackupStatusSlot_596341;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_596352 = newJObject()
  var query_596353 = newJObject()
  add(path_596352, "resourceGroupName", newJString(resourceGroupName))
  add(query_596353, "api-version", newJString(apiVersion))
  add(path_596352, "name", newJString(name))
  add(path_596352, "slot", newJString(slot))
  add(path_596352, "subscriptionId", newJString(subscriptionId))
  add(path_596352, "backupId", newJString(backupId))
  result = call_596351.call(path_596352, query_596353, nil, nil, nil)

var sitesGetSiteBackupStatusSlot* = Call_SitesGetSiteBackupStatusSlot_596341(
    name: "sitesGetSiteBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatusSlot_596342, base: "",
    url: url_SitesGetSiteBackupStatusSlot_596343, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackupSlot_596354 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteBackupSlot_596356(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackupSlot_596355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596357 = path.getOrDefault("resourceGroupName")
  valid_596357 = validateParameter(valid_596357, JString, required = true,
                                 default = nil)
  if valid_596357 != nil:
    section.add "resourceGroupName", valid_596357
  var valid_596358 = path.getOrDefault("name")
  valid_596358 = validateParameter(valid_596358, JString, required = true,
                                 default = nil)
  if valid_596358 != nil:
    section.add "name", valid_596358
  var valid_596359 = path.getOrDefault("slot")
  valid_596359 = validateParameter(valid_596359, JString, required = true,
                                 default = nil)
  if valid_596359 != nil:
    section.add "slot", valid_596359
  var valid_596360 = path.getOrDefault("subscriptionId")
  valid_596360 = validateParameter(valid_596360, JString, required = true,
                                 default = nil)
  if valid_596360 != nil:
    section.add "subscriptionId", valid_596360
  var valid_596361 = path.getOrDefault("backupId")
  valid_596361 = validateParameter(valid_596361, JString, required = true,
                                 default = nil)
  if valid_596361 != nil:
    section.add "backupId", valid_596361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596362 = query.getOrDefault("api-version")
  valid_596362 = validateParameter(valid_596362, JString, required = true,
                                 default = nil)
  if valid_596362 != nil:
    section.add "api-version", valid_596362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596363: Call_SitesDeleteBackupSlot_596354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596363.validator(path, query, header, formData, body)
  let scheme = call_596363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596363.url(scheme.get, call_596363.host, call_596363.base,
                         call_596363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596363, url, valid)

proc call*(call_596364: Call_SitesDeleteBackupSlot_596354;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesDeleteBackupSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_596365 = newJObject()
  var query_596366 = newJObject()
  add(path_596365, "resourceGroupName", newJString(resourceGroupName))
  add(query_596366, "api-version", newJString(apiVersion))
  add(path_596365, "name", newJString(name))
  add(path_596365, "slot", newJString(slot))
  add(path_596365, "subscriptionId", newJString(subscriptionId))
  add(path_596365, "backupId", newJString(backupId))
  result = call_596364.call(path_596365, query_596366, nil, nil, nil)

var sitesDeleteBackupSlot* = Call_SitesDeleteBackupSlot_596354(
    name: "sitesDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesDeleteBackupSlot_596355, base: "",
    url: url_SitesDeleteBackupSlot_596356, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecretsSlot_596367 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupStatusSecretsSlot_596369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecretsSlot_596368(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596370 = path.getOrDefault("resourceGroupName")
  valid_596370 = validateParameter(valid_596370, JString, required = true,
                                 default = nil)
  if valid_596370 != nil:
    section.add "resourceGroupName", valid_596370
  var valid_596371 = path.getOrDefault("name")
  valid_596371 = validateParameter(valid_596371, JString, required = true,
                                 default = nil)
  if valid_596371 != nil:
    section.add "name", valid_596371
  var valid_596372 = path.getOrDefault("slot")
  valid_596372 = validateParameter(valid_596372, JString, required = true,
                                 default = nil)
  if valid_596372 != nil:
    section.add "slot", valid_596372
  var valid_596373 = path.getOrDefault("subscriptionId")
  valid_596373 = validateParameter(valid_596373, JString, required = true,
                                 default = nil)
  if valid_596373 != nil:
    section.add "subscriptionId", valid_596373
  var valid_596374 = path.getOrDefault("backupId")
  valid_596374 = validateParameter(valid_596374, JString, required = true,
                                 default = nil)
  if valid_596374 != nil:
    section.add "backupId", valid_596374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596375 = query.getOrDefault("api-version")
  valid_596375 = validateParameter(valid_596375, JString, required = true,
                                 default = nil)
  if valid_596375 != nil:
    section.add "api-version", valid_596375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596377: Call_SitesGetSiteBackupStatusSecretsSlot_596367;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596377.validator(path, query, header, formData, body)
  let scheme = call_596377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596377.url(scheme.get, call_596377.host, call_596377.base,
                         call_596377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596377, url, valid)

proc call*(call_596378: Call_SitesGetSiteBackupStatusSecretsSlot_596367;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSecretsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  ##   backupId: string (required)
  ##           : Id of backup
  var path_596379 = newJObject()
  var query_596380 = newJObject()
  var body_596381 = newJObject()
  add(path_596379, "resourceGroupName", newJString(resourceGroupName))
  add(query_596380, "api-version", newJString(apiVersion))
  add(path_596379, "name", newJString(name))
  add(path_596379, "slot", newJString(slot))
  add(path_596379, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596381 = request
  add(path_596379, "backupId", newJString(backupId))
  result = call_596378.call(path_596379, query_596380, nil, nil, body_596381)

var sitesGetSiteBackupStatusSecretsSlot* = Call_SitesGetSiteBackupStatusSecretsSlot_596367(
    name: "sitesGetSiteBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecretsSlot_596368, base: "",
    url: url_SitesGetSiteBackupStatusSecretsSlot_596369, schemes: {Scheme.Https})
type
  Call_SitesRestoreSiteSlot_596382 = ref object of OpenApiRestCall_593421
proc url_SitesRestoreSiteSlot_596384(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSiteSlot_596383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596385 = path.getOrDefault("resourceGroupName")
  valid_596385 = validateParameter(valid_596385, JString, required = true,
                                 default = nil)
  if valid_596385 != nil:
    section.add "resourceGroupName", valid_596385
  var valid_596386 = path.getOrDefault("name")
  valid_596386 = validateParameter(valid_596386, JString, required = true,
                                 default = nil)
  if valid_596386 != nil:
    section.add "name", valid_596386
  var valid_596387 = path.getOrDefault("slot")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = nil)
  if valid_596387 != nil:
    section.add "slot", valid_596387
  var valid_596388 = path.getOrDefault("subscriptionId")
  valid_596388 = validateParameter(valid_596388, JString, required = true,
                                 default = nil)
  if valid_596388 != nil:
    section.add "subscriptionId", valid_596388
  var valid_596389 = path.getOrDefault("backupId")
  valid_596389 = validateParameter(valid_596389, JString, required = true,
                                 default = nil)
  if valid_596389 != nil:
    section.add "backupId", valid_596389
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596390 = query.getOrDefault("api-version")
  valid_596390 = validateParameter(valid_596390, JString, required = true,
                                 default = nil)
  if valid_596390 != nil:
    section.add "api-version", valid_596390
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596392: Call_SitesRestoreSiteSlot_596382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596392.validator(path, query, header, formData, body)
  let scheme = call_596392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596392.url(scheme.get, call_596392.host, call_596392.base,
                         call_596392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596392, url, valid)

proc call*(call_596393: Call_SitesRestoreSiteSlot_596382;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesRestoreSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  ##   backupId: string (required)
  ##           : Id of backup to restore
  var path_596394 = newJObject()
  var query_596395 = newJObject()
  var body_596396 = newJObject()
  add(path_596394, "resourceGroupName", newJString(resourceGroupName))
  add(query_596395, "api-version", newJString(apiVersion))
  add(path_596394, "name", newJString(name))
  add(path_596394, "slot", newJString(slot))
  add(path_596394, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596396 = request
  add(path_596394, "backupId", newJString(backupId))
  result = call_596393.call(path_596394, query_596395, nil, nil, body_596396)

var sitesRestoreSiteSlot* = Call_SitesRestoreSiteSlot_596382(
    name: "sitesRestoreSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSiteSlot_596383, base: "",
    url: url_SitesRestoreSiteSlot_596384, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettingsSlot_596397 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteAppSettingsSlot_596399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettingsSlot_596398(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596400 = path.getOrDefault("resourceGroupName")
  valid_596400 = validateParameter(valid_596400, JString, required = true,
                                 default = nil)
  if valid_596400 != nil:
    section.add "resourceGroupName", valid_596400
  var valid_596401 = path.getOrDefault("name")
  valid_596401 = validateParameter(valid_596401, JString, required = true,
                                 default = nil)
  if valid_596401 != nil:
    section.add "name", valid_596401
  var valid_596402 = path.getOrDefault("slot")
  valid_596402 = validateParameter(valid_596402, JString, required = true,
                                 default = nil)
  if valid_596402 != nil:
    section.add "slot", valid_596402
  var valid_596403 = path.getOrDefault("subscriptionId")
  valid_596403 = validateParameter(valid_596403, JString, required = true,
                                 default = nil)
  if valid_596403 != nil:
    section.add "subscriptionId", valid_596403
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596404 = query.getOrDefault("api-version")
  valid_596404 = validateParameter(valid_596404, JString, required = true,
                                 default = nil)
  if valid_596404 != nil:
    section.add "api-version", valid_596404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596406: Call_SitesUpdateSiteAppSettingsSlot_596397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596406.validator(path, query, header, formData, body)
  let scheme = call_596406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596406.url(scheme.get, call_596406.host, call_596406.base,
                         call_596406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596406, url, valid)

proc call*(call_596407: Call_SitesUpdateSiteAppSettingsSlot_596397;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteAppSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596408 = newJObject()
  var query_596409 = newJObject()
  var body_596410 = newJObject()
  add(path_596408, "resourceGroupName", newJString(resourceGroupName))
  add(query_596409, "api-version", newJString(apiVersion))
  add(path_596408, "name", newJString(name))
  if appSettings != nil:
    body_596410 = appSettings
  add(path_596408, "slot", newJString(slot))
  add(path_596408, "subscriptionId", newJString(subscriptionId))
  result = call_596407.call(path_596408, query_596409, nil, nil, body_596410)

var sitesUpdateSiteAppSettingsSlot* = Call_SitesUpdateSiteAppSettingsSlot_596397(
    name: "sitesUpdateSiteAppSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettingsSlot_596398, base: "",
    url: url_SitesUpdateSiteAppSettingsSlot_596399, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettingsSlot_596411 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteAppSettingsSlot_596413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettingsSlot_596412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596414 = path.getOrDefault("resourceGroupName")
  valid_596414 = validateParameter(valid_596414, JString, required = true,
                                 default = nil)
  if valid_596414 != nil:
    section.add "resourceGroupName", valid_596414
  var valid_596415 = path.getOrDefault("name")
  valid_596415 = validateParameter(valid_596415, JString, required = true,
                                 default = nil)
  if valid_596415 != nil:
    section.add "name", valid_596415
  var valid_596416 = path.getOrDefault("slot")
  valid_596416 = validateParameter(valid_596416, JString, required = true,
                                 default = nil)
  if valid_596416 != nil:
    section.add "slot", valid_596416
  var valid_596417 = path.getOrDefault("subscriptionId")
  valid_596417 = validateParameter(valid_596417, JString, required = true,
                                 default = nil)
  if valid_596417 != nil:
    section.add "subscriptionId", valid_596417
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596418 = query.getOrDefault("api-version")
  valid_596418 = validateParameter(valid_596418, JString, required = true,
                                 default = nil)
  if valid_596418 != nil:
    section.add "api-version", valid_596418
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596419: Call_SitesListSiteAppSettingsSlot_596411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596419.validator(path, query, header, formData, body)
  let scheme = call_596419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596419.url(scheme.get, call_596419.host, call_596419.base,
                         call_596419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596419, url, valid)

proc call*(call_596420: Call_SitesListSiteAppSettingsSlot_596411;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAppSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596421 = newJObject()
  var query_596422 = newJObject()
  add(path_596421, "resourceGroupName", newJString(resourceGroupName))
  add(query_596422, "api-version", newJString(apiVersion))
  add(path_596421, "name", newJString(name))
  add(path_596421, "slot", newJString(slot))
  add(path_596421, "subscriptionId", newJString(subscriptionId))
  result = call_596420.call(path_596421, query_596422, nil, nil, nil)

var sitesListSiteAppSettingsSlot* = Call_SitesListSiteAppSettingsSlot_596411(
    name: "sitesListSiteAppSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettingsSlot_596412, base: "",
    url: url_SitesListSiteAppSettingsSlot_596413, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettingsSlot_596423 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteAuthSettingsSlot_596425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettingsSlot_596424(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596426 = path.getOrDefault("resourceGroupName")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = nil)
  if valid_596426 != nil:
    section.add "resourceGroupName", valid_596426
  var valid_596427 = path.getOrDefault("name")
  valid_596427 = validateParameter(valid_596427, JString, required = true,
                                 default = nil)
  if valid_596427 != nil:
    section.add "name", valid_596427
  var valid_596428 = path.getOrDefault("slot")
  valid_596428 = validateParameter(valid_596428, JString, required = true,
                                 default = nil)
  if valid_596428 != nil:
    section.add "slot", valid_596428
  var valid_596429 = path.getOrDefault("subscriptionId")
  valid_596429 = validateParameter(valid_596429, JString, required = true,
                                 default = nil)
  if valid_596429 != nil:
    section.add "subscriptionId", valid_596429
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596430 = query.getOrDefault("api-version")
  valid_596430 = validateParameter(valid_596430, JString, required = true,
                                 default = nil)
  if valid_596430 != nil:
    section.add "api-version", valid_596430
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596432: Call_SitesUpdateSiteAuthSettingsSlot_596423;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596432.validator(path, query, header, formData, body)
  let scheme = call_596432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596432.url(scheme.get, call_596432.host, call_596432.base,
                         call_596432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596432, url, valid)

proc call*(call_596433: Call_SitesUpdateSiteAuthSettingsSlot_596423;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## sitesUpdateSiteAuthSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  var path_596434 = newJObject()
  var query_596435 = newJObject()
  var body_596436 = newJObject()
  add(path_596434, "resourceGroupName", newJString(resourceGroupName))
  add(query_596435, "api-version", newJString(apiVersion))
  add(path_596434, "name", newJString(name))
  add(path_596434, "slot", newJString(slot))
  add(path_596434, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_596436 = siteAuthSettings
  result = call_596433.call(path_596434, query_596435, nil, nil, body_596436)

var sitesUpdateSiteAuthSettingsSlot* = Call_SitesUpdateSiteAuthSettingsSlot_596423(
    name: "sitesUpdateSiteAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettingsSlot_596424, base: "",
    url: url_SitesUpdateSiteAuthSettingsSlot_596425, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettingsSlot_596437 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteAuthSettingsSlot_596439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettingsSlot_596438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596440 = path.getOrDefault("resourceGroupName")
  valid_596440 = validateParameter(valid_596440, JString, required = true,
                                 default = nil)
  if valid_596440 != nil:
    section.add "resourceGroupName", valid_596440
  var valid_596441 = path.getOrDefault("name")
  valid_596441 = validateParameter(valid_596441, JString, required = true,
                                 default = nil)
  if valid_596441 != nil:
    section.add "name", valid_596441
  var valid_596442 = path.getOrDefault("slot")
  valid_596442 = validateParameter(valid_596442, JString, required = true,
                                 default = nil)
  if valid_596442 != nil:
    section.add "slot", valid_596442
  var valid_596443 = path.getOrDefault("subscriptionId")
  valid_596443 = validateParameter(valid_596443, JString, required = true,
                                 default = nil)
  if valid_596443 != nil:
    section.add "subscriptionId", valid_596443
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596444 = query.getOrDefault("api-version")
  valid_596444 = validateParameter(valid_596444, JString, required = true,
                                 default = nil)
  if valid_596444 != nil:
    section.add "api-version", valid_596444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596445: Call_SitesListSiteAuthSettingsSlot_596437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596445.validator(path, query, header, formData, body)
  let scheme = call_596445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596445.url(scheme.get, call_596445.host, call_596445.base,
                         call_596445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596445, url, valid)

proc call*(call_596446: Call_SitesListSiteAuthSettingsSlot_596437;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAuthSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596447 = newJObject()
  var query_596448 = newJObject()
  add(path_596447, "resourceGroupName", newJString(resourceGroupName))
  add(query_596448, "api-version", newJString(apiVersion))
  add(path_596447, "name", newJString(name))
  add(path_596447, "slot", newJString(slot))
  add(path_596447, "subscriptionId", newJString(subscriptionId))
  result = call_596446.call(path_596447, query_596448, nil, nil, nil)

var sitesListSiteAuthSettingsSlot* = Call_SitesListSiteAuthSettingsSlot_596437(
    name: "sitesListSiteAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettingsSlot_596438, base: "",
    url: url_SitesListSiteAuthSettingsSlot_596439, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfigurationSlot_596449 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteBackupConfigurationSlot_596451(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfigurationSlot_596450(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596452 = path.getOrDefault("resourceGroupName")
  valid_596452 = validateParameter(valid_596452, JString, required = true,
                                 default = nil)
  if valid_596452 != nil:
    section.add "resourceGroupName", valid_596452
  var valid_596453 = path.getOrDefault("name")
  valid_596453 = validateParameter(valid_596453, JString, required = true,
                                 default = nil)
  if valid_596453 != nil:
    section.add "name", valid_596453
  var valid_596454 = path.getOrDefault("slot")
  valid_596454 = validateParameter(valid_596454, JString, required = true,
                                 default = nil)
  if valid_596454 != nil:
    section.add "slot", valid_596454
  var valid_596455 = path.getOrDefault("subscriptionId")
  valid_596455 = validateParameter(valid_596455, JString, required = true,
                                 default = nil)
  if valid_596455 != nil:
    section.add "subscriptionId", valid_596455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596456 = query.getOrDefault("api-version")
  valid_596456 = validateParameter(valid_596456, JString, required = true,
                                 default = nil)
  if valid_596456 != nil:
    section.add "api-version", valid_596456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596458: Call_SitesUpdateSiteBackupConfigurationSlot_596449;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596458.validator(path, query, header, formData, body)
  let scheme = call_596458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596458.url(scheme.get, call_596458.host, call_596458.base,
                         call_596458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596458, url, valid)

proc call*(call_596459: Call_SitesUpdateSiteBackupConfigurationSlot_596449;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfigurationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_596460 = newJObject()
  var query_596461 = newJObject()
  var body_596462 = newJObject()
  add(path_596460, "resourceGroupName", newJString(resourceGroupName))
  add(query_596461, "api-version", newJString(apiVersion))
  add(path_596460, "name", newJString(name))
  add(path_596460, "slot", newJString(slot))
  add(path_596460, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596462 = request
  result = call_596459.call(path_596460, query_596461, nil, nil, body_596462)

var sitesUpdateSiteBackupConfigurationSlot* = Call_SitesUpdateSiteBackupConfigurationSlot_596449(
    name: "sitesUpdateSiteBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfigurationSlot_596450, base: "",
    url: url_SitesUpdateSiteBackupConfigurationSlot_596451,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfigurationSlot_596463 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteBackupConfigurationSlot_596465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfigurationSlot_596464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596466 = path.getOrDefault("resourceGroupName")
  valid_596466 = validateParameter(valid_596466, JString, required = true,
                                 default = nil)
  if valid_596466 != nil:
    section.add "resourceGroupName", valid_596466
  var valid_596467 = path.getOrDefault("name")
  valid_596467 = validateParameter(valid_596467, JString, required = true,
                                 default = nil)
  if valid_596467 != nil:
    section.add "name", valid_596467
  var valid_596468 = path.getOrDefault("slot")
  valid_596468 = validateParameter(valid_596468, JString, required = true,
                                 default = nil)
  if valid_596468 != nil:
    section.add "slot", valid_596468
  var valid_596469 = path.getOrDefault("subscriptionId")
  valid_596469 = validateParameter(valid_596469, JString, required = true,
                                 default = nil)
  if valid_596469 != nil:
    section.add "subscriptionId", valid_596469
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596470 = query.getOrDefault("api-version")
  valid_596470 = validateParameter(valid_596470, JString, required = true,
                                 default = nil)
  if valid_596470 != nil:
    section.add "api-version", valid_596470
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596471: Call_SitesGetSiteBackupConfigurationSlot_596463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596471.validator(path, query, header, formData, body)
  let scheme = call_596471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596471.url(scheme.get, call_596471.host, call_596471.base,
                         call_596471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596471, url, valid)

proc call*(call_596472: Call_SitesGetSiteBackupConfigurationSlot_596463;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteBackupConfigurationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596473 = newJObject()
  var query_596474 = newJObject()
  add(path_596473, "resourceGroupName", newJString(resourceGroupName))
  add(query_596474, "api-version", newJString(apiVersion))
  add(path_596473, "name", newJString(name))
  add(path_596473, "slot", newJString(slot))
  add(path_596473, "subscriptionId", newJString(subscriptionId))
  result = call_596472.call(path_596473, query_596474, nil, nil, nil)

var sitesGetSiteBackupConfigurationSlot* = Call_SitesGetSiteBackupConfigurationSlot_596463(
    name: "sitesGetSiteBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfigurationSlot_596464, base: "",
    url: url_SitesGetSiteBackupConfigurationSlot_596465, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStringsSlot_596475 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteConnectionStringsSlot_596477(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStringsSlot_596476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596478 = path.getOrDefault("resourceGroupName")
  valid_596478 = validateParameter(valid_596478, JString, required = true,
                                 default = nil)
  if valid_596478 != nil:
    section.add "resourceGroupName", valid_596478
  var valid_596479 = path.getOrDefault("name")
  valid_596479 = validateParameter(valid_596479, JString, required = true,
                                 default = nil)
  if valid_596479 != nil:
    section.add "name", valid_596479
  var valid_596480 = path.getOrDefault("slot")
  valid_596480 = validateParameter(valid_596480, JString, required = true,
                                 default = nil)
  if valid_596480 != nil:
    section.add "slot", valid_596480
  var valid_596481 = path.getOrDefault("subscriptionId")
  valid_596481 = validateParameter(valid_596481, JString, required = true,
                                 default = nil)
  if valid_596481 != nil:
    section.add "subscriptionId", valid_596481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596482 = query.getOrDefault("api-version")
  valid_596482 = validateParameter(valid_596482, JString, required = true,
                                 default = nil)
  if valid_596482 != nil:
    section.add "api-version", valid_596482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596484: Call_SitesUpdateSiteConnectionStringsSlot_596475;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596484.validator(path, query, header, formData, body)
  let scheme = call_596484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596484.url(scheme.get, call_596484.host, call_596484.base,
                         call_596484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596484, url, valid)

proc call*(call_596485: Call_SitesUpdateSiteConnectionStringsSlot_596475;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConnectionStringsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596486 = newJObject()
  var query_596487 = newJObject()
  var body_596488 = newJObject()
  add(path_596486, "resourceGroupName", newJString(resourceGroupName))
  add(query_596487, "api-version", newJString(apiVersion))
  add(path_596486, "name", newJString(name))
  add(path_596486, "slot", newJString(slot))
  if connectionStrings != nil:
    body_596488 = connectionStrings
  add(path_596486, "subscriptionId", newJString(subscriptionId))
  result = call_596485.call(path_596486, query_596487, nil, nil, body_596488)

var sitesUpdateSiteConnectionStringsSlot* = Call_SitesUpdateSiteConnectionStringsSlot_596475(
    name: "sitesUpdateSiteConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStringsSlot_596476, base: "",
    url: url_SitesUpdateSiteConnectionStringsSlot_596477, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStringsSlot_596489 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteConnectionStringsSlot_596491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStringsSlot_596490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596492 = path.getOrDefault("resourceGroupName")
  valid_596492 = validateParameter(valid_596492, JString, required = true,
                                 default = nil)
  if valid_596492 != nil:
    section.add "resourceGroupName", valid_596492
  var valid_596493 = path.getOrDefault("name")
  valid_596493 = validateParameter(valid_596493, JString, required = true,
                                 default = nil)
  if valid_596493 != nil:
    section.add "name", valid_596493
  var valid_596494 = path.getOrDefault("slot")
  valid_596494 = validateParameter(valid_596494, JString, required = true,
                                 default = nil)
  if valid_596494 != nil:
    section.add "slot", valid_596494
  var valid_596495 = path.getOrDefault("subscriptionId")
  valid_596495 = validateParameter(valid_596495, JString, required = true,
                                 default = nil)
  if valid_596495 != nil:
    section.add "subscriptionId", valid_596495
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596496 = query.getOrDefault("api-version")
  valid_596496 = validateParameter(valid_596496, JString, required = true,
                                 default = nil)
  if valid_596496 != nil:
    section.add "api-version", valid_596496
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596497: Call_SitesListSiteConnectionStringsSlot_596489;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596497.validator(path, query, header, formData, body)
  let scheme = call_596497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596497.url(scheme.get, call_596497.host, call_596497.base,
                         call_596497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596497, url, valid)

proc call*(call_596498: Call_SitesListSiteConnectionStringsSlot_596489;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteConnectionStringsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596499 = newJObject()
  var query_596500 = newJObject()
  add(path_596499, "resourceGroupName", newJString(resourceGroupName))
  add(query_596500, "api-version", newJString(apiVersion))
  add(path_596499, "name", newJString(name))
  add(path_596499, "slot", newJString(slot))
  add(path_596499, "subscriptionId", newJString(subscriptionId))
  result = call_596498.call(path_596499, query_596500, nil, nil, nil)

var sitesListSiteConnectionStringsSlot* = Call_SitesListSiteConnectionStringsSlot_596489(
    name: "sitesListSiteConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStringsSlot_596490, base: "",
    url: url_SitesListSiteConnectionStringsSlot_596491, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfigSlot_596513 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteLogsConfigSlot_596515(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfigSlot_596514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596516 = path.getOrDefault("resourceGroupName")
  valid_596516 = validateParameter(valid_596516, JString, required = true,
                                 default = nil)
  if valid_596516 != nil:
    section.add "resourceGroupName", valid_596516
  var valid_596517 = path.getOrDefault("name")
  valid_596517 = validateParameter(valid_596517, JString, required = true,
                                 default = nil)
  if valid_596517 != nil:
    section.add "name", valid_596517
  var valid_596518 = path.getOrDefault("slot")
  valid_596518 = validateParameter(valid_596518, JString, required = true,
                                 default = nil)
  if valid_596518 != nil:
    section.add "slot", valid_596518
  var valid_596519 = path.getOrDefault("subscriptionId")
  valid_596519 = validateParameter(valid_596519, JString, required = true,
                                 default = nil)
  if valid_596519 != nil:
    section.add "subscriptionId", valid_596519
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596520 = query.getOrDefault("api-version")
  valid_596520 = validateParameter(valid_596520, JString, required = true,
                                 default = nil)
  if valid_596520 != nil:
    section.add "api-version", valid_596520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596522: Call_SitesUpdateSiteLogsConfigSlot_596513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596522.validator(path, query, header, formData, body)
  let scheme = call_596522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596522.url(scheme.get, call_596522.host, call_596522.base,
                         call_596522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596522, url, valid)

proc call*(call_596523: Call_SitesUpdateSiteLogsConfigSlot_596513;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteLogsConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596524 = newJObject()
  var query_596525 = newJObject()
  var body_596526 = newJObject()
  add(path_596524, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_596526 = siteLogsConfig
  add(query_596525, "api-version", newJString(apiVersion))
  add(path_596524, "name", newJString(name))
  add(path_596524, "slot", newJString(slot))
  add(path_596524, "subscriptionId", newJString(subscriptionId))
  result = call_596523.call(path_596524, query_596525, nil, nil, body_596526)

var sitesUpdateSiteLogsConfigSlot* = Call_SitesUpdateSiteLogsConfigSlot_596513(
    name: "sitesUpdateSiteLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfigSlot_596514, base: "",
    url: url_SitesUpdateSiteLogsConfigSlot_596515, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfigSlot_596501 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteLogsConfigSlot_596503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfigSlot_596502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596504 = path.getOrDefault("resourceGroupName")
  valid_596504 = validateParameter(valid_596504, JString, required = true,
                                 default = nil)
  if valid_596504 != nil:
    section.add "resourceGroupName", valid_596504
  var valid_596505 = path.getOrDefault("name")
  valid_596505 = validateParameter(valid_596505, JString, required = true,
                                 default = nil)
  if valid_596505 != nil:
    section.add "name", valid_596505
  var valid_596506 = path.getOrDefault("slot")
  valid_596506 = validateParameter(valid_596506, JString, required = true,
                                 default = nil)
  if valid_596506 != nil:
    section.add "slot", valid_596506
  var valid_596507 = path.getOrDefault("subscriptionId")
  valid_596507 = validateParameter(valid_596507, JString, required = true,
                                 default = nil)
  if valid_596507 != nil:
    section.add "subscriptionId", valid_596507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596508 = query.getOrDefault("api-version")
  valid_596508 = validateParameter(valid_596508, JString, required = true,
                                 default = nil)
  if valid_596508 != nil:
    section.add "api-version", valid_596508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596509: Call_SitesGetSiteLogsConfigSlot_596501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596509.validator(path, query, header, formData, body)
  let scheme = call_596509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596509.url(scheme.get, call_596509.host, call_596509.base,
                         call_596509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596509, url, valid)

proc call*(call_596510: Call_SitesGetSiteLogsConfigSlot_596501;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteLogsConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596511 = newJObject()
  var query_596512 = newJObject()
  add(path_596511, "resourceGroupName", newJString(resourceGroupName))
  add(query_596512, "api-version", newJString(apiVersion))
  add(path_596511, "name", newJString(name))
  add(path_596511, "slot", newJString(slot))
  add(path_596511, "subscriptionId", newJString(subscriptionId))
  result = call_596510.call(path_596511, query_596512, nil, nil, nil)

var sitesGetSiteLogsConfigSlot* = Call_SitesGetSiteLogsConfigSlot_596501(
    name: "sitesGetSiteLogsConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesGetSiteLogsConfigSlot_596502, base: "",
    url: url_SitesGetSiteLogsConfigSlot_596503, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadataSlot_596527 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteMetadataSlot_596529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadataSlot_596528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596530 = path.getOrDefault("resourceGroupName")
  valid_596530 = validateParameter(valid_596530, JString, required = true,
                                 default = nil)
  if valid_596530 != nil:
    section.add "resourceGroupName", valid_596530
  var valid_596531 = path.getOrDefault("name")
  valid_596531 = validateParameter(valid_596531, JString, required = true,
                                 default = nil)
  if valid_596531 != nil:
    section.add "name", valid_596531
  var valid_596532 = path.getOrDefault("slot")
  valid_596532 = validateParameter(valid_596532, JString, required = true,
                                 default = nil)
  if valid_596532 != nil:
    section.add "slot", valid_596532
  var valid_596533 = path.getOrDefault("subscriptionId")
  valid_596533 = validateParameter(valid_596533, JString, required = true,
                                 default = nil)
  if valid_596533 != nil:
    section.add "subscriptionId", valid_596533
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596534 = query.getOrDefault("api-version")
  valid_596534 = validateParameter(valid_596534, JString, required = true,
                                 default = nil)
  if valid_596534 != nil:
    section.add "api-version", valid_596534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596536: Call_SitesUpdateSiteMetadataSlot_596527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596536.validator(path, query, header, formData, body)
  let scheme = call_596536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596536.url(scheme.get, call_596536.host, call_596536.base,
                         call_596536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596536, url, valid)

proc call*(call_596537: Call_SitesUpdateSiteMetadataSlot_596527;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## sitesUpdateSiteMetadataSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  var path_596538 = newJObject()
  var query_596539 = newJObject()
  var body_596540 = newJObject()
  add(path_596538, "resourceGroupName", newJString(resourceGroupName))
  add(query_596539, "api-version", newJString(apiVersion))
  add(path_596538, "name", newJString(name))
  add(path_596538, "slot", newJString(slot))
  add(path_596538, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_596540 = metadata
  result = call_596537.call(path_596538, query_596539, nil, nil, body_596540)

var sitesUpdateSiteMetadataSlot* = Call_SitesUpdateSiteMetadataSlot_596527(
    name: "sitesUpdateSiteMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_SitesUpdateSiteMetadataSlot_596528, base: "",
    url: url_SitesUpdateSiteMetadataSlot_596529, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadataSlot_596541 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteMetadataSlot_596543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadataSlot_596542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596544 = path.getOrDefault("resourceGroupName")
  valid_596544 = validateParameter(valid_596544, JString, required = true,
                                 default = nil)
  if valid_596544 != nil:
    section.add "resourceGroupName", valid_596544
  var valid_596545 = path.getOrDefault("name")
  valid_596545 = validateParameter(valid_596545, JString, required = true,
                                 default = nil)
  if valid_596545 != nil:
    section.add "name", valid_596545
  var valid_596546 = path.getOrDefault("slot")
  valid_596546 = validateParameter(valid_596546, JString, required = true,
                                 default = nil)
  if valid_596546 != nil:
    section.add "slot", valid_596546
  var valid_596547 = path.getOrDefault("subscriptionId")
  valid_596547 = validateParameter(valid_596547, JString, required = true,
                                 default = nil)
  if valid_596547 != nil:
    section.add "subscriptionId", valid_596547
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596548 = query.getOrDefault("api-version")
  valid_596548 = validateParameter(valid_596548, JString, required = true,
                                 default = nil)
  if valid_596548 != nil:
    section.add "api-version", valid_596548
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596549: Call_SitesListSiteMetadataSlot_596541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596549.validator(path, query, header, formData, body)
  let scheme = call_596549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596549.url(scheme.get, call_596549.host, call_596549.base,
                         call_596549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596549, url, valid)

proc call*(call_596550: Call_SitesListSiteMetadataSlot_596541;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteMetadataSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596551 = newJObject()
  var query_596552 = newJObject()
  add(path_596551, "resourceGroupName", newJString(resourceGroupName))
  add(query_596552, "api-version", newJString(apiVersion))
  add(path_596551, "name", newJString(name))
  add(path_596551, "slot", newJString(slot))
  add(path_596551, "subscriptionId", newJString(subscriptionId))
  result = call_596550.call(path_596551, query_596552, nil, nil, nil)

var sitesListSiteMetadataSlot* = Call_SitesListSiteMetadataSlot_596541(
    name: "sitesListSiteMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_SitesListSiteMetadataSlot_596542, base: "",
    url: url_SitesListSiteMetadataSlot_596543, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentialsSlot_596553 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePublishingCredentialsSlot_596555(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentialsSlot_596554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596556 = path.getOrDefault("resourceGroupName")
  valid_596556 = validateParameter(valid_596556, JString, required = true,
                                 default = nil)
  if valid_596556 != nil:
    section.add "resourceGroupName", valid_596556
  var valid_596557 = path.getOrDefault("name")
  valid_596557 = validateParameter(valid_596557, JString, required = true,
                                 default = nil)
  if valid_596557 != nil:
    section.add "name", valid_596557
  var valid_596558 = path.getOrDefault("slot")
  valid_596558 = validateParameter(valid_596558, JString, required = true,
                                 default = nil)
  if valid_596558 != nil:
    section.add "slot", valid_596558
  var valid_596559 = path.getOrDefault("subscriptionId")
  valid_596559 = validateParameter(valid_596559, JString, required = true,
                                 default = nil)
  if valid_596559 != nil:
    section.add "subscriptionId", valid_596559
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596560 = query.getOrDefault("api-version")
  valid_596560 = validateParameter(valid_596560, JString, required = true,
                                 default = nil)
  if valid_596560 != nil:
    section.add "api-version", valid_596560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596561: Call_SitesListSitePublishingCredentialsSlot_596553;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596561.validator(path, query, header, formData, body)
  let scheme = call_596561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596561.url(scheme.get, call_596561.host, call_596561.base,
                         call_596561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596561, url, valid)

proc call*(call_596562: Call_SitesListSitePublishingCredentialsSlot_596553;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePublishingCredentialsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596563 = newJObject()
  var query_596564 = newJObject()
  add(path_596563, "resourceGroupName", newJString(resourceGroupName))
  add(query_596564, "api-version", newJString(apiVersion))
  add(path_596563, "name", newJString(name))
  add(path_596563, "slot", newJString(slot))
  add(path_596563, "subscriptionId", newJString(subscriptionId))
  result = call_596562.call(path_596563, query_596564, nil, nil, nil)

var sitesListSitePublishingCredentialsSlot* = Call_SitesListSitePublishingCredentialsSlot_596553(
    name: "sitesListSitePublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentialsSlot_596554, base: "",
    url: url_SitesListSitePublishingCredentialsSlot_596555,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfigSlot_596577 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteConfigSlot_596579(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfigSlot_596578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596580 = path.getOrDefault("resourceGroupName")
  valid_596580 = validateParameter(valid_596580, JString, required = true,
                                 default = nil)
  if valid_596580 != nil:
    section.add "resourceGroupName", valid_596580
  var valid_596581 = path.getOrDefault("name")
  valid_596581 = validateParameter(valid_596581, JString, required = true,
                                 default = nil)
  if valid_596581 != nil:
    section.add "name", valid_596581
  var valid_596582 = path.getOrDefault("slot")
  valid_596582 = validateParameter(valid_596582, JString, required = true,
                                 default = nil)
  if valid_596582 != nil:
    section.add "slot", valid_596582
  var valid_596583 = path.getOrDefault("subscriptionId")
  valid_596583 = validateParameter(valid_596583, JString, required = true,
                                 default = nil)
  if valid_596583 != nil:
    section.add "subscriptionId", valid_596583
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596584 = query.getOrDefault("api-version")
  valid_596584 = validateParameter(valid_596584, JString, required = true,
                                 default = nil)
  if valid_596584 != nil:
    section.add "api-version", valid_596584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596586: Call_SitesCreateOrUpdateSiteConfigSlot_596577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596586.validator(path, query, header, formData, body)
  let scheme = call_596586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596586.url(scheme.get, call_596586.host, call_596586.base,
                         call_596586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596586, url, valid)

proc call*(call_596587: Call_SitesCreateOrUpdateSiteConfigSlot_596577;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596588 = newJObject()
  var query_596589 = newJObject()
  var body_596590 = newJObject()
  add(path_596588, "resourceGroupName", newJString(resourceGroupName))
  add(query_596589, "api-version", newJString(apiVersion))
  add(path_596588, "name", newJString(name))
  if siteConfig != nil:
    body_596590 = siteConfig
  add(path_596588, "slot", newJString(slot))
  add(path_596588, "subscriptionId", newJString(subscriptionId))
  result = call_596587.call(path_596588, query_596589, nil, nil, body_596590)

var sitesCreateOrUpdateSiteConfigSlot* = Call_SitesCreateOrUpdateSiteConfigSlot_596577(
    name: "sitesCreateOrUpdateSiteConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfigSlot_596578, base: "",
    url: url_SitesCreateOrUpdateSiteConfigSlot_596579, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfigSlot_596565 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteConfigSlot_596567(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfigSlot_596566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596568 = path.getOrDefault("resourceGroupName")
  valid_596568 = validateParameter(valid_596568, JString, required = true,
                                 default = nil)
  if valid_596568 != nil:
    section.add "resourceGroupName", valid_596568
  var valid_596569 = path.getOrDefault("name")
  valid_596569 = validateParameter(valid_596569, JString, required = true,
                                 default = nil)
  if valid_596569 != nil:
    section.add "name", valid_596569
  var valid_596570 = path.getOrDefault("slot")
  valid_596570 = validateParameter(valid_596570, JString, required = true,
                                 default = nil)
  if valid_596570 != nil:
    section.add "slot", valid_596570
  var valid_596571 = path.getOrDefault("subscriptionId")
  valid_596571 = validateParameter(valid_596571, JString, required = true,
                                 default = nil)
  if valid_596571 != nil:
    section.add "subscriptionId", valid_596571
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596572 = query.getOrDefault("api-version")
  valid_596572 = validateParameter(valid_596572, JString, required = true,
                                 default = nil)
  if valid_596572 != nil:
    section.add "api-version", valid_596572
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596573: Call_SitesGetSiteConfigSlot_596565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596573.validator(path, query, header, formData, body)
  let scheme = call_596573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596573.url(scheme.get, call_596573.host, call_596573.base,
                         call_596573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596573, url, valid)

proc call*(call_596574: Call_SitesGetSiteConfigSlot_596565;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596575 = newJObject()
  var query_596576 = newJObject()
  add(path_596575, "resourceGroupName", newJString(resourceGroupName))
  add(query_596576, "api-version", newJString(apiVersion))
  add(path_596575, "name", newJString(name))
  add(path_596575, "slot", newJString(slot))
  add(path_596575, "subscriptionId", newJString(subscriptionId))
  result = call_596574.call(path_596575, query_596576, nil, nil, nil)

var sitesGetSiteConfigSlot* = Call_SitesGetSiteConfigSlot_596565(
    name: "sitesGetSiteConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesGetSiteConfigSlot_596566, base: "",
    url: url_SitesGetSiteConfigSlot_596567, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfigSlot_596591 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteConfigSlot_596593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfigSlot_596592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596594 = path.getOrDefault("resourceGroupName")
  valid_596594 = validateParameter(valid_596594, JString, required = true,
                                 default = nil)
  if valid_596594 != nil:
    section.add "resourceGroupName", valid_596594
  var valid_596595 = path.getOrDefault("name")
  valid_596595 = validateParameter(valid_596595, JString, required = true,
                                 default = nil)
  if valid_596595 != nil:
    section.add "name", valid_596595
  var valid_596596 = path.getOrDefault("slot")
  valid_596596 = validateParameter(valid_596596, JString, required = true,
                                 default = nil)
  if valid_596596 != nil:
    section.add "slot", valid_596596
  var valid_596597 = path.getOrDefault("subscriptionId")
  valid_596597 = validateParameter(valid_596597, JString, required = true,
                                 default = nil)
  if valid_596597 != nil:
    section.add "subscriptionId", valid_596597
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596598 = query.getOrDefault("api-version")
  valid_596598 = validateParameter(valid_596598, JString, required = true,
                                 default = nil)
  if valid_596598 != nil:
    section.add "api-version", valid_596598
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596600: Call_SitesUpdateSiteConfigSlot_596591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596600.validator(path, query, header, formData, body)
  let scheme = call_596600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596600.url(scheme.get, call_596600.host, call_596600.base,
                         call_596600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596600, url, valid)

proc call*(call_596601: Call_SitesUpdateSiteConfigSlot_596591;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596602 = newJObject()
  var query_596603 = newJObject()
  var body_596604 = newJObject()
  add(path_596602, "resourceGroupName", newJString(resourceGroupName))
  add(query_596603, "api-version", newJString(apiVersion))
  add(path_596602, "name", newJString(name))
  if siteConfig != nil:
    body_596604 = siteConfig
  add(path_596602, "slot", newJString(slot))
  add(path_596602, "subscriptionId", newJString(subscriptionId))
  result = call_596601.call(path_596602, query_596603, nil, nil, body_596604)

var sitesUpdateSiteConfigSlot* = Call_SitesUpdateSiteConfigSlot_596591(
    name: "sitesUpdateSiteConfigSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesUpdateSiteConfigSlot_596592, base: "",
    url: url_SitesUpdateSiteConfigSlot_596593, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentsSlot_596605 = ref object of OpenApiRestCall_593421
proc url_SitesGetDeploymentsSlot_596607(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentsSlot_596606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596608 = path.getOrDefault("resourceGroupName")
  valid_596608 = validateParameter(valid_596608, JString, required = true,
                                 default = nil)
  if valid_596608 != nil:
    section.add "resourceGroupName", valid_596608
  var valid_596609 = path.getOrDefault("name")
  valid_596609 = validateParameter(valid_596609, JString, required = true,
                                 default = nil)
  if valid_596609 != nil:
    section.add "name", valid_596609
  var valid_596610 = path.getOrDefault("slot")
  valid_596610 = validateParameter(valid_596610, JString, required = true,
                                 default = nil)
  if valid_596610 != nil:
    section.add "slot", valid_596610
  var valid_596611 = path.getOrDefault("subscriptionId")
  valid_596611 = validateParameter(valid_596611, JString, required = true,
                                 default = nil)
  if valid_596611 != nil:
    section.add "subscriptionId", valid_596611
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596612 = query.getOrDefault("api-version")
  valid_596612 = validateParameter(valid_596612, JString, required = true,
                                 default = nil)
  if valid_596612 != nil:
    section.add "api-version", valid_596612
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596613: Call_SitesGetDeploymentsSlot_596605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596613.validator(path, query, header, formData, body)
  let scheme = call_596613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596613.url(scheme.get, call_596613.host, call_596613.base,
                         call_596613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596613, url, valid)

proc call*(call_596614: Call_SitesGetDeploymentsSlot_596605;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetDeploymentsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596615 = newJObject()
  var query_596616 = newJObject()
  add(path_596615, "resourceGroupName", newJString(resourceGroupName))
  add(query_596616, "api-version", newJString(apiVersion))
  add(path_596615, "name", newJString(name))
  add(path_596615, "slot", newJString(slot))
  add(path_596615, "subscriptionId", newJString(subscriptionId))
  result = call_596614.call(path_596615, query_596616, nil, nil, nil)

var sitesGetDeploymentsSlot* = Call_SitesGetDeploymentsSlot_596605(
    name: "sitesGetDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_SitesGetDeploymentsSlot_596606, base: "",
    url: url_SitesGetDeploymentsSlot_596607, schemes: {Scheme.Https})
type
  Call_SitesCreateDeploymentSlot_596630 = ref object of OpenApiRestCall_593421
proc url_SitesCreateDeploymentSlot_596632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeploymentSlot_596631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596633 = path.getOrDefault("resourceGroupName")
  valid_596633 = validateParameter(valid_596633, JString, required = true,
                                 default = nil)
  if valid_596633 != nil:
    section.add "resourceGroupName", valid_596633
  var valid_596634 = path.getOrDefault("name")
  valid_596634 = validateParameter(valid_596634, JString, required = true,
                                 default = nil)
  if valid_596634 != nil:
    section.add "name", valid_596634
  var valid_596635 = path.getOrDefault("slot")
  valid_596635 = validateParameter(valid_596635, JString, required = true,
                                 default = nil)
  if valid_596635 != nil:
    section.add "slot", valid_596635
  var valid_596636 = path.getOrDefault("subscriptionId")
  valid_596636 = validateParameter(valid_596636, JString, required = true,
                                 default = nil)
  if valid_596636 != nil:
    section.add "subscriptionId", valid_596636
  var valid_596637 = path.getOrDefault("id")
  valid_596637 = validateParameter(valid_596637, JString, required = true,
                                 default = nil)
  if valid_596637 != nil:
    section.add "id", valid_596637
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596638 = query.getOrDefault("api-version")
  valid_596638 = validateParameter(valid_596638, JString, required = true,
                                 default = nil)
  if valid_596638 != nil:
    section.add "api-version", valid_596638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596640: Call_SitesCreateDeploymentSlot_596630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596640.validator(path, query, header, formData, body)
  let scheme = call_596640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596640.url(scheme.get, call_596640.host, call_596640.base,
                         call_596640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596640, url, valid)

proc call*(call_596641: Call_SitesCreateDeploymentSlot_596630;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_596642 = newJObject()
  var query_596643 = newJObject()
  var body_596644 = newJObject()
  add(path_596642, "resourceGroupName", newJString(resourceGroupName))
  add(query_596643, "api-version", newJString(apiVersion))
  add(path_596642, "name", newJString(name))
  add(path_596642, "slot", newJString(slot))
  add(path_596642, "subscriptionId", newJString(subscriptionId))
  add(path_596642, "id", newJString(id))
  if deployment != nil:
    body_596644 = deployment
  result = call_596641.call(path_596642, query_596643, nil, nil, body_596644)

var sitesCreateDeploymentSlot* = Call_SitesCreateDeploymentSlot_596630(
    name: "sitesCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesCreateDeploymentSlot_596631, base: "",
    url: url_SitesCreateDeploymentSlot_596632, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentSlot_596617 = ref object of OpenApiRestCall_593421
proc url_SitesGetDeploymentSlot_596619(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentSlot_596618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596620 = path.getOrDefault("resourceGroupName")
  valid_596620 = validateParameter(valid_596620, JString, required = true,
                                 default = nil)
  if valid_596620 != nil:
    section.add "resourceGroupName", valid_596620
  var valid_596621 = path.getOrDefault("name")
  valid_596621 = validateParameter(valid_596621, JString, required = true,
                                 default = nil)
  if valid_596621 != nil:
    section.add "name", valid_596621
  var valid_596622 = path.getOrDefault("slot")
  valid_596622 = validateParameter(valid_596622, JString, required = true,
                                 default = nil)
  if valid_596622 != nil:
    section.add "slot", valid_596622
  var valid_596623 = path.getOrDefault("subscriptionId")
  valid_596623 = validateParameter(valid_596623, JString, required = true,
                                 default = nil)
  if valid_596623 != nil:
    section.add "subscriptionId", valid_596623
  var valid_596624 = path.getOrDefault("id")
  valid_596624 = validateParameter(valid_596624, JString, required = true,
                                 default = nil)
  if valid_596624 != nil:
    section.add "id", valid_596624
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596625 = query.getOrDefault("api-version")
  valid_596625 = validateParameter(valid_596625, JString, required = true,
                                 default = nil)
  if valid_596625 != nil:
    section.add "api-version", valid_596625
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596626: Call_SitesGetDeploymentSlot_596617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596626.validator(path, query, header, formData, body)
  let scheme = call_596626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596626.url(scheme.get, call_596626.host, call_596626.base,
                         call_596626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596626, url, valid)

proc call*(call_596627: Call_SitesGetDeploymentSlot_596617;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesGetDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596628 = newJObject()
  var query_596629 = newJObject()
  add(path_596628, "resourceGroupName", newJString(resourceGroupName))
  add(query_596629, "api-version", newJString(apiVersion))
  add(path_596628, "name", newJString(name))
  add(path_596628, "slot", newJString(slot))
  add(path_596628, "subscriptionId", newJString(subscriptionId))
  add(path_596628, "id", newJString(id))
  result = call_596627.call(path_596628, query_596629, nil, nil, nil)

var sitesGetDeploymentSlot* = Call_SitesGetDeploymentSlot_596617(
    name: "sitesGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesGetDeploymentSlot_596618, base: "",
    url: url_SitesGetDeploymentSlot_596619, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeploymentSlot_596645 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteDeploymentSlot_596647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeploymentSlot_596646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596648 = path.getOrDefault("resourceGroupName")
  valid_596648 = validateParameter(valid_596648, JString, required = true,
                                 default = nil)
  if valid_596648 != nil:
    section.add "resourceGroupName", valid_596648
  var valid_596649 = path.getOrDefault("name")
  valid_596649 = validateParameter(valid_596649, JString, required = true,
                                 default = nil)
  if valid_596649 != nil:
    section.add "name", valid_596649
  var valid_596650 = path.getOrDefault("slot")
  valid_596650 = validateParameter(valid_596650, JString, required = true,
                                 default = nil)
  if valid_596650 != nil:
    section.add "slot", valid_596650
  var valid_596651 = path.getOrDefault("subscriptionId")
  valid_596651 = validateParameter(valid_596651, JString, required = true,
                                 default = nil)
  if valid_596651 != nil:
    section.add "subscriptionId", valid_596651
  var valid_596652 = path.getOrDefault("id")
  valid_596652 = validateParameter(valid_596652, JString, required = true,
                                 default = nil)
  if valid_596652 != nil:
    section.add "id", valid_596652
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596653 = query.getOrDefault("api-version")
  valid_596653 = validateParameter(valid_596653, JString, required = true,
                                 default = nil)
  if valid_596653 != nil:
    section.add "api-version", valid_596653
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596654: Call_SitesDeleteDeploymentSlot_596645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596654.validator(path, query, header, formData, body)
  let scheme = call_596654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596654.url(scheme.get, call_596654.host, call_596654.base,
                         call_596654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596654, url, valid)

proc call*(call_596655: Call_SitesDeleteDeploymentSlot_596645;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesDeleteDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596656 = newJObject()
  var query_596657 = newJObject()
  add(path_596656, "resourceGroupName", newJString(resourceGroupName))
  add(query_596657, "api-version", newJString(apiVersion))
  add(path_596656, "name", newJString(name))
  add(path_596656, "slot", newJString(slot))
  add(path_596656, "subscriptionId", newJString(subscriptionId))
  add(path_596656, "id", newJString(id))
  result = call_596655.call(path_596656, query_596657, nil, nil, nil)

var sitesDeleteDeploymentSlot* = Call_SitesDeleteDeploymentSlot_596645(
    name: "sitesDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesDeleteDeploymentSlot_596646, base: "",
    url: url_SitesDeleteDeploymentSlot_596647, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingsSlot_596658 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteHostNameBindingsSlot_596660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingsSlot_596659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596661 = path.getOrDefault("resourceGroupName")
  valid_596661 = validateParameter(valid_596661, JString, required = true,
                                 default = nil)
  if valid_596661 != nil:
    section.add "resourceGroupName", valid_596661
  var valid_596662 = path.getOrDefault("name")
  valid_596662 = validateParameter(valid_596662, JString, required = true,
                                 default = nil)
  if valid_596662 != nil:
    section.add "name", valid_596662
  var valid_596663 = path.getOrDefault("slot")
  valid_596663 = validateParameter(valid_596663, JString, required = true,
                                 default = nil)
  if valid_596663 != nil:
    section.add "slot", valid_596663
  var valid_596664 = path.getOrDefault("subscriptionId")
  valid_596664 = validateParameter(valid_596664, JString, required = true,
                                 default = nil)
  if valid_596664 != nil:
    section.add "subscriptionId", valid_596664
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596665 = query.getOrDefault("api-version")
  valid_596665 = validateParameter(valid_596665, JString, required = true,
                                 default = nil)
  if valid_596665 != nil:
    section.add "api-version", valid_596665
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596666: Call_SitesGetSiteHostNameBindingsSlot_596658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596666.validator(path, query, header, formData, body)
  let scheme = call_596666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596666.url(scheme.get, call_596666.host, call_596666.base,
                         call_596666.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596666, url, valid)

proc call*(call_596667: Call_SitesGetSiteHostNameBindingsSlot_596658;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteHostNameBindingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596668 = newJObject()
  var query_596669 = newJObject()
  add(path_596668, "resourceGroupName", newJString(resourceGroupName))
  add(query_596669, "api-version", newJString(apiVersion))
  add(path_596668, "name", newJString(name))
  add(path_596668, "slot", newJString(slot))
  add(path_596668, "subscriptionId", newJString(subscriptionId))
  result = call_596667.call(path_596668, query_596669, nil, nil, nil)

var sitesGetSiteHostNameBindingsSlot* = Call_SitesGetSiteHostNameBindingsSlot_596658(
    name: "sitesGetSiteHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindingsSlot_596659, base: "",
    url: url_SitesGetSiteHostNameBindingsSlot_596660, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBindingSlot_596683 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteHostNameBindingSlot_596685(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBindingSlot_596684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596686 = path.getOrDefault("resourceGroupName")
  valid_596686 = validateParameter(valid_596686, JString, required = true,
                                 default = nil)
  if valid_596686 != nil:
    section.add "resourceGroupName", valid_596686
  var valid_596687 = path.getOrDefault("name")
  valid_596687 = validateParameter(valid_596687, JString, required = true,
                                 default = nil)
  if valid_596687 != nil:
    section.add "name", valid_596687
  var valid_596688 = path.getOrDefault("slot")
  valid_596688 = validateParameter(valid_596688, JString, required = true,
                                 default = nil)
  if valid_596688 != nil:
    section.add "slot", valid_596688
  var valid_596689 = path.getOrDefault("subscriptionId")
  valid_596689 = validateParameter(valid_596689, JString, required = true,
                                 default = nil)
  if valid_596689 != nil:
    section.add "subscriptionId", valid_596689
  var valid_596690 = path.getOrDefault("hostName")
  valid_596690 = validateParameter(valid_596690, JString, required = true,
                                 default = nil)
  if valid_596690 != nil:
    section.add "hostName", valid_596690
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596691 = query.getOrDefault("api-version")
  valid_596691 = validateParameter(valid_596691, JString, required = true,
                                 default = nil)
  if valid_596691 != nil:
    section.add "api-version", valid_596691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596693: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_596683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596693.validator(path, query, header, formData, body)
  let scheme = call_596693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596693.url(scheme.get, call_596693.host, call_596693.base,
                         call_596693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596693, url, valid)

proc call*(call_596694: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_596683;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  var path_596695 = newJObject()
  var query_596696 = newJObject()
  var body_596697 = newJObject()
  add(path_596695, "resourceGroupName", newJString(resourceGroupName))
  add(query_596696, "api-version", newJString(apiVersion))
  add(path_596695, "name", newJString(name))
  add(path_596695, "slot", newJString(slot))
  add(path_596695, "subscriptionId", newJString(subscriptionId))
  add(path_596695, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_596697 = hostNameBinding
  result = call_596694.call(path_596695, query_596696, nil, nil, body_596697)

var sitesCreateOrUpdateSiteHostNameBindingSlot* = Call_SitesCreateOrUpdateSiteHostNameBindingSlot_596683(
    name: "sitesCreateOrUpdateSiteHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBindingSlot_596684,
    base: "", url: url_SitesCreateOrUpdateSiteHostNameBindingSlot_596685,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingSlot_596670 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteHostNameBindingSlot_596672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingSlot_596671(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596673 = path.getOrDefault("resourceGroupName")
  valid_596673 = validateParameter(valid_596673, JString, required = true,
                                 default = nil)
  if valid_596673 != nil:
    section.add "resourceGroupName", valid_596673
  var valid_596674 = path.getOrDefault("name")
  valid_596674 = validateParameter(valid_596674, JString, required = true,
                                 default = nil)
  if valid_596674 != nil:
    section.add "name", valid_596674
  var valid_596675 = path.getOrDefault("slot")
  valid_596675 = validateParameter(valid_596675, JString, required = true,
                                 default = nil)
  if valid_596675 != nil:
    section.add "slot", valid_596675
  var valid_596676 = path.getOrDefault("subscriptionId")
  valid_596676 = validateParameter(valid_596676, JString, required = true,
                                 default = nil)
  if valid_596676 != nil:
    section.add "subscriptionId", valid_596676
  var valid_596677 = path.getOrDefault("hostName")
  valid_596677 = validateParameter(valid_596677, JString, required = true,
                                 default = nil)
  if valid_596677 != nil:
    section.add "hostName", valid_596677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596678 = query.getOrDefault("api-version")
  valid_596678 = validateParameter(valid_596678, JString, required = true,
                                 default = nil)
  if valid_596678 != nil:
    section.add "api-version", valid_596678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596679: Call_SitesGetSiteHostNameBindingSlot_596670;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596679.validator(path, query, header, formData, body)
  let scheme = call_596679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596679.url(scheme.get, call_596679.host, call_596679.base,
                         call_596679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596679, url, valid)

proc call*(call_596680: Call_SitesGetSiteHostNameBindingSlot_596670;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_596681 = newJObject()
  var query_596682 = newJObject()
  add(path_596681, "resourceGroupName", newJString(resourceGroupName))
  add(query_596682, "api-version", newJString(apiVersion))
  add(path_596681, "name", newJString(name))
  add(path_596681, "slot", newJString(slot))
  add(path_596681, "subscriptionId", newJString(subscriptionId))
  add(path_596681, "hostName", newJString(hostName))
  result = call_596680.call(path_596681, query_596682, nil, nil, nil)

var sitesGetSiteHostNameBindingSlot* = Call_SitesGetSiteHostNameBindingSlot_596670(
    name: "sitesGetSiteHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBindingSlot_596671, base: "",
    url: url_SitesGetSiteHostNameBindingSlot_596672, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBindingSlot_596698 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteHostNameBindingSlot_596700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBindingSlot_596699(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596701 = path.getOrDefault("resourceGroupName")
  valid_596701 = validateParameter(valid_596701, JString, required = true,
                                 default = nil)
  if valid_596701 != nil:
    section.add "resourceGroupName", valid_596701
  var valid_596702 = path.getOrDefault("name")
  valid_596702 = validateParameter(valid_596702, JString, required = true,
                                 default = nil)
  if valid_596702 != nil:
    section.add "name", valid_596702
  var valid_596703 = path.getOrDefault("slot")
  valid_596703 = validateParameter(valid_596703, JString, required = true,
                                 default = nil)
  if valid_596703 != nil:
    section.add "slot", valid_596703
  var valid_596704 = path.getOrDefault("subscriptionId")
  valid_596704 = validateParameter(valid_596704, JString, required = true,
                                 default = nil)
  if valid_596704 != nil:
    section.add "subscriptionId", valid_596704
  var valid_596705 = path.getOrDefault("hostName")
  valid_596705 = validateParameter(valid_596705, JString, required = true,
                                 default = nil)
  if valid_596705 != nil:
    section.add "hostName", valid_596705
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596706 = query.getOrDefault("api-version")
  valid_596706 = validateParameter(valid_596706, JString, required = true,
                                 default = nil)
  if valid_596706 != nil:
    section.add "api-version", valid_596706
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596707: Call_SitesDeleteSiteHostNameBindingSlot_596698;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596707.validator(path, query, header, formData, body)
  let scheme = call_596707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596707.url(scheme.get, call_596707.host, call_596707.base,
                         call_596707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596707, url, valid)

proc call*(call_596708: Call_SitesDeleteSiteHostNameBindingSlot_596698;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_596709 = newJObject()
  var query_596710 = newJObject()
  add(path_596709, "resourceGroupName", newJString(resourceGroupName))
  add(query_596710, "api-version", newJString(apiVersion))
  add(path_596709, "name", newJString(name))
  add(path_596709, "slot", newJString(slot))
  add(path_596709, "subscriptionId", newJString(subscriptionId))
  add(path_596709, "hostName", newJString(hostName))
  result = call_596708.call(path_596709, query_596710, nil, nil, nil)

var sitesDeleteSiteHostNameBindingSlot* = Call_SitesDeleteSiteHostNameBindingSlot_596698(
    name: "sitesDeleteSiteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBindingSlot_596699, base: "",
    url: url_SitesDeleteSiteHostNameBindingSlot_596700, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnectionsSlot_596711 = ref object of OpenApiRestCall_593421
proc url_SitesListSiteRelayServiceConnectionsSlot_596713(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnectionsSlot_596712(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596714 = path.getOrDefault("resourceGroupName")
  valid_596714 = validateParameter(valid_596714, JString, required = true,
                                 default = nil)
  if valid_596714 != nil:
    section.add "resourceGroupName", valid_596714
  var valid_596715 = path.getOrDefault("name")
  valid_596715 = validateParameter(valid_596715, JString, required = true,
                                 default = nil)
  if valid_596715 != nil:
    section.add "name", valid_596715
  var valid_596716 = path.getOrDefault("slot")
  valid_596716 = validateParameter(valid_596716, JString, required = true,
                                 default = nil)
  if valid_596716 != nil:
    section.add "slot", valid_596716
  var valid_596717 = path.getOrDefault("subscriptionId")
  valid_596717 = validateParameter(valid_596717, JString, required = true,
                                 default = nil)
  if valid_596717 != nil:
    section.add "subscriptionId", valid_596717
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596718 = query.getOrDefault("api-version")
  valid_596718 = validateParameter(valid_596718, JString, required = true,
                                 default = nil)
  if valid_596718 != nil:
    section.add "api-version", valid_596718
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596719: Call_SitesListSiteRelayServiceConnectionsSlot_596711;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596719.validator(path, query, header, formData, body)
  let scheme = call_596719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596719.url(scheme.get, call_596719.host, call_596719.base,
                         call_596719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596719, url, valid)

proc call*(call_596720: Call_SitesListSiteRelayServiceConnectionsSlot_596711;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteRelayServiceConnectionsSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596721 = newJObject()
  var query_596722 = newJObject()
  add(path_596721, "resourceGroupName", newJString(resourceGroupName))
  add(query_596722, "api-version", newJString(apiVersion))
  add(path_596721, "name", newJString(name))
  add(path_596721, "slot", newJString(slot))
  add(path_596721, "subscriptionId", newJString(subscriptionId))
  result = call_596720.call(path_596721, query_596722, nil, nil, nil)

var sitesListSiteRelayServiceConnectionsSlot* = Call_SitesListSiteRelayServiceConnectionsSlot_596711(
    name: "sitesListSiteRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnectionsSlot_596712, base: "",
    url: url_SitesListSiteRelayServiceConnectionsSlot_596713,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596736 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596738(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596737(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596739 = path.getOrDefault("resourceGroupName")
  valid_596739 = validateParameter(valid_596739, JString, required = true,
                                 default = nil)
  if valid_596739 != nil:
    section.add "resourceGroupName", valid_596739
  var valid_596740 = path.getOrDefault("name")
  valid_596740 = validateParameter(valid_596740, JString, required = true,
                                 default = nil)
  if valid_596740 != nil:
    section.add "name", valid_596740
  var valid_596741 = path.getOrDefault("slot")
  valid_596741 = validateParameter(valid_596741, JString, required = true,
                                 default = nil)
  if valid_596741 != nil:
    section.add "slot", valid_596741
  var valid_596742 = path.getOrDefault("subscriptionId")
  valid_596742 = validateParameter(valid_596742, JString, required = true,
                                 default = nil)
  if valid_596742 != nil:
    section.add "subscriptionId", valid_596742
  var valid_596743 = path.getOrDefault("entityName")
  valid_596743 = validateParameter(valid_596743, JString, required = true,
                                 default = nil)
  if valid_596743 != nil:
    section.add "entityName", valid_596743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596744 = query.getOrDefault("api-version")
  valid_596744 = validateParameter(valid_596744, JString, required = true,
                                 default = nil)
  if valid_596744 != nil:
    section.add "api-version", valid_596744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596746: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596736;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596746.validator(path, query, header, formData, body)
  let scheme = call_596746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596746.url(scheme.get, call_596746.host, call_596746.base,
                         call_596746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596746, url, valid)

proc call*(call_596747: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596736;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_596748 = newJObject()
  var query_596749 = newJObject()
  var body_596750 = newJObject()
  add(path_596748, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596750 = connectionEnvelope
  add(path_596748, "name", newJString(name))
  add(query_596749, "api-version", newJString(apiVersion))
  add(path_596748, "slot", newJString(slot))
  add(path_596748, "subscriptionId", newJString(subscriptionId))
  add(path_596748, "entityName", newJString(entityName))
  result = call_596747.call(path_596748, query_596749, nil, nil, body_596750)

var sitesCreateOrUpdateSiteRelayServiceConnectionSlot* = Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596736(
    name: "sitesCreateOrUpdateSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596737,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_596738,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnectionSlot_596723 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteRelayServiceConnectionSlot_596725(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnectionSlot_596724(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596726 = path.getOrDefault("resourceGroupName")
  valid_596726 = validateParameter(valid_596726, JString, required = true,
                                 default = nil)
  if valid_596726 != nil:
    section.add "resourceGroupName", valid_596726
  var valid_596727 = path.getOrDefault("name")
  valid_596727 = validateParameter(valid_596727, JString, required = true,
                                 default = nil)
  if valid_596727 != nil:
    section.add "name", valid_596727
  var valid_596728 = path.getOrDefault("slot")
  valid_596728 = validateParameter(valid_596728, JString, required = true,
                                 default = nil)
  if valid_596728 != nil:
    section.add "slot", valid_596728
  var valid_596729 = path.getOrDefault("subscriptionId")
  valid_596729 = validateParameter(valid_596729, JString, required = true,
                                 default = nil)
  if valid_596729 != nil:
    section.add "subscriptionId", valid_596729
  var valid_596730 = path.getOrDefault("entityName")
  valid_596730 = validateParameter(valid_596730, JString, required = true,
                                 default = nil)
  if valid_596730 != nil:
    section.add "entityName", valid_596730
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596731 = query.getOrDefault("api-version")
  valid_596731 = validateParameter(valid_596731, JString, required = true,
                                 default = nil)
  if valid_596731 != nil:
    section.add "api-version", valid_596731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596732: Call_SitesGetSiteRelayServiceConnectionSlot_596723;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596732.validator(path, query, header, formData, body)
  let scheme = call_596732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596732.url(scheme.get, call_596732.host, call_596732.base,
                         call_596732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596732, url, valid)

proc call*(call_596733: Call_SitesGetSiteRelayServiceConnectionSlot_596723;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_596734 = newJObject()
  var query_596735 = newJObject()
  add(path_596734, "resourceGroupName", newJString(resourceGroupName))
  add(query_596735, "api-version", newJString(apiVersion))
  add(path_596734, "name", newJString(name))
  add(path_596734, "slot", newJString(slot))
  add(path_596734, "subscriptionId", newJString(subscriptionId))
  add(path_596734, "entityName", newJString(entityName))
  result = call_596733.call(path_596734, query_596735, nil, nil, nil)

var sitesGetSiteRelayServiceConnectionSlot* = Call_SitesGetSiteRelayServiceConnectionSlot_596723(
    name: "sitesGetSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnectionSlot_596724, base: "",
    url: url_SitesGetSiteRelayServiceConnectionSlot_596725,
    schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnectionSlot_596764 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteRelayServiceConnectionSlot_596766(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnectionSlot_596765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596767 = path.getOrDefault("resourceGroupName")
  valid_596767 = validateParameter(valid_596767, JString, required = true,
                                 default = nil)
  if valid_596767 != nil:
    section.add "resourceGroupName", valid_596767
  var valid_596768 = path.getOrDefault("name")
  valid_596768 = validateParameter(valid_596768, JString, required = true,
                                 default = nil)
  if valid_596768 != nil:
    section.add "name", valid_596768
  var valid_596769 = path.getOrDefault("slot")
  valid_596769 = validateParameter(valid_596769, JString, required = true,
                                 default = nil)
  if valid_596769 != nil:
    section.add "slot", valid_596769
  var valid_596770 = path.getOrDefault("subscriptionId")
  valid_596770 = validateParameter(valid_596770, JString, required = true,
                                 default = nil)
  if valid_596770 != nil:
    section.add "subscriptionId", valid_596770
  var valid_596771 = path.getOrDefault("entityName")
  valid_596771 = validateParameter(valid_596771, JString, required = true,
                                 default = nil)
  if valid_596771 != nil:
    section.add "entityName", valid_596771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596772 = query.getOrDefault("api-version")
  valid_596772 = validateParameter(valid_596772, JString, required = true,
                                 default = nil)
  if valid_596772 != nil:
    section.add "api-version", valid_596772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596774: Call_SitesUpdateSiteRelayServiceConnectionSlot_596764;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596774.validator(path, query, header, formData, body)
  let scheme = call_596774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596774.url(scheme.get, call_596774.host, call_596774.base,
                         call_596774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596774, url, valid)

proc call*(call_596775: Call_SitesUpdateSiteRelayServiceConnectionSlot_596764;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_596776 = newJObject()
  var query_596777 = newJObject()
  var body_596778 = newJObject()
  add(path_596776, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596778 = connectionEnvelope
  add(path_596776, "name", newJString(name))
  add(query_596777, "api-version", newJString(apiVersion))
  add(path_596776, "slot", newJString(slot))
  add(path_596776, "subscriptionId", newJString(subscriptionId))
  add(path_596776, "entityName", newJString(entityName))
  result = call_596775.call(path_596776, query_596777, nil, nil, body_596778)

var sitesUpdateSiteRelayServiceConnectionSlot* = Call_SitesUpdateSiteRelayServiceConnectionSlot_596764(
    name: "sitesUpdateSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnectionSlot_596765,
    base: "", url: url_SitesUpdateSiteRelayServiceConnectionSlot_596766,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnectionSlot_596751 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteRelayServiceConnectionSlot_596753(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnectionSlot_596752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596754 = path.getOrDefault("resourceGroupName")
  valid_596754 = validateParameter(valid_596754, JString, required = true,
                                 default = nil)
  if valid_596754 != nil:
    section.add "resourceGroupName", valid_596754
  var valid_596755 = path.getOrDefault("name")
  valid_596755 = validateParameter(valid_596755, JString, required = true,
                                 default = nil)
  if valid_596755 != nil:
    section.add "name", valid_596755
  var valid_596756 = path.getOrDefault("slot")
  valid_596756 = validateParameter(valid_596756, JString, required = true,
                                 default = nil)
  if valid_596756 != nil:
    section.add "slot", valid_596756
  var valid_596757 = path.getOrDefault("subscriptionId")
  valid_596757 = validateParameter(valid_596757, JString, required = true,
                                 default = nil)
  if valid_596757 != nil:
    section.add "subscriptionId", valid_596757
  var valid_596758 = path.getOrDefault("entityName")
  valid_596758 = validateParameter(valid_596758, JString, required = true,
                                 default = nil)
  if valid_596758 != nil:
    section.add "entityName", valid_596758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596759 = query.getOrDefault("api-version")
  valid_596759 = validateParameter(valid_596759, JString, required = true,
                                 default = nil)
  if valid_596759 != nil:
    section.add "api-version", valid_596759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596760: Call_SitesDeleteSiteRelayServiceConnectionSlot_596751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596760.validator(path, query, header, formData, body)
  let scheme = call_596760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596760.url(scheme.get, call_596760.host, call_596760.base,
                         call_596760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596760, url, valid)

proc call*(call_596761: Call_SitesDeleteSiteRelayServiceConnectionSlot_596751;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_596762 = newJObject()
  var query_596763 = newJObject()
  add(path_596762, "resourceGroupName", newJString(resourceGroupName))
  add(query_596763, "api-version", newJString(apiVersion))
  add(path_596762, "name", newJString(name))
  add(path_596762, "slot", newJString(slot))
  add(path_596762, "subscriptionId", newJString(subscriptionId))
  add(path_596762, "entityName", newJString(entityName))
  result = call_596761.call(path_596762, query_596763, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnectionSlot* = Call_SitesDeleteSiteRelayServiceConnectionSlot_596751(
    name: "sitesDeleteSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnectionSlot_596752,
    base: "", url: url_SitesDeleteSiteRelayServiceConnectionSlot_596753,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiersSlot_596779 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteInstanceIdentifiersSlot_596781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiersSlot_596780(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596782 = path.getOrDefault("resourceGroupName")
  valid_596782 = validateParameter(valid_596782, JString, required = true,
                                 default = nil)
  if valid_596782 != nil:
    section.add "resourceGroupName", valid_596782
  var valid_596783 = path.getOrDefault("name")
  valid_596783 = validateParameter(valid_596783, JString, required = true,
                                 default = nil)
  if valid_596783 != nil:
    section.add "name", valid_596783
  var valid_596784 = path.getOrDefault("slot")
  valid_596784 = validateParameter(valid_596784, JString, required = true,
                                 default = nil)
  if valid_596784 != nil:
    section.add "slot", valid_596784
  var valid_596785 = path.getOrDefault("subscriptionId")
  valid_596785 = validateParameter(valid_596785, JString, required = true,
                                 default = nil)
  if valid_596785 != nil:
    section.add "subscriptionId", valid_596785
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596786 = query.getOrDefault("api-version")
  valid_596786 = validateParameter(valid_596786, JString, required = true,
                                 default = nil)
  if valid_596786 != nil:
    section.add "api-version", valid_596786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596787: Call_SitesGetSiteInstanceIdentifiersSlot_596779;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596787.validator(path, query, header, formData, body)
  let scheme = call_596787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596787.url(scheme.get, call_596787.host, call_596787.base,
                         call_596787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596787, url, valid)

proc call*(call_596788: Call_SitesGetSiteInstanceIdentifiersSlot_596779;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteInstanceIdentifiersSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596789 = newJObject()
  var query_596790 = newJObject()
  add(path_596789, "resourceGroupName", newJString(resourceGroupName))
  add(query_596790, "api-version", newJString(apiVersion))
  add(path_596789, "name", newJString(name))
  add(path_596789, "slot", newJString(slot))
  add(path_596789, "subscriptionId", newJString(subscriptionId))
  result = call_596788.call(path_596789, query_596790, nil, nil, nil)

var sitesGetSiteInstanceIdentifiersSlot* = Call_SitesGetSiteInstanceIdentifiersSlot_596779(
    name: "sitesGetSiteInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiersSlot_596780, base: "",
    url: url_SitesGetSiteInstanceIdentifiersSlot_596781, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentsSlot_596791 = ref object of OpenApiRestCall_593421
proc url_SitesGetInstanceDeploymentsSlot_596793(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentsSlot_596792(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596794 = path.getOrDefault("resourceGroupName")
  valid_596794 = validateParameter(valid_596794, JString, required = true,
                                 default = nil)
  if valid_596794 != nil:
    section.add "resourceGroupName", valid_596794
  var valid_596795 = path.getOrDefault("name")
  valid_596795 = validateParameter(valid_596795, JString, required = true,
                                 default = nil)
  if valid_596795 != nil:
    section.add "name", valid_596795
  var valid_596796 = path.getOrDefault("slot")
  valid_596796 = validateParameter(valid_596796, JString, required = true,
                                 default = nil)
  if valid_596796 != nil:
    section.add "slot", valid_596796
  var valid_596797 = path.getOrDefault("subscriptionId")
  valid_596797 = validateParameter(valid_596797, JString, required = true,
                                 default = nil)
  if valid_596797 != nil:
    section.add "subscriptionId", valid_596797
  var valid_596798 = path.getOrDefault("instanceId")
  valid_596798 = validateParameter(valid_596798, JString, required = true,
                                 default = nil)
  if valid_596798 != nil:
    section.add "instanceId", valid_596798
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596799 = query.getOrDefault("api-version")
  valid_596799 = validateParameter(valid_596799, JString, required = true,
                                 default = nil)
  if valid_596799 != nil:
    section.add "api-version", valid_596799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596800: Call_SitesGetInstanceDeploymentsSlot_596791;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596800.validator(path, query, header, formData, body)
  let scheme = call_596800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596800.url(scheme.get, call_596800.host, call_596800.base,
                         call_596800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596800, url, valid)

proc call*(call_596801: Call_SitesGetInstanceDeploymentsSlot_596791;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeploymentsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_596802 = newJObject()
  var query_596803 = newJObject()
  add(path_596802, "resourceGroupName", newJString(resourceGroupName))
  add(query_596803, "api-version", newJString(apiVersion))
  add(path_596802, "name", newJString(name))
  add(path_596802, "slot", newJString(slot))
  add(path_596802, "subscriptionId", newJString(subscriptionId))
  add(path_596802, "instanceId", newJString(instanceId))
  result = call_596801.call(path_596802, query_596803, nil, nil, nil)

var sitesGetInstanceDeploymentsSlot* = Call_SitesGetInstanceDeploymentsSlot_596791(
    name: "sitesGetInstanceDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeploymentsSlot_596792, base: "",
    url: url_SitesGetInstanceDeploymentsSlot_596793, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeploymentSlot_596818 = ref object of OpenApiRestCall_593421
proc url_SitesCreateInstanceDeploymentSlot_596820(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeploymentSlot_596819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596821 = path.getOrDefault("resourceGroupName")
  valid_596821 = validateParameter(valid_596821, JString, required = true,
                                 default = nil)
  if valid_596821 != nil:
    section.add "resourceGroupName", valid_596821
  var valid_596822 = path.getOrDefault("name")
  valid_596822 = validateParameter(valid_596822, JString, required = true,
                                 default = nil)
  if valid_596822 != nil:
    section.add "name", valid_596822
  var valid_596823 = path.getOrDefault("slot")
  valid_596823 = validateParameter(valid_596823, JString, required = true,
                                 default = nil)
  if valid_596823 != nil:
    section.add "slot", valid_596823
  var valid_596824 = path.getOrDefault("subscriptionId")
  valid_596824 = validateParameter(valid_596824, JString, required = true,
                                 default = nil)
  if valid_596824 != nil:
    section.add "subscriptionId", valid_596824
  var valid_596825 = path.getOrDefault("instanceId")
  valid_596825 = validateParameter(valid_596825, JString, required = true,
                                 default = nil)
  if valid_596825 != nil:
    section.add "instanceId", valid_596825
  var valid_596826 = path.getOrDefault("id")
  valid_596826 = validateParameter(valid_596826, JString, required = true,
                                 default = nil)
  if valid_596826 != nil:
    section.add "id", valid_596826
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596827 = query.getOrDefault("api-version")
  valid_596827 = validateParameter(valid_596827, JString, required = true,
                                 default = nil)
  if valid_596827 != nil:
    section.add "api-version", valid_596827
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596829: Call_SitesCreateInstanceDeploymentSlot_596818;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596829.validator(path, query, header, formData, body)
  let scheme = call_596829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596829.url(scheme.get, call_596829.host, call_596829.base,
                         call_596829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596829, url, valid)

proc call*(call_596830: Call_SitesCreateInstanceDeploymentSlot_596818;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_596831 = newJObject()
  var query_596832 = newJObject()
  var body_596833 = newJObject()
  add(path_596831, "resourceGroupName", newJString(resourceGroupName))
  add(query_596832, "api-version", newJString(apiVersion))
  add(path_596831, "name", newJString(name))
  add(path_596831, "slot", newJString(slot))
  add(path_596831, "subscriptionId", newJString(subscriptionId))
  add(path_596831, "instanceId", newJString(instanceId))
  add(path_596831, "id", newJString(id))
  if deployment != nil:
    body_596833 = deployment
  result = call_596830.call(path_596831, query_596832, nil, nil, body_596833)

var sitesCreateInstanceDeploymentSlot* = Call_SitesCreateInstanceDeploymentSlot_596818(
    name: "sitesCreateInstanceDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeploymentSlot_596819, base: "",
    url: url_SitesCreateInstanceDeploymentSlot_596820, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentSlot_596804 = ref object of OpenApiRestCall_593421
proc url_SitesGetInstanceDeploymentSlot_596806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentSlot_596805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596807 = path.getOrDefault("resourceGroupName")
  valid_596807 = validateParameter(valid_596807, JString, required = true,
                                 default = nil)
  if valid_596807 != nil:
    section.add "resourceGroupName", valid_596807
  var valid_596808 = path.getOrDefault("name")
  valid_596808 = validateParameter(valid_596808, JString, required = true,
                                 default = nil)
  if valid_596808 != nil:
    section.add "name", valid_596808
  var valid_596809 = path.getOrDefault("slot")
  valid_596809 = validateParameter(valid_596809, JString, required = true,
                                 default = nil)
  if valid_596809 != nil:
    section.add "slot", valid_596809
  var valid_596810 = path.getOrDefault("subscriptionId")
  valid_596810 = validateParameter(valid_596810, JString, required = true,
                                 default = nil)
  if valid_596810 != nil:
    section.add "subscriptionId", valid_596810
  var valid_596811 = path.getOrDefault("instanceId")
  valid_596811 = validateParameter(valid_596811, JString, required = true,
                                 default = nil)
  if valid_596811 != nil:
    section.add "instanceId", valid_596811
  var valid_596812 = path.getOrDefault("id")
  valid_596812 = validateParameter(valid_596812, JString, required = true,
                                 default = nil)
  if valid_596812 != nil:
    section.add "id", valid_596812
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596813 = query.getOrDefault("api-version")
  valid_596813 = validateParameter(valid_596813, JString, required = true,
                                 default = nil)
  if valid_596813 != nil:
    section.add "api-version", valid_596813
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596814: Call_SitesGetInstanceDeploymentSlot_596804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596814.validator(path, query, header, formData, body)
  let scheme = call_596814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596814.url(scheme.get, call_596814.host, call_596814.base,
                         call_596814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596814, url, valid)

proc call*(call_596815: Call_SitesGetInstanceDeploymentSlot_596804;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesGetInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596816 = newJObject()
  var query_596817 = newJObject()
  add(path_596816, "resourceGroupName", newJString(resourceGroupName))
  add(query_596817, "api-version", newJString(apiVersion))
  add(path_596816, "name", newJString(name))
  add(path_596816, "slot", newJString(slot))
  add(path_596816, "subscriptionId", newJString(subscriptionId))
  add(path_596816, "instanceId", newJString(instanceId))
  add(path_596816, "id", newJString(id))
  result = call_596815.call(path_596816, query_596817, nil, nil, nil)

var sitesGetInstanceDeploymentSlot* = Call_SitesGetInstanceDeploymentSlot_596804(
    name: "sitesGetInstanceDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeploymentSlot_596805, base: "",
    url: url_SitesGetInstanceDeploymentSlot_596806, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeploymentSlot_596834 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteInstanceDeploymentSlot_596836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeploymentSlot_596835(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596837 = path.getOrDefault("resourceGroupName")
  valid_596837 = validateParameter(valid_596837, JString, required = true,
                                 default = nil)
  if valid_596837 != nil:
    section.add "resourceGroupName", valid_596837
  var valid_596838 = path.getOrDefault("name")
  valid_596838 = validateParameter(valid_596838, JString, required = true,
                                 default = nil)
  if valid_596838 != nil:
    section.add "name", valid_596838
  var valid_596839 = path.getOrDefault("slot")
  valid_596839 = validateParameter(valid_596839, JString, required = true,
                                 default = nil)
  if valid_596839 != nil:
    section.add "slot", valid_596839
  var valid_596840 = path.getOrDefault("subscriptionId")
  valid_596840 = validateParameter(valid_596840, JString, required = true,
                                 default = nil)
  if valid_596840 != nil:
    section.add "subscriptionId", valid_596840
  var valid_596841 = path.getOrDefault("instanceId")
  valid_596841 = validateParameter(valid_596841, JString, required = true,
                                 default = nil)
  if valid_596841 != nil:
    section.add "instanceId", valid_596841
  var valid_596842 = path.getOrDefault("id")
  valid_596842 = validateParameter(valid_596842, JString, required = true,
                                 default = nil)
  if valid_596842 != nil:
    section.add "id", valid_596842
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596843 = query.getOrDefault("api-version")
  valid_596843 = validateParameter(valid_596843, JString, required = true,
                                 default = nil)
  if valid_596843 != nil:
    section.add "api-version", valid_596843
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596844: Call_SitesDeleteInstanceDeploymentSlot_596834;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596844.validator(path, query, header, formData, body)
  let scheme = call_596844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596844.url(scheme.get, call_596844.host, call_596844.base,
                         call_596844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596844, url, valid)

proc call*(call_596845: Call_SitesDeleteInstanceDeploymentSlot_596834;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesDeleteInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_596846 = newJObject()
  var query_596847 = newJObject()
  add(path_596846, "resourceGroupName", newJString(resourceGroupName))
  add(query_596847, "api-version", newJString(apiVersion))
  add(path_596846, "name", newJString(name))
  add(path_596846, "slot", newJString(slot))
  add(path_596846, "subscriptionId", newJString(subscriptionId))
  add(path_596846, "instanceId", newJString(instanceId))
  add(path_596846, "id", newJString(id))
  result = call_596845.call(path_596846, query_596847, nil, nil, nil)

var sitesDeleteInstanceDeploymentSlot* = Call_SitesDeleteInstanceDeploymentSlot_596834(
    name: "sitesDeleteInstanceDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeploymentSlot_596835, base: "",
    url: url_SitesDeleteInstanceDeploymentSlot_596836, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneableSlot_596848 = ref object of OpenApiRestCall_593421
proc url_SitesIsSiteCloneableSlot_596850(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneableSlot_596849(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596851 = path.getOrDefault("resourceGroupName")
  valid_596851 = validateParameter(valid_596851, JString, required = true,
                                 default = nil)
  if valid_596851 != nil:
    section.add "resourceGroupName", valid_596851
  var valid_596852 = path.getOrDefault("name")
  valid_596852 = validateParameter(valid_596852, JString, required = true,
                                 default = nil)
  if valid_596852 != nil:
    section.add "name", valid_596852
  var valid_596853 = path.getOrDefault("slot")
  valid_596853 = validateParameter(valid_596853, JString, required = true,
                                 default = nil)
  if valid_596853 != nil:
    section.add "slot", valid_596853
  var valid_596854 = path.getOrDefault("subscriptionId")
  valid_596854 = validateParameter(valid_596854, JString, required = true,
                                 default = nil)
  if valid_596854 != nil:
    section.add "subscriptionId", valid_596854
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596855 = query.getOrDefault("api-version")
  valid_596855 = validateParameter(valid_596855, JString, required = true,
                                 default = nil)
  if valid_596855 != nil:
    section.add "api-version", valid_596855
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596856: Call_SitesIsSiteCloneableSlot_596848; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596856.validator(path, query, header, formData, body)
  let scheme = call_596856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596856.url(scheme.get, call_596856.host, call_596856.base,
                         call_596856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596856, url, valid)

proc call*(call_596857: Call_SitesIsSiteCloneableSlot_596848;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesIsSiteCloneableSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596858 = newJObject()
  var query_596859 = newJObject()
  add(path_596858, "resourceGroupName", newJString(resourceGroupName))
  add(query_596859, "api-version", newJString(apiVersion))
  add(path_596858, "name", newJString(name))
  add(path_596858, "slot", newJString(slot))
  add(path_596858, "subscriptionId", newJString(subscriptionId))
  result = call_596857.call(path_596858, query_596859, nil, nil, nil)

var sitesIsSiteCloneableSlot* = Call_SitesIsSiteCloneableSlot_596848(
    name: "sitesIsSiteCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_SitesIsSiteCloneableSlot_596849, base: "",
    url: url_SitesIsSiteCloneableSlot_596850, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitionsSlot_596860 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteMetricDefinitionsSlot_596862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitionsSlot_596861(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596863 = path.getOrDefault("resourceGroupName")
  valid_596863 = validateParameter(valid_596863, JString, required = true,
                                 default = nil)
  if valid_596863 != nil:
    section.add "resourceGroupName", valid_596863
  var valid_596864 = path.getOrDefault("name")
  valid_596864 = validateParameter(valid_596864, JString, required = true,
                                 default = nil)
  if valid_596864 != nil:
    section.add "name", valid_596864
  var valid_596865 = path.getOrDefault("slot")
  valid_596865 = validateParameter(valid_596865, JString, required = true,
                                 default = nil)
  if valid_596865 != nil:
    section.add "slot", valid_596865
  var valid_596866 = path.getOrDefault("subscriptionId")
  valid_596866 = validateParameter(valid_596866, JString, required = true,
                                 default = nil)
  if valid_596866 != nil:
    section.add "subscriptionId", valid_596866
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596867 = query.getOrDefault("api-version")
  valid_596867 = validateParameter(valid_596867, JString, required = true,
                                 default = nil)
  if valid_596867 != nil:
    section.add "api-version", valid_596867
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596868: Call_SitesGetSiteMetricDefinitionsSlot_596860;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596868.validator(path, query, header, formData, body)
  let scheme = call_596868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596868.url(scheme.get, call_596868.host, call_596868.base,
                         call_596868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596868, url, valid)

proc call*(call_596869: Call_SitesGetSiteMetricDefinitionsSlot_596860;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteMetricDefinitionsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596870 = newJObject()
  var query_596871 = newJObject()
  add(path_596870, "resourceGroupName", newJString(resourceGroupName))
  add(query_596871, "api-version", newJString(apiVersion))
  add(path_596870, "name", newJString(name))
  add(path_596870, "slot", newJString(slot))
  add(path_596870, "subscriptionId", newJString(subscriptionId))
  result = call_596869.call(path_596870, query_596871, nil, nil, nil)

var sitesGetSiteMetricDefinitionsSlot* = Call_SitesGetSiteMetricDefinitionsSlot_596860(
    name: "sitesGetSiteMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitionsSlot_596861, base: "",
    url: url_SitesGetSiteMetricDefinitionsSlot_596862, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricsSlot_596872 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteMetricsSlot_596874(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricsSlot_596873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596875 = path.getOrDefault("resourceGroupName")
  valid_596875 = validateParameter(valid_596875, JString, required = true,
                                 default = nil)
  if valid_596875 != nil:
    section.add "resourceGroupName", valid_596875
  var valid_596876 = path.getOrDefault("name")
  valid_596876 = validateParameter(valid_596876, JString, required = true,
                                 default = nil)
  if valid_596876 != nil:
    section.add "name", valid_596876
  var valid_596877 = path.getOrDefault("slot")
  valid_596877 = validateParameter(valid_596877, JString, required = true,
                                 default = nil)
  if valid_596877 != nil:
    section.add "slot", valid_596877
  var valid_596878 = path.getOrDefault("subscriptionId")
  valid_596878 = validateParameter(valid_596878, JString, required = true,
                                 default = nil)
  if valid_596878 != nil:
    section.add "subscriptionId", valid_596878
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596879 = query.getOrDefault("api-version")
  valid_596879 = validateParameter(valid_596879, JString, required = true,
                                 default = nil)
  if valid_596879 != nil:
    section.add "api-version", valid_596879
  var valid_596880 = query.getOrDefault("details")
  valid_596880 = validateParameter(valid_596880, JBool, required = false, default = nil)
  if valid_596880 != nil:
    section.add "details", valid_596880
  var valid_596881 = query.getOrDefault("$filter")
  valid_596881 = validateParameter(valid_596881, JString, required = false,
                                 default = nil)
  if valid_596881 != nil:
    section.add "$filter", valid_596881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596882: Call_SitesGetSiteMetricsSlot_596872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596882.validator(path, query, header, formData, body)
  let scheme = call_596882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596882.url(scheme.get, call_596882.host, call_596882.base,
                         call_596882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596882, url, valid)

proc call*(call_596883: Call_SitesGetSiteMetricsSlot_596872;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetricsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_596884 = newJObject()
  var query_596885 = newJObject()
  add(path_596884, "resourceGroupName", newJString(resourceGroupName))
  add(query_596885, "api-version", newJString(apiVersion))
  add(path_596884, "name", newJString(name))
  add(query_596885, "details", newJBool(details))
  add(path_596884, "slot", newJString(slot))
  add(path_596884, "subscriptionId", newJString(subscriptionId))
  add(query_596885, "$filter", newJString(Filter))
  result = call_596883.call(path_596884, query_596885, nil, nil, nil)

var sitesGetSiteMetricsSlot* = Call_SitesGetSiteMetricsSlot_596872(
    name: "sitesGetSiteMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_SitesGetSiteMetricsSlot_596873, base: "",
    url: url_SitesGetSiteMetricsSlot_596874, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeaturesSlot_596886 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteNetworkFeaturesSlot_596888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeaturesSlot_596887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596889 = path.getOrDefault("resourceGroupName")
  valid_596889 = validateParameter(valid_596889, JString, required = true,
                                 default = nil)
  if valid_596889 != nil:
    section.add "resourceGroupName", valid_596889
  var valid_596890 = path.getOrDefault("name")
  valid_596890 = validateParameter(valid_596890, JString, required = true,
                                 default = nil)
  if valid_596890 != nil:
    section.add "name", valid_596890
  var valid_596891 = path.getOrDefault("slot")
  valid_596891 = validateParameter(valid_596891, JString, required = true,
                                 default = nil)
  if valid_596891 != nil:
    section.add "slot", valid_596891
  var valid_596892 = path.getOrDefault("subscriptionId")
  valid_596892 = validateParameter(valid_596892, JString, required = true,
                                 default = nil)
  if valid_596892 != nil:
    section.add "subscriptionId", valid_596892
  var valid_596893 = path.getOrDefault("view")
  valid_596893 = validateParameter(valid_596893, JString, required = true,
                                 default = nil)
  if valid_596893 != nil:
    section.add "view", valid_596893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596894 = query.getOrDefault("api-version")
  valid_596894 = validateParameter(valid_596894, JString, required = true,
                                 default = nil)
  if valid_596894 != nil:
    section.add "api-version", valid_596894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596895: Call_SitesGetSiteNetworkFeaturesSlot_596886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596895.validator(path, query, header, formData, body)
  let scheme = call_596895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596895.url(scheme.get, call_596895.host, call_596895.base,
                         call_596895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596895, url, valid)

proc call*(call_596896: Call_SitesGetSiteNetworkFeaturesSlot_596886;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## sitesGetSiteNetworkFeaturesSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_596897 = newJObject()
  var query_596898 = newJObject()
  add(path_596897, "resourceGroupName", newJString(resourceGroupName))
  add(query_596898, "api-version", newJString(apiVersion))
  add(path_596897, "name", newJString(name))
  add(path_596897, "slot", newJString(slot))
  add(path_596897, "subscriptionId", newJString(subscriptionId))
  add(path_596897, "view", newJString(view))
  result = call_596896.call(path_596897, query_596898, nil, nil, nil)

var sitesGetSiteNetworkFeaturesSlot* = Call_SitesGetSiteNetworkFeaturesSlot_596886(
    name: "sitesGetSiteNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeaturesSlot_596887, base: "",
    url: url_SitesGetSiteNetworkFeaturesSlot_596888, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPasswordSlot_596899 = ref object of OpenApiRestCall_593421
proc url_SitesGenerateNewSitePublishingPasswordSlot_596901(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPasswordSlot_596900(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596902 = path.getOrDefault("resourceGroupName")
  valid_596902 = validateParameter(valid_596902, JString, required = true,
                                 default = nil)
  if valid_596902 != nil:
    section.add "resourceGroupName", valid_596902
  var valid_596903 = path.getOrDefault("name")
  valid_596903 = validateParameter(valid_596903, JString, required = true,
                                 default = nil)
  if valid_596903 != nil:
    section.add "name", valid_596903
  var valid_596904 = path.getOrDefault("slot")
  valid_596904 = validateParameter(valid_596904, JString, required = true,
                                 default = nil)
  if valid_596904 != nil:
    section.add "slot", valid_596904
  var valid_596905 = path.getOrDefault("subscriptionId")
  valid_596905 = validateParameter(valid_596905, JString, required = true,
                                 default = nil)
  if valid_596905 != nil:
    section.add "subscriptionId", valid_596905
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596906 = query.getOrDefault("api-version")
  valid_596906 = validateParameter(valid_596906, JString, required = true,
                                 default = nil)
  if valid_596906 != nil:
    section.add "api-version", valid_596906
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596907: Call_SitesGenerateNewSitePublishingPasswordSlot_596899;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596907.validator(path, query, header, formData, body)
  let scheme = call_596907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596907.url(scheme.get, call_596907.host, call_596907.base,
                         call_596907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596907, url, valid)

proc call*(call_596908: Call_SitesGenerateNewSitePublishingPasswordSlot_596899;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGenerateNewSitePublishingPasswordSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596909 = newJObject()
  var query_596910 = newJObject()
  add(path_596909, "resourceGroupName", newJString(resourceGroupName))
  add(query_596910, "api-version", newJString(apiVersion))
  add(path_596909, "name", newJString(name))
  add(path_596909, "slot", newJString(slot))
  add(path_596909, "subscriptionId", newJString(subscriptionId))
  result = call_596908.call(path_596909, query_596910, nil, nil, nil)

var sitesGenerateNewSitePublishingPasswordSlot* = Call_SitesGenerateNewSitePublishingPasswordSlot_596899(
    name: "sitesGenerateNewSitePublishingPasswordSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPasswordSlot_596900,
    base: "", url: url_SitesGenerateNewSitePublishingPasswordSlot_596901,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperationSlot_596911 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteOperationSlot_596913(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperationSlot_596912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of an operation
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596914 = path.getOrDefault("resourceGroupName")
  valid_596914 = validateParameter(valid_596914, JString, required = true,
                                 default = nil)
  if valid_596914 != nil:
    section.add "resourceGroupName", valid_596914
  var valid_596915 = path.getOrDefault("name")
  valid_596915 = validateParameter(valid_596915, JString, required = true,
                                 default = nil)
  if valid_596915 != nil:
    section.add "name", valid_596915
  var valid_596916 = path.getOrDefault("slot")
  valid_596916 = validateParameter(valid_596916, JString, required = true,
                                 default = nil)
  if valid_596916 != nil:
    section.add "slot", valid_596916
  var valid_596917 = path.getOrDefault("subscriptionId")
  valid_596917 = validateParameter(valid_596917, JString, required = true,
                                 default = nil)
  if valid_596917 != nil:
    section.add "subscriptionId", valid_596917
  var valid_596918 = path.getOrDefault("operationId")
  valid_596918 = validateParameter(valid_596918, JString, required = true,
                                 default = nil)
  if valid_596918 != nil:
    section.add "operationId", valid_596918
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596919 = query.getOrDefault("api-version")
  valid_596919 = validateParameter(valid_596919, JString, required = true,
                                 default = nil)
  if valid_596919 != nil:
    section.add "api-version", valid_596919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596920: Call_SitesGetSiteOperationSlot_596911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596920.validator(path, query, header, formData, body)
  let scheme = call_596920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596920.url(scheme.get, call_596920.host, call_596920.base,
                         call_596920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596920, url, valid)

proc call*(call_596921: Call_SitesGetSiteOperationSlot_596911;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## sitesGetSiteOperationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of an operation
  var path_596922 = newJObject()
  var query_596923 = newJObject()
  add(path_596922, "resourceGroupName", newJString(resourceGroupName))
  add(query_596923, "api-version", newJString(apiVersion))
  add(path_596922, "name", newJString(name))
  add(path_596922, "slot", newJString(slot))
  add(path_596922, "subscriptionId", newJString(subscriptionId))
  add(path_596922, "operationId", newJString(operationId))
  result = call_596921.call(path_596922, query_596923, nil, nil, nil)

var sitesGetSiteOperationSlot* = Call_SitesGetSiteOperationSlot_596911(
    name: "sitesGetSiteOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperationSlot_596912, base: "",
    url: url_SitesGetSiteOperationSlot_596913, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOnsSlot_596924 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePremierAddOnsSlot_596926(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOnsSlot_596925(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596927 = path.getOrDefault("resourceGroupName")
  valid_596927 = validateParameter(valid_596927, JString, required = true,
                                 default = nil)
  if valid_596927 != nil:
    section.add "resourceGroupName", valid_596927
  var valid_596928 = path.getOrDefault("name")
  valid_596928 = validateParameter(valid_596928, JString, required = true,
                                 default = nil)
  if valid_596928 != nil:
    section.add "name", valid_596928
  var valid_596929 = path.getOrDefault("slot")
  valid_596929 = validateParameter(valid_596929, JString, required = true,
                                 default = nil)
  if valid_596929 != nil:
    section.add "slot", valid_596929
  var valid_596930 = path.getOrDefault("subscriptionId")
  valid_596930 = validateParameter(valid_596930, JString, required = true,
                                 default = nil)
  if valid_596930 != nil:
    section.add "subscriptionId", valid_596930
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596931 = query.getOrDefault("api-version")
  valid_596931 = validateParameter(valid_596931, JString, required = true,
                                 default = nil)
  if valid_596931 != nil:
    section.add "api-version", valid_596931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596932: Call_SitesListSitePremierAddOnsSlot_596924; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596932.validator(path, query, header, formData, body)
  let scheme = call_596932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596932.url(scheme.get, call_596932.host, call_596932.base,
                         call_596932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596932, url, valid)

proc call*(call_596933: Call_SitesListSitePremierAddOnsSlot_596924;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePremierAddOnsSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_596934 = newJObject()
  var query_596935 = newJObject()
  add(path_596934, "resourceGroupName", newJString(resourceGroupName))
  add(query_596935, "api-version", newJString(apiVersion))
  add(path_596934, "name", newJString(name))
  add(path_596934, "slot", newJString(slot))
  add(path_596934, "subscriptionId", newJString(subscriptionId))
  result = call_596933.call(path_596934, query_596935, nil, nil, nil)

var sitesListSitePremierAddOnsSlot* = Call_SitesListSitePremierAddOnsSlot_596924(
    name: "sitesListSitePremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_SitesListSitePremierAddOnsSlot_596925, base: "",
    url: url_SitesListSitePremierAddOnsSlot_596926, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOnSlot_596949 = ref object of OpenApiRestCall_593421
proc url_SitesAddSitePremierAddOnSlot_596951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOnSlot_596950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596952 = path.getOrDefault("resourceGroupName")
  valid_596952 = validateParameter(valid_596952, JString, required = true,
                                 default = nil)
  if valid_596952 != nil:
    section.add "resourceGroupName", valid_596952
  var valid_596953 = path.getOrDefault("name")
  valid_596953 = validateParameter(valid_596953, JString, required = true,
                                 default = nil)
  if valid_596953 != nil:
    section.add "name", valid_596953
  var valid_596954 = path.getOrDefault("slot")
  valid_596954 = validateParameter(valid_596954, JString, required = true,
                                 default = nil)
  if valid_596954 != nil:
    section.add "slot", valid_596954
  var valid_596955 = path.getOrDefault("subscriptionId")
  valid_596955 = validateParameter(valid_596955, JString, required = true,
                                 default = nil)
  if valid_596955 != nil:
    section.add "subscriptionId", valid_596955
  var valid_596956 = path.getOrDefault("premierAddOnName")
  valid_596956 = validateParameter(valid_596956, JString, required = true,
                                 default = nil)
  if valid_596956 != nil:
    section.add "premierAddOnName", valid_596956
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596957 = query.getOrDefault("api-version")
  valid_596957 = validateParameter(valid_596957, JString, required = true,
                                 default = nil)
  if valid_596957 != nil:
    section.add "api-version", valid_596957
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596959: Call_SitesAddSitePremierAddOnSlot_596949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596959.validator(path, query, header, formData, body)
  let scheme = call_596959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596959.url(scheme.get, call_596959.host, call_596959.base,
                         call_596959.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596959, url, valid)

proc call*(call_596960: Call_SitesAddSitePremierAddOnSlot_596949;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## sitesAddSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   premierAddOn: JObject (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596961 = newJObject()
  var query_596962 = newJObject()
  var body_596963 = newJObject()
  add(path_596961, "resourceGroupName", newJString(resourceGroupName))
  add(query_596962, "api-version", newJString(apiVersion))
  add(path_596961, "name", newJString(name))
  if premierAddOn != nil:
    body_596963 = premierAddOn
  add(path_596961, "slot", newJString(slot))
  add(path_596961, "subscriptionId", newJString(subscriptionId))
  add(path_596961, "premierAddOnName", newJString(premierAddOnName))
  result = call_596960.call(path_596961, query_596962, nil, nil, body_596963)

var sitesAddSitePremierAddOnSlot* = Call_SitesAddSitePremierAddOnSlot_596949(
    name: "sitesAddSitePremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOnSlot_596950, base: "",
    url: url_SitesAddSitePremierAddOnSlot_596951, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOnSlot_596936 = ref object of OpenApiRestCall_593421
proc url_SitesGetSitePremierAddOnSlot_596938(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOnSlot_596937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596939 = path.getOrDefault("resourceGroupName")
  valid_596939 = validateParameter(valid_596939, JString, required = true,
                                 default = nil)
  if valid_596939 != nil:
    section.add "resourceGroupName", valid_596939
  var valid_596940 = path.getOrDefault("name")
  valid_596940 = validateParameter(valid_596940, JString, required = true,
                                 default = nil)
  if valid_596940 != nil:
    section.add "name", valid_596940
  var valid_596941 = path.getOrDefault("slot")
  valid_596941 = validateParameter(valid_596941, JString, required = true,
                                 default = nil)
  if valid_596941 != nil:
    section.add "slot", valid_596941
  var valid_596942 = path.getOrDefault("subscriptionId")
  valid_596942 = validateParameter(valid_596942, JString, required = true,
                                 default = nil)
  if valid_596942 != nil:
    section.add "subscriptionId", valid_596942
  var valid_596943 = path.getOrDefault("premierAddOnName")
  valid_596943 = validateParameter(valid_596943, JString, required = true,
                                 default = nil)
  if valid_596943 != nil:
    section.add "premierAddOnName", valid_596943
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596944 = query.getOrDefault("api-version")
  valid_596944 = validateParameter(valid_596944, JString, required = true,
                                 default = nil)
  if valid_596944 != nil:
    section.add "api-version", valid_596944
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596945: Call_SitesGetSitePremierAddOnSlot_596936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_596945.validator(path, query, header, formData, body)
  let scheme = call_596945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596945.url(scheme.get, call_596945.host, call_596945.base,
                         call_596945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596945, url, valid)

proc call*(call_596946: Call_SitesGetSitePremierAddOnSlot_596936;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesGetSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596947 = newJObject()
  var query_596948 = newJObject()
  add(path_596947, "resourceGroupName", newJString(resourceGroupName))
  add(query_596948, "api-version", newJString(apiVersion))
  add(path_596947, "name", newJString(name))
  add(path_596947, "slot", newJString(slot))
  add(path_596947, "subscriptionId", newJString(subscriptionId))
  add(path_596947, "premierAddOnName", newJString(premierAddOnName))
  result = call_596946.call(path_596947, query_596948, nil, nil, nil)

var sitesGetSitePremierAddOnSlot* = Call_SitesGetSitePremierAddOnSlot_596936(
    name: "sitesGetSitePremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOnSlot_596937, base: "",
    url: url_SitesGetSitePremierAddOnSlot_596938, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOnSlot_596964 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSitePremierAddOnSlot_596966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOnSlot_596965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596967 = path.getOrDefault("resourceGroupName")
  valid_596967 = validateParameter(valid_596967, JString, required = true,
                                 default = nil)
  if valid_596967 != nil:
    section.add "resourceGroupName", valid_596967
  var valid_596968 = path.getOrDefault("name")
  valid_596968 = validateParameter(valid_596968, JString, required = true,
                                 default = nil)
  if valid_596968 != nil:
    section.add "name", valid_596968
  var valid_596969 = path.getOrDefault("slot")
  valid_596969 = validateParameter(valid_596969, JString, required = true,
                                 default = nil)
  if valid_596969 != nil:
    section.add "slot", valid_596969
  var valid_596970 = path.getOrDefault("subscriptionId")
  valid_596970 = validateParameter(valid_596970, JString, required = true,
                                 default = nil)
  if valid_596970 != nil:
    section.add "subscriptionId", valid_596970
  var valid_596971 = path.getOrDefault("premierAddOnName")
  valid_596971 = validateParameter(valid_596971, JString, required = true,
                                 default = nil)
  if valid_596971 != nil:
    section.add "premierAddOnName", valid_596971
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596972 = query.getOrDefault("api-version")
  valid_596972 = validateParameter(valid_596972, JString, required = true,
                                 default = nil)
  if valid_596972 != nil:
    section.add "api-version", valid_596972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596973: Call_SitesDeleteSitePremierAddOnSlot_596964;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596973.validator(path, query, header, formData, body)
  let scheme = call_596973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596973.url(scheme.get, call_596973.host, call_596973.base,
                         call_596973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596973, url, valid)

proc call*(call_596974: Call_SitesDeleteSitePremierAddOnSlot_596964;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesDeleteSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_596975 = newJObject()
  var query_596976 = newJObject()
  add(path_596975, "resourceGroupName", newJString(resourceGroupName))
  add(query_596976, "api-version", newJString(apiVersion))
  add(path_596975, "name", newJString(name))
  add(path_596975, "slot", newJString(slot))
  add(path_596975, "subscriptionId", newJString(subscriptionId))
  add(path_596975, "premierAddOnName", newJString(premierAddOnName))
  result = call_596974.call(path_596975, query_596976, nil, nil, nil)

var sitesDeleteSitePremierAddOnSlot* = Call_SitesDeleteSitePremierAddOnSlot_596964(
    name: "sitesDeleteSitePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOnSlot_596965, base: "",
    url: url_SitesDeleteSitePremierAddOnSlot_596966, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXmlSlot_596977 = ref object of OpenApiRestCall_593421
proc url_SitesListSitePublishingProfileXmlSlot_596979(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXmlSlot_596978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596980 = path.getOrDefault("resourceGroupName")
  valid_596980 = validateParameter(valid_596980, JString, required = true,
                                 default = nil)
  if valid_596980 != nil:
    section.add "resourceGroupName", valid_596980
  var valid_596981 = path.getOrDefault("name")
  valid_596981 = validateParameter(valid_596981, JString, required = true,
                                 default = nil)
  if valid_596981 != nil:
    section.add "name", valid_596981
  var valid_596982 = path.getOrDefault("slot")
  valid_596982 = validateParameter(valid_596982, JString, required = true,
                                 default = nil)
  if valid_596982 != nil:
    section.add "slot", valid_596982
  var valid_596983 = path.getOrDefault("subscriptionId")
  valid_596983 = validateParameter(valid_596983, JString, required = true,
                                 default = nil)
  if valid_596983 != nil:
    section.add "subscriptionId", valid_596983
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596984 = query.getOrDefault("api-version")
  valid_596984 = validateParameter(valid_596984, JString, required = true,
                                 default = nil)
  if valid_596984 != nil:
    section.add "api-version", valid_596984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596986: Call_SitesListSitePublishingProfileXmlSlot_596977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_596986.validator(path, query, header, formData, body)
  let scheme = call_596986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596986.url(scheme.get, call_596986.host, call_596986.base,
                         call_596986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596986, url, valid)

proc call*(call_596987: Call_SitesListSitePublishingProfileXmlSlot_596977;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; options: JsonNode): Recallable =
  ## sitesListSitePublishingProfileXmlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  var path_596988 = newJObject()
  var query_596989 = newJObject()
  var body_596990 = newJObject()
  add(path_596988, "resourceGroupName", newJString(resourceGroupName))
  add(query_596989, "api-version", newJString(apiVersion))
  add(path_596988, "name", newJString(name))
  add(path_596988, "slot", newJString(slot))
  add(path_596988, "subscriptionId", newJString(subscriptionId))
  if options != nil:
    body_596990 = options
  result = call_596987.call(path_596988, query_596989, nil, nil, body_596990)

var sitesListSitePublishingProfileXmlSlot* = Call_SitesListSitePublishingProfileXmlSlot_596977(
    name: "sitesListSitePublishingProfileXmlSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_SitesListSitePublishingProfileXmlSlot_596978, base: "",
    url: url_SitesListSitePublishingProfileXmlSlot_596979, schemes: {Scheme.Https})
type
  Call_SitesRecoverSiteSlot_596991 = ref object of OpenApiRestCall_593421
proc url_SitesRecoverSiteSlot_596993(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSiteSlot_596992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596994 = path.getOrDefault("resourceGroupName")
  valid_596994 = validateParameter(valid_596994, JString, required = true,
                                 default = nil)
  if valid_596994 != nil:
    section.add "resourceGroupName", valid_596994
  var valid_596995 = path.getOrDefault("name")
  valid_596995 = validateParameter(valid_596995, JString, required = true,
                                 default = nil)
  if valid_596995 != nil:
    section.add "name", valid_596995
  var valid_596996 = path.getOrDefault("slot")
  valid_596996 = validateParameter(valid_596996, JString, required = true,
                                 default = nil)
  if valid_596996 != nil:
    section.add "slot", valid_596996
  var valid_596997 = path.getOrDefault("subscriptionId")
  valid_596997 = validateParameter(valid_596997, JString, required = true,
                                 default = nil)
  if valid_596997 != nil:
    section.add "subscriptionId", valid_596997
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596998 = query.getOrDefault("api-version")
  valid_596998 = validateParameter(valid_596998, JString, required = true,
                                 default = nil)
  if valid_596998 != nil:
    section.add "api-version", valid_596998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597000: Call_SitesRecoverSiteSlot_596991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597000.validator(path, query, header, formData, body)
  let scheme = call_597000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597000.url(scheme.get, call_597000.host, call_597000.base,
                         call_597000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597000, url, valid)

proc call*(call_597001: Call_SitesRecoverSiteSlot_596991;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_597002 = newJObject()
  var query_597003 = newJObject()
  var body_597004 = newJObject()
  add(path_597002, "resourceGroupName", newJString(resourceGroupName))
  add(query_597003, "api-version", newJString(apiVersion))
  add(path_597002, "name", newJString(name))
  add(path_597002, "slot", newJString(slot))
  add(path_597002, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_597004 = recoveryEntity
  result = call_597001.call(path_597002, query_597003, nil, nil, body_597004)

var sitesRecoverSiteSlot* = Call_SitesRecoverSiteSlot_596991(
    name: "sitesRecoverSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_SitesRecoverSiteSlot_596992, base: "",
    url: url_SitesRecoverSiteSlot_596993, schemes: {Scheme.Https})
type
  Call_SitesResetSlotConfigSlot_597005 = ref object of OpenApiRestCall_593421
proc url_SitesResetSlotConfigSlot_597007(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetSlotConfigSlot_597006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597008 = path.getOrDefault("resourceGroupName")
  valid_597008 = validateParameter(valid_597008, JString, required = true,
                                 default = nil)
  if valid_597008 != nil:
    section.add "resourceGroupName", valid_597008
  var valid_597009 = path.getOrDefault("name")
  valid_597009 = validateParameter(valid_597009, JString, required = true,
                                 default = nil)
  if valid_597009 != nil:
    section.add "name", valid_597009
  var valid_597010 = path.getOrDefault("slot")
  valid_597010 = validateParameter(valid_597010, JString, required = true,
                                 default = nil)
  if valid_597010 != nil:
    section.add "slot", valid_597010
  var valid_597011 = path.getOrDefault("subscriptionId")
  valid_597011 = validateParameter(valid_597011, JString, required = true,
                                 default = nil)
  if valid_597011 != nil:
    section.add "subscriptionId", valid_597011
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597012 = query.getOrDefault("api-version")
  valid_597012 = validateParameter(valid_597012, JString, required = true,
                                 default = nil)
  if valid_597012 != nil:
    section.add "api-version", valid_597012
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597013: Call_SitesResetSlotConfigSlot_597005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597013.validator(path, query, header, formData, body)
  let scheme = call_597013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597013.url(scheme.get, call_597013.host, call_597013.base,
                         call_597013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597013, url, valid)

proc call*(call_597014: Call_SitesResetSlotConfigSlot_597005;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesResetSlotConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597015 = newJObject()
  var query_597016 = newJObject()
  add(path_597015, "resourceGroupName", newJString(resourceGroupName))
  add(query_597016, "api-version", newJString(apiVersion))
  add(path_597015, "name", newJString(name))
  add(path_597015, "slot", newJString(slot))
  add(path_597015, "subscriptionId", newJString(subscriptionId))
  result = call_597014.call(path_597015, query_597016, nil, nil, nil)

var sitesResetSlotConfigSlot* = Call_SitesResetSlotConfigSlot_597005(
    name: "sitesResetSlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_SitesResetSlotConfigSlot_597006, base: "",
    url: url_SitesResetSlotConfigSlot_597007, schemes: {Scheme.Https})
type
  Call_SitesRestartSiteSlot_597017 = ref object of OpenApiRestCall_593421
proc url_SitesRestartSiteSlot_597019(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSiteSlot_597018(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597020 = path.getOrDefault("resourceGroupName")
  valid_597020 = validateParameter(valid_597020, JString, required = true,
                                 default = nil)
  if valid_597020 != nil:
    section.add "resourceGroupName", valid_597020
  var valid_597021 = path.getOrDefault("name")
  valid_597021 = validateParameter(valid_597021, JString, required = true,
                                 default = nil)
  if valid_597021 != nil:
    section.add "name", valid_597021
  var valid_597022 = path.getOrDefault("slot")
  valid_597022 = validateParameter(valid_597022, JString, required = true,
                                 default = nil)
  if valid_597022 != nil:
    section.add "slot", valid_597022
  var valid_597023 = path.getOrDefault("subscriptionId")
  valid_597023 = validateParameter(valid_597023, JString, required = true,
                                 default = nil)
  if valid_597023 != nil:
    section.add "subscriptionId", valid_597023
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597024 = query.getOrDefault("api-version")
  valid_597024 = validateParameter(valid_597024, JString, required = true,
                                 default = nil)
  if valid_597024 != nil:
    section.add "api-version", valid_597024
  var valid_597025 = query.getOrDefault("synchronous")
  valid_597025 = validateParameter(valid_597025, JBool, required = false, default = nil)
  if valid_597025 != nil:
    section.add "synchronous", valid_597025
  var valid_597026 = query.getOrDefault("softRestart")
  valid_597026 = validateParameter(valid_597026, JBool, required = false, default = nil)
  if valid_597026 != nil:
    section.add "softRestart", valid_597026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597027: Call_SitesRestartSiteSlot_597017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597027.validator(path, query, header, formData, body)
  let scheme = call_597027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597027.url(scheme.get, call_597027.host, call_597027.base,
                         call_597027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597027, url, valid)

proc call*(call_597028: Call_SitesRestartSiteSlot_597017;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; synchronous: bool = false; softRestart: bool = false): Recallable =
  ## sitesRestartSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_597029 = newJObject()
  var query_597030 = newJObject()
  add(path_597029, "resourceGroupName", newJString(resourceGroupName))
  add(query_597030, "api-version", newJString(apiVersion))
  add(path_597029, "name", newJString(name))
  add(path_597029, "slot", newJString(slot))
  add(path_597029, "subscriptionId", newJString(subscriptionId))
  add(query_597030, "synchronous", newJBool(synchronous))
  add(query_597030, "softRestart", newJBool(softRestart))
  result = call_597028.call(path_597029, query_597030, nil, nil, nil)

var sitesRestartSiteSlot* = Call_SitesRestartSiteSlot_597017(
    name: "sitesRestartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_SitesRestartSiteSlot_597018, base: "",
    url: url_SitesRestartSiteSlot_597019, schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesSlot_597031 = ref object of OpenApiRestCall_593421
proc url_SitesGetSlotsDifferencesSlot_597033(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesSlot_597032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of the source slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597034 = path.getOrDefault("resourceGroupName")
  valid_597034 = validateParameter(valid_597034, JString, required = true,
                                 default = nil)
  if valid_597034 != nil:
    section.add "resourceGroupName", valid_597034
  var valid_597035 = path.getOrDefault("name")
  valid_597035 = validateParameter(valid_597035, JString, required = true,
                                 default = nil)
  if valid_597035 != nil:
    section.add "name", valid_597035
  var valid_597036 = path.getOrDefault("slot")
  valid_597036 = validateParameter(valid_597036, JString, required = true,
                                 default = nil)
  if valid_597036 != nil:
    section.add "slot", valid_597036
  var valid_597037 = path.getOrDefault("subscriptionId")
  valid_597037 = validateParameter(valid_597037, JString, required = true,
                                 default = nil)
  if valid_597037 != nil:
    section.add "subscriptionId", valid_597037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597038 = query.getOrDefault("api-version")
  valid_597038 = validateParameter(valid_597038, JString, required = true,
                                 default = nil)
  if valid_597038 != nil:
    section.add "api-version", valid_597038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597040: Call_SitesGetSlotsDifferencesSlot_597031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597040.validator(path, query, header, formData, body)
  let scheme = call_597040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597040.url(scheme.get, call_597040.host, call_597040.base,
                         call_597040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597040, url, valid)

proc call*(call_597041: Call_SitesGetSlotsDifferencesSlot_597031;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesGetSlotsDifferencesSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of the source slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_597042 = newJObject()
  var query_597043 = newJObject()
  var body_597044 = newJObject()
  add(path_597042, "resourceGroupName", newJString(resourceGroupName))
  add(query_597043, "api-version", newJString(apiVersion))
  add(path_597042, "name", newJString(name))
  add(path_597042, "slot", newJString(slot))
  add(path_597042, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597044 = slotSwapEntity
  result = call_597041.call(path_597042, query_597043, nil, nil, body_597044)

var sitesGetSlotsDifferencesSlot* = Call_SitesGetSlotsDifferencesSlot_597031(
    name: "sitesGetSlotsDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesSlot_597032, base: "",
    url: url_SitesGetSlotsDifferencesSlot_597033, schemes: {Scheme.Https})
type
  Call_SitesSwapSlotsSlot_597045 = ref object of OpenApiRestCall_593421
proc url_SitesSwapSlotsSlot_597047(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotsSlot_597046(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of source slot for the swap
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597048 = path.getOrDefault("resourceGroupName")
  valid_597048 = validateParameter(valid_597048, JString, required = true,
                                 default = nil)
  if valid_597048 != nil:
    section.add "resourceGroupName", valid_597048
  var valid_597049 = path.getOrDefault("name")
  valid_597049 = validateParameter(valid_597049, JString, required = true,
                                 default = nil)
  if valid_597049 != nil:
    section.add "name", valid_597049
  var valid_597050 = path.getOrDefault("slot")
  valid_597050 = validateParameter(valid_597050, JString, required = true,
                                 default = nil)
  if valid_597050 != nil:
    section.add "slot", valid_597050
  var valid_597051 = path.getOrDefault("subscriptionId")
  valid_597051 = validateParameter(valid_597051, JString, required = true,
                                 default = nil)
  if valid_597051 != nil:
    section.add "subscriptionId", valid_597051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597052 = query.getOrDefault("api-version")
  valid_597052 = validateParameter(valid_597052, JString, required = true,
                                 default = nil)
  if valid_597052 != nil:
    section.add "api-version", valid_597052
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597054: Call_SitesSwapSlotsSlot_597045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597054.validator(path, query, header, formData, body)
  let scheme = call_597054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597054.url(scheme.get, call_597054.host, call_597054.base,
                         call_597054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597054, url, valid)

proc call*(call_597055: Call_SitesSwapSlotsSlot_597045; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## sitesSwapSlotsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of source slot for the swap
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_597056 = newJObject()
  var query_597057 = newJObject()
  var body_597058 = newJObject()
  add(path_597056, "resourceGroupName", newJString(resourceGroupName))
  add(query_597057, "api-version", newJString(apiVersion))
  add(path_597056, "name", newJString(name))
  add(path_597056, "slot", newJString(slot))
  add(path_597056, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597058 = slotSwapEntity
  result = call_597055.call(path_597056, query_597057, nil, nil, body_597058)

var sitesSwapSlotsSlot* = Call_SitesSwapSlotsSlot_597045(
    name: "sitesSwapSlotsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_SitesSwapSlotsSlot_597046, base: "",
    url: url_SitesSwapSlotsSlot_597047, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshotsSlot_597059 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSnapshotsSlot_597061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshotsSlot_597060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  ##   name: JString (required)
  ##       : Website Name
  ##   slot: JString (required)
  ##       : Website Slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597062 = path.getOrDefault("resourceGroupName")
  valid_597062 = validateParameter(valid_597062, JString, required = true,
                                 default = nil)
  if valid_597062 != nil:
    section.add "resourceGroupName", valid_597062
  var valid_597063 = path.getOrDefault("name")
  valid_597063 = validateParameter(valid_597063, JString, required = true,
                                 default = nil)
  if valid_597063 != nil:
    section.add "name", valid_597063
  var valid_597064 = path.getOrDefault("slot")
  valid_597064 = validateParameter(valid_597064, JString, required = true,
                                 default = nil)
  if valid_597064 != nil:
    section.add "slot", valid_597064
  var valid_597065 = path.getOrDefault("subscriptionId")
  valid_597065 = validateParameter(valid_597065, JString, required = true,
                                 default = nil)
  if valid_597065 != nil:
    section.add "subscriptionId", valid_597065
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597066 = query.getOrDefault("api-version")
  valid_597066 = validateParameter(valid_597066, JString, required = true,
                                 default = nil)
  if valid_597066 != nil:
    section.add "api-version", valid_597066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597067: Call_SitesGetSiteSnapshotsSlot_597059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597067.validator(path, query, header, formData, body)
  let scheme = call_597067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597067.url(scheme.get, call_597067.host, call_597067.base,
                         call_597067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597067, url, valid)

proc call*(call_597068: Call_SitesGetSiteSnapshotsSlot_597059;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSnapshotsSlot
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   slot: string (required)
  ##       : Website Slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597069 = newJObject()
  var query_597070 = newJObject()
  add(path_597069, "resourceGroupName", newJString(resourceGroupName))
  add(query_597070, "api-version", newJString(apiVersion))
  add(path_597069, "name", newJString(name))
  add(path_597069, "slot", newJString(slot))
  add(path_597069, "subscriptionId", newJString(subscriptionId))
  result = call_597068.call(path_597069, query_597070, nil, nil, nil)

var sitesGetSiteSnapshotsSlot* = Call_SitesGetSiteSnapshotsSlot_597059(
    name: "sitesGetSiteSnapshotsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_SitesGetSiteSnapshotsSlot_597060, base: "",
    url: url_SitesGetSiteSnapshotsSlot_597061, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControlSlot_597083 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteSourceControlSlot_597085(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControlSlot_597084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597086 = path.getOrDefault("resourceGroupName")
  valid_597086 = validateParameter(valid_597086, JString, required = true,
                                 default = nil)
  if valid_597086 != nil:
    section.add "resourceGroupName", valid_597086
  var valid_597087 = path.getOrDefault("name")
  valid_597087 = validateParameter(valid_597087, JString, required = true,
                                 default = nil)
  if valid_597087 != nil:
    section.add "name", valid_597087
  var valid_597088 = path.getOrDefault("slot")
  valid_597088 = validateParameter(valid_597088, JString, required = true,
                                 default = nil)
  if valid_597088 != nil:
    section.add "slot", valid_597088
  var valid_597089 = path.getOrDefault("subscriptionId")
  valid_597089 = validateParameter(valid_597089, JString, required = true,
                                 default = nil)
  if valid_597089 != nil:
    section.add "subscriptionId", valid_597089
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597090 = query.getOrDefault("api-version")
  valid_597090 = validateParameter(valid_597090, JString, required = true,
                                 default = nil)
  if valid_597090 != nil:
    section.add "api-version", valid_597090
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597092: Call_SitesCreateOrUpdateSiteSourceControlSlot_597083;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597092.validator(path, query, header, formData, body)
  let scheme = call_597092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597092.url(scheme.get, call_597092.host, call_597092.base,
                         call_597092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597092, url, valid)

proc call*(call_597093: Call_SitesCreateOrUpdateSiteSourceControlSlot_597083;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_597094 = newJObject()
  var query_597095 = newJObject()
  var body_597096 = newJObject()
  add(path_597094, "resourceGroupName", newJString(resourceGroupName))
  add(query_597095, "api-version", newJString(apiVersion))
  add(path_597094, "name", newJString(name))
  add(path_597094, "slot", newJString(slot))
  add(path_597094, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597096 = siteSourceControl
  result = call_597093.call(path_597094, query_597095, nil, nil, body_597096)

var sitesCreateOrUpdateSiteSourceControlSlot* = Call_SitesCreateOrUpdateSiteSourceControlSlot_597083(
    name: "sitesCreateOrUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControlSlot_597084, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControlSlot_597085,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControlSlot_597071 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSourceControlSlot_597073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControlSlot_597072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597074 = path.getOrDefault("resourceGroupName")
  valid_597074 = validateParameter(valid_597074, JString, required = true,
                                 default = nil)
  if valid_597074 != nil:
    section.add "resourceGroupName", valid_597074
  var valid_597075 = path.getOrDefault("name")
  valid_597075 = validateParameter(valid_597075, JString, required = true,
                                 default = nil)
  if valid_597075 != nil:
    section.add "name", valid_597075
  var valid_597076 = path.getOrDefault("slot")
  valid_597076 = validateParameter(valid_597076, JString, required = true,
                                 default = nil)
  if valid_597076 != nil:
    section.add "slot", valid_597076
  var valid_597077 = path.getOrDefault("subscriptionId")
  valid_597077 = validateParameter(valid_597077, JString, required = true,
                                 default = nil)
  if valid_597077 != nil:
    section.add "subscriptionId", valid_597077
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597078 = query.getOrDefault("api-version")
  valid_597078 = validateParameter(valid_597078, JString, required = true,
                                 default = nil)
  if valid_597078 != nil:
    section.add "api-version", valid_597078
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597079: Call_SitesGetSiteSourceControlSlot_597071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597079.validator(path, query, header, formData, body)
  let scheme = call_597079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597079.url(scheme.get, call_597079.host, call_597079.base,
                         call_597079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597079, url, valid)

proc call*(call_597080: Call_SitesGetSiteSourceControlSlot_597071;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597081 = newJObject()
  var query_597082 = newJObject()
  add(path_597081, "resourceGroupName", newJString(resourceGroupName))
  add(query_597082, "api-version", newJString(apiVersion))
  add(path_597081, "name", newJString(name))
  add(path_597081, "slot", newJString(slot))
  add(path_597081, "subscriptionId", newJString(subscriptionId))
  result = call_597080.call(path_597081, query_597082, nil, nil, nil)

var sitesGetSiteSourceControlSlot* = Call_SitesGetSiteSourceControlSlot_597071(
    name: "sitesGetSiteSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControlSlot_597072, base: "",
    url: url_SitesGetSiteSourceControlSlot_597073, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControlSlot_597109 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteSourceControlSlot_597111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControlSlot_597110(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597112 = path.getOrDefault("resourceGroupName")
  valid_597112 = validateParameter(valid_597112, JString, required = true,
                                 default = nil)
  if valid_597112 != nil:
    section.add "resourceGroupName", valid_597112
  var valid_597113 = path.getOrDefault("name")
  valid_597113 = validateParameter(valid_597113, JString, required = true,
                                 default = nil)
  if valid_597113 != nil:
    section.add "name", valid_597113
  var valid_597114 = path.getOrDefault("slot")
  valid_597114 = validateParameter(valid_597114, JString, required = true,
                                 default = nil)
  if valid_597114 != nil:
    section.add "slot", valid_597114
  var valid_597115 = path.getOrDefault("subscriptionId")
  valid_597115 = validateParameter(valid_597115, JString, required = true,
                                 default = nil)
  if valid_597115 != nil:
    section.add "subscriptionId", valid_597115
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597116 = query.getOrDefault("api-version")
  valid_597116 = validateParameter(valid_597116, JString, required = true,
                                 default = nil)
  if valid_597116 != nil:
    section.add "api-version", valid_597116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597118: Call_SitesUpdateSiteSourceControlSlot_597109;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597118.validator(path, query, header, formData, body)
  let scheme = call_597118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597118.url(scheme.get, call_597118.host, call_597118.base,
                         call_597118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597118, url, valid)

proc call*(call_597119: Call_SitesUpdateSiteSourceControlSlot_597109;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesUpdateSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_597120 = newJObject()
  var query_597121 = newJObject()
  var body_597122 = newJObject()
  add(path_597120, "resourceGroupName", newJString(resourceGroupName))
  add(query_597121, "api-version", newJString(apiVersion))
  add(path_597120, "name", newJString(name))
  add(path_597120, "slot", newJString(slot))
  add(path_597120, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597122 = siteSourceControl
  result = call_597119.call(path_597120, query_597121, nil, nil, body_597122)

var sitesUpdateSiteSourceControlSlot* = Call_SitesUpdateSiteSourceControlSlot_597109(
    name: "sitesUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControlSlot_597110, base: "",
    url: url_SitesUpdateSiteSourceControlSlot_597111, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControlSlot_597097 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteSourceControlSlot_597099(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControlSlot_597098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597100 = path.getOrDefault("resourceGroupName")
  valid_597100 = validateParameter(valid_597100, JString, required = true,
                                 default = nil)
  if valid_597100 != nil:
    section.add "resourceGroupName", valid_597100
  var valid_597101 = path.getOrDefault("name")
  valid_597101 = validateParameter(valid_597101, JString, required = true,
                                 default = nil)
  if valid_597101 != nil:
    section.add "name", valid_597101
  var valid_597102 = path.getOrDefault("slot")
  valid_597102 = validateParameter(valid_597102, JString, required = true,
                                 default = nil)
  if valid_597102 != nil:
    section.add "slot", valid_597102
  var valid_597103 = path.getOrDefault("subscriptionId")
  valid_597103 = validateParameter(valid_597103, JString, required = true,
                                 default = nil)
  if valid_597103 != nil:
    section.add "subscriptionId", valid_597103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597104 = query.getOrDefault("api-version")
  valid_597104 = validateParameter(valid_597104, JString, required = true,
                                 default = nil)
  if valid_597104 != nil:
    section.add "api-version", valid_597104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597105: Call_SitesDeleteSiteSourceControlSlot_597097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597105.validator(path, query, header, formData, body)
  let scheme = call_597105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597105.url(scheme.get, call_597105.host, call_597105.base,
                         call_597105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597105, url, valid)

proc call*(call_597106: Call_SitesDeleteSiteSourceControlSlot_597097;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesDeleteSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597107 = newJObject()
  var query_597108 = newJObject()
  add(path_597107, "resourceGroupName", newJString(resourceGroupName))
  add(query_597108, "api-version", newJString(apiVersion))
  add(path_597107, "name", newJString(name))
  add(path_597107, "slot", newJString(slot))
  add(path_597107, "subscriptionId", newJString(subscriptionId))
  result = call_597106.call(path_597107, query_597108, nil, nil, nil)

var sitesDeleteSiteSourceControlSlot* = Call_SitesDeleteSiteSourceControlSlot_597097(
    name: "sitesDeleteSiteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControlSlot_597098, base: "",
    url: url_SitesDeleteSiteSourceControlSlot_597099, schemes: {Scheme.Https})
type
  Call_SitesStartSiteSlot_597123 = ref object of OpenApiRestCall_593421
proc url_SitesStartSiteSlot_597125(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSiteSlot_597124(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597126 = path.getOrDefault("resourceGroupName")
  valid_597126 = validateParameter(valid_597126, JString, required = true,
                                 default = nil)
  if valid_597126 != nil:
    section.add "resourceGroupName", valid_597126
  var valid_597127 = path.getOrDefault("name")
  valid_597127 = validateParameter(valid_597127, JString, required = true,
                                 default = nil)
  if valid_597127 != nil:
    section.add "name", valid_597127
  var valid_597128 = path.getOrDefault("slot")
  valid_597128 = validateParameter(valid_597128, JString, required = true,
                                 default = nil)
  if valid_597128 != nil:
    section.add "slot", valid_597128
  var valid_597129 = path.getOrDefault("subscriptionId")
  valid_597129 = validateParameter(valid_597129, JString, required = true,
                                 default = nil)
  if valid_597129 != nil:
    section.add "subscriptionId", valid_597129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597130 = query.getOrDefault("api-version")
  valid_597130 = validateParameter(valid_597130, JString, required = true,
                                 default = nil)
  if valid_597130 != nil:
    section.add "api-version", valid_597130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597131: Call_SitesStartSiteSlot_597123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597131.validator(path, query, header, formData, body)
  let scheme = call_597131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597131.url(scheme.get, call_597131.host, call_597131.base,
                         call_597131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597131, url, valid)

proc call*(call_597132: Call_SitesStartSiteSlot_597123; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesStartSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597133 = newJObject()
  var query_597134 = newJObject()
  add(path_597133, "resourceGroupName", newJString(resourceGroupName))
  add(query_597134, "api-version", newJString(apiVersion))
  add(path_597133, "name", newJString(name))
  add(path_597133, "slot", newJString(slot))
  add(path_597133, "subscriptionId", newJString(subscriptionId))
  result = call_597132.call(path_597133, query_597134, nil, nil, nil)

var sitesStartSiteSlot* = Call_SitesStartSiteSlot_597123(
    name: "sitesStartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_SitesStartSiteSlot_597124, base: "",
    url: url_SitesStartSiteSlot_597125, schemes: {Scheme.Https})
type
  Call_SitesStopSiteSlot_597135 = ref object of OpenApiRestCall_593421
proc url_SitesStopSiteSlot_597137(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSiteSlot_597136(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597138 = path.getOrDefault("resourceGroupName")
  valid_597138 = validateParameter(valid_597138, JString, required = true,
                                 default = nil)
  if valid_597138 != nil:
    section.add "resourceGroupName", valid_597138
  var valid_597139 = path.getOrDefault("name")
  valid_597139 = validateParameter(valid_597139, JString, required = true,
                                 default = nil)
  if valid_597139 != nil:
    section.add "name", valid_597139
  var valid_597140 = path.getOrDefault("slot")
  valid_597140 = validateParameter(valid_597140, JString, required = true,
                                 default = nil)
  if valid_597140 != nil:
    section.add "slot", valid_597140
  var valid_597141 = path.getOrDefault("subscriptionId")
  valid_597141 = validateParameter(valid_597141, JString, required = true,
                                 default = nil)
  if valid_597141 != nil:
    section.add "subscriptionId", valid_597141
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597142 = query.getOrDefault("api-version")
  valid_597142 = validateParameter(valid_597142, JString, required = true,
                                 default = nil)
  if valid_597142 != nil:
    section.add "api-version", valid_597142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597143: Call_SitesStopSiteSlot_597135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597143.validator(path, query, header, formData, body)
  let scheme = call_597143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597143.url(scheme.get, call_597143.host, call_597143.base,
                         call_597143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597143, url, valid)

proc call*(call_597144: Call_SitesStopSiteSlot_597135; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesStopSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597145 = newJObject()
  var query_597146 = newJObject()
  add(path_597145, "resourceGroupName", newJString(resourceGroupName))
  add(query_597146, "api-version", newJString(apiVersion))
  add(path_597145, "name", newJString(name))
  add(path_597145, "slot", newJString(slot))
  add(path_597145, "subscriptionId", newJString(subscriptionId))
  result = call_597144.call(path_597145, query_597146, nil, nil, nil)

var sitesStopSiteSlot* = Call_SitesStopSiteSlot_597135(name: "sitesStopSiteSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_SitesStopSiteSlot_597136, base: "",
    url: url_SitesStopSiteSlot_597137, schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepositorySlot_597147 = ref object of OpenApiRestCall_593421
proc url_SitesSyncSiteRepositorySlot_597149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepositorySlot_597148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597150 = path.getOrDefault("resourceGroupName")
  valid_597150 = validateParameter(valid_597150, JString, required = true,
                                 default = nil)
  if valid_597150 != nil:
    section.add "resourceGroupName", valid_597150
  var valid_597151 = path.getOrDefault("name")
  valid_597151 = validateParameter(valid_597151, JString, required = true,
                                 default = nil)
  if valid_597151 != nil:
    section.add "name", valid_597151
  var valid_597152 = path.getOrDefault("slot")
  valid_597152 = validateParameter(valid_597152, JString, required = true,
                                 default = nil)
  if valid_597152 != nil:
    section.add "slot", valid_597152
  var valid_597153 = path.getOrDefault("subscriptionId")
  valid_597153 = validateParameter(valid_597153, JString, required = true,
                                 default = nil)
  if valid_597153 != nil:
    section.add "subscriptionId", valid_597153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597154 = query.getOrDefault("api-version")
  valid_597154 = validateParameter(valid_597154, JString, required = true,
                                 default = nil)
  if valid_597154 != nil:
    section.add "api-version", valid_597154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597155: Call_SitesSyncSiteRepositorySlot_597147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597155.validator(path, query, header, formData, body)
  let scheme = call_597155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597155.url(scheme.get, call_597155.host, call_597155.base,
                         call_597155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597155, url, valid)

proc call*(call_597156: Call_SitesSyncSiteRepositorySlot_597147;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesSyncSiteRepositorySlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597157 = newJObject()
  var query_597158 = newJObject()
  add(path_597157, "resourceGroupName", newJString(resourceGroupName))
  add(query_597158, "api-version", newJString(apiVersion))
  add(path_597157, "name", newJString(name))
  add(path_597157, "slot", newJString(slot))
  add(path_597157, "subscriptionId", newJString(subscriptionId))
  result = call_597156.call(path_597157, query_597158, nil, nil, nil)

var sitesSyncSiteRepositorySlot* = Call_SitesSyncSiteRepositorySlot_597147(
    name: "sitesSyncSiteRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_SitesSyncSiteRepositorySlot_597148, base: "",
    url: url_SitesSyncSiteRepositorySlot_597149, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsagesSlot_597159 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteUsagesSlot_597161(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsagesSlot_597160(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597162 = path.getOrDefault("resourceGroupName")
  valid_597162 = validateParameter(valid_597162, JString, required = true,
                                 default = nil)
  if valid_597162 != nil:
    section.add "resourceGroupName", valid_597162
  var valid_597163 = path.getOrDefault("name")
  valid_597163 = validateParameter(valid_597163, JString, required = true,
                                 default = nil)
  if valid_597163 != nil:
    section.add "name", valid_597163
  var valid_597164 = path.getOrDefault("slot")
  valid_597164 = validateParameter(valid_597164, JString, required = true,
                                 default = nil)
  if valid_597164 != nil:
    section.add "slot", valid_597164
  var valid_597165 = path.getOrDefault("subscriptionId")
  valid_597165 = validateParameter(valid_597165, JString, required = true,
                                 default = nil)
  if valid_597165 != nil:
    section.add "subscriptionId", valid_597165
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597166 = query.getOrDefault("api-version")
  valid_597166 = validateParameter(valid_597166, JString, required = true,
                                 default = nil)
  if valid_597166 != nil:
    section.add "api-version", valid_597166
  var valid_597167 = query.getOrDefault("$filter")
  valid_597167 = validateParameter(valid_597167, JString, required = false,
                                 default = nil)
  if valid_597167 != nil:
    section.add "$filter", valid_597167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597168: Call_SitesGetSiteUsagesSlot_597159; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597168.validator(path, query, header, formData, body)
  let scheme = call_597168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597168.url(scheme.get, call_597168.host, call_597168.base,
                         call_597168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597168, url, valid)

proc call*(call_597169: Call_SitesGetSiteUsagesSlot_597159;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## sitesGetSiteUsagesSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597170 = newJObject()
  var query_597171 = newJObject()
  add(path_597170, "resourceGroupName", newJString(resourceGroupName))
  add(query_597171, "api-version", newJString(apiVersion))
  add(path_597170, "name", newJString(name))
  add(path_597170, "slot", newJString(slot))
  add(path_597170, "subscriptionId", newJString(subscriptionId))
  add(query_597171, "$filter", newJString(Filter))
  result = call_597169.call(path_597170, query_597171, nil, nil, nil)

var sitesGetSiteUsagesSlot* = Call_SitesGetSiteUsagesSlot_597159(
    name: "sitesGetSiteUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_SitesGetSiteUsagesSlot_597160, base: "",
    url: url_SitesGetSiteUsagesSlot_597161, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionsSlot_597172 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVNETConnectionsSlot_597174(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionsSlot_597173(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597175 = path.getOrDefault("resourceGroupName")
  valid_597175 = validateParameter(valid_597175, JString, required = true,
                                 default = nil)
  if valid_597175 != nil:
    section.add "resourceGroupName", valid_597175
  var valid_597176 = path.getOrDefault("name")
  valid_597176 = validateParameter(valid_597176, JString, required = true,
                                 default = nil)
  if valid_597176 != nil:
    section.add "name", valid_597176
  var valid_597177 = path.getOrDefault("slot")
  valid_597177 = validateParameter(valid_597177, JString, required = true,
                                 default = nil)
  if valid_597177 != nil:
    section.add "slot", valid_597177
  var valid_597178 = path.getOrDefault("subscriptionId")
  valid_597178 = validateParameter(valid_597178, JString, required = true,
                                 default = nil)
  if valid_597178 != nil:
    section.add "subscriptionId", valid_597178
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597179 = query.getOrDefault("api-version")
  valid_597179 = validateParameter(valid_597179, JString, required = true,
                                 default = nil)
  if valid_597179 != nil:
    section.add "api-version", valid_597179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597180: Call_SitesGetSiteVNETConnectionsSlot_597172;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597180.validator(path, query, header, formData, body)
  let scheme = call_597180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597180.url(scheme.get, call_597180.host, call_597180.base,
                         call_597180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597180, url, valid)

proc call*(call_597181: Call_SitesGetSiteVNETConnectionsSlot_597172;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnectionsSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597182 = newJObject()
  var query_597183 = newJObject()
  add(path_597182, "resourceGroupName", newJString(resourceGroupName))
  add(query_597183, "api-version", newJString(apiVersion))
  add(path_597182, "name", newJString(name))
  add(path_597182, "slot", newJString(slot))
  add(path_597182, "subscriptionId", newJString(subscriptionId))
  result = call_597181.call(path_597182, query_597183, nil, nil, nil)

var sitesGetSiteVNETConnectionsSlot* = Call_SitesGetSiteVNETConnectionsSlot_597172(
    name: "sitesGetSiteVNETConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnectionsSlot_597173, base: "",
    url: url_SitesGetSiteVNETConnectionsSlot_597174, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionSlot_597197 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteVNETConnectionSlot_597199(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionSlot_597198(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597200 = path.getOrDefault("resourceGroupName")
  valid_597200 = validateParameter(valid_597200, JString, required = true,
                                 default = nil)
  if valid_597200 != nil:
    section.add "resourceGroupName", valid_597200
  var valid_597201 = path.getOrDefault("name")
  valid_597201 = validateParameter(valid_597201, JString, required = true,
                                 default = nil)
  if valid_597201 != nil:
    section.add "name", valid_597201
  var valid_597202 = path.getOrDefault("vnetName")
  valid_597202 = validateParameter(valid_597202, JString, required = true,
                                 default = nil)
  if valid_597202 != nil:
    section.add "vnetName", valid_597202
  var valid_597203 = path.getOrDefault("slot")
  valid_597203 = validateParameter(valid_597203, JString, required = true,
                                 default = nil)
  if valid_597203 != nil:
    section.add "slot", valid_597203
  var valid_597204 = path.getOrDefault("subscriptionId")
  valid_597204 = validateParameter(valid_597204, JString, required = true,
                                 default = nil)
  if valid_597204 != nil:
    section.add "subscriptionId", valid_597204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597205 = query.getOrDefault("api-version")
  valid_597205 = validateParameter(valid_597205, JString, required = true,
                                 default = nil)
  if valid_597205 != nil:
    section.add "api-version", valid_597205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597207: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_597197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597207.validator(path, query, header, formData, body)
  let scheme = call_597207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597207.url(scheme.get, call_597207.host, call_597207.base,
                         call_597207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597207, url, valid)

proc call*(call_597208: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_597197;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597209 = newJObject()
  var query_597210 = newJObject()
  var body_597211 = newJObject()
  add(path_597209, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597211 = connectionEnvelope
  add(path_597209, "name", newJString(name))
  add(path_597209, "vnetName", newJString(vnetName))
  add(query_597210, "api-version", newJString(apiVersion))
  add(path_597209, "slot", newJString(slot))
  add(path_597209, "subscriptionId", newJString(subscriptionId))
  result = call_597208.call(path_597209, query_597210, nil, nil, body_597211)

var sitesCreateOrUpdateSiteVNETConnectionSlot* = Call_SitesCreateOrUpdateSiteVNETConnectionSlot_597197(
    name: "sitesCreateOrUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionSlot_597198,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionSlot_597199,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionSlot_597184 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVNETConnectionSlot_597186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionSlot_597185(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597187 = path.getOrDefault("resourceGroupName")
  valid_597187 = validateParameter(valid_597187, JString, required = true,
                                 default = nil)
  if valid_597187 != nil:
    section.add "resourceGroupName", valid_597187
  var valid_597188 = path.getOrDefault("name")
  valid_597188 = validateParameter(valid_597188, JString, required = true,
                                 default = nil)
  if valid_597188 != nil:
    section.add "name", valid_597188
  var valid_597189 = path.getOrDefault("vnetName")
  valid_597189 = validateParameter(valid_597189, JString, required = true,
                                 default = nil)
  if valid_597189 != nil:
    section.add "vnetName", valid_597189
  var valid_597190 = path.getOrDefault("slot")
  valid_597190 = validateParameter(valid_597190, JString, required = true,
                                 default = nil)
  if valid_597190 != nil:
    section.add "slot", valid_597190
  var valid_597191 = path.getOrDefault("subscriptionId")
  valid_597191 = validateParameter(valid_597191, JString, required = true,
                                 default = nil)
  if valid_597191 != nil:
    section.add "subscriptionId", valid_597191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597192 = query.getOrDefault("api-version")
  valid_597192 = validateParameter(valid_597192, JString, required = true,
                                 default = nil)
  if valid_597192 != nil:
    section.add "api-version", valid_597192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597193: Call_SitesGetSiteVNETConnectionSlot_597184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597193.validator(path, query, header, formData, body)
  let scheme = call_597193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597193.url(scheme.get, call_597193.host, call_597193.base,
                         call_597193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597193, url, valid)

proc call*(call_597194: Call_SitesGetSiteVNETConnectionSlot_597184;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597195 = newJObject()
  var query_597196 = newJObject()
  add(path_597195, "resourceGroupName", newJString(resourceGroupName))
  add(query_597196, "api-version", newJString(apiVersion))
  add(path_597195, "name", newJString(name))
  add(path_597195, "vnetName", newJString(vnetName))
  add(path_597195, "slot", newJString(slot))
  add(path_597195, "subscriptionId", newJString(subscriptionId))
  result = call_597194.call(path_597195, query_597196, nil, nil, nil)

var sitesGetSiteVNETConnectionSlot* = Call_SitesGetSiteVNETConnectionSlot_597184(
    name: "sitesGetSiteVNETConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnectionSlot_597185, base: "",
    url: url_SitesGetSiteVNETConnectionSlot_597186, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionSlot_597225 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteVNETConnectionSlot_597227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionSlot_597226(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597228 = path.getOrDefault("resourceGroupName")
  valid_597228 = validateParameter(valid_597228, JString, required = true,
                                 default = nil)
  if valid_597228 != nil:
    section.add "resourceGroupName", valid_597228
  var valid_597229 = path.getOrDefault("name")
  valid_597229 = validateParameter(valid_597229, JString, required = true,
                                 default = nil)
  if valid_597229 != nil:
    section.add "name", valid_597229
  var valid_597230 = path.getOrDefault("vnetName")
  valid_597230 = validateParameter(valid_597230, JString, required = true,
                                 default = nil)
  if valid_597230 != nil:
    section.add "vnetName", valid_597230
  var valid_597231 = path.getOrDefault("slot")
  valid_597231 = validateParameter(valid_597231, JString, required = true,
                                 default = nil)
  if valid_597231 != nil:
    section.add "slot", valid_597231
  var valid_597232 = path.getOrDefault("subscriptionId")
  valid_597232 = validateParameter(valid_597232, JString, required = true,
                                 default = nil)
  if valid_597232 != nil:
    section.add "subscriptionId", valid_597232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597233 = query.getOrDefault("api-version")
  valid_597233 = validateParameter(valid_597233, JString, required = true,
                                 default = nil)
  if valid_597233 != nil:
    section.add "api-version", valid_597233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597235: Call_SitesUpdateSiteVNETConnectionSlot_597225;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597235.validator(path, query, header, formData, body)
  let scheme = call_597235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597235.url(scheme.get, call_597235.host, call_597235.base,
                         call_597235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597235, url, valid)

proc call*(call_597236: Call_SitesUpdateSiteVNETConnectionSlot_597225;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597237 = newJObject()
  var query_597238 = newJObject()
  var body_597239 = newJObject()
  add(path_597237, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597239 = connectionEnvelope
  add(path_597237, "name", newJString(name))
  add(path_597237, "vnetName", newJString(vnetName))
  add(query_597238, "api-version", newJString(apiVersion))
  add(path_597237, "slot", newJString(slot))
  add(path_597237, "subscriptionId", newJString(subscriptionId))
  result = call_597236.call(path_597237, query_597238, nil, nil, body_597239)

var sitesUpdateSiteVNETConnectionSlot* = Call_SitesUpdateSiteVNETConnectionSlot_597225(
    name: "sitesUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnectionSlot_597226, base: "",
    url: url_SitesUpdateSiteVNETConnectionSlot_597227, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnectionSlot_597212 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteVNETConnectionSlot_597214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnectionSlot_597213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597215 = path.getOrDefault("resourceGroupName")
  valid_597215 = validateParameter(valid_597215, JString, required = true,
                                 default = nil)
  if valid_597215 != nil:
    section.add "resourceGroupName", valid_597215
  var valid_597216 = path.getOrDefault("name")
  valid_597216 = validateParameter(valid_597216, JString, required = true,
                                 default = nil)
  if valid_597216 != nil:
    section.add "name", valid_597216
  var valid_597217 = path.getOrDefault("vnetName")
  valid_597217 = validateParameter(valid_597217, JString, required = true,
                                 default = nil)
  if valid_597217 != nil:
    section.add "vnetName", valid_597217
  var valid_597218 = path.getOrDefault("slot")
  valid_597218 = validateParameter(valid_597218, JString, required = true,
                                 default = nil)
  if valid_597218 != nil:
    section.add "slot", valid_597218
  var valid_597219 = path.getOrDefault("subscriptionId")
  valid_597219 = validateParameter(valid_597219, JString, required = true,
                                 default = nil)
  if valid_597219 != nil:
    section.add "subscriptionId", valid_597219
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597220 = query.getOrDefault("api-version")
  valid_597220 = validateParameter(valid_597220, JString, required = true,
                                 default = nil)
  if valid_597220 != nil:
    section.add "api-version", valid_597220
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597221: Call_SitesDeleteSiteVNETConnectionSlot_597212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597221.validator(path, query, header, formData, body)
  let scheme = call_597221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597221.url(scheme.get, call_597221.host, call_597221.base,
                         call_597221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597221, url, valid)

proc call*(call_597222: Call_SitesDeleteSiteVNETConnectionSlot_597212;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## sitesDeleteSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597223 = newJObject()
  var query_597224 = newJObject()
  add(path_597223, "resourceGroupName", newJString(resourceGroupName))
  add(query_597224, "api-version", newJString(apiVersion))
  add(path_597223, "name", newJString(name))
  add(path_597223, "vnetName", newJString(vnetName))
  add(path_597223, "slot", newJString(slot))
  add(path_597223, "subscriptionId", newJString(subscriptionId))
  result = call_597222.call(path_597223, query_597224, nil, nil, nil)

var sitesDeleteSiteVNETConnectionSlot* = Call_SitesDeleteSiteVNETConnectionSlot_597212(
    name: "sitesDeleteSiteVNETConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnectionSlot_597213, base: "",
    url: url_SitesDeleteSiteVNETConnectionSlot_597214, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597254 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597256(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597255(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597257 = path.getOrDefault("resourceGroupName")
  valid_597257 = validateParameter(valid_597257, JString, required = true,
                                 default = nil)
  if valid_597257 != nil:
    section.add "resourceGroupName", valid_597257
  var valid_597258 = path.getOrDefault("name")
  valid_597258 = validateParameter(valid_597258, JString, required = true,
                                 default = nil)
  if valid_597258 != nil:
    section.add "name", valid_597258
  var valid_597259 = path.getOrDefault("vnetName")
  valid_597259 = validateParameter(valid_597259, JString, required = true,
                                 default = nil)
  if valid_597259 != nil:
    section.add "vnetName", valid_597259
  var valid_597260 = path.getOrDefault("slot")
  valid_597260 = validateParameter(valid_597260, JString, required = true,
                                 default = nil)
  if valid_597260 != nil:
    section.add "slot", valid_597260
  var valid_597261 = path.getOrDefault("gatewayName")
  valid_597261 = validateParameter(valid_597261, JString, required = true,
                                 default = nil)
  if valid_597261 != nil:
    section.add "gatewayName", valid_597261
  var valid_597262 = path.getOrDefault("subscriptionId")
  valid_597262 = validateParameter(valid_597262, JString, required = true,
                                 default = nil)
  if valid_597262 != nil:
    section.add "subscriptionId", valid_597262
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597263 = query.getOrDefault("api-version")
  valid_597263 = validateParameter(valid_597263, JString, required = true,
                                 default = nil)
  if valid_597263 != nil:
    section.add "api-version", valid_597263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597265: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597254;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597265.validator(path, query, header, formData, body)
  let scheme = call_597265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597265.url(scheme.get, call_597265.host, call_597265.base,
                         call_597265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597265, url, valid)

proc call*(call_597266: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597254;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597267 = newJObject()
  var query_597268 = newJObject()
  var body_597269 = newJObject()
  add(path_597267, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597269 = connectionEnvelope
  add(path_597267, "name", newJString(name))
  add(path_597267, "vnetName", newJString(vnetName))
  add(query_597268, "api-version", newJString(apiVersion))
  add(path_597267, "slot", newJString(slot))
  add(path_597267, "gatewayName", newJString(gatewayName))
  add(path_597267, "subscriptionId", newJString(subscriptionId))
  result = call_597266.call(path_597267, query_597268, nil, nil, body_597269)

var sitesCreateOrUpdateSiteVNETConnectionGatewaySlot* = Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597254(
    name: "sitesCreateOrUpdateSiteVNETConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597255,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_597256,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGatewaySlot_597240 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVnetGatewaySlot_597242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGatewaySlot_597241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597243 = path.getOrDefault("resourceGroupName")
  valid_597243 = validateParameter(valid_597243, JString, required = true,
                                 default = nil)
  if valid_597243 != nil:
    section.add "resourceGroupName", valid_597243
  var valid_597244 = path.getOrDefault("name")
  valid_597244 = validateParameter(valid_597244, JString, required = true,
                                 default = nil)
  if valid_597244 != nil:
    section.add "name", valid_597244
  var valid_597245 = path.getOrDefault("vnetName")
  valid_597245 = validateParameter(valid_597245, JString, required = true,
                                 default = nil)
  if valid_597245 != nil:
    section.add "vnetName", valid_597245
  var valid_597246 = path.getOrDefault("slot")
  valid_597246 = validateParameter(valid_597246, JString, required = true,
                                 default = nil)
  if valid_597246 != nil:
    section.add "slot", valid_597246
  var valid_597247 = path.getOrDefault("gatewayName")
  valid_597247 = validateParameter(valid_597247, JString, required = true,
                                 default = nil)
  if valid_597247 != nil:
    section.add "gatewayName", valid_597247
  var valid_597248 = path.getOrDefault("subscriptionId")
  valid_597248 = validateParameter(valid_597248, JString, required = true,
                                 default = nil)
  if valid_597248 != nil:
    section.add "subscriptionId", valid_597248
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597249 = query.getOrDefault("api-version")
  valid_597249 = validateParameter(valid_597249, JString, required = true,
                                 default = nil)
  if valid_597249 != nil:
    section.add "api-version", valid_597249
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597250: Call_SitesGetSiteVnetGatewaySlot_597240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597250.validator(path, query, header, formData, body)
  let scheme = call_597250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597250.url(scheme.get, call_597250.host, call_597250.base,
                         call_597250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597250, url, valid)

proc call*(call_597251: Call_SitesGetSiteVnetGatewaySlot_597240;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVnetGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597252 = newJObject()
  var query_597253 = newJObject()
  add(path_597252, "resourceGroupName", newJString(resourceGroupName))
  add(query_597253, "api-version", newJString(apiVersion))
  add(path_597252, "name", newJString(name))
  add(path_597252, "vnetName", newJString(vnetName))
  add(path_597252, "slot", newJString(slot))
  add(path_597252, "gatewayName", newJString(gatewayName))
  add(path_597252, "subscriptionId", newJString(subscriptionId))
  result = call_597251.call(path_597252, query_597253, nil, nil, nil)

var sitesGetSiteVnetGatewaySlot* = Call_SitesGetSiteVnetGatewaySlot_597240(
    name: "sitesGetSiteVnetGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGatewaySlot_597241, base: "",
    url: url_SitesGetSiteVnetGatewaySlot_597242, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGatewaySlot_597270 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteVNETConnectionGatewaySlot_597272(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGatewaySlot_597271(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597273 = path.getOrDefault("resourceGroupName")
  valid_597273 = validateParameter(valid_597273, JString, required = true,
                                 default = nil)
  if valid_597273 != nil:
    section.add "resourceGroupName", valid_597273
  var valid_597274 = path.getOrDefault("name")
  valid_597274 = validateParameter(valid_597274, JString, required = true,
                                 default = nil)
  if valid_597274 != nil:
    section.add "name", valid_597274
  var valid_597275 = path.getOrDefault("vnetName")
  valid_597275 = validateParameter(valid_597275, JString, required = true,
                                 default = nil)
  if valid_597275 != nil:
    section.add "vnetName", valid_597275
  var valid_597276 = path.getOrDefault("slot")
  valid_597276 = validateParameter(valid_597276, JString, required = true,
                                 default = nil)
  if valid_597276 != nil:
    section.add "slot", valid_597276
  var valid_597277 = path.getOrDefault("gatewayName")
  valid_597277 = validateParameter(valid_597277, JString, required = true,
                                 default = nil)
  if valid_597277 != nil:
    section.add "gatewayName", valid_597277
  var valid_597278 = path.getOrDefault("subscriptionId")
  valid_597278 = validateParameter(valid_597278, JString, required = true,
                                 default = nil)
  if valid_597278 != nil:
    section.add "subscriptionId", valid_597278
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597279 = query.getOrDefault("api-version")
  valid_597279 = validateParameter(valid_597279, JString, required = true,
                                 default = nil)
  if valid_597279 != nil:
    section.add "api-version", valid_597279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597281: Call_SitesUpdateSiteVNETConnectionGatewaySlot_597270;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597281.validator(path, query, header, formData, body)
  let scheme = call_597281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597281.url(scheme.get, call_597281.host, call_597281.base,
                         call_597281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597281, url, valid)

proc call*(call_597282: Call_SitesUpdateSiteVNETConnectionGatewaySlot_597270;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597283 = newJObject()
  var query_597284 = newJObject()
  var body_597285 = newJObject()
  add(path_597283, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597285 = connectionEnvelope
  add(path_597283, "name", newJString(name))
  add(path_597283, "vnetName", newJString(vnetName))
  add(query_597284, "api-version", newJString(apiVersion))
  add(path_597283, "slot", newJString(slot))
  add(path_597283, "gatewayName", newJString(gatewayName))
  add(path_597283, "subscriptionId", newJString(subscriptionId))
  result = call_597282.call(path_597283, query_597284, nil, nil, body_597285)

var sitesUpdateSiteVNETConnectionGatewaySlot* = Call_SitesUpdateSiteVNETConnectionGatewaySlot_597270(
    name: "sitesUpdateSiteVNETConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGatewaySlot_597271, base: "",
    url: url_SitesUpdateSiteVNETConnectionGatewaySlot_597272,
    schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesFromProduction_597286 = ref object of OpenApiRestCall_593421
proc url_SitesGetSlotsDifferencesFromProduction_597288(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesFromProduction_597287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597289 = path.getOrDefault("resourceGroupName")
  valid_597289 = validateParameter(valid_597289, JString, required = true,
                                 default = nil)
  if valid_597289 != nil:
    section.add "resourceGroupName", valid_597289
  var valid_597290 = path.getOrDefault("name")
  valid_597290 = validateParameter(valid_597290, JString, required = true,
                                 default = nil)
  if valid_597290 != nil:
    section.add "name", valid_597290
  var valid_597291 = path.getOrDefault("subscriptionId")
  valid_597291 = validateParameter(valid_597291, JString, required = true,
                                 default = nil)
  if valid_597291 != nil:
    section.add "subscriptionId", valid_597291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597292 = query.getOrDefault("api-version")
  valid_597292 = validateParameter(valid_597292, JString, required = true,
                                 default = nil)
  if valid_597292 != nil:
    section.add "api-version", valid_597292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597294: Call_SitesGetSlotsDifferencesFromProduction_597286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597294.validator(path, query, header, formData, body)
  let scheme = call_597294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597294.url(scheme.get, call_597294.host, call_597294.base,
                         call_597294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597294, url, valid)

proc call*(call_597295: Call_SitesGetSlotsDifferencesFromProduction_597286;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesGetSlotsDifferencesFromProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_597296 = newJObject()
  var query_597297 = newJObject()
  var body_597298 = newJObject()
  add(path_597296, "resourceGroupName", newJString(resourceGroupName))
  add(query_597297, "api-version", newJString(apiVersion))
  add(path_597296, "name", newJString(name))
  add(path_597296, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597298 = slotSwapEntity
  result = call_597295.call(path_597296, query_597297, nil, nil, body_597298)

var sitesGetSlotsDifferencesFromProduction* = Call_SitesGetSlotsDifferencesFromProduction_597286(
    name: "sitesGetSlotsDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesFromProduction_597287, base: "",
    url: url_SitesGetSlotsDifferencesFromProduction_597288,
    schemes: {Scheme.Https})
type
  Call_SitesSwapSlotWithProduction_597299 = ref object of OpenApiRestCall_593421
proc url_SitesSwapSlotWithProduction_597301(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotWithProduction_597300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597302 = path.getOrDefault("resourceGroupName")
  valid_597302 = validateParameter(valid_597302, JString, required = true,
                                 default = nil)
  if valid_597302 != nil:
    section.add "resourceGroupName", valid_597302
  var valid_597303 = path.getOrDefault("name")
  valid_597303 = validateParameter(valid_597303, JString, required = true,
                                 default = nil)
  if valid_597303 != nil:
    section.add "name", valid_597303
  var valid_597304 = path.getOrDefault("subscriptionId")
  valid_597304 = validateParameter(valid_597304, JString, required = true,
                                 default = nil)
  if valid_597304 != nil:
    section.add "subscriptionId", valid_597304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597305 = query.getOrDefault("api-version")
  valid_597305 = validateParameter(valid_597305, JString, required = true,
                                 default = nil)
  if valid_597305 != nil:
    section.add "api-version", valid_597305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597307: Call_SitesSwapSlotWithProduction_597299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597307.validator(path, query, header, formData, body)
  let scheme = call_597307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597307.url(scheme.get, call_597307.host, call_597307.base,
                         call_597307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597307, url, valid)

proc call*(call_597308: Call_SitesSwapSlotWithProduction_597299;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesSwapSlotWithProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_597309 = newJObject()
  var query_597310 = newJObject()
  var body_597311 = newJObject()
  add(path_597309, "resourceGroupName", newJString(resourceGroupName))
  add(query_597310, "api-version", newJString(apiVersion))
  add(path_597309, "name", newJString(name))
  add(path_597309, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597311 = slotSwapEntity
  result = call_597308.call(path_597309, query_597310, nil, nil, body_597311)

var sitesSwapSlotWithProduction* = Call_SitesSwapSlotWithProduction_597299(
    name: "sitesSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_SitesSwapSlotWithProduction_597300, base: "",
    url: url_SitesSwapSlotWithProduction_597301, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshots_597312 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSnapshots_597314(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshots_597313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  ##   name: JString (required)
  ##       : Website Name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597315 = path.getOrDefault("resourceGroupName")
  valid_597315 = validateParameter(valid_597315, JString, required = true,
                                 default = nil)
  if valid_597315 != nil:
    section.add "resourceGroupName", valid_597315
  var valid_597316 = path.getOrDefault("name")
  valid_597316 = validateParameter(valid_597316, JString, required = true,
                                 default = nil)
  if valid_597316 != nil:
    section.add "name", valid_597316
  var valid_597317 = path.getOrDefault("subscriptionId")
  valid_597317 = validateParameter(valid_597317, JString, required = true,
                                 default = nil)
  if valid_597317 != nil:
    section.add "subscriptionId", valid_597317
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597318 = query.getOrDefault("api-version")
  valid_597318 = validateParameter(valid_597318, JString, required = true,
                                 default = nil)
  if valid_597318 != nil:
    section.add "api-version", valid_597318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597319: Call_SitesGetSiteSnapshots_597312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597319.validator(path, query, header, formData, body)
  let scheme = call_597319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597319.url(scheme.get, call_597319.host, call_597319.base,
                         call_597319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597319, url, valid)

proc call*(call_597320: Call_SitesGetSiteSnapshots_597312;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSnapshots
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597321 = newJObject()
  var query_597322 = newJObject()
  add(path_597321, "resourceGroupName", newJString(resourceGroupName))
  add(query_597322, "api-version", newJString(apiVersion))
  add(path_597321, "name", newJString(name))
  add(path_597321, "subscriptionId", newJString(subscriptionId))
  result = call_597320.call(path_597321, query_597322, nil, nil, nil)

var sitesGetSiteSnapshots* = Call_SitesGetSiteSnapshots_597312(
    name: "sitesGetSiteSnapshots", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_SitesGetSiteSnapshots_597313, base: "",
    url: url_SitesGetSiteSnapshots_597314, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControl_597334 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteSourceControl_597336(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControl_597335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597337 = path.getOrDefault("resourceGroupName")
  valid_597337 = validateParameter(valid_597337, JString, required = true,
                                 default = nil)
  if valid_597337 != nil:
    section.add "resourceGroupName", valid_597337
  var valid_597338 = path.getOrDefault("name")
  valid_597338 = validateParameter(valid_597338, JString, required = true,
                                 default = nil)
  if valid_597338 != nil:
    section.add "name", valid_597338
  var valid_597339 = path.getOrDefault("subscriptionId")
  valid_597339 = validateParameter(valid_597339, JString, required = true,
                                 default = nil)
  if valid_597339 != nil:
    section.add "subscriptionId", valid_597339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597340 = query.getOrDefault("api-version")
  valid_597340 = validateParameter(valid_597340, JString, required = true,
                                 default = nil)
  if valid_597340 != nil:
    section.add "api-version", valid_597340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597342: Call_SitesCreateOrUpdateSiteSourceControl_597334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597342.validator(path, query, header, formData, body)
  let scheme = call_597342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597342.url(scheme.get, call_597342.host, call_597342.base,
                         call_597342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597342, url, valid)

proc call*(call_597343: Call_SitesCreateOrUpdateSiteSourceControl_597334;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_597344 = newJObject()
  var query_597345 = newJObject()
  var body_597346 = newJObject()
  add(path_597344, "resourceGroupName", newJString(resourceGroupName))
  add(query_597345, "api-version", newJString(apiVersion))
  add(path_597344, "name", newJString(name))
  add(path_597344, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597346 = siteSourceControl
  result = call_597343.call(path_597344, query_597345, nil, nil, body_597346)

var sitesCreateOrUpdateSiteSourceControl* = Call_SitesCreateOrUpdateSiteSourceControl_597334(
    name: "sitesCreateOrUpdateSiteSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControl_597335, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControl_597336, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControl_597323 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteSourceControl_597325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControl_597324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597326 = path.getOrDefault("resourceGroupName")
  valid_597326 = validateParameter(valid_597326, JString, required = true,
                                 default = nil)
  if valid_597326 != nil:
    section.add "resourceGroupName", valid_597326
  var valid_597327 = path.getOrDefault("name")
  valid_597327 = validateParameter(valid_597327, JString, required = true,
                                 default = nil)
  if valid_597327 != nil:
    section.add "name", valid_597327
  var valid_597328 = path.getOrDefault("subscriptionId")
  valid_597328 = validateParameter(valid_597328, JString, required = true,
                                 default = nil)
  if valid_597328 != nil:
    section.add "subscriptionId", valid_597328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597329 = query.getOrDefault("api-version")
  valid_597329 = validateParameter(valid_597329, JString, required = true,
                                 default = nil)
  if valid_597329 != nil:
    section.add "api-version", valid_597329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597330: Call_SitesGetSiteSourceControl_597323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597330.validator(path, query, header, formData, body)
  let scheme = call_597330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597330.url(scheme.get, call_597330.host, call_597330.base,
                         call_597330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597330, url, valid)

proc call*(call_597331: Call_SitesGetSiteSourceControl_597323;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597332 = newJObject()
  var query_597333 = newJObject()
  add(path_597332, "resourceGroupName", newJString(resourceGroupName))
  add(query_597333, "api-version", newJString(apiVersion))
  add(path_597332, "name", newJString(name))
  add(path_597332, "subscriptionId", newJString(subscriptionId))
  result = call_597331.call(path_597332, query_597333, nil, nil, nil)

var sitesGetSiteSourceControl* = Call_SitesGetSiteSourceControl_597323(
    name: "sitesGetSiteSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControl_597324, base: "",
    url: url_SitesGetSiteSourceControl_597325, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControl_597358 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteSourceControl_597360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControl_597359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597361 = path.getOrDefault("resourceGroupName")
  valid_597361 = validateParameter(valid_597361, JString, required = true,
                                 default = nil)
  if valid_597361 != nil:
    section.add "resourceGroupName", valid_597361
  var valid_597362 = path.getOrDefault("name")
  valid_597362 = validateParameter(valid_597362, JString, required = true,
                                 default = nil)
  if valid_597362 != nil:
    section.add "name", valid_597362
  var valid_597363 = path.getOrDefault("subscriptionId")
  valid_597363 = validateParameter(valid_597363, JString, required = true,
                                 default = nil)
  if valid_597363 != nil:
    section.add "subscriptionId", valid_597363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597364 = query.getOrDefault("api-version")
  valid_597364 = validateParameter(valid_597364, JString, required = true,
                                 default = nil)
  if valid_597364 != nil:
    section.add "api-version", valid_597364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597366: Call_SitesUpdateSiteSourceControl_597358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597366.validator(path, query, header, formData, body)
  let scheme = call_597366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597366.url(scheme.get, call_597366.host, call_597366.base,
                         call_597366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597366, url, valid)

proc call*(call_597367: Call_SitesUpdateSiteSourceControl_597358;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesUpdateSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_597368 = newJObject()
  var query_597369 = newJObject()
  var body_597370 = newJObject()
  add(path_597368, "resourceGroupName", newJString(resourceGroupName))
  add(query_597369, "api-version", newJString(apiVersion))
  add(path_597368, "name", newJString(name))
  add(path_597368, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597370 = siteSourceControl
  result = call_597367.call(path_597368, query_597369, nil, nil, body_597370)

var sitesUpdateSiteSourceControl* = Call_SitesUpdateSiteSourceControl_597358(
    name: "sitesUpdateSiteSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControl_597359, base: "",
    url: url_SitesUpdateSiteSourceControl_597360, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControl_597347 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteSourceControl_597349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControl_597348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597350 = path.getOrDefault("resourceGroupName")
  valid_597350 = validateParameter(valid_597350, JString, required = true,
                                 default = nil)
  if valid_597350 != nil:
    section.add "resourceGroupName", valid_597350
  var valid_597351 = path.getOrDefault("name")
  valid_597351 = validateParameter(valid_597351, JString, required = true,
                                 default = nil)
  if valid_597351 != nil:
    section.add "name", valid_597351
  var valid_597352 = path.getOrDefault("subscriptionId")
  valid_597352 = validateParameter(valid_597352, JString, required = true,
                                 default = nil)
  if valid_597352 != nil:
    section.add "subscriptionId", valid_597352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597353 = query.getOrDefault("api-version")
  valid_597353 = validateParameter(valid_597353, JString, required = true,
                                 default = nil)
  if valid_597353 != nil:
    section.add "api-version", valid_597353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597354: Call_SitesDeleteSiteSourceControl_597347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597354.validator(path, query, header, formData, body)
  let scheme = call_597354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597354.url(scheme.get, call_597354.host, call_597354.base,
                         call_597354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597354, url, valid)

proc call*(call_597355: Call_SitesDeleteSiteSourceControl_597347;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesDeleteSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597356 = newJObject()
  var query_597357 = newJObject()
  add(path_597356, "resourceGroupName", newJString(resourceGroupName))
  add(query_597357, "api-version", newJString(apiVersion))
  add(path_597356, "name", newJString(name))
  add(path_597356, "subscriptionId", newJString(subscriptionId))
  result = call_597355.call(path_597356, query_597357, nil, nil, nil)

var sitesDeleteSiteSourceControl* = Call_SitesDeleteSiteSourceControl_597347(
    name: "sitesDeleteSiteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControl_597348, base: "",
    url: url_SitesDeleteSiteSourceControl_597349, schemes: {Scheme.Https})
type
  Call_SitesStartSite_597371 = ref object of OpenApiRestCall_593421
proc url_SitesStartSite_597373(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSite_597372(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597374 = path.getOrDefault("resourceGroupName")
  valid_597374 = validateParameter(valid_597374, JString, required = true,
                                 default = nil)
  if valid_597374 != nil:
    section.add "resourceGroupName", valid_597374
  var valid_597375 = path.getOrDefault("name")
  valid_597375 = validateParameter(valid_597375, JString, required = true,
                                 default = nil)
  if valid_597375 != nil:
    section.add "name", valid_597375
  var valid_597376 = path.getOrDefault("subscriptionId")
  valid_597376 = validateParameter(valid_597376, JString, required = true,
                                 default = nil)
  if valid_597376 != nil:
    section.add "subscriptionId", valid_597376
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597377 = query.getOrDefault("api-version")
  valid_597377 = validateParameter(valid_597377, JString, required = true,
                                 default = nil)
  if valid_597377 != nil:
    section.add "api-version", valid_597377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597378: Call_SitesStartSite_597371; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597378.validator(path, query, header, formData, body)
  let scheme = call_597378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597378.url(scheme.get, call_597378.host, call_597378.base,
                         call_597378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597378, url, valid)

proc call*(call_597379: Call_SitesStartSite_597371; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesStartSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597380 = newJObject()
  var query_597381 = newJObject()
  add(path_597380, "resourceGroupName", newJString(resourceGroupName))
  add(query_597381, "api-version", newJString(apiVersion))
  add(path_597380, "name", newJString(name))
  add(path_597380, "subscriptionId", newJString(subscriptionId))
  result = call_597379.call(path_597380, query_597381, nil, nil, nil)

var sitesStartSite* = Call_SitesStartSite_597371(name: "sitesStartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_SitesStartSite_597372, base: "", url: url_SitesStartSite_597373,
    schemes: {Scheme.Https})
type
  Call_SitesStopSite_597382 = ref object of OpenApiRestCall_593421
proc url_SitesStopSite_597384(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSite_597383(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597385 = path.getOrDefault("resourceGroupName")
  valid_597385 = validateParameter(valid_597385, JString, required = true,
                                 default = nil)
  if valid_597385 != nil:
    section.add "resourceGroupName", valid_597385
  var valid_597386 = path.getOrDefault("name")
  valid_597386 = validateParameter(valid_597386, JString, required = true,
                                 default = nil)
  if valid_597386 != nil:
    section.add "name", valid_597386
  var valid_597387 = path.getOrDefault("subscriptionId")
  valid_597387 = validateParameter(valid_597387, JString, required = true,
                                 default = nil)
  if valid_597387 != nil:
    section.add "subscriptionId", valid_597387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597388 = query.getOrDefault("api-version")
  valid_597388 = validateParameter(valid_597388, JString, required = true,
                                 default = nil)
  if valid_597388 != nil:
    section.add "api-version", valid_597388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597389: Call_SitesStopSite_597382; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597389.validator(path, query, header, formData, body)
  let scheme = call_597389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597389.url(scheme.get, call_597389.host, call_597389.base,
                         call_597389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597389, url, valid)

proc call*(call_597390: Call_SitesStopSite_597382; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesStopSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597391 = newJObject()
  var query_597392 = newJObject()
  add(path_597391, "resourceGroupName", newJString(resourceGroupName))
  add(query_597392, "api-version", newJString(apiVersion))
  add(path_597391, "name", newJString(name))
  add(path_597391, "subscriptionId", newJString(subscriptionId))
  result = call_597390.call(path_597391, query_597392, nil, nil, nil)

var sitesStopSite* = Call_SitesStopSite_597382(name: "sitesStopSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
    validator: validate_SitesStopSite_597383, base: "", url: url_SitesStopSite_597384,
    schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepository_597393 = ref object of OpenApiRestCall_593421
proc url_SitesSyncSiteRepository_597395(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepository_597394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597396 = path.getOrDefault("resourceGroupName")
  valid_597396 = validateParameter(valid_597396, JString, required = true,
                                 default = nil)
  if valid_597396 != nil:
    section.add "resourceGroupName", valid_597396
  var valid_597397 = path.getOrDefault("name")
  valid_597397 = validateParameter(valid_597397, JString, required = true,
                                 default = nil)
  if valid_597397 != nil:
    section.add "name", valid_597397
  var valid_597398 = path.getOrDefault("subscriptionId")
  valid_597398 = validateParameter(valid_597398, JString, required = true,
                                 default = nil)
  if valid_597398 != nil:
    section.add "subscriptionId", valid_597398
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597399 = query.getOrDefault("api-version")
  valid_597399 = validateParameter(valid_597399, JString, required = true,
                                 default = nil)
  if valid_597399 != nil:
    section.add "api-version", valid_597399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597400: Call_SitesSyncSiteRepository_597393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597400.validator(path, query, header, formData, body)
  let scheme = call_597400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597400.url(scheme.get, call_597400.host, call_597400.base,
                         call_597400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597400, url, valid)

proc call*(call_597401: Call_SitesSyncSiteRepository_597393;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesSyncSiteRepository
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597402 = newJObject()
  var query_597403 = newJObject()
  add(path_597402, "resourceGroupName", newJString(resourceGroupName))
  add(query_597403, "api-version", newJString(apiVersion))
  add(path_597402, "name", newJString(name))
  add(path_597402, "subscriptionId", newJString(subscriptionId))
  result = call_597401.call(path_597402, query_597403, nil, nil, nil)

var sitesSyncSiteRepository* = Call_SitesSyncSiteRepository_597393(
    name: "sitesSyncSiteRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_SitesSyncSiteRepository_597394, base: "",
    url: url_SitesSyncSiteRepository_597395, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsages_597404 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteUsages_597406(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsages_597405(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597407 = path.getOrDefault("resourceGroupName")
  valid_597407 = validateParameter(valid_597407, JString, required = true,
                                 default = nil)
  if valid_597407 != nil:
    section.add "resourceGroupName", valid_597407
  var valid_597408 = path.getOrDefault("name")
  valid_597408 = validateParameter(valid_597408, JString, required = true,
                                 default = nil)
  if valid_597408 != nil:
    section.add "name", valid_597408
  var valid_597409 = path.getOrDefault("subscriptionId")
  valid_597409 = validateParameter(valid_597409, JString, required = true,
                                 default = nil)
  if valid_597409 != nil:
    section.add "subscriptionId", valid_597409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597410 = query.getOrDefault("api-version")
  valid_597410 = validateParameter(valid_597410, JString, required = true,
                                 default = nil)
  if valid_597410 != nil:
    section.add "api-version", valid_597410
  var valid_597411 = query.getOrDefault("$filter")
  valid_597411 = validateParameter(valid_597411, JString, required = false,
                                 default = nil)
  if valid_597411 != nil:
    section.add "$filter", valid_597411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597412: Call_SitesGetSiteUsages_597404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597412.validator(path, query, header, formData, body)
  let scheme = call_597412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597412.url(scheme.get, call_597412.host, call_597412.base,
                         call_597412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597412, url, valid)

proc call*(call_597413: Call_SitesGetSiteUsages_597404; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## sitesGetSiteUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597414 = newJObject()
  var query_597415 = newJObject()
  add(path_597414, "resourceGroupName", newJString(resourceGroupName))
  add(query_597415, "api-version", newJString(apiVersion))
  add(path_597414, "name", newJString(name))
  add(path_597414, "subscriptionId", newJString(subscriptionId))
  add(query_597415, "$filter", newJString(Filter))
  result = call_597413.call(path_597414, query_597415, nil, nil, nil)

var sitesGetSiteUsages* = Call_SitesGetSiteUsages_597404(
    name: "sitesGetSiteUsages", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_SitesGetSiteUsages_597405, base: "",
    url: url_SitesGetSiteUsages_597406, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnections_597416 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVNETConnections_597418(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnections_597417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597419 = path.getOrDefault("resourceGroupName")
  valid_597419 = validateParameter(valid_597419, JString, required = true,
                                 default = nil)
  if valid_597419 != nil:
    section.add "resourceGroupName", valid_597419
  var valid_597420 = path.getOrDefault("name")
  valid_597420 = validateParameter(valid_597420, JString, required = true,
                                 default = nil)
  if valid_597420 != nil:
    section.add "name", valid_597420
  var valid_597421 = path.getOrDefault("subscriptionId")
  valid_597421 = validateParameter(valid_597421, JString, required = true,
                                 default = nil)
  if valid_597421 != nil:
    section.add "subscriptionId", valid_597421
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597422 = query.getOrDefault("api-version")
  valid_597422 = validateParameter(valid_597422, JString, required = true,
                                 default = nil)
  if valid_597422 != nil:
    section.add "api-version", valid_597422
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597423: Call_SitesGetSiteVNETConnections_597416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597423.validator(path, query, header, formData, body)
  let scheme = call_597423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597423.url(scheme.get, call_597423.host, call_597423.base,
                         call_597423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597423, url, valid)

proc call*(call_597424: Call_SitesGetSiteVNETConnections_597416;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnections
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597425 = newJObject()
  var query_597426 = newJObject()
  add(path_597425, "resourceGroupName", newJString(resourceGroupName))
  add(query_597426, "api-version", newJString(apiVersion))
  add(path_597425, "name", newJString(name))
  add(path_597425, "subscriptionId", newJString(subscriptionId))
  result = call_597424.call(path_597425, query_597426, nil, nil, nil)

var sitesGetSiteVNETConnections* = Call_SitesGetSiteVNETConnections_597416(
    name: "sitesGetSiteVNETConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnections_597417, base: "",
    url: url_SitesGetSiteVNETConnections_597418, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnection_597439 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteVNETConnection_597441(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnection_597440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597442 = path.getOrDefault("resourceGroupName")
  valid_597442 = validateParameter(valid_597442, JString, required = true,
                                 default = nil)
  if valid_597442 != nil:
    section.add "resourceGroupName", valid_597442
  var valid_597443 = path.getOrDefault("name")
  valid_597443 = validateParameter(valid_597443, JString, required = true,
                                 default = nil)
  if valid_597443 != nil:
    section.add "name", valid_597443
  var valid_597444 = path.getOrDefault("vnetName")
  valid_597444 = validateParameter(valid_597444, JString, required = true,
                                 default = nil)
  if valid_597444 != nil:
    section.add "vnetName", valid_597444
  var valid_597445 = path.getOrDefault("subscriptionId")
  valid_597445 = validateParameter(valid_597445, JString, required = true,
                                 default = nil)
  if valid_597445 != nil:
    section.add "subscriptionId", valid_597445
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597446 = query.getOrDefault("api-version")
  valid_597446 = validateParameter(valid_597446, JString, required = true,
                                 default = nil)
  if valid_597446 != nil:
    section.add "api-version", valid_597446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597448: Call_SitesCreateOrUpdateSiteVNETConnection_597439;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597448.validator(path, query, header, formData, body)
  let scheme = call_597448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597448.url(scheme.get, call_597448.host, call_597448.base,
                         call_597448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597448, url, valid)

proc call*(call_597449: Call_SitesCreateOrUpdateSiteVNETConnection_597439;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597450 = newJObject()
  var query_597451 = newJObject()
  var body_597452 = newJObject()
  add(path_597450, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597452 = connectionEnvelope
  add(path_597450, "name", newJString(name))
  add(path_597450, "vnetName", newJString(vnetName))
  add(query_597451, "api-version", newJString(apiVersion))
  add(path_597450, "subscriptionId", newJString(subscriptionId))
  result = call_597449.call(path_597450, query_597451, nil, nil, body_597452)

var sitesCreateOrUpdateSiteVNETConnection* = Call_SitesCreateOrUpdateSiteVNETConnection_597439(
    name: "sitesCreateOrUpdateSiteVNETConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnection_597440, base: "",
    url: url_SitesCreateOrUpdateSiteVNETConnection_597441, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnection_597427 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVNETConnection_597429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnection_597428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597430 = path.getOrDefault("resourceGroupName")
  valid_597430 = validateParameter(valid_597430, JString, required = true,
                                 default = nil)
  if valid_597430 != nil:
    section.add "resourceGroupName", valid_597430
  var valid_597431 = path.getOrDefault("name")
  valid_597431 = validateParameter(valid_597431, JString, required = true,
                                 default = nil)
  if valid_597431 != nil:
    section.add "name", valid_597431
  var valid_597432 = path.getOrDefault("vnetName")
  valid_597432 = validateParameter(valid_597432, JString, required = true,
                                 default = nil)
  if valid_597432 != nil:
    section.add "vnetName", valid_597432
  var valid_597433 = path.getOrDefault("subscriptionId")
  valid_597433 = validateParameter(valid_597433, JString, required = true,
                                 default = nil)
  if valid_597433 != nil:
    section.add "subscriptionId", valid_597433
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597434 = query.getOrDefault("api-version")
  valid_597434 = validateParameter(valid_597434, JString, required = true,
                                 default = nil)
  if valid_597434 != nil:
    section.add "api-version", valid_597434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597435: Call_SitesGetSiteVNETConnection_597427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597435.validator(path, query, header, formData, body)
  let scheme = call_597435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597435.url(scheme.get, call_597435.host, call_597435.base,
                         call_597435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597435, url, valid)

proc call*(call_597436: Call_SitesGetSiteVNETConnection_597427;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597437 = newJObject()
  var query_597438 = newJObject()
  add(path_597437, "resourceGroupName", newJString(resourceGroupName))
  add(query_597438, "api-version", newJString(apiVersion))
  add(path_597437, "name", newJString(name))
  add(path_597437, "vnetName", newJString(vnetName))
  add(path_597437, "subscriptionId", newJString(subscriptionId))
  result = call_597436.call(path_597437, query_597438, nil, nil, nil)

var sitesGetSiteVNETConnection* = Call_SitesGetSiteVNETConnection_597427(
    name: "sitesGetSiteVNETConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnection_597428, base: "",
    url: url_SitesGetSiteVNETConnection_597429, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnection_597465 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteVNETConnection_597467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnection_597466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597468 = path.getOrDefault("resourceGroupName")
  valid_597468 = validateParameter(valid_597468, JString, required = true,
                                 default = nil)
  if valid_597468 != nil:
    section.add "resourceGroupName", valid_597468
  var valid_597469 = path.getOrDefault("name")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = nil)
  if valid_597469 != nil:
    section.add "name", valid_597469
  var valid_597470 = path.getOrDefault("vnetName")
  valid_597470 = validateParameter(valid_597470, JString, required = true,
                                 default = nil)
  if valid_597470 != nil:
    section.add "vnetName", valid_597470
  var valid_597471 = path.getOrDefault("subscriptionId")
  valid_597471 = validateParameter(valid_597471, JString, required = true,
                                 default = nil)
  if valid_597471 != nil:
    section.add "subscriptionId", valid_597471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597472 = query.getOrDefault("api-version")
  valid_597472 = validateParameter(valid_597472, JString, required = true,
                                 default = nil)
  if valid_597472 != nil:
    section.add "api-version", valid_597472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597474: Call_SitesUpdateSiteVNETConnection_597465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597474.validator(path, query, header, formData, body)
  let scheme = call_597474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597474.url(scheme.get, call_597474.host, call_597474.base,
                         call_597474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597474, url, valid)

proc call*(call_597475: Call_SitesUpdateSiteVNETConnection_597465;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597476 = newJObject()
  var query_597477 = newJObject()
  var body_597478 = newJObject()
  add(path_597476, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597478 = connectionEnvelope
  add(path_597476, "name", newJString(name))
  add(path_597476, "vnetName", newJString(vnetName))
  add(query_597477, "api-version", newJString(apiVersion))
  add(path_597476, "subscriptionId", newJString(subscriptionId))
  result = call_597475.call(path_597476, query_597477, nil, nil, body_597478)

var sitesUpdateSiteVNETConnection* = Call_SitesUpdateSiteVNETConnection_597465(
    name: "sitesUpdateSiteVNETConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnection_597466, base: "",
    url: url_SitesUpdateSiteVNETConnection_597467, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnection_597453 = ref object of OpenApiRestCall_593421
proc url_SitesDeleteSiteVNETConnection_597455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnection_597454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597456 = path.getOrDefault("resourceGroupName")
  valid_597456 = validateParameter(valid_597456, JString, required = true,
                                 default = nil)
  if valid_597456 != nil:
    section.add "resourceGroupName", valid_597456
  var valid_597457 = path.getOrDefault("name")
  valid_597457 = validateParameter(valid_597457, JString, required = true,
                                 default = nil)
  if valid_597457 != nil:
    section.add "name", valid_597457
  var valid_597458 = path.getOrDefault("vnetName")
  valid_597458 = validateParameter(valid_597458, JString, required = true,
                                 default = nil)
  if valid_597458 != nil:
    section.add "vnetName", valid_597458
  var valid_597459 = path.getOrDefault("subscriptionId")
  valid_597459 = validateParameter(valid_597459, JString, required = true,
                                 default = nil)
  if valid_597459 != nil:
    section.add "subscriptionId", valid_597459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597460 = query.getOrDefault("api-version")
  valid_597460 = validateParameter(valid_597460, JString, required = true,
                                 default = nil)
  if valid_597460 != nil:
    section.add "api-version", valid_597460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597461: Call_SitesDeleteSiteVNETConnection_597453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597461.validator(path, query, header, formData, body)
  let scheme = call_597461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597461.url(scheme.get, call_597461.host, call_597461.base,
                         call_597461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597461, url, valid)

proc call*(call_597462: Call_SitesDeleteSiteVNETConnection_597453;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## sitesDeleteSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597463 = newJObject()
  var query_597464 = newJObject()
  add(path_597463, "resourceGroupName", newJString(resourceGroupName))
  add(query_597464, "api-version", newJString(apiVersion))
  add(path_597463, "name", newJString(name))
  add(path_597463, "vnetName", newJString(vnetName))
  add(path_597463, "subscriptionId", newJString(subscriptionId))
  result = call_597462.call(path_597463, query_597464, nil, nil, nil)

var sitesDeleteSiteVNETConnection* = Call_SitesDeleteSiteVNETConnection_597453(
    name: "sitesDeleteSiteVNETConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnection_597454, base: "",
    url: url_SitesDeleteSiteVNETConnection_597455, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGateway_597492 = ref object of OpenApiRestCall_593421
proc url_SitesCreateOrUpdateSiteVNETConnectionGateway_597494(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGateway_597493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597495 = path.getOrDefault("resourceGroupName")
  valid_597495 = validateParameter(valid_597495, JString, required = true,
                                 default = nil)
  if valid_597495 != nil:
    section.add "resourceGroupName", valid_597495
  var valid_597496 = path.getOrDefault("name")
  valid_597496 = validateParameter(valid_597496, JString, required = true,
                                 default = nil)
  if valid_597496 != nil:
    section.add "name", valid_597496
  var valid_597497 = path.getOrDefault("vnetName")
  valid_597497 = validateParameter(valid_597497, JString, required = true,
                                 default = nil)
  if valid_597497 != nil:
    section.add "vnetName", valid_597497
  var valid_597498 = path.getOrDefault("gatewayName")
  valid_597498 = validateParameter(valid_597498, JString, required = true,
                                 default = nil)
  if valid_597498 != nil:
    section.add "gatewayName", valid_597498
  var valid_597499 = path.getOrDefault("subscriptionId")
  valid_597499 = validateParameter(valid_597499, JString, required = true,
                                 default = nil)
  if valid_597499 != nil:
    section.add "subscriptionId", valid_597499
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597500 = query.getOrDefault("api-version")
  valid_597500 = validateParameter(valid_597500, JString, required = true,
                                 default = nil)
  if valid_597500 != nil:
    section.add "api-version", valid_597500
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597502: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_597492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597502.validator(path, query, header, formData, body)
  let scheme = call_597502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597502.url(scheme.get, call_597502.host, call_597502.base,
                         call_597502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597502, url, valid)

proc call*(call_597503: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_597492;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597504 = newJObject()
  var query_597505 = newJObject()
  var body_597506 = newJObject()
  add(path_597504, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597506 = connectionEnvelope
  add(path_597504, "name", newJString(name))
  add(path_597504, "vnetName", newJString(vnetName))
  add(query_597505, "api-version", newJString(apiVersion))
  add(path_597504, "gatewayName", newJString(gatewayName))
  add(path_597504, "subscriptionId", newJString(subscriptionId))
  result = call_597503.call(path_597504, query_597505, nil, nil, body_597506)

var sitesCreateOrUpdateSiteVNETConnectionGateway* = Call_SitesCreateOrUpdateSiteVNETConnectionGateway_597492(
    name: "sitesCreateOrUpdateSiteVNETConnectionGateway",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGateway_597493,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGateway_597494,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGateway_597479 = ref object of OpenApiRestCall_593421
proc url_SitesGetSiteVnetGateway_597481(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGateway_597480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597482 = path.getOrDefault("resourceGroupName")
  valid_597482 = validateParameter(valid_597482, JString, required = true,
                                 default = nil)
  if valid_597482 != nil:
    section.add "resourceGroupName", valid_597482
  var valid_597483 = path.getOrDefault("name")
  valid_597483 = validateParameter(valid_597483, JString, required = true,
                                 default = nil)
  if valid_597483 != nil:
    section.add "name", valid_597483
  var valid_597484 = path.getOrDefault("vnetName")
  valid_597484 = validateParameter(valid_597484, JString, required = true,
                                 default = nil)
  if valid_597484 != nil:
    section.add "vnetName", valid_597484
  var valid_597485 = path.getOrDefault("gatewayName")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = nil)
  if valid_597485 != nil:
    section.add "gatewayName", valid_597485
  var valid_597486 = path.getOrDefault("subscriptionId")
  valid_597486 = validateParameter(valid_597486, JString, required = true,
                                 default = nil)
  if valid_597486 != nil:
    section.add "subscriptionId", valid_597486
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597487 = query.getOrDefault("api-version")
  valid_597487 = validateParameter(valid_597487, JString, required = true,
                                 default = nil)
  if valid_597487 != nil:
    section.add "api-version", valid_597487
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597488: Call_SitesGetSiteVnetGateway_597479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_597488.validator(path, query, header, formData, body)
  let scheme = call_597488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597488.url(scheme.get, call_597488.host, call_597488.base,
                         call_597488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597488, url, valid)

proc call*(call_597489: Call_SitesGetSiteVnetGateway_597479;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597490 = newJObject()
  var query_597491 = newJObject()
  add(path_597490, "resourceGroupName", newJString(resourceGroupName))
  add(query_597491, "api-version", newJString(apiVersion))
  add(path_597490, "name", newJString(name))
  add(path_597490, "vnetName", newJString(vnetName))
  add(path_597490, "gatewayName", newJString(gatewayName))
  add(path_597490, "subscriptionId", newJString(subscriptionId))
  result = call_597489.call(path_597490, query_597491, nil, nil, nil)

var sitesGetSiteVnetGateway* = Call_SitesGetSiteVnetGateway_597479(
    name: "sitesGetSiteVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGateway_597480, base: "",
    url: url_SitesGetSiteVnetGateway_597481, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGateway_597507 = ref object of OpenApiRestCall_593421
proc url_SitesUpdateSiteVNETConnectionGateway_597509(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGateway_597508(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597510 = path.getOrDefault("resourceGroupName")
  valid_597510 = validateParameter(valid_597510, JString, required = true,
                                 default = nil)
  if valid_597510 != nil:
    section.add "resourceGroupName", valid_597510
  var valid_597511 = path.getOrDefault("name")
  valid_597511 = validateParameter(valid_597511, JString, required = true,
                                 default = nil)
  if valid_597511 != nil:
    section.add "name", valid_597511
  var valid_597512 = path.getOrDefault("vnetName")
  valid_597512 = validateParameter(valid_597512, JString, required = true,
                                 default = nil)
  if valid_597512 != nil:
    section.add "vnetName", valid_597512
  var valid_597513 = path.getOrDefault("gatewayName")
  valid_597513 = validateParameter(valid_597513, JString, required = true,
                                 default = nil)
  if valid_597513 != nil:
    section.add "gatewayName", valid_597513
  var valid_597514 = path.getOrDefault("subscriptionId")
  valid_597514 = validateParameter(valid_597514, JString, required = true,
                                 default = nil)
  if valid_597514 != nil:
    section.add "subscriptionId", valid_597514
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597515 = query.getOrDefault("api-version")
  valid_597515 = validateParameter(valid_597515, JString, required = true,
                                 default = nil)
  if valid_597515 != nil:
    section.add "api-version", valid_597515
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597517: Call_SitesUpdateSiteVNETConnectionGateway_597507;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597517.validator(path, query, header, formData, body)
  let scheme = call_597517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597517.url(scheme.get, call_597517.host, call_597517.base,
                         call_597517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597517, url, valid)

proc call*(call_597518: Call_SitesUpdateSiteVNETConnectionGateway_597507;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597519 = newJObject()
  var query_597520 = newJObject()
  var body_597521 = newJObject()
  add(path_597519, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597521 = connectionEnvelope
  add(path_597519, "name", newJString(name))
  add(path_597519, "vnetName", newJString(vnetName))
  add(query_597520, "api-version", newJString(apiVersion))
  add(path_597519, "gatewayName", newJString(gatewayName))
  add(path_597519, "subscriptionId", newJString(subscriptionId))
  result = call_597518.call(path_597519, query_597520, nil, nil, body_597521)

var sitesUpdateSiteVNETConnectionGateway* = Call_SitesUpdateSiteVNETConnectionGateway_597507(
    name: "sitesUpdateSiteVNETConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGateway_597508, base: "",
    url: url_SitesUpdateSiteVNETConnectionGateway_597509, schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationHistoryForSite_597522 = ref object of OpenApiRestCall_593421
proc url_RecommendationsGetRecommendationHistoryForSite_597524(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendationHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationHistoryForSite_597523(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597525 = path.getOrDefault("resourceGroupName")
  valid_597525 = validateParameter(valid_597525, JString, required = true,
                                 default = nil)
  if valid_597525 != nil:
    section.add "resourceGroupName", valid_597525
  var valid_597526 = path.getOrDefault("siteName")
  valid_597526 = validateParameter(valid_597526, JString, required = true,
                                 default = nil)
  if valid_597526 != nil:
    section.add "siteName", valid_597526
  var valid_597527 = path.getOrDefault("subscriptionId")
  valid_597527 = validateParameter(valid_597527, JString, required = true,
                                 default = nil)
  if valid_597527 != nil:
    section.add "subscriptionId", valid_597527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   endTime: JString
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   startTime: JString
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597528 = query.getOrDefault("api-version")
  valid_597528 = validateParameter(valid_597528, JString, required = true,
                                 default = nil)
  if valid_597528 != nil:
    section.add "api-version", valid_597528
  var valid_597529 = query.getOrDefault("endTime")
  valid_597529 = validateParameter(valid_597529, JString, required = false,
                                 default = nil)
  if valid_597529 != nil:
    section.add "endTime", valid_597529
  var valid_597530 = query.getOrDefault("startTime")
  valid_597530 = validateParameter(valid_597530, JString, required = false,
                                 default = nil)
  if valid_597530 != nil:
    section.add "startTime", valid_597530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597531: Call_RecommendationsGetRecommendationHistoryForSite_597522;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597531.validator(path, query, header, formData, body)
  let scheme = call_597531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597531.url(scheme.get, call_597531.host, call_597531.base,
                         call_597531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597531, url, valid)

proc call*(call_597532: Call_RecommendationsGetRecommendationHistoryForSite_597522;
          resourceGroupName: string; apiVersion: string; siteName: string;
          subscriptionId: string; endTime: string = ""; startTime: string = ""): Recallable =
  ## recommendationsGetRecommendationHistoryForSite
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   endTime: string
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   startTime: string
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  var path_597533 = newJObject()
  var query_597534 = newJObject()
  add(path_597533, "resourceGroupName", newJString(resourceGroupName))
  add(query_597534, "api-version", newJString(apiVersion))
  add(path_597533, "siteName", newJString(siteName))
  add(path_597533, "subscriptionId", newJString(subscriptionId))
  add(query_597534, "endTime", newJString(endTime))
  add(query_597534, "startTime", newJString(startTime))
  result = call_597532.call(path_597533, query_597534, nil, nil, nil)

var recommendationsGetRecommendationHistoryForSite* = Call_RecommendationsGetRecommendationHistoryForSite_597522(
    name: "recommendationsGetRecommendationHistoryForSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
    validator: validate_RecommendationsGetRecommendationHistoryForSite_597523,
    base: "", url: url_RecommendationsGetRecommendationHistoryForSite_597524,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendedRulesForSite_597535 = ref object of OpenApiRestCall_593421
proc url_RecommendationsGetRecommendedRulesForSite_597537(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendedRulesForSite_597536(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597538 = path.getOrDefault("resourceGroupName")
  valid_597538 = validateParameter(valid_597538, JString, required = true,
                                 default = nil)
  if valid_597538 != nil:
    section.add "resourceGroupName", valid_597538
  var valid_597539 = path.getOrDefault("siteName")
  valid_597539 = validateParameter(valid_597539, JString, required = true,
                                 default = nil)
  if valid_597539 != nil:
    section.add "siteName", valid_597539
  var valid_597540 = path.getOrDefault("subscriptionId")
  valid_597540 = validateParameter(valid_597540, JString, required = true,
                                 default = nil)
  if valid_597540 != nil:
    section.add "subscriptionId", valid_597540
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   numSlots: JInt
  ##           : The number of site slots associated to the site
  ##   siteSku: JString
  ##          : The name of site SKU.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597541 = query.getOrDefault("api-version")
  valid_597541 = validateParameter(valid_597541, JString, required = true,
                                 default = nil)
  if valid_597541 != nil:
    section.add "api-version", valid_597541
  var valid_597542 = query.getOrDefault("featured")
  valid_597542 = validateParameter(valid_597542, JBool, required = false, default = nil)
  if valid_597542 != nil:
    section.add "featured", valid_597542
  var valid_597543 = query.getOrDefault("numSlots")
  valid_597543 = validateParameter(valid_597543, JInt, required = false, default = nil)
  if valid_597543 != nil:
    section.add "numSlots", valid_597543
  var valid_597544 = query.getOrDefault("siteSku")
  valid_597544 = validateParameter(valid_597544, JString, required = false,
                                 default = nil)
  if valid_597544 != nil:
    section.add "siteSku", valid_597544
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597545: Call_RecommendationsGetRecommendedRulesForSite_597535;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597545.validator(path, query, header, formData, body)
  let scheme = call_597545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597545.url(scheme.get, call_597545.host, call_597545.base,
                         call_597545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597545, url, valid)

proc call*(call_597546: Call_RecommendationsGetRecommendedRulesForSite_597535;
          resourceGroupName: string; apiVersion: string; siteName: string;
          subscriptionId: string; featured: bool = false; numSlots: int = 0;
          siteSku: string = ""): Recallable =
  ## recommendationsGetRecommendedRulesForSite
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   numSlots: int
  ##           : The number of site slots associated to the site
  ##   siteSku: string
  ##          : The name of site SKU.
  var path_597547 = newJObject()
  var query_597548 = newJObject()
  add(path_597547, "resourceGroupName", newJString(resourceGroupName))
  add(query_597548, "api-version", newJString(apiVersion))
  add(query_597548, "featured", newJBool(featured))
  add(path_597547, "siteName", newJString(siteName))
  add(path_597547, "subscriptionId", newJString(subscriptionId))
  add(query_597548, "numSlots", newJInt(numSlots))
  add(query_597548, "siteSku", newJString(siteSku))
  result = call_597546.call(path_597547, query_597548, nil, nil, nil)

var recommendationsGetRecommendedRulesForSite* = Call_RecommendationsGetRecommendedRulesForSite_597535(
    name: "recommendationsGetRecommendedRulesForSite", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
    validator: validate_RecommendationsGetRecommendedRulesForSite_597536,
    base: "", url: url_RecommendationsGetRecommendedRulesForSite_597537,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRuleDetailsBySiteName_597549 = ref object of OpenApiRestCall_593421
proc url_RecommendationsGetRuleDetailsBySiteName_597551(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRuleDetailsBySiteName_597550(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   name: JString (required)
  ##       : Recommendation rule name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597552 = path.getOrDefault("resourceGroupName")
  valid_597552 = validateParameter(valid_597552, JString, required = true,
                                 default = nil)
  if valid_597552 != nil:
    section.add "resourceGroupName", valid_597552
  var valid_597553 = path.getOrDefault("name")
  valid_597553 = validateParameter(valid_597553, JString, required = true,
                                 default = nil)
  if valid_597553 != nil:
    section.add "name", valid_597553
  var valid_597554 = path.getOrDefault("siteName")
  valid_597554 = validateParameter(valid_597554, JString, required = true,
                                 default = nil)
  if valid_597554 != nil:
    section.add "siteName", valid_597554
  var valid_597555 = path.getOrDefault("subscriptionId")
  valid_597555 = validateParameter(valid_597555, JString, required = true,
                                 default = nil)
  if valid_597555 != nil:
    section.add "subscriptionId", valid_597555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597556 = query.getOrDefault("api-version")
  valid_597556 = validateParameter(valid_597556, JString, required = true,
                                 default = nil)
  if valid_597556 != nil:
    section.add "api-version", valid_597556
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597557: Call_RecommendationsGetRuleDetailsBySiteName_597549;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_597557.validator(path, query, header, formData, body)
  let scheme = call_597557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597557.url(scheme.get, call_597557.host, call_597557.base,
                         call_597557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597557, url, valid)

proc call*(call_597558: Call_RecommendationsGetRuleDetailsBySiteName_597549;
          resourceGroupName: string; apiVersion: string; name: string;
          siteName: string; subscriptionId: string): Recallable =
  ## recommendationsGetRuleDetailsBySiteName
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Recommendation rule name
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_597559 = newJObject()
  var query_597560 = newJObject()
  add(path_597559, "resourceGroupName", newJString(resourceGroupName))
  add(query_597560, "api-version", newJString(apiVersion))
  add(path_597559, "name", newJString(name))
  add(path_597559, "siteName", newJString(siteName))
  add(path_597559, "subscriptionId", newJString(subscriptionId))
  result = call_597558.call(path_597559, query_597560, nil, nil, nil)

var recommendationsGetRuleDetailsBySiteName* = Call_RecommendationsGetRuleDetailsBySiteName_597549(
    name: "recommendationsGetRuleDetailsBySiteName", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
    validator: validate_RecommendationsGetRuleDetailsBySiteName_597550, base: "",
    url: url_RecommendationsGetRuleDetailsBySiteName_597551,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
