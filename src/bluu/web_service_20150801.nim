
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebSite Management Client
## version: 2015-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567650 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567650](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567650): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-service"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ProviderUpdatePublishingUser_568168 = ref object of OpenApiRestCall_567650
proc url_ProviderUpdatePublishingUser_568170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderUpdatePublishingUser_568169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568171 = query.getOrDefault("api-version")
  valid_568171 = validateParameter(valid_568171, JString, required = true,
                                 default = nil)
  if valid_568171 != nil:
    section.add "api-version", valid_568171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568173: Call_ProviderUpdatePublishingUser_568168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568173.validator(path, query, header, formData, body)
  let scheme = call_568173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568173.url(scheme.get, call_568173.host, call_568173.base,
                         call_568173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568173, url, valid)

proc call*(call_568174: Call_ProviderUpdatePublishingUser_568168;
          apiVersion: string; requestMessage: JsonNode): Recallable =
  ## providerUpdatePublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  var query_568175 = newJObject()
  var body_568176 = newJObject()
  add(query_568175, "api-version", newJString(apiVersion))
  if requestMessage != nil:
    body_568176 = requestMessage
  result = call_568174.call(nil, query_568175, nil, nil, body_568176)

var providerUpdatePublishingUser* = Call_ProviderUpdatePublishingUser_568168(
    name: "providerUpdatePublishingUser", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderUpdatePublishingUser_568169, base: "",
    url: url_ProviderUpdatePublishingUser_568170, schemes: {Scheme.Https})
type
  Call_ProviderGetPublishingUser_567872 = ref object of OpenApiRestCall_567650
proc url_ProviderGetPublishingUser_567874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetPublishingUser_567873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568033 = query.getOrDefault("api-version")
  valid_568033 = validateParameter(valid_568033, JString, required = true,
                                 default = nil)
  if valid_568033 != nil:
    section.add "api-version", valid_568033
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568056: Call_ProviderGetPublishingUser_567872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568056.validator(path, query, header, formData, body)
  let scheme = call_568056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568056.url(scheme.get, call_568056.host, call_568056.base,
                         call_568056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568056, url, valid)

proc call*(call_568127: Call_ProviderGetPublishingUser_567872; apiVersion: string): Recallable =
  ## providerGetPublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  var query_568128 = newJObject()
  add(query_568128, "api-version", newJString(apiVersion))
  result = call_568127.call(nil, query_568128, nil, nil, nil)

var providerGetPublishingUser* = Call_ProviderGetPublishingUser_567872(
    name: "providerGetPublishingUser", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderGetPublishingUser_567873, base: "",
    url: url_ProviderGetPublishingUser_567874, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControls_568177 = ref object of OpenApiRestCall_567650
proc url_ProviderGetSourceControls_568179(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetSourceControls_568178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568180 = query.getOrDefault("api-version")
  valid_568180 = validateParameter(valid_568180, JString, required = true,
                                 default = nil)
  if valid_568180 != nil:
    section.add "api-version", valid_568180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568181: Call_ProviderGetSourceControls_568177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568181.validator(path, query, header, formData, body)
  let scheme = call_568181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568181.url(scheme.get, call_568181.host, call_568181.base,
                         call_568181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568181, url, valid)

proc call*(call_568182: Call_ProviderGetSourceControls_568177; apiVersion: string): Recallable =
  ## providerGetSourceControls
  ##   apiVersion: string (required)
  ##             : API Version
  var query_568183 = newJObject()
  add(query_568183, "api-version", newJString(apiVersion))
  result = call_568182.call(nil, query_568183, nil, nil, nil)

var providerGetSourceControls* = Call_ProviderGetSourceControls_568177(
    name: "providerGetSourceControls", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols",
    validator: validate_ProviderGetSourceControls_568178, base: "",
    url: url_ProviderGetSourceControls_568179, schemes: {Scheme.Https})
type
  Call_ProviderUpdateSourceControl_568207 = ref object of OpenApiRestCall_567650
proc url_ProviderUpdateSourceControl_568209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderUpdateSourceControl_568208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_568210 = path.getOrDefault("sourceControlType")
  valid_568210 = validateParameter(valid_568210, JString, required = true,
                                 default = nil)
  if valid_568210 != nil:
    section.add "sourceControlType", valid_568210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568211 = query.getOrDefault("api-version")
  valid_568211 = validateParameter(valid_568211, JString, required = true,
                                 default = nil)
  if valid_568211 != nil:
    section.add "api-version", valid_568211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568213: Call_ProviderUpdateSourceControl_568207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568213.validator(path, query, header, formData, body)
  let scheme = call_568213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568213.url(scheme.get, call_568213.host, call_568213.base,
                         call_568213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568213, url, valid)

proc call*(call_568214: Call_ProviderUpdateSourceControl_568207;
          apiVersion: string; sourceControlType: string; requestMessage: JsonNode): Recallable =
  ## providerUpdateSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  var path_568215 = newJObject()
  var query_568216 = newJObject()
  var body_568217 = newJObject()
  add(query_568216, "api-version", newJString(apiVersion))
  add(path_568215, "sourceControlType", newJString(sourceControlType))
  if requestMessage != nil:
    body_568217 = requestMessage
  result = call_568214.call(path_568215, query_568216, nil, nil, body_568217)

var providerUpdateSourceControl* = Call_ProviderUpdateSourceControl_568207(
    name: "providerUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderUpdateSourceControl_568208, base: "",
    url: url_ProviderUpdateSourceControl_568209, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControl_568184 = ref object of OpenApiRestCall_567650
proc url_ProviderGetSourceControl_568186(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderGetSourceControl_568185(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_568201 = path.getOrDefault("sourceControlType")
  valid_568201 = validateParameter(valid_568201, JString, required = true,
                                 default = nil)
  if valid_568201 != nil:
    section.add "sourceControlType", valid_568201
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568202 = query.getOrDefault("api-version")
  valid_568202 = validateParameter(valid_568202, JString, required = true,
                                 default = nil)
  if valid_568202 != nil:
    section.add "api-version", valid_568202
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568203: Call_ProviderGetSourceControl_568184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568203.validator(path, query, header, formData, body)
  let scheme = call_568203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568203.url(scheme.get, call_568203.host, call_568203.base,
                         call_568203.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568203, url, valid)

proc call*(call_568204: Call_ProviderGetSourceControl_568184; apiVersion: string;
          sourceControlType: string): Recallable =
  ## providerGetSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  var path_568205 = newJObject()
  var query_568206 = newJObject()
  add(query_568206, "api-version", newJString(apiVersion))
  add(path_568205, "sourceControlType", newJString(sourceControlType))
  result = call_568204.call(path_568205, query_568206, nil, nil, nil)

var providerGetSourceControl* = Call_ProviderGetSourceControl_568184(
    name: "providerGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderGetSourceControl_568185, base: "",
    url: url_ProviderGetSourceControl_568186, schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderGetAllCertificateOrders_568218 = ref object of OpenApiRestCall_567650
proc url_GlobalCertificateOrderGetAllCertificateOrders_568220(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderGetAllCertificateOrders_568219(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568221 = path.getOrDefault("subscriptionId")
  valid_568221 = validateParameter(valid_568221, JString, required = true,
                                 default = nil)
  if valid_568221 != nil:
    section.add "subscriptionId", valid_568221
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568222 = query.getOrDefault("api-version")
  valid_568222 = validateParameter(valid_568222, JString, required = true,
                                 default = nil)
  if valid_568222 != nil:
    section.add "api-version", valid_568222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568223: Call_GlobalCertificateOrderGetAllCertificateOrders_568218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568223.validator(path, query, header, formData, body)
  let scheme = call_568223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568223.url(scheme.get, call_568223.host, call_568223.base,
                         call_568223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568223, url, valid)

proc call*(call_568224: Call_GlobalCertificateOrderGetAllCertificateOrders_568218;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalCertificateOrderGetAllCertificateOrders
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568225 = newJObject()
  var query_568226 = newJObject()
  add(query_568226, "api-version", newJString(apiVersion))
  add(path_568225, "subscriptionId", newJString(subscriptionId))
  result = call_568224.call(path_568225, query_568226, nil, nil, nil)

var globalCertificateOrderGetAllCertificateOrders* = Call_GlobalCertificateOrderGetAllCertificateOrders_568218(
    name: "globalCertificateOrderGetAllCertificateOrders",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_GlobalCertificateOrderGetAllCertificateOrders_568219,
    base: "", url: url_GlobalCertificateOrderGetAllCertificateOrders_568220,
    schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_568227 = ref object of OpenApiRestCall_567650
proc url_GlobalCertificateOrderValidateCertificatePurchaseInformation_568229(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_568228(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568230 = path.getOrDefault("subscriptionId")
  valid_568230 = validateParameter(valid_568230, JString, required = true,
                                 default = nil)
  if valid_568230 != nil:
    section.add "subscriptionId", valid_568230
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568231 = query.getOrDefault("api-version")
  valid_568231 = validateParameter(valid_568231, JString, required = true,
                                 default = nil)
  if valid_568231 != nil:
    section.add "api-version", valid_568231
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568233: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_568227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568233.validator(path, query, header, formData, body)
  let scheme = call_568233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568233.url(scheme.get, call_568233.host, call_568233.base,
                         call_568233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568233, url, valid)

proc call*(call_568234: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_568227;
          apiVersion: string; certificateOrder: JsonNode; subscriptionId: string): Recallable =
  ## globalCertificateOrderValidateCertificatePurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568235 = newJObject()
  var query_568236 = newJObject()
  var body_568237 = newJObject()
  add(query_568236, "api-version", newJString(apiVersion))
  if certificateOrder != nil:
    body_568237 = certificateOrder
  add(path_568235, "subscriptionId", newJString(subscriptionId))
  result = call_568234.call(path_568235, query_568236, nil, nil, body_568237)

var globalCertificateOrderValidateCertificatePurchaseInformation* = Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_568227(
    name: "globalCertificateOrderValidateCertificatePurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation", validator: validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_568228,
    base: "",
    url: url_GlobalCertificateOrderValidateCertificatePurchaseInformation_568229,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationCheckDomainAvailability_568238 = ref object of OpenApiRestCall_567650
proc url_GlobalDomainRegistrationCheckDomainAvailability_568240(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/checkDomainAvailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationCheckDomainAvailability_568239(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568241 = path.getOrDefault("subscriptionId")
  valid_568241 = validateParameter(valid_568241, JString, required = true,
                                 default = nil)
  if valid_568241 != nil:
    section.add "subscriptionId", valid_568241
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568242 = query.getOrDefault("api-version")
  valid_568242 = validateParameter(valid_568242, JString, required = true,
                                 default = nil)
  if valid_568242 != nil:
    section.add "api-version", valid_568242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   identifier: JObject (required)
  ##             : Name of the domain
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568244: Call_GlobalDomainRegistrationCheckDomainAvailability_568238;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568244.validator(path, query, header, formData, body)
  let scheme = call_568244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568244.url(scheme.get, call_568244.host, call_568244.base,
                         call_568244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568244, url, valid)

proc call*(call_568245: Call_GlobalDomainRegistrationCheckDomainAvailability_568238;
          apiVersion: string; subscriptionId: string; identifier: JsonNode): Recallable =
  ## globalDomainRegistrationCheckDomainAvailability
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   identifier: JObject (required)
  ##             : Name of the domain
  var path_568246 = newJObject()
  var query_568247 = newJObject()
  var body_568248 = newJObject()
  add(query_568247, "api-version", newJString(apiVersion))
  add(path_568246, "subscriptionId", newJString(subscriptionId))
  if identifier != nil:
    body_568248 = identifier
  result = call_568245.call(path_568246, query_568247, nil, nil, body_568248)

var globalDomainRegistrationCheckDomainAvailability* = Call_GlobalDomainRegistrationCheckDomainAvailability_568238(
    name: "globalDomainRegistrationCheckDomainAvailability",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
    validator: validate_GlobalDomainRegistrationCheckDomainAvailability_568239,
    base: "", url: url_GlobalDomainRegistrationCheckDomainAvailability_568240,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetAllDomains_568249 = ref object of OpenApiRestCall_567650
proc url_GlobalDomainRegistrationGetAllDomains_568251(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetAllDomains_568250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568252 = path.getOrDefault("subscriptionId")
  valid_568252 = validateParameter(valid_568252, JString, required = true,
                                 default = nil)
  if valid_568252 != nil:
    section.add "subscriptionId", valid_568252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568253 = query.getOrDefault("api-version")
  valid_568253 = validateParameter(valid_568253, JString, required = true,
                                 default = nil)
  if valid_568253 != nil:
    section.add "api-version", valid_568253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568254: Call_GlobalDomainRegistrationGetAllDomains_568249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568254.validator(path, query, header, formData, body)
  let scheme = call_568254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568254.url(scheme.get, call_568254.host, call_568254.base,
                         call_568254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568254, url, valid)

proc call*(call_568255: Call_GlobalDomainRegistrationGetAllDomains_568249;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetAllDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568256 = newJObject()
  var query_568257 = newJObject()
  add(query_568257, "api-version", newJString(apiVersion))
  add(path_568256, "subscriptionId", newJString(subscriptionId))
  result = call_568255.call(path_568256, query_568257, nil, nil, nil)

var globalDomainRegistrationGetAllDomains* = Call_GlobalDomainRegistrationGetAllDomains_568249(
    name: "globalDomainRegistrationGetAllDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_GlobalDomainRegistrationGetAllDomains_568250, base: "",
    url: url_GlobalDomainRegistrationGetAllDomains_568251, schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568258 = ref object of OpenApiRestCall_567650
proc url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568260(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/generateSsoRequest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568259(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568261 = path.getOrDefault("subscriptionId")
  valid_568261 = validateParameter(valid_568261, JString, required = true,
                                 default = nil)
  if valid_568261 != nil:
    section.add "subscriptionId", valid_568261
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568262 = query.getOrDefault("api-version")
  valid_568262 = validateParameter(valid_568262, JString, required = true,
                                 default = nil)
  if valid_568262 != nil:
    section.add "api-version", valid_568262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568263: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568258;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568263.validator(path, query, header, formData, body)
  let scheme = call_568263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568263.url(scheme.get, call_568263.host, call_568263.base,
                         call_568263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568263, url, valid)

proc call*(call_568264: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568258;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetDomainControlCenterSsoRequest
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568265 = newJObject()
  var query_568266 = newJObject()
  add(query_568266, "api-version", newJString(apiVersion))
  add(path_568265, "subscriptionId", newJString(subscriptionId))
  result = call_568264.call(path_568265, query_568266, nil, nil, nil)

var globalDomainRegistrationGetDomainControlCenterSsoRequest* = Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568258(
    name: "globalDomainRegistrationGetDomainControlCenterSsoRequest",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest", validator: validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568259,
    base: "", url: url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_568260,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationListDomainRecommendations_568267 = ref object of OpenApiRestCall_567650
proc url_GlobalDomainRegistrationListDomainRecommendations_568269(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/listDomainRecommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationListDomainRecommendations_568268(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568270 = path.getOrDefault("subscriptionId")
  valid_568270 = validateParameter(valid_568270, JString, required = true,
                                 default = nil)
  if valid_568270 != nil:
    section.add "subscriptionId", valid_568270
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568271 = query.getOrDefault("api-version")
  valid_568271 = validateParameter(valid_568271, JString, required = true,
                                 default = nil)
  if valid_568271 != nil:
    section.add "api-version", valid_568271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568273: Call_GlobalDomainRegistrationListDomainRecommendations_568267;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568273.validator(path, query, header, formData, body)
  let scheme = call_568273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568273.url(scheme.get, call_568273.host, call_568273.base,
                         call_568273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568273, url, valid)

proc call*(call_568274: Call_GlobalDomainRegistrationListDomainRecommendations_568267;
          apiVersion: string; subscriptionId: string; parameters: JsonNode): Recallable =
  ## globalDomainRegistrationListDomainRecommendations
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  var path_568275 = newJObject()
  var query_568276 = newJObject()
  var body_568277 = newJObject()
  add(query_568276, "api-version", newJString(apiVersion))
  add(path_568275, "subscriptionId", newJString(subscriptionId))
  if parameters != nil:
    body_568277 = parameters
  result = call_568274.call(path_568275, query_568276, nil, nil, body_568277)

var globalDomainRegistrationListDomainRecommendations* = Call_GlobalDomainRegistrationListDomainRecommendations_568267(
    name: "globalDomainRegistrationListDomainRecommendations",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
    validator: validate_GlobalDomainRegistrationListDomainRecommendations_568268,
    base: "", url: url_GlobalDomainRegistrationListDomainRecommendations_568269,
    schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetGetTopLevelDomains_568278 = ref object of OpenApiRestCall_567650
proc url_TopLevelDomainsGetGetTopLevelDomains_568280(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetGetTopLevelDomains_568279(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568281 = path.getOrDefault("subscriptionId")
  valid_568281 = validateParameter(valid_568281, JString, required = true,
                                 default = nil)
  if valid_568281 != nil:
    section.add "subscriptionId", valid_568281
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568282 = query.getOrDefault("api-version")
  valid_568282 = validateParameter(valid_568282, JString, required = true,
                                 default = nil)
  if valid_568282 != nil:
    section.add "api-version", valid_568282
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568283: Call_TopLevelDomainsGetGetTopLevelDomains_568278;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568283.validator(path, query, header, formData, body)
  let scheme = call_568283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568283.url(scheme.get, call_568283.host, call_568283.base,
                         call_568283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568283, url, valid)

proc call*(call_568284: Call_TopLevelDomainsGetGetTopLevelDomains_568278;
          apiVersion: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetGetTopLevelDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568285 = newJObject()
  var query_568286 = newJObject()
  add(query_568286, "api-version", newJString(apiVersion))
  add(path_568285, "subscriptionId", newJString(subscriptionId))
  result = call_568284.call(path_568285, query_568286, nil, nil, nil)

var topLevelDomainsGetGetTopLevelDomains* = Call_TopLevelDomainsGetGetTopLevelDomains_568278(
    name: "topLevelDomainsGetGetTopLevelDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
    validator: validate_TopLevelDomainsGetGetTopLevelDomains_568279, base: "",
    url: url_TopLevelDomainsGetGetTopLevelDomains_568280, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetTopLevelDomain_568287 = ref object of OpenApiRestCall_567650
proc url_TopLevelDomainsGetTopLevelDomain_568289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetTopLevelDomain_568288(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568290 = path.getOrDefault("name")
  valid_568290 = validateParameter(valid_568290, JString, required = true,
                                 default = nil)
  if valid_568290 != nil:
    section.add "name", valid_568290
  var valid_568291 = path.getOrDefault("subscriptionId")
  valid_568291 = validateParameter(valid_568291, JString, required = true,
                                 default = nil)
  if valid_568291 != nil:
    section.add "subscriptionId", valid_568291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568292 = query.getOrDefault("api-version")
  valid_568292 = validateParameter(valid_568292, JString, required = true,
                                 default = nil)
  if valid_568292 != nil:
    section.add "api-version", valid_568292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568293: Call_TopLevelDomainsGetTopLevelDomain_568287;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568293.validator(path, query, header, formData, body)
  let scheme = call_568293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568293.url(scheme.get, call_568293.host, call_568293.base,
                         call_568293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568293, url, valid)

proc call*(call_568294: Call_TopLevelDomainsGetTopLevelDomain_568287;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetTopLevelDomain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568295 = newJObject()
  var query_568296 = newJObject()
  add(query_568296, "api-version", newJString(apiVersion))
  add(path_568295, "name", newJString(name))
  add(path_568295, "subscriptionId", newJString(subscriptionId))
  result = call_568294.call(path_568295, query_568296, nil, nil, nil)

var topLevelDomainsGetTopLevelDomain* = Call_TopLevelDomainsGetTopLevelDomain_568287(
    name: "topLevelDomainsGetTopLevelDomain", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
    validator: validate_TopLevelDomainsGetTopLevelDomain_568288, base: "",
    url: url_TopLevelDomainsGetTopLevelDomain_568289, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsListTopLevelDomainAgreements_568297 = ref object of OpenApiRestCall_567650
proc url_TopLevelDomainsListTopLevelDomainAgreements_568299(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listAgreements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsListTopLevelDomainAgreements_568298(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568300 = path.getOrDefault("name")
  valid_568300 = validateParameter(valid_568300, JString, required = true,
                                 default = nil)
  if valid_568300 != nil:
    section.add "name", valid_568300
  var valid_568301 = path.getOrDefault("subscriptionId")
  valid_568301 = validateParameter(valid_568301, JString, required = true,
                                 default = nil)
  if valid_568301 != nil:
    section.add "subscriptionId", valid_568301
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568302 = query.getOrDefault("api-version")
  valid_568302 = validateParameter(valid_568302, JString, required = true,
                                 default = nil)
  if valid_568302 != nil:
    section.add "api-version", valid_568302
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568304: Call_TopLevelDomainsListTopLevelDomainAgreements_568297;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568304.validator(path, query, header, formData, body)
  let scheme = call_568304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568304.url(scheme.get, call_568304.host, call_568304.base,
                         call_568304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568304, url, valid)

proc call*(call_568305: Call_TopLevelDomainsListTopLevelDomainAgreements_568297;
          apiVersion: string; name: string; agreementOption: JsonNode;
          subscriptionId: string): Recallable =
  ## topLevelDomainsListTopLevelDomainAgreements
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568306 = newJObject()
  var query_568307 = newJObject()
  var body_568308 = newJObject()
  add(query_568307, "api-version", newJString(apiVersion))
  add(path_568306, "name", newJString(name))
  if agreementOption != nil:
    body_568308 = agreementOption
  add(path_568306, "subscriptionId", newJString(subscriptionId))
  result = call_568305.call(path_568306, query_568307, nil, nil, body_568308)

var topLevelDomainsListTopLevelDomainAgreements* = Call_TopLevelDomainsListTopLevelDomainAgreements_568297(
    name: "topLevelDomainsListTopLevelDomainAgreements",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
    validator: validate_TopLevelDomainsListTopLevelDomainAgreements_568298,
    base: "", url: url_TopLevelDomainsListTopLevelDomainAgreements_568299,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_568309 = ref object of OpenApiRestCall_567650
proc url_GlobalDomainRegistrationValidateDomainPurchaseInformation_568311(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_568310(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568312 = path.getOrDefault("subscriptionId")
  valid_568312 = validateParameter(valid_568312, JString, required = true,
                                 default = nil)
  if valid_568312 != nil:
    section.add "subscriptionId", valid_568312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568313 = query.getOrDefault("api-version")
  valid_568313 = validateParameter(valid_568313, JString, required = true,
                                 default = nil)
  if valid_568313 != nil:
    section.add "api-version", valid_568313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568315: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_568309;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568315.validator(path, query, header, formData, body)
  let scheme = call_568315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568315.url(scheme.get, call_568315.host, call_568315.base,
                         call_568315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568315, url, valid)

proc call*(call_568316: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_568309;
          apiVersion: string; subscriptionId: string;
          domainRegistrationInput: JsonNode): Recallable =
  ## globalDomainRegistrationValidateDomainPurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  var path_568317 = newJObject()
  var query_568318 = newJObject()
  var body_568319 = newJObject()
  add(query_568318, "api-version", newJString(apiVersion))
  add(path_568317, "subscriptionId", newJString(subscriptionId))
  if domainRegistrationInput != nil:
    body_568319 = domainRegistrationInput
  result = call_568316.call(path_568317, query_568318, nil, nil, body_568319)

var globalDomainRegistrationValidateDomainPurchaseInformation* = Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_568309(
    name: "globalDomainRegistrationValidateDomainPurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation", validator: validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_568310,
    base: "", url: url_GlobalDomainRegistrationValidateDomainPurchaseInformation_568311,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllCertificates_568320 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllCertificates_568322(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllCertificates_568321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568323 = path.getOrDefault("subscriptionId")
  valid_568323 = validateParameter(valid_568323, JString, required = true,
                                 default = nil)
  if valid_568323 != nil:
    section.add "subscriptionId", valid_568323
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568324 = query.getOrDefault("api-version")
  valid_568324 = validateParameter(valid_568324, JString, required = true,
                                 default = nil)
  if valid_568324 != nil:
    section.add "api-version", valid_568324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568325: Call_GlobalGetAllCertificates_568320; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568325.validator(path, query, header, formData, body)
  let scheme = call_568325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568325.url(scheme.get, call_568325.host, call_568325.base,
                         call_568325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568325, url, valid)

proc call*(call_568326: Call_GlobalGetAllCertificates_568320; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllCertificates
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568327 = newJObject()
  var query_568328 = newJObject()
  add(query_568328, "api-version", newJString(apiVersion))
  add(path_568327, "subscriptionId", newJString(subscriptionId))
  result = call_568326.call(path_568327, query_568328, nil, nil, nil)

var globalGetAllCertificates* = Call_GlobalGetAllCertificates_568320(
    name: "globalGetAllCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
    validator: validate_GlobalGetAllCertificates_568321, base: "",
    url: url_GlobalGetAllCertificates_568322, schemes: {Scheme.Https})
type
  Call_GlobalCheckNameAvailability_568329 = ref object of OpenApiRestCall_567650
proc url_GlobalCheckNameAvailability_568331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/checknameavailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCheckNameAvailability_568330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568332 = path.getOrDefault("subscriptionId")
  valid_568332 = validateParameter(valid_568332, JString, required = true,
                                 default = nil)
  if valid_568332 != nil:
    section.add "subscriptionId", valid_568332
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568333 = query.getOrDefault("api-version")
  valid_568333 = validateParameter(valid_568333, JString, required = true,
                                 default = nil)
  if valid_568333 != nil:
    section.add "api-version", valid_568333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Name availability request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568335: Call_GlobalCheckNameAvailability_568329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568335.validator(path, query, header, formData, body)
  let scheme = call_568335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568335.url(scheme.get, call_568335.host, call_568335.base,
                         call_568335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568335, url, valid)

proc call*(call_568336: Call_GlobalCheckNameAvailability_568329;
          apiVersion: string; subscriptionId: string; request: JsonNode): Recallable =
  ## globalCheckNameAvailability
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Name availability request
  var path_568337 = newJObject()
  var query_568338 = newJObject()
  var body_568339 = newJObject()
  add(query_568338, "api-version", newJString(apiVersion))
  add(path_568337, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568339 = request
  result = call_568336.call(path_568337, query_568338, nil, nil, body_568339)

var globalCheckNameAvailability* = Call_GlobalCheckNameAvailability_568329(
    name: "globalCheckNameAvailability", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
    validator: validate_GlobalCheckNameAvailability_568330, base: "",
    url: url_GlobalCheckNameAvailability_568331, schemes: {Scheme.Https})
type
  Call_GlobalGetAllClassicMobileServices_568340 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllClassicMobileServices_568342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllClassicMobileServices_568341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568343 = path.getOrDefault("subscriptionId")
  valid_568343 = validateParameter(valid_568343, JString, required = true,
                                 default = nil)
  if valid_568343 != nil:
    section.add "subscriptionId", valid_568343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568344 = query.getOrDefault("api-version")
  valid_568344 = validateParameter(valid_568344, JString, required = true,
                                 default = nil)
  if valid_568344 != nil:
    section.add "api-version", valid_568344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568345: Call_GlobalGetAllClassicMobileServices_568340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568345.validator(path, query, header, formData, body)
  let scheme = call_568345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568345.url(scheme.get, call_568345.host, call_568345.base,
                         call_568345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568345, url, valid)

proc call*(call_568346: Call_GlobalGetAllClassicMobileServices_568340;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllClassicMobileServices
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568347 = newJObject()
  var query_568348 = newJObject()
  add(query_568348, "api-version", newJString(apiVersion))
  add(path_568347, "subscriptionId", newJString(subscriptionId))
  result = call_568346.call(path_568347, query_568348, nil, nil, nil)

var globalGetAllClassicMobileServices* = Call_GlobalGetAllClassicMobileServices_568340(
    name: "globalGetAllClassicMobileServices", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_GlobalGetAllClassicMobileServices_568341, base: "",
    url: url_GlobalGetAllClassicMobileServices_568342, schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionGeoRegions_568349 = ref object of OpenApiRestCall_567650
proc url_GlobalGetSubscriptionGeoRegions_568351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/geoRegions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionGeoRegions_568350(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568352 = path.getOrDefault("subscriptionId")
  valid_568352 = validateParameter(valid_568352, JString, required = true,
                                 default = nil)
  if valid_568352 != nil:
    section.add "subscriptionId", valid_568352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   linuxWorkersEnabled: JBool
  ##                      : Filter only to regions that support linux workers
  ##   sku: JString
  ##      : Filter only to regions that support this sku
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568353 = query.getOrDefault("api-version")
  valid_568353 = validateParameter(valid_568353, JString, required = true,
                                 default = nil)
  if valid_568353 != nil:
    section.add "api-version", valid_568353
  var valid_568354 = query.getOrDefault("linuxWorkersEnabled")
  valid_568354 = validateParameter(valid_568354, JBool, required = false, default = nil)
  if valid_568354 != nil:
    section.add "linuxWorkersEnabled", valid_568354
  var valid_568355 = query.getOrDefault("sku")
  valid_568355 = validateParameter(valid_568355, JString, required = false,
                                 default = nil)
  if valid_568355 != nil:
    section.add "sku", valid_568355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568356: Call_GlobalGetSubscriptionGeoRegions_568349;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568356.validator(path, query, header, formData, body)
  let scheme = call_568356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568356.url(scheme.get, call_568356.host, call_568356.base,
                         call_568356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568356, url, valid)

proc call*(call_568357: Call_GlobalGetSubscriptionGeoRegions_568349;
          apiVersion: string; subscriptionId: string;
          linuxWorkersEnabled: bool = false; sku: string = ""): Recallable =
  ## globalGetSubscriptionGeoRegions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   linuxWorkersEnabled: bool
  ##                      : Filter only to regions that support linux workers
  ##   sku: string
  ##      : Filter only to regions that support this sku
  var path_568358 = newJObject()
  var query_568359 = newJObject()
  add(query_568359, "api-version", newJString(apiVersion))
  add(path_568358, "subscriptionId", newJString(subscriptionId))
  add(query_568359, "linuxWorkersEnabled", newJBool(linuxWorkersEnabled))
  add(query_568359, "sku", newJString(sku))
  result = call_568357.call(path_568358, query_568359, nil, nil, nil)

var globalGetSubscriptionGeoRegions* = Call_GlobalGetSubscriptionGeoRegions_568349(
    name: "globalGetSubscriptionGeoRegions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
    validator: validate_GlobalGetSubscriptionGeoRegions_568350, base: "",
    url: url_GlobalGetSubscriptionGeoRegions_568351, schemes: {Scheme.Https})
type
  Call_GlobalGetAllHostingEnvironments_568360 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllHostingEnvironments_568362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllHostingEnvironments_568361(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568363 = path.getOrDefault("subscriptionId")
  valid_568363 = validateParameter(valid_568363, JString, required = true,
                                 default = nil)
  if valid_568363 != nil:
    section.add "subscriptionId", valid_568363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568364 = query.getOrDefault("api-version")
  valid_568364 = validateParameter(valid_568364, JString, required = true,
                                 default = nil)
  if valid_568364 != nil:
    section.add "api-version", valid_568364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568365: Call_GlobalGetAllHostingEnvironments_568360;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568365.validator(path, query, header, formData, body)
  let scheme = call_568365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568365.url(scheme.get, call_568365.host, call_568365.base,
                         call_568365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568365, url, valid)

proc call*(call_568366: Call_GlobalGetAllHostingEnvironments_568360;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568367 = newJObject()
  var query_568368 = newJObject()
  add(query_568368, "api-version", newJString(apiVersion))
  add(path_568367, "subscriptionId", newJString(subscriptionId))
  result = call_568366.call(path_568367, query_568368, nil, nil, nil)

var globalGetAllHostingEnvironments* = Call_GlobalGetAllHostingEnvironments_568360(
    name: "globalGetAllHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_GlobalGetAllHostingEnvironments_568361, base: "",
    url: url_GlobalGetAllHostingEnvironments_568362, schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentNameAvailable_568369 = ref object of OpenApiRestCall_567650
proc url_GlobalIsHostingEnvironmentNameAvailable_568371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentNameAvailable_568370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568372 = path.getOrDefault("subscriptionId")
  valid_568372 = validateParameter(valid_568372, JString, required = true,
                                 default = nil)
  if valid_568372 != nil:
    section.add "subscriptionId", valid_568372
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   name: JString (required)
  ##       : Hosting environment name
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568373 = query.getOrDefault("api-version")
  valid_568373 = validateParameter(valid_568373, JString, required = true,
                                 default = nil)
  if valid_568373 != nil:
    section.add "api-version", valid_568373
  var valid_568374 = query.getOrDefault("name")
  valid_568374 = validateParameter(valid_568374, JString, required = true,
                                 default = nil)
  if valid_568374 != nil:
    section.add "name", valid_568374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568375: Call_GlobalIsHostingEnvironmentNameAvailable_568369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568375.validator(path, query, header, formData, body)
  let scheme = call_568375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568375.url(scheme.get, call_568375.host, call_568375.base,
                         call_568375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568375, url, valid)

proc call*(call_568376: Call_GlobalIsHostingEnvironmentNameAvailable_568369;
          apiVersion: string; subscriptionId: string; name: string): Recallable =
  ## globalIsHostingEnvironmentNameAvailable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   name: string (required)
  ##       : Hosting environment name
  var path_568377 = newJObject()
  var query_568378 = newJObject()
  add(query_568378, "api-version", newJString(apiVersion))
  add(path_568377, "subscriptionId", newJString(subscriptionId))
  add(query_568378, "name", newJString(name))
  result = call_568376.call(path_568377, query_568378, nil, nil, nil)

var globalIsHostingEnvironmentNameAvailable* = Call_GlobalIsHostingEnvironmentNameAvailable_568369(
    name: "globalIsHostingEnvironmentNameAvailable", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable",
    validator: validate_GlobalIsHostingEnvironmentNameAvailable_568370, base: "",
    url: url_GlobalIsHostingEnvironmentNameAvailable_568371,
    schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568379 = ref object of OpenApiRestCall_567650
proc url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568381(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568380(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Hosting environment name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568382 = path.getOrDefault("name")
  valid_568382 = validateParameter(valid_568382, JString, required = true,
                                 default = nil)
  if valid_568382 != nil:
    section.add "name", valid_568382
  var valid_568383 = path.getOrDefault("subscriptionId")
  valid_568383 = validateParameter(valid_568383, JString, required = true,
                                 default = nil)
  if valid_568383 != nil:
    section.add "subscriptionId", valid_568383
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568384 = query.getOrDefault("api-version")
  valid_568384 = validateParameter(valid_568384, JString, required = true,
                                 default = nil)
  if valid_568384 != nil:
    section.add "api-version", valid_568384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568385: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568379;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568385.validator(path, query, header, formData, body)
  let scheme = call_568385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568385.url(scheme.get, call_568385.host, call_568385.base,
                         call_568385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568385, url, valid)

proc call*(call_568386: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568379;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## globalIsHostingEnvironmentWithLegacyNameAvailable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Hosting environment name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568387 = newJObject()
  var query_568388 = newJObject()
  add(query_568388, "api-version", newJString(apiVersion))
  add(path_568387, "name", newJString(name))
  add(path_568387, "subscriptionId", newJString(subscriptionId))
  result = call_568386.call(path_568387, query_568388, nil, nil, nil)

var globalIsHostingEnvironmentWithLegacyNameAvailable* = Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568379(
    name: "globalIsHostingEnvironmentWithLegacyNameAvailable",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable/{name}",
    validator: validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568380,
    base: "", url: url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_568381,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllManagedHostingEnvironments_568389 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllManagedHostingEnvironments_568391(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllManagedHostingEnvironments_568390(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568392 = path.getOrDefault("subscriptionId")
  valid_568392 = validateParameter(valid_568392, JString, required = true,
                                 default = nil)
  if valid_568392 != nil:
    section.add "subscriptionId", valid_568392
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568393 = query.getOrDefault("api-version")
  valid_568393 = validateParameter(valid_568393, JString, required = true,
                                 default = nil)
  if valid_568393 != nil:
    section.add "api-version", valid_568393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568394: Call_GlobalGetAllManagedHostingEnvironments_568389;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568394.validator(path, query, header, formData, body)
  let scheme = call_568394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568394.url(scheme.get, call_568394.host, call_568394.base,
                         call_568394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568394, url, valid)

proc call*(call_568395: Call_GlobalGetAllManagedHostingEnvironments_568389;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllManagedHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568396 = newJObject()
  var query_568397 = newJObject()
  add(query_568397, "api-version", newJString(apiVersion))
  add(path_568396, "subscriptionId", newJString(subscriptionId))
  result = call_568395.call(path_568396, query_568397, nil, nil, nil)

var globalGetAllManagedHostingEnvironments* = Call_GlobalGetAllManagedHostingEnvironments_568389(
    name: "globalGetAllManagedHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments",
    validator: validate_GlobalGetAllManagedHostingEnvironments_568390, base: "",
    url: url_GlobalGetAllManagedHostingEnvironments_568391,
    schemes: {Scheme.Https})
type
  Call_GlobalListPremierAddOnOffers_568398 = ref object of OpenApiRestCall_567650
proc url_GlobalListPremierAddOnOffers_568400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/premieraddonoffers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalListPremierAddOnOffers_568399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568401 = path.getOrDefault("subscriptionId")
  valid_568401 = validateParameter(valid_568401, JString, required = true,
                                 default = nil)
  if valid_568401 != nil:
    section.add "subscriptionId", valid_568401
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568402 = query.getOrDefault("api-version")
  valid_568402 = validateParameter(valid_568402, JString, required = true,
                                 default = nil)
  if valid_568402 != nil:
    section.add "api-version", valid_568402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568403: Call_GlobalListPremierAddOnOffers_568398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568403.validator(path, query, header, formData, body)
  let scheme = call_568403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568403.url(scheme.get, call_568403.host, call_568403.base,
                         call_568403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568403, url, valid)

proc call*(call_568404: Call_GlobalListPremierAddOnOffers_568398;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalListPremierAddOnOffers
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568405 = newJObject()
  var query_568406 = newJObject()
  add(query_568406, "api-version", newJString(apiVersion))
  add(path_568405, "subscriptionId", newJString(subscriptionId))
  result = call_568404.call(path_568405, query_568406, nil, nil, nil)

var globalListPremierAddOnOffers* = Call_GlobalListPremierAddOnOffers_568398(
    name: "globalListPremierAddOnOffers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
    validator: validate_GlobalListPremierAddOnOffers_568399, base: "",
    url: url_GlobalListPremierAddOnOffers_568400, schemes: {Scheme.Https})
type
  Call_GlobalUpdateSubscriptionPublishingCredentials_568416 = ref object of OpenApiRestCall_567650
proc url_GlobalUpdateSubscriptionPublishingCredentials_568418(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalUpdateSubscriptionPublishingCredentials_568417(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568419 = path.getOrDefault("subscriptionId")
  valid_568419 = validateParameter(valid_568419, JString, required = true,
                                 default = nil)
  if valid_568419 != nil:
    section.add "subscriptionId", valid_568419
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568420 = query.getOrDefault("api-version")
  valid_568420 = validateParameter(valid_568420, JString, required = true,
                                 default = nil)
  if valid_568420 != nil:
    section.add "api-version", valid_568420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568422: Call_GlobalUpdateSubscriptionPublishingCredentials_568416;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568422.validator(path, query, header, formData, body)
  let scheme = call_568422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568422.url(scheme.get, call_568422.host, call_568422.base,
                         call_568422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568422, url, valid)

proc call*(call_568423: Call_GlobalUpdateSubscriptionPublishingCredentials_568416;
          apiVersion: string; subscriptionId: string; requestMessage: JsonNode): Recallable =
  ## globalUpdateSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  var path_568424 = newJObject()
  var query_568425 = newJObject()
  var body_568426 = newJObject()
  add(query_568425, "api-version", newJString(apiVersion))
  add(path_568424, "subscriptionId", newJString(subscriptionId))
  if requestMessage != nil:
    body_568426 = requestMessage
  result = call_568423.call(path_568424, query_568425, nil, nil, body_568426)

var globalUpdateSubscriptionPublishingCredentials* = Call_GlobalUpdateSubscriptionPublishingCredentials_568416(
    name: "globalUpdateSubscriptionPublishingCredentials",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalUpdateSubscriptionPublishingCredentials_568417,
    base: "", url: url_GlobalUpdateSubscriptionPublishingCredentials_568418,
    schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionPublishingCredentials_568407 = ref object of OpenApiRestCall_567650
proc url_GlobalGetSubscriptionPublishingCredentials_568409(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionPublishingCredentials_568408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568410 = path.getOrDefault("subscriptionId")
  valid_568410 = validateParameter(valid_568410, JString, required = true,
                                 default = nil)
  if valid_568410 != nil:
    section.add "subscriptionId", valid_568410
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568411 = query.getOrDefault("api-version")
  valid_568411 = validateParameter(valid_568411, JString, required = true,
                                 default = nil)
  if valid_568411 != nil:
    section.add "api-version", valid_568411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568412: Call_GlobalGetSubscriptionPublishingCredentials_568407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568412.validator(path, query, header, formData, body)
  let scheme = call_568412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568412.url(scheme.get, call_568412.host, call_568412.base,
                         call_568412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568412, url, valid)

proc call*(call_568413: Call_GlobalGetSubscriptionPublishingCredentials_568407;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568414 = newJObject()
  var query_568415 = newJObject()
  add(query_568415, "api-version", newJString(apiVersion))
  add(path_568414, "subscriptionId", newJString(subscriptionId))
  result = call_568413.call(path_568414, query_568415, nil, nil, nil)

var globalGetSubscriptionPublishingCredentials* = Call_GlobalGetSubscriptionPublishingCredentials_568407(
    name: "globalGetSubscriptionPublishingCredentials", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalGetSubscriptionPublishingCredentials_568408,
    base: "", url: url_GlobalGetSubscriptionPublishingCredentials_568409,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationBySubscription_568427 = ref object of OpenApiRestCall_567650
proc url_RecommendationsGetRecommendationBySubscription_568429(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationBySubscription_568428(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568431 = path.getOrDefault("subscriptionId")
  valid_568431 = validateParameter(valid_568431, JString, required = true,
                                 default = nil)
  if valid_568431 != nil:
    section.add "subscriptionId", valid_568431
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   $filter: JString
  ##          : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568432 = query.getOrDefault("api-version")
  valid_568432 = validateParameter(valid_568432, JString, required = true,
                                 default = nil)
  if valid_568432 != nil:
    section.add "api-version", valid_568432
  var valid_568433 = query.getOrDefault("featured")
  valid_568433 = validateParameter(valid_568433, JBool, required = false, default = nil)
  if valid_568433 != nil:
    section.add "featured", valid_568433
  var valid_568434 = query.getOrDefault("$filter")
  valid_568434 = validateParameter(valid_568434, JString, required = false,
                                 default = nil)
  if valid_568434 != nil:
    section.add "$filter", valid_568434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568435: Call_RecommendationsGetRecommendationBySubscription_568427;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568435.validator(path, query, header, formData, body)
  let scheme = call_568435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568435.url(scheme.get, call_568435.host, call_568435.base,
                         call_568435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568435, url, valid)

proc call*(call_568436: Call_RecommendationsGetRecommendationBySubscription_568427;
          apiVersion: string; subscriptionId: string; featured: bool = false;
          Filter: string = ""): Recallable =
  ## recommendationsGetRecommendationBySubscription
  ##   apiVersion: string (required)
  ##             : API Version
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  var path_568437 = newJObject()
  var query_568438 = newJObject()
  add(query_568438, "api-version", newJString(apiVersion))
  add(query_568438, "featured", newJBool(featured))
  add(path_568437, "subscriptionId", newJString(subscriptionId))
  add(query_568438, "$filter", newJString(Filter))
  result = call_568436.call(path_568437, query_568438, nil, nil, nil)

var recommendationsGetRecommendationBySubscription* = Call_RecommendationsGetRecommendationBySubscription_568427(
    name: "recommendationsGetRecommendationBySubscription",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
    validator: validate_RecommendationsGetRecommendationBySubscription_568428,
    base: "", url: url_RecommendationsGetRecommendationBySubscription_568429,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllServerFarms_568439 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllServerFarms_568441(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllServerFarms_568440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568442 = path.getOrDefault("subscriptionId")
  valid_568442 = validateParameter(valid_568442, JString, required = true,
                                 default = nil)
  if valid_568442 != nil:
    section.add "subscriptionId", valid_568442
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   detailed: JBool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568443 = query.getOrDefault("api-version")
  valid_568443 = validateParameter(valid_568443, JString, required = true,
                                 default = nil)
  if valid_568443 != nil:
    section.add "api-version", valid_568443
  var valid_568444 = query.getOrDefault("detailed")
  valid_568444 = validateParameter(valid_568444, JBool, required = false, default = nil)
  if valid_568444 != nil:
    section.add "detailed", valid_568444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568445: Call_GlobalGetAllServerFarms_568439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568445.validator(path, query, header, formData, body)
  let scheme = call_568445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568445.url(scheme.get, call_568445.host, call_568445.base,
                         call_568445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568445, url, valid)

proc call*(call_568446: Call_GlobalGetAllServerFarms_568439; apiVersion: string;
          subscriptionId: string; detailed: bool = false): Recallable =
  ## globalGetAllServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   detailed: bool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568447 = newJObject()
  var query_568448 = newJObject()
  add(query_568448, "api-version", newJString(apiVersion))
  add(query_568448, "detailed", newJBool(detailed))
  add(path_568447, "subscriptionId", newJString(subscriptionId))
  result = call_568446.call(path_568447, query_568448, nil, nil, nil)

var globalGetAllServerFarms* = Call_GlobalGetAllServerFarms_568439(
    name: "globalGetAllServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
    validator: validate_GlobalGetAllServerFarms_568440, base: "",
    url: url_GlobalGetAllServerFarms_568441, schemes: {Scheme.Https})
type
  Call_GlobalGetAllSites_568449 = ref object of OpenApiRestCall_567650
proc url_GlobalGetAllSites_568451(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllSites_568450(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568452 = path.getOrDefault("subscriptionId")
  valid_568452 = validateParameter(valid_568452, JString, required = true,
                                 default = nil)
  if valid_568452 != nil:
    section.add "subscriptionId", valid_568452
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568453 = query.getOrDefault("api-version")
  valid_568453 = validateParameter(valid_568453, JString, required = true,
                                 default = nil)
  if valid_568453 != nil:
    section.add "api-version", valid_568453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568454: Call_GlobalGetAllSites_568449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568454.validator(path, query, header, formData, body)
  let scheme = call_568454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568454.url(scheme.get, call_568454.host, call_568454.base,
                         call_568454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568454, url, valid)

proc call*(call_568455: Call_GlobalGetAllSites_568449; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllSites
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568456 = newJObject()
  var query_568457 = newJObject()
  add(query_568457, "api-version", newJString(apiVersion))
  add(path_568456, "subscriptionId", newJString(subscriptionId))
  result = call_568455.call(path_568456, query_568457, nil, nil, nil)

var globalGetAllSites* = Call_GlobalGetAllSites_568449(name: "globalGetAllSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com",
    route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
    validator: validate_GlobalGetAllSites_568450, base: "",
    url: url_GlobalGetAllSites_568451, schemes: {Scheme.Https})
type
  Call_GlobalResourceGroupsMoveResources_568458 = ref object of OpenApiRestCall_567650
proc url_GlobalResourceGroupsMoveResources_568460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/moveResources")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalResourceGroupsMoveResources_568459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568461 = path.getOrDefault("resourceGroupName")
  valid_568461 = validateParameter(valid_568461, JString, required = true,
                                 default = nil)
  if valid_568461 != nil:
    section.add "resourceGroupName", valid_568461
  var valid_568462 = path.getOrDefault("subscriptionId")
  valid_568462 = validateParameter(valid_568462, JString, required = true,
                                 default = nil)
  if valid_568462 != nil:
    section.add "subscriptionId", valid_568462
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568463 = query.getOrDefault("api-version")
  valid_568463 = validateParameter(valid_568463, JString, required = true,
                                 default = nil)
  if valid_568463 != nil:
    section.add "api-version", valid_568463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   moveResourceEnvelope: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568465: Call_GlobalResourceGroupsMoveResources_568458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568465.validator(path, query, header, formData, body)
  let scheme = call_568465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568465.url(scheme.get, call_568465.host, call_568465.base,
                         call_568465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568465, url, valid)

proc call*(call_568466: Call_GlobalResourceGroupsMoveResources_568458;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          moveResourceEnvelope: JsonNode): Recallable =
  ## globalResourceGroupsMoveResources
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   moveResourceEnvelope: JObject (required)
  var path_568467 = newJObject()
  var query_568468 = newJObject()
  var body_568469 = newJObject()
  add(path_568467, "resourceGroupName", newJString(resourceGroupName))
  add(query_568468, "api-version", newJString(apiVersion))
  add(path_568467, "subscriptionId", newJString(subscriptionId))
  if moveResourceEnvelope != nil:
    body_568469 = moveResourceEnvelope
  result = call_568466.call(path_568467, query_568468, nil, nil, body_568469)

var globalResourceGroupsMoveResources* = Call_GlobalResourceGroupsMoveResources_568458(
    name: "globalResourceGroupsMoveResources", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
    validator: validate_GlobalResourceGroupsMoveResources_568459, base: "",
    url: url_GlobalResourceGroupsMoveResources_568460, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrders_568470 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersGetCertificateOrders_568472(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrders_568471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568473 = path.getOrDefault("resourceGroupName")
  valid_568473 = validateParameter(valid_568473, JString, required = true,
                                 default = nil)
  if valid_568473 != nil:
    section.add "resourceGroupName", valid_568473
  var valid_568474 = path.getOrDefault("subscriptionId")
  valid_568474 = validateParameter(valid_568474, JString, required = true,
                                 default = nil)
  if valid_568474 != nil:
    section.add "subscriptionId", valid_568474
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568475 = query.getOrDefault("api-version")
  valid_568475 = validateParameter(valid_568475, JString, required = true,
                                 default = nil)
  if valid_568475 != nil:
    section.add "api-version", valid_568475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568476: Call_CertificateOrdersGetCertificateOrders_568470;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568476.validator(path, query, header, formData, body)
  let scheme = call_568476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568476.url(scheme.get, call_568476.host, call_568476.base,
                         call_568476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568476, url, valid)

proc call*(call_568477: Call_CertificateOrdersGetCertificateOrders_568470;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificateOrders
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568478 = newJObject()
  var query_568479 = newJObject()
  add(path_568478, "resourceGroupName", newJString(resourceGroupName))
  add(query_568479, "api-version", newJString(apiVersion))
  add(path_568478, "subscriptionId", newJString(subscriptionId))
  result = call_568477.call(path_568478, query_568479, nil, nil, nil)

var certificateOrdersGetCertificateOrders* = Call_CertificateOrdersGetCertificateOrders_568470(
    name: "certificateOrdersGetCertificateOrders", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_CertificateOrdersGetCertificateOrders_568471, base: "",
    url: url_CertificateOrdersGetCertificateOrders_568472, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificates_568480 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersGetCertificates_568482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificates_568481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_568483 = path.getOrDefault("certificateOrderName")
  valid_568483 = validateParameter(valid_568483, JString, required = true,
                                 default = nil)
  if valid_568483 != nil:
    section.add "certificateOrderName", valid_568483
  var valid_568484 = path.getOrDefault("resourceGroupName")
  valid_568484 = validateParameter(valid_568484, JString, required = true,
                                 default = nil)
  if valid_568484 != nil:
    section.add "resourceGroupName", valid_568484
  var valid_568485 = path.getOrDefault("subscriptionId")
  valid_568485 = validateParameter(valid_568485, JString, required = true,
                                 default = nil)
  if valid_568485 != nil:
    section.add "subscriptionId", valid_568485
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568486 = query.getOrDefault("api-version")
  valid_568486 = validateParameter(valid_568486, JString, required = true,
                                 default = nil)
  if valid_568486 != nil:
    section.add "api-version", valid_568486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568487: Call_CertificateOrdersGetCertificates_568480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568487.validator(path, query, header, formData, body)
  let scheme = call_568487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568487.url(scheme.get, call_568487.host, call_568487.base,
                         call_568487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568487, url, valid)

proc call*(call_568488: Call_CertificateOrdersGetCertificates_568480;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificates
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568489 = newJObject()
  var query_568490 = newJObject()
  add(path_568489, "certificateOrderName", newJString(certificateOrderName))
  add(path_568489, "resourceGroupName", newJString(resourceGroupName))
  add(query_568490, "api-version", newJString(apiVersion))
  add(path_568489, "subscriptionId", newJString(subscriptionId))
  result = call_568488.call(path_568489, query_568490, nil, nil, nil)

var certificateOrdersGetCertificates* = Call_CertificateOrdersGetCertificates_568480(
    name: "certificateOrdersGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
    validator: validate_CertificateOrdersGetCertificates_568481, base: "",
    url: url_CertificateOrdersGetCertificates_568482, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificate_568503 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersCreateOrUpdateCertificate_568505(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificate_568504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_568506 = path.getOrDefault("certificateOrderName")
  valid_568506 = validateParameter(valid_568506, JString, required = true,
                                 default = nil)
  if valid_568506 != nil:
    section.add "certificateOrderName", valid_568506
  var valid_568507 = path.getOrDefault("resourceGroupName")
  valid_568507 = validateParameter(valid_568507, JString, required = true,
                                 default = nil)
  if valid_568507 != nil:
    section.add "resourceGroupName", valid_568507
  var valid_568508 = path.getOrDefault("name")
  valid_568508 = validateParameter(valid_568508, JString, required = true,
                                 default = nil)
  if valid_568508 != nil:
    section.add "name", valid_568508
  var valid_568509 = path.getOrDefault("subscriptionId")
  valid_568509 = validateParameter(valid_568509, JString, required = true,
                                 default = nil)
  if valid_568509 != nil:
    section.add "subscriptionId", valid_568509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568510 = query.getOrDefault("api-version")
  valid_568510 = validateParameter(valid_568510, JString, required = true,
                                 default = nil)
  if valid_568510 != nil:
    section.add "api-version", valid_568510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568512: Call_CertificateOrdersCreateOrUpdateCertificate_568503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568512.validator(path, query, header, formData, body)
  let scheme = call_568512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568512.url(scheme.get, call_568512.host, call_568512.base,
                         call_568512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568512, url, valid)

proc call*(call_568513: Call_CertificateOrdersCreateOrUpdateCertificate_568503;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; keyVaultCertificate: JsonNode;
          subscriptionId: string): Recallable =
  ## certificateOrdersCreateOrUpdateCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568514 = newJObject()
  var query_568515 = newJObject()
  var body_568516 = newJObject()
  add(path_568514, "certificateOrderName", newJString(certificateOrderName))
  add(path_568514, "resourceGroupName", newJString(resourceGroupName))
  add(query_568515, "api-version", newJString(apiVersion))
  add(path_568514, "name", newJString(name))
  if keyVaultCertificate != nil:
    body_568516 = keyVaultCertificate
  add(path_568514, "subscriptionId", newJString(subscriptionId))
  result = call_568513.call(path_568514, query_568515, nil, nil, body_568516)

var certificateOrdersCreateOrUpdateCertificate* = Call_CertificateOrdersCreateOrUpdateCertificate_568503(
    name: "certificateOrdersCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificate_568504,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificate_568505,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificate_568491 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersGetCertificate_568493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificate_568492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_568494 = path.getOrDefault("certificateOrderName")
  valid_568494 = validateParameter(valid_568494, JString, required = true,
                                 default = nil)
  if valid_568494 != nil:
    section.add "certificateOrderName", valid_568494
  var valid_568495 = path.getOrDefault("resourceGroupName")
  valid_568495 = validateParameter(valid_568495, JString, required = true,
                                 default = nil)
  if valid_568495 != nil:
    section.add "resourceGroupName", valid_568495
  var valid_568496 = path.getOrDefault("name")
  valid_568496 = validateParameter(valid_568496, JString, required = true,
                                 default = nil)
  if valid_568496 != nil:
    section.add "name", valid_568496
  var valid_568497 = path.getOrDefault("subscriptionId")
  valid_568497 = validateParameter(valid_568497, JString, required = true,
                                 default = nil)
  if valid_568497 != nil:
    section.add "subscriptionId", valid_568497
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568498 = query.getOrDefault("api-version")
  valid_568498 = validateParameter(valid_568498, JString, required = true,
                                 default = nil)
  if valid_568498 != nil:
    section.add "api-version", valid_568498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568499: Call_CertificateOrdersGetCertificate_568491;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568499.validator(path, query, header, formData, body)
  let scheme = call_568499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568499.url(scheme.get, call_568499.host, call_568499.base,
                         call_568499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568499, url, valid)

proc call*(call_568500: Call_CertificateOrdersGetCertificate_568491;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568501 = newJObject()
  var query_568502 = newJObject()
  add(path_568501, "certificateOrderName", newJString(certificateOrderName))
  add(path_568501, "resourceGroupName", newJString(resourceGroupName))
  add(query_568502, "api-version", newJString(apiVersion))
  add(path_568501, "name", newJString(name))
  add(path_568501, "subscriptionId", newJString(subscriptionId))
  result = call_568500.call(path_568501, query_568502, nil, nil, nil)

var certificateOrdersGetCertificate* = Call_CertificateOrdersGetCertificate_568491(
    name: "certificateOrdersGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersGetCertificate_568492, base: "",
    url: url_CertificateOrdersGetCertificate_568493, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificate_568529 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersUpdateCertificate_568531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificate_568530(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_568532 = path.getOrDefault("certificateOrderName")
  valid_568532 = validateParameter(valid_568532, JString, required = true,
                                 default = nil)
  if valid_568532 != nil:
    section.add "certificateOrderName", valid_568532
  var valid_568533 = path.getOrDefault("resourceGroupName")
  valid_568533 = validateParameter(valid_568533, JString, required = true,
                                 default = nil)
  if valid_568533 != nil:
    section.add "resourceGroupName", valid_568533
  var valid_568534 = path.getOrDefault("name")
  valid_568534 = validateParameter(valid_568534, JString, required = true,
                                 default = nil)
  if valid_568534 != nil:
    section.add "name", valid_568534
  var valid_568535 = path.getOrDefault("subscriptionId")
  valid_568535 = validateParameter(valid_568535, JString, required = true,
                                 default = nil)
  if valid_568535 != nil:
    section.add "subscriptionId", valid_568535
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568536 = query.getOrDefault("api-version")
  valid_568536 = validateParameter(valid_568536, JString, required = true,
                                 default = nil)
  if valid_568536 != nil:
    section.add "api-version", valid_568536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568538: Call_CertificateOrdersUpdateCertificate_568529;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568538.validator(path, query, header, formData, body)
  let scheme = call_568538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568538.url(scheme.get, call_568538.host, call_568538.base,
                         call_568538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568538, url, valid)

proc call*(call_568539: Call_CertificateOrdersUpdateCertificate_568529;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; keyVaultCertificate: JsonNode;
          subscriptionId: string): Recallable =
  ## certificateOrdersUpdateCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568540 = newJObject()
  var query_568541 = newJObject()
  var body_568542 = newJObject()
  add(path_568540, "certificateOrderName", newJString(certificateOrderName))
  add(path_568540, "resourceGroupName", newJString(resourceGroupName))
  add(query_568541, "api-version", newJString(apiVersion))
  add(path_568540, "name", newJString(name))
  if keyVaultCertificate != nil:
    body_568542 = keyVaultCertificate
  add(path_568540, "subscriptionId", newJString(subscriptionId))
  result = call_568539.call(path_568540, query_568541, nil, nil, body_568542)

var certificateOrdersUpdateCertificate* = Call_CertificateOrdersUpdateCertificate_568529(
    name: "certificateOrdersUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersUpdateCertificate_568530, base: "",
    url: url_CertificateOrdersUpdateCertificate_568531, schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificate_568517 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersDeleteCertificate_568519(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificate_568518(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `certificateOrderName` field"
  var valid_568520 = path.getOrDefault("certificateOrderName")
  valid_568520 = validateParameter(valid_568520, JString, required = true,
                                 default = nil)
  if valid_568520 != nil:
    section.add "certificateOrderName", valid_568520
  var valid_568521 = path.getOrDefault("resourceGroupName")
  valid_568521 = validateParameter(valid_568521, JString, required = true,
                                 default = nil)
  if valid_568521 != nil:
    section.add "resourceGroupName", valid_568521
  var valid_568522 = path.getOrDefault("name")
  valid_568522 = validateParameter(valid_568522, JString, required = true,
                                 default = nil)
  if valid_568522 != nil:
    section.add "name", valid_568522
  var valid_568523 = path.getOrDefault("subscriptionId")
  valid_568523 = validateParameter(valid_568523, JString, required = true,
                                 default = nil)
  if valid_568523 != nil:
    section.add "subscriptionId", valid_568523
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568524 = query.getOrDefault("api-version")
  valid_568524 = validateParameter(valid_568524, JString, required = true,
                                 default = nil)
  if valid_568524 != nil:
    section.add "api-version", valid_568524
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568525: Call_CertificateOrdersDeleteCertificate_568517;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568525.validator(path, query, header, formData, body)
  let scheme = call_568525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568525.url(scheme.get, call_568525.host, call_568525.base,
                         call_568525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568525, url, valid)

proc call*(call_568526: Call_CertificateOrdersDeleteCertificate_568517;
          certificateOrderName: string; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificateOrdersDeleteCertificate
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568527 = newJObject()
  var query_568528 = newJObject()
  add(path_568527, "certificateOrderName", newJString(certificateOrderName))
  add(path_568527, "resourceGroupName", newJString(resourceGroupName))
  add(query_568528, "api-version", newJString(apiVersion))
  add(path_568527, "name", newJString(name))
  add(path_568527, "subscriptionId", newJString(subscriptionId))
  result = call_568526.call(path_568527, query_568528, nil, nil, nil)

var certificateOrdersDeleteCertificate* = Call_CertificateOrdersDeleteCertificate_568517(
    name: "certificateOrdersDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersDeleteCertificate_568518, base: "",
    url: url_CertificateOrdersDeleteCertificate_568519, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificateOrder_568554 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersCreateOrUpdateCertificateOrder_568556(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificateOrder_568555(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568557 = path.getOrDefault("resourceGroupName")
  valid_568557 = validateParameter(valid_568557, JString, required = true,
                                 default = nil)
  if valid_568557 != nil:
    section.add "resourceGroupName", valid_568557
  var valid_568558 = path.getOrDefault("name")
  valid_568558 = validateParameter(valid_568558, JString, required = true,
                                 default = nil)
  if valid_568558 != nil:
    section.add "name", valid_568558
  var valid_568559 = path.getOrDefault("subscriptionId")
  valid_568559 = validateParameter(valid_568559, JString, required = true,
                                 default = nil)
  if valid_568559 != nil:
    section.add "subscriptionId", valid_568559
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568560 = query.getOrDefault("api-version")
  valid_568560 = validateParameter(valid_568560, JString, required = true,
                                 default = nil)
  if valid_568560 != nil:
    section.add "api-version", valid_568560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568562: Call_CertificateOrdersCreateOrUpdateCertificateOrder_568554;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568562.validator(path, query, header, formData, body)
  let scheme = call_568562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568562.url(scheme.get, call_568562.host, call_568562.base,
                         call_568562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568562, url, valid)

proc call*(call_568563: Call_CertificateOrdersCreateOrUpdateCertificateOrder_568554;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateDistinguishedName: JsonNode): Recallable =
  ## certificateOrdersCreateOrUpdateCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  var path_568564 = newJObject()
  var query_568565 = newJObject()
  var body_568566 = newJObject()
  add(path_568564, "resourceGroupName", newJString(resourceGroupName))
  add(query_568565, "api-version", newJString(apiVersion))
  add(path_568564, "name", newJString(name))
  add(path_568564, "subscriptionId", newJString(subscriptionId))
  if certificateDistinguishedName != nil:
    body_568566 = certificateDistinguishedName
  result = call_568563.call(path_568564, query_568565, nil, nil, body_568566)

var certificateOrdersCreateOrUpdateCertificateOrder* = Call_CertificateOrdersCreateOrUpdateCertificateOrder_568554(
    name: "certificateOrdersCreateOrUpdateCertificateOrder",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificateOrder_568555,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificateOrder_568556,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrder_568543 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersGetCertificateOrder_568545(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrder_568544(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568546 = path.getOrDefault("resourceGroupName")
  valid_568546 = validateParameter(valid_568546, JString, required = true,
                                 default = nil)
  if valid_568546 != nil:
    section.add "resourceGroupName", valid_568546
  var valid_568547 = path.getOrDefault("name")
  valid_568547 = validateParameter(valid_568547, JString, required = true,
                                 default = nil)
  if valid_568547 != nil:
    section.add "name", valid_568547
  var valid_568548 = path.getOrDefault("subscriptionId")
  valid_568548 = validateParameter(valid_568548, JString, required = true,
                                 default = nil)
  if valid_568548 != nil:
    section.add "subscriptionId", valid_568548
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568549 = query.getOrDefault("api-version")
  valid_568549 = validateParameter(valid_568549, JString, required = true,
                                 default = nil)
  if valid_568549 != nil:
    section.add "api-version", valid_568549
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568550: Call_CertificateOrdersGetCertificateOrder_568543;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568550.validator(path, query, header, formData, body)
  let scheme = call_568550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568550.url(scheme.get, call_568550.host, call_568550.base,
                         call_568550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568550, url, valid)

proc call*(call_568551: Call_CertificateOrdersGetCertificateOrder_568543;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersGetCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568552 = newJObject()
  var query_568553 = newJObject()
  add(path_568552, "resourceGroupName", newJString(resourceGroupName))
  add(query_568553, "api-version", newJString(apiVersion))
  add(path_568552, "name", newJString(name))
  add(path_568552, "subscriptionId", newJString(subscriptionId))
  result = call_568551.call(path_568552, query_568553, nil, nil, nil)

var certificateOrdersGetCertificateOrder* = Call_CertificateOrdersGetCertificateOrder_568543(
    name: "certificateOrdersGetCertificateOrder", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersGetCertificateOrder_568544, base: "",
    url: url_CertificateOrdersGetCertificateOrder_568545, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificateOrder_568578 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersUpdateCertificateOrder_568580(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificateOrder_568579(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568581 = path.getOrDefault("resourceGroupName")
  valid_568581 = validateParameter(valid_568581, JString, required = true,
                                 default = nil)
  if valid_568581 != nil:
    section.add "resourceGroupName", valid_568581
  var valid_568582 = path.getOrDefault("name")
  valid_568582 = validateParameter(valid_568582, JString, required = true,
                                 default = nil)
  if valid_568582 != nil:
    section.add "name", valid_568582
  var valid_568583 = path.getOrDefault("subscriptionId")
  valid_568583 = validateParameter(valid_568583, JString, required = true,
                                 default = nil)
  if valid_568583 != nil:
    section.add "subscriptionId", valid_568583
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568584 = query.getOrDefault("api-version")
  valid_568584 = validateParameter(valid_568584, JString, required = true,
                                 default = nil)
  if valid_568584 != nil:
    section.add "api-version", valid_568584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568586: Call_CertificateOrdersUpdateCertificateOrder_568578;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568586.validator(path, query, header, formData, body)
  let scheme = call_568586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568586.url(scheme.get, call_568586.host, call_568586.base,
                         call_568586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568586, url, valid)

proc call*(call_568587: Call_CertificateOrdersUpdateCertificateOrder_568578;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateDistinguishedName: JsonNode): Recallable =
  ## certificateOrdersUpdateCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  var path_568588 = newJObject()
  var query_568589 = newJObject()
  var body_568590 = newJObject()
  add(path_568588, "resourceGroupName", newJString(resourceGroupName))
  add(query_568589, "api-version", newJString(apiVersion))
  add(path_568588, "name", newJString(name))
  add(path_568588, "subscriptionId", newJString(subscriptionId))
  if certificateDistinguishedName != nil:
    body_568590 = certificateDistinguishedName
  result = call_568587.call(path_568588, query_568589, nil, nil, body_568590)

var certificateOrdersUpdateCertificateOrder* = Call_CertificateOrdersUpdateCertificateOrder_568578(
    name: "certificateOrdersUpdateCertificateOrder", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersUpdateCertificateOrder_568579, base: "",
    url: url_CertificateOrdersUpdateCertificateOrder_568580,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificateOrder_568567 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersDeleteCertificateOrder_568569(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificateOrder_568568(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568570 = path.getOrDefault("resourceGroupName")
  valid_568570 = validateParameter(valid_568570, JString, required = true,
                                 default = nil)
  if valid_568570 != nil:
    section.add "resourceGroupName", valid_568570
  var valid_568571 = path.getOrDefault("name")
  valid_568571 = validateParameter(valid_568571, JString, required = true,
                                 default = nil)
  if valid_568571 != nil:
    section.add "name", valid_568571
  var valid_568572 = path.getOrDefault("subscriptionId")
  valid_568572 = validateParameter(valid_568572, JString, required = true,
                                 default = nil)
  if valid_568572 != nil:
    section.add "subscriptionId", valid_568572
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568573 = query.getOrDefault("api-version")
  valid_568573 = validateParameter(valid_568573, JString, required = true,
                                 default = nil)
  if valid_568573 != nil:
    section.add "api-version", valid_568573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568574: Call_CertificateOrdersDeleteCertificateOrder_568567;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568574.validator(path, query, header, formData, body)
  let scheme = call_568574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568574.url(scheme.get, call_568574.host, call_568574.base,
                         call_568574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568574, url, valid)

proc call*(call_568575: Call_CertificateOrdersDeleteCertificateOrder_568567;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersDeleteCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568576 = newJObject()
  var query_568577 = newJObject()
  add(path_568576, "resourceGroupName", newJString(resourceGroupName))
  add(query_568577, "api-version", newJString(apiVersion))
  add(path_568576, "name", newJString(name))
  add(path_568576, "subscriptionId", newJString(subscriptionId))
  result = call_568575.call(path_568576, query_568577, nil, nil, nil)

var certificateOrdersDeleteCertificateOrder* = Call_CertificateOrdersDeleteCertificateOrder_568567(
    name: "certificateOrdersDeleteCertificateOrder", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersDeleteCertificateOrder_568568, base: "",
    url: url_CertificateOrdersDeleteCertificateOrder_568569,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersReissueCertificateOrder_568591 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersReissueCertificateOrder_568593(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reissue")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersReissueCertificateOrder_568592(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568594 = path.getOrDefault("resourceGroupName")
  valid_568594 = validateParameter(valid_568594, JString, required = true,
                                 default = nil)
  if valid_568594 != nil:
    section.add "resourceGroupName", valid_568594
  var valid_568595 = path.getOrDefault("name")
  valid_568595 = validateParameter(valid_568595, JString, required = true,
                                 default = nil)
  if valid_568595 != nil:
    section.add "name", valid_568595
  var valid_568596 = path.getOrDefault("subscriptionId")
  valid_568596 = validateParameter(valid_568596, JString, required = true,
                                 default = nil)
  if valid_568596 != nil:
    section.add "subscriptionId", valid_568596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568597 = query.getOrDefault("api-version")
  valid_568597 = validateParameter(valid_568597, JString, required = true,
                                 default = nil)
  if valid_568597 != nil:
    section.add "api-version", valid_568597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568599: Call_CertificateOrdersReissueCertificateOrder_568591;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568599.validator(path, query, header, formData, body)
  let scheme = call_568599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568599.url(scheme.get, call_568599.host, call_568599.base,
                         call_568599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568599, url, valid)

proc call*(call_568600: Call_CertificateOrdersReissueCertificateOrder_568591;
          resourceGroupName: string; apiVersion: string; name: string;
          reissueCertificateOrderRequest: JsonNode; subscriptionId: string): Recallable =
  ## certificateOrdersReissueCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568601 = newJObject()
  var query_568602 = newJObject()
  var body_568603 = newJObject()
  add(path_568601, "resourceGroupName", newJString(resourceGroupName))
  add(query_568602, "api-version", newJString(apiVersion))
  add(path_568601, "name", newJString(name))
  if reissueCertificateOrderRequest != nil:
    body_568603 = reissueCertificateOrderRequest
  add(path_568601, "subscriptionId", newJString(subscriptionId))
  result = call_568600.call(path_568601, query_568602, nil, nil, body_568603)

var certificateOrdersReissueCertificateOrder* = Call_CertificateOrdersReissueCertificateOrder_568591(
    name: "certificateOrdersReissueCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue",
    validator: validate_CertificateOrdersReissueCertificateOrder_568592, base: "",
    url: url_CertificateOrdersReissueCertificateOrder_568593,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRenewCertificateOrder_568604 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersRenewCertificateOrder_568606(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/renew")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRenewCertificateOrder_568605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568607 = path.getOrDefault("resourceGroupName")
  valid_568607 = validateParameter(valid_568607, JString, required = true,
                                 default = nil)
  if valid_568607 != nil:
    section.add "resourceGroupName", valid_568607
  var valid_568608 = path.getOrDefault("name")
  valid_568608 = validateParameter(valid_568608, JString, required = true,
                                 default = nil)
  if valid_568608 != nil:
    section.add "name", valid_568608
  var valid_568609 = path.getOrDefault("subscriptionId")
  valid_568609 = validateParameter(valid_568609, JString, required = true,
                                 default = nil)
  if valid_568609 != nil:
    section.add "subscriptionId", valid_568609
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568610 = query.getOrDefault("api-version")
  valid_568610 = validateParameter(valid_568610, JString, required = true,
                                 default = nil)
  if valid_568610 != nil:
    section.add "api-version", valid_568610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568612: Call_CertificateOrdersRenewCertificateOrder_568604;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568612.validator(path, query, header, formData, body)
  let scheme = call_568612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568612.url(scheme.get, call_568612.host, call_568612.base,
                         call_568612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568612, url, valid)

proc call*(call_568613: Call_CertificateOrdersRenewCertificateOrder_568604;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; renewCertificateOrderRequest: JsonNode): Recallable =
  ## certificateOrdersRenewCertificateOrder
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  var path_568614 = newJObject()
  var query_568615 = newJObject()
  var body_568616 = newJObject()
  add(path_568614, "resourceGroupName", newJString(resourceGroupName))
  add(query_568615, "api-version", newJString(apiVersion))
  add(path_568614, "name", newJString(name))
  add(path_568614, "subscriptionId", newJString(subscriptionId))
  if renewCertificateOrderRequest != nil:
    body_568616 = renewCertificateOrderRequest
  result = call_568613.call(path_568614, query_568615, nil, nil, body_568616)

var certificateOrdersRenewCertificateOrder* = Call_CertificateOrdersRenewCertificateOrder_568604(
    name: "certificateOrdersRenewCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew",
    validator: validate_CertificateOrdersRenewCertificateOrder_568605, base: "",
    url: url_CertificateOrdersRenewCertificateOrder_568606,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersResendCertificateEmail_568617 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersResendCertificateEmail_568619(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resendEmail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersResendCertificateEmail_568618(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568620 = path.getOrDefault("resourceGroupName")
  valid_568620 = validateParameter(valid_568620, JString, required = true,
                                 default = nil)
  if valid_568620 != nil:
    section.add "resourceGroupName", valid_568620
  var valid_568621 = path.getOrDefault("name")
  valid_568621 = validateParameter(valid_568621, JString, required = true,
                                 default = nil)
  if valid_568621 != nil:
    section.add "name", valid_568621
  var valid_568622 = path.getOrDefault("subscriptionId")
  valid_568622 = validateParameter(valid_568622, JString, required = true,
                                 default = nil)
  if valid_568622 != nil:
    section.add "subscriptionId", valid_568622
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568623 = query.getOrDefault("api-version")
  valid_568623 = validateParameter(valid_568623, JString, required = true,
                                 default = nil)
  if valid_568623 != nil:
    section.add "api-version", valid_568623
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568624: Call_CertificateOrdersResendCertificateEmail_568617;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568624.validator(path, query, header, formData, body)
  let scheme = call_568624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568624.url(scheme.get, call_568624.host, call_568624.base,
                         call_568624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568624, url, valid)

proc call*(call_568625: Call_CertificateOrdersResendCertificateEmail_568617;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersResendCertificateEmail
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568626 = newJObject()
  var query_568627 = newJObject()
  add(path_568626, "resourceGroupName", newJString(resourceGroupName))
  add(query_568627, "api-version", newJString(apiVersion))
  add(path_568626, "name", newJString(name))
  add(path_568626, "subscriptionId", newJString(subscriptionId))
  result = call_568625.call(path_568626, query_568627, nil, nil, nil)

var certificateOrdersResendCertificateEmail* = Call_CertificateOrdersResendCertificateEmail_568617(
    name: "certificateOrdersResendCertificateEmail", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail",
    validator: validate_CertificateOrdersResendCertificateEmail_568618, base: "",
    url: url_CertificateOrdersResendCertificateEmail_568619,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateActions_568628 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersRetrieveCertificateActions_568630(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveCertificateActions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateActions_568629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568631 = path.getOrDefault("resourceGroupName")
  valid_568631 = validateParameter(valid_568631, JString, required = true,
                                 default = nil)
  if valid_568631 != nil:
    section.add "resourceGroupName", valid_568631
  var valid_568632 = path.getOrDefault("name")
  valid_568632 = validateParameter(valid_568632, JString, required = true,
                                 default = nil)
  if valid_568632 != nil:
    section.add "name", valid_568632
  var valid_568633 = path.getOrDefault("subscriptionId")
  valid_568633 = validateParameter(valid_568633, JString, required = true,
                                 default = nil)
  if valid_568633 != nil:
    section.add "subscriptionId", valid_568633
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568634 = query.getOrDefault("api-version")
  valid_568634 = validateParameter(valid_568634, JString, required = true,
                                 default = nil)
  if valid_568634 != nil:
    section.add "api-version", valid_568634
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568635: Call_CertificateOrdersRetrieveCertificateActions_568628;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568635.validator(path, query, header, formData, body)
  let scheme = call_568635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568635.url(scheme.get, call_568635.host, call_568635.base,
                         call_568635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568635, url, valid)

proc call*(call_568636: Call_CertificateOrdersRetrieveCertificateActions_568628;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersRetrieveCertificateActions
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568637 = newJObject()
  var query_568638 = newJObject()
  add(path_568637, "resourceGroupName", newJString(resourceGroupName))
  add(query_568638, "api-version", newJString(apiVersion))
  add(path_568637, "name", newJString(name))
  add(path_568637, "subscriptionId", newJString(subscriptionId))
  result = call_568636.call(path_568637, query_568638, nil, nil, nil)

var certificateOrdersRetrieveCertificateActions* = Call_CertificateOrdersRetrieveCertificateActions_568628(
    name: "certificateOrdersRetrieveCertificateActions",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
    validator: validate_CertificateOrdersRetrieveCertificateActions_568629,
    base: "", url: url_CertificateOrdersRetrieveCertificateActions_568630,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateEmailHistory_568639 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersRetrieveCertificateEmailHistory_568641(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveEmailHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateEmailHistory_568640(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568642 = path.getOrDefault("resourceGroupName")
  valid_568642 = validateParameter(valid_568642, JString, required = true,
                                 default = nil)
  if valid_568642 != nil:
    section.add "resourceGroupName", valid_568642
  var valid_568643 = path.getOrDefault("name")
  valid_568643 = validateParameter(valid_568643, JString, required = true,
                                 default = nil)
  if valid_568643 != nil:
    section.add "name", valid_568643
  var valid_568644 = path.getOrDefault("subscriptionId")
  valid_568644 = validateParameter(valid_568644, JString, required = true,
                                 default = nil)
  if valid_568644 != nil:
    section.add "subscriptionId", valid_568644
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568645 = query.getOrDefault("api-version")
  valid_568645 = validateParameter(valid_568645, JString, required = true,
                                 default = nil)
  if valid_568645 != nil:
    section.add "api-version", valid_568645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568646: Call_CertificateOrdersRetrieveCertificateEmailHistory_568639;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568646.validator(path, query, header, formData, body)
  let scheme = call_568646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568646.url(scheme.get, call_568646.host, call_568646.base,
                         call_568646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568646, url, valid)

proc call*(call_568647: Call_CertificateOrdersRetrieveCertificateEmailHistory_568639;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersRetrieveCertificateEmailHistory
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568648 = newJObject()
  var query_568649 = newJObject()
  add(path_568648, "resourceGroupName", newJString(resourceGroupName))
  add(query_568649, "api-version", newJString(apiVersion))
  add(path_568648, "name", newJString(name))
  add(path_568648, "subscriptionId", newJString(subscriptionId))
  result = call_568647.call(path_568648, query_568649, nil, nil, nil)

var certificateOrdersRetrieveCertificateEmailHistory* = Call_CertificateOrdersRetrieveCertificateEmailHistory_568639(
    name: "certificateOrdersRetrieveCertificateEmailHistory",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
    validator: validate_CertificateOrdersRetrieveCertificateEmailHistory_568640,
    base: "", url: url_CertificateOrdersRetrieveCertificateEmailHistory_568641,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersVerifyDomainOwnership_568650 = ref object of OpenApiRestCall_567650
proc url_CertificateOrdersVerifyDomainOwnership_568652(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/verifyDomainOwnership")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersVerifyDomainOwnership_568651(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568653 = path.getOrDefault("resourceGroupName")
  valid_568653 = validateParameter(valid_568653, JString, required = true,
                                 default = nil)
  if valid_568653 != nil:
    section.add "resourceGroupName", valid_568653
  var valid_568654 = path.getOrDefault("name")
  valid_568654 = validateParameter(valid_568654, JString, required = true,
                                 default = nil)
  if valid_568654 != nil:
    section.add "name", valid_568654
  var valid_568655 = path.getOrDefault("subscriptionId")
  valid_568655 = validateParameter(valid_568655, JString, required = true,
                                 default = nil)
  if valid_568655 != nil:
    section.add "subscriptionId", valid_568655
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568656 = query.getOrDefault("api-version")
  valid_568656 = validateParameter(valid_568656, JString, required = true,
                                 default = nil)
  if valid_568656 != nil:
    section.add "api-version", valid_568656
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568657: Call_CertificateOrdersVerifyDomainOwnership_568650;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568657.validator(path, query, header, formData, body)
  let scheme = call_568657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568657.url(scheme.get, call_568657.host, call_568657.base,
                         call_568657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568657, url, valid)

proc call*(call_568658: Call_CertificateOrdersVerifyDomainOwnership_568650;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificateOrdersVerifyDomainOwnership
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568659 = newJObject()
  var query_568660 = newJObject()
  add(path_568659, "resourceGroupName", newJString(resourceGroupName))
  add(query_568660, "api-version", newJString(apiVersion))
  add(path_568659, "name", newJString(name))
  add(path_568659, "subscriptionId", newJString(subscriptionId))
  result = call_568658.call(path_568659, query_568660, nil, nil, nil)

var certificateOrdersVerifyDomainOwnership* = Call_CertificateOrdersVerifyDomainOwnership_568650(
    name: "certificateOrdersVerifyDomainOwnership", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership",
    validator: validate_CertificateOrdersVerifyDomainOwnership_568651, base: "",
    url: url_CertificateOrdersVerifyDomainOwnership_568652,
    schemes: {Scheme.Https})
type
  Call_DomainsGetDomains_568661 = ref object of OpenApiRestCall_567650
proc url_DomainsGetDomains_568663(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomains_568662(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568664 = path.getOrDefault("resourceGroupName")
  valid_568664 = validateParameter(valid_568664, JString, required = true,
                                 default = nil)
  if valid_568664 != nil:
    section.add "resourceGroupName", valid_568664
  var valid_568665 = path.getOrDefault("subscriptionId")
  valid_568665 = validateParameter(valid_568665, JString, required = true,
                                 default = nil)
  if valid_568665 != nil:
    section.add "subscriptionId", valid_568665
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568666 = query.getOrDefault("api-version")
  valid_568666 = validateParameter(valid_568666, JString, required = true,
                                 default = nil)
  if valid_568666 != nil:
    section.add "api-version", valid_568666
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568667: Call_DomainsGetDomains_568661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568667.validator(path, query, header, formData, body)
  let scheme = call_568667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568667.url(scheme.get, call_568667.host, call_568667.base,
                         call_568667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568667, url, valid)

proc call*(call_568668: Call_DomainsGetDomains_568661; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## domainsGetDomains
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568669 = newJObject()
  var query_568670 = newJObject()
  add(path_568669, "resourceGroupName", newJString(resourceGroupName))
  add(query_568670, "api-version", newJString(apiVersion))
  add(path_568669, "subscriptionId", newJString(subscriptionId))
  result = call_568668.call(path_568669, query_568670, nil, nil, nil)

var domainsGetDomains* = Call_DomainsGetDomains_568661(name: "domainsGetDomains",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_DomainsGetDomains_568662, base: "",
    url: url_DomainsGetDomains_568663, schemes: {Scheme.Https})
type
  Call_DomainsCreateOrUpdateDomain_568682 = ref object of OpenApiRestCall_567650
proc url_DomainsCreateOrUpdateDomain_568684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsCreateOrUpdateDomain_568683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568685 = path.getOrDefault("resourceGroupName")
  valid_568685 = validateParameter(valid_568685, JString, required = true,
                                 default = nil)
  if valid_568685 != nil:
    section.add "resourceGroupName", valid_568685
  var valid_568686 = path.getOrDefault("subscriptionId")
  valid_568686 = validateParameter(valid_568686, JString, required = true,
                                 default = nil)
  if valid_568686 != nil:
    section.add "subscriptionId", valid_568686
  var valid_568687 = path.getOrDefault("domainName")
  valid_568687 = validateParameter(valid_568687, JString, required = true,
                                 default = nil)
  if valid_568687 != nil:
    section.add "domainName", valid_568687
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568688 = query.getOrDefault("api-version")
  valid_568688 = validateParameter(valid_568688, JString, required = true,
                                 default = nil)
  if valid_568688 != nil:
    section.add "api-version", valid_568688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568690: Call_DomainsCreateOrUpdateDomain_568682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568690.validator(path, query, header, formData, body)
  let scheme = call_568690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568690.url(scheme.get, call_568690.host, call_568690.base,
                         call_568690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568690, url, valid)

proc call*(call_568691: Call_DomainsCreateOrUpdateDomain_568682;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          domain: JsonNode; domainName: string): Recallable =
  ## domainsCreateOrUpdateDomain
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_568692 = newJObject()
  var query_568693 = newJObject()
  var body_568694 = newJObject()
  add(path_568692, "resourceGroupName", newJString(resourceGroupName))
  add(query_568693, "api-version", newJString(apiVersion))
  add(path_568692, "subscriptionId", newJString(subscriptionId))
  if domain != nil:
    body_568694 = domain
  add(path_568692, "domainName", newJString(domainName))
  result = call_568691.call(path_568692, query_568693, nil, nil, body_568694)

var domainsCreateOrUpdateDomain* = Call_DomainsCreateOrUpdateDomain_568682(
    name: "domainsCreateOrUpdateDomain", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsCreateOrUpdateDomain_568683, base: "",
    url: url_DomainsCreateOrUpdateDomain_568684, schemes: {Scheme.Https})
type
  Call_DomainsGetDomain_568671 = ref object of OpenApiRestCall_567650
proc url_DomainsGetDomain_568673(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomain_568672(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568674 = path.getOrDefault("resourceGroupName")
  valid_568674 = validateParameter(valid_568674, JString, required = true,
                                 default = nil)
  if valid_568674 != nil:
    section.add "resourceGroupName", valid_568674
  var valid_568675 = path.getOrDefault("subscriptionId")
  valid_568675 = validateParameter(valid_568675, JString, required = true,
                                 default = nil)
  if valid_568675 != nil:
    section.add "subscriptionId", valid_568675
  var valid_568676 = path.getOrDefault("domainName")
  valid_568676 = validateParameter(valid_568676, JString, required = true,
                                 default = nil)
  if valid_568676 != nil:
    section.add "domainName", valid_568676
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568677 = query.getOrDefault("api-version")
  valid_568677 = validateParameter(valid_568677, JString, required = true,
                                 default = nil)
  if valid_568677 != nil:
    section.add "api-version", valid_568677
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568678: Call_DomainsGetDomain_568671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568678.validator(path, query, header, formData, body)
  let scheme = call_568678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568678.url(scheme.get, call_568678.host, call_568678.base,
                         call_568678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568678, url, valid)

proc call*(call_568679: Call_DomainsGetDomain_568671; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domainName: string): Recallable =
  ## domainsGetDomain
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_568680 = newJObject()
  var query_568681 = newJObject()
  add(path_568680, "resourceGroupName", newJString(resourceGroupName))
  add(query_568681, "api-version", newJString(apiVersion))
  add(path_568680, "subscriptionId", newJString(subscriptionId))
  add(path_568680, "domainName", newJString(domainName))
  result = call_568679.call(path_568680, query_568681, nil, nil, nil)

var domainsGetDomain* = Call_DomainsGetDomain_568671(name: "domainsGetDomain",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsGetDomain_568672, base: "",
    url: url_DomainsGetDomain_568673, schemes: {Scheme.Https})
type
  Call_DomainsUpdateDomain_568707 = ref object of OpenApiRestCall_567650
proc url_DomainsUpdateDomain_568709(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsUpdateDomain_568708(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568710 = path.getOrDefault("resourceGroupName")
  valid_568710 = validateParameter(valid_568710, JString, required = true,
                                 default = nil)
  if valid_568710 != nil:
    section.add "resourceGroupName", valid_568710
  var valid_568711 = path.getOrDefault("subscriptionId")
  valid_568711 = validateParameter(valid_568711, JString, required = true,
                                 default = nil)
  if valid_568711 != nil:
    section.add "subscriptionId", valid_568711
  var valid_568712 = path.getOrDefault("domainName")
  valid_568712 = validateParameter(valid_568712, JString, required = true,
                                 default = nil)
  if valid_568712 != nil:
    section.add "domainName", valid_568712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568713 = query.getOrDefault("api-version")
  valid_568713 = validateParameter(valid_568713, JString, required = true,
                                 default = nil)
  if valid_568713 != nil:
    section.add "api-version", valid_568713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568715: Call_DomainsUpdateDomain_568707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568715.validator(path, query, header, formData, body)
  let scheme = call_568715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568715.url(scheme.get, call_568715.host, call_568715.base,
                         call_568715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568715, url, valid)

proc call*(call_568716: Call_DomainsUpdateDomain_568707; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domain: JsonNode;
          domainName: string): Recallable =
  ## domainsUpdateDomain
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_568717 = newJObject()
  var query_568718 = newJObject()
  var body_568719 = newJObject()
  add(path_568717, "resourceGroupName", newJString(resourceGroupName))
  add(query_568718, "api-version", newJString(apiVersion))
  add(path_568717, "subscriptionId", newJString(subscriptionId))
  if domain != nil:
    body_568719 = domain
  add(path_568717, "domainName", newJString(domainName))
  result = call_568716.call(path_568717, query_568718, nil, nil, body_568719)

var domainsUpdateDomain* = Call_DomainsUpdateDomain_568707(
    name: "domainsUpdateDomain", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsUpdateDomain_568708, base: "",
    url: url_DomainsUpdateDomain_568709, schemes: {Scheme.Https})
type
  Call_DomainsDeleteDomain_568695 = ref object of OpenApiRestCall_567650
proc url_DomainsDeleteDomain_568697(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsDeleteDomain_568696(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568698 = path.getOrDefault("resourceGroupName")
  valid_568698 = validateParameter(valid_568698, JString, required = true,
                                 default = nil)
  if valid_568698 != nil:
    section.add "resourceGroupName", valid_568698
  var valid_568699 = path.getOrDefault("subscriptionId")
  valid_568699 = validateParameter(valid_568699, JString, required = true,
                                 default = nil)
  if valid_568699 != nil:
    section.add "subscriptionId", valid_568699
  var valid_568700 = path.getOrDefault("domainName")
  valid_568700 = validateParameter(valid_568700, JString, required = true,
                                 default = nil)
  if valid_568700 != nil:
    section.add "domainName", valid_568700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceHardDeleteDomain: JBool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568701 = query.getOrDefault("api-version")
  valid_568701 = validateParameter(valid_568701, JString, required = true,
                                 default = nil)
  if valid_568701 != nil:
    section.add "api-version", valid_568701
  var valid_568702 = query.getOrDefault("forceHardDeleteDomain")
  valid_568702 = validateParameter(valid_568702, JBool, required = false, default = nil)
  if valid_568702 != nil:
    section.add "forceHardDeleteDomain", valid_568702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568703: Call_DomainsDeleteDomain_568695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568703.validator(path, query, header, formData, body)
  let scheme = call_568703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568703.url(scheme.get, call_568703.host, call_568703.base,
                         call_568703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568703, url, valid)

proc call*(call_568704: Call_DomainsDeleteDomain_568695; resourceGroupName: string;
          apiVersion: string; subscriptionId: string; domainName: string;
          forceHardDeleteDomain: bool = false): Recallable =
  ## domainsDeleteDomain
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  ##   forceHardDeleteDomain: bool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  var path_568705 = newJObject()
  var query_568706 = newJObject()
  add(path_568705, "resourceGroupName", newJString(resourceGroupName))
  add(query_568706, "api-version", newJString(apiVersion))
  add(path_568705, "subscriptionId", newJString(subscriptionId))
  add(path_568705, "domainName", newJString(domainName))
  add(query_568706, "forceHardDeleteDomain", newJBool(forceHardDeleteDomain))
  result = call_568704.call(path_568705, query_568706, nil, nil, nil)

var domainsDeleteDomain* = Call_DomainsDeleteDomain_568695(
    name: "domainsDeleteDomain", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsDeleteDomain_568696, base: "",
    url: url_DomainsDeleteDomain_568697, schemes: {Scheme.Https})
type
  Call_DomainsGetDomainOperation_568720 = ref object of OpenApiRestCall_567650
proc url_DomainsGetDomainOperation_568722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomainOperation_568721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   domainName: JString (required)
  ##             : Name of the domain
  ##   operationId: JString (required)
  ##              : Domain purchase operation Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568723 = path.getOrDefault("resourceGroupName")
  valid_568723 = validateParameter(valid_568723, JString, required = true,
                                 default = nil)
  if valid_568723 != nil:
    section.add "resourceGroupName", valid_568723
  var valid_568724 = path.getOrDefault("subscriptionId")
  valid_568724 = validateParameter(valid_568724, JString, required = true,
                                 default = nil)
  if valid_568724 != nil:
    section.add "subscriptionId", valid_568724
  var valid_568725 = path.getOrDefault("domainName")
  valid_568725 = validateParameter(valid_568725, JString, required = true,
                                 default = nil)
  if valid_568725 != nil:
    section.add "domainName", valid_568725
  var valid_568726 = path.getOrDefault("operationId")
  valid_568726 = validateParameter(valid_568726, JString, required = true,
                                 default = nil)
  if valid_568726 != nil:
    section.add "operationId", valid_568726
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568727 = query.getOrDefault("api-version")
  valid_568727 = validateParameter(valid_568727, JString, required = true,
                                 default = nil)
  if valid_568727 != nil:
    section.add "api-version", valid_568727
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568728: Call_DomainsGetDomainOperation_568720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568728.validator(path, query, header, formData, body)
  let scheme = call_568728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568728.url(scheme.get, call_568728.host, call_568728.base,
                         call_568728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568728, url, valid)

proc call*(call_568729: Call_DomainsGetDomainOperation_568720;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          domainName: string; operationId: string): Recallable =
  ## domainsGetDomainOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainName: string (required)
  ##             : Name of the domain
  ##   operationId: string (required)
  ##              : Domain purchase operation Id
  var path_568730 = newJObject()
  var query_568731 = newJObject()
  add(path_568730, "resourceGroupName", newJString(resourceGroupName))
  add(query_568731, "api-version", newJString(apiVersion))
  add(path_568730, "subscriptionId", newJString(subscriptionId))
  add(path_568730, "domainName", newJString(domainName))
  add(path_568730, "operationId", newJString(operationId))
  result = call_568729.call(path_568730, query_568731, nil, nil, nil)

var domainsGetDomainOperation* = Call_DomainsGetDomainOperation_568720(
    name: "domainsGetDomainOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}",
    validator: validate_DomainsGetDomainOperation_568721, base: "",
    url: url_DomainsGetDomainOperation_568722, schemes: {Scheme.Https})
type
  Call_UsageGetUsage_568732 = ref object of OpenApiRestCall_567650
proc url_UsageGetUsage_568734(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "environmentName" in path, "`environmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web.Admin/environments/"),
               (kind: VariableSegment, value: "environmentName"),
               (kind: ConstantSegment, value: "/usage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UsageGetUsage_568733(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   environmentName: JString (required)
  ##                  : Environment name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568735 = path.getOrDefault("resourceGroupName")
  valid_568735 = validateParameter(valid_568735, JString, required = true,
                                 default = nil)
  if valid_568735 != nil:
    section.add "resourceGroupName", valid_568735
  var valid_568736 = path.getOrDefault("subscriptionId")
  valid_568736 = validateParameter(valid_568736, JString, required = true,
                                 default = nil)
  if valid_568736 != nil:
    section.add "subscriptionId", valid_568736
  var valid_568737 = path.getOrDefault("environmentName")
  valid_568737 = validateParameter(valid_568737, JString, required = true,
                                 default = nil)
  if valid_568737 != nil:
    section.add "environmentName", valid_568737
  result.add "path", section
  ## parameters in `query` object:
  ##   batchSize: JInt (required)
  ##            : size of the batch to be returned.
  ##   api-version: JString (required)
  ##              : API Version
  ##   lastId: JString (required)
  ##         : Last marker that was returned from the batch
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `batchSize` field"
  var valid_568738 = query.getOrDefault("batchSize")
  valid_568738 = validateParameter(valid_568738, JInt, required = true, default = nil)
  if valid_568738 != nil:
    section.add "batchSize", valid_568738
  var valid_568739 = query.getOrDefault("api-version")
  valid_568739 = validateParameter(valid_568739, JString, required = true,
                                 default = nil)
  if valid_568739 != nil:
    section.add "api-version", valid_568739
  var valid_568740 = query.getOrDefault("lastId")
  valid_568740 = validateParameter(valid_568740, JString, required = true,
                                 default = nil)
  if valid_568740 != nil:
    section.add "lastId", valid_568740
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568741: Call_UsageGetUsage_568732; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568741.validator(path, query, header, formData, body)
  let scheme = call_568741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568741.url(scheme.get, call_568741.host, call_568741.base,
                         call_568741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568741, url, valid)

proc call*(call_568742: Call_UsageGetUsage_568732; batchSize: int;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          lastId: string; environmentName: string): Recallable =
  ## usageGetUsage
  ##   batchSize: int (required)
  ##            : size of the batch to be returned.
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   lastId: string (required)
  ##         : Last marker that was returned from the batch
  ##   environmentName: string (required)
  ##                  : Environment name
  var path_568743 = newJObject()
  var query_568744 = newJObject()
  add(query_568744, "batchSize", newJInt(batchSize))
  add(path_568743, "resourceGroupName", newJString(resourceGroupName))
  add(query_568744, "api-version", newJString(apiVersion))
  add(path_568743, "subscriptionId", newJString(subscriptionId))
  add(query_568744, "lastId", newJString(lastId))
  add(path_568743, "environmentName", newJString(environmentName))
  result = call_568742.call(path_568743, query_568744, nil, nil, nil)

var usageGetUsage* = Call_UsageGetUsage_568732(name: "usageGetUsage",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environments/{environmentName}/usage",
    validator: validate_UsageGetUsage_568733, base: "", url: url_UsageGetUsage_568734,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificates_568745 = ref object of OpenApiRestCall_567650
proc url_CertificatesGetCertificates_568747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificates_568746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568748 = path.getOrDefault("resourceGroupName")
  valid_568748 = validateParameter(valid_568748, JString, required = true,
                                 default = nil)
  if valid_568748 != nil:
    section.add "resourceGroupName", valid_568748
  var valid_568749 = path.getOrDefault("subscriptionId")
  valid_568749 = validateParameter(valid_568749, JString, required = true,
                                 default = nil)
  if valid_568749 != nil:
    section.add "subscriptionId", valid_568749
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568750 = query.getOrDefault("api-version")
  valid_568750 = validateParameter(valid_568750, JString, required = true,
                                 default = nil)
  if valid_568750 != nil:
    section.add "api-version", valid_568750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568751: Call_CertificatesGetCertificates_568745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568751.validator(path, query, header, formData, body)
  let scheme = call_568751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568751.url(scheme.get, call_568751.host, call_568751.base,
                         call_568751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568751, url, valid)

proc call*(call_568752: Call_CertificatesGetCertificates_568745;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## certificatesGetCertificates
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568753 = newJObject()
  var query_568754 = newJObject()
  add(path_568753, "resourceGroupName", newJString(resourceGroupName))
  add(query_568754, "api-version", newJString(apiVersion))
  add(path_568753, "subscriptionId", newJString(subscriptionId))
  result = call_568752.call(path_568753, query_568754, nil, nil, nil)

var certificatesGetCertificates* = Call_CertificatesGetCertificates_568745(
    name: "certificatesGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
    validator: validate_CertificatesGetCertificates_568746, base: "",
    url: url_CertificatesGetCertificates_568747, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCertificate_568766 = ref object of OpenApiRestCall_567650
proc url_CertificatesCreateOrUpdateCertificate_568768(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCertificate_568767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568769 = path.getOrDefault("resourceGroupName")
  valid_568769 = validateParameter(valid_568769, JString, required = true,
                                 default = nil)
  if valid_568769 != nil:
    section.add "resourceGroupName", valid_568769
  var valid_568770 = path.getOrDefault("name")
  valid_568770 = validateParameter(valid_568770, JString, required = true,
                                 default = nil)
  if valid_568770 != nil:
    section.add "name", valid_568770
  var valid_568771 = path.getOrDefault("subscriptionId")
  valid_568771 = validateParameter(valid_568771, JString, required = true,
                                 default = nil)
  if valid_568771 != nil:
    section.add "subscriptionId", valid_568771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568772 = query.getOrDefault("api-version")
  valid_568772 = validateParameter(valid_568772, JString, required = true,
                                 default = nil)
  if valid_568772 != nil:
    section.add "api-version", valid_568772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568774: Call_CertificatesCreateOrUpdateCertificate_568766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568774.validator(path, query, header, formData, body)
  let scheme = call_568774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568774.url(scheme.get, call_568774.host, call_568774.base,
                         call_568774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568774, url, valid)

proc call*(call_568775: Call_CertificatesCreateOrUpdateCertificate_568766;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_568776 = newJObject()
  var query_568777 = newJObject()
  var body_568778 = newJObject()
  add(path_568776, "resourceGroupName", newJString(resourceGroupName))
  add(query_568777, "api-version", newJString(apiVersion))
  add(path_568776, "name", newJString(name))
  add(path_568776, "subscriptionId", newJString(subscriptionId))
  if certificateEnvelope != nil:
    body_568778 = certificateEnvelope
  result = call_568775.call(path_568776, query_568777, nil, nil, body_568778)

var certificatesCreateOrUpdateCertificate* = Call_CertificatesCreateOrUpdateCertificate_568766(
    name: "certificatesCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesCreateOrUpdateCertificate_568767, base: "",
    url: url_CertificatesCreateOrUpdateCertificate_568768, schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificate_568755 = ref object of OpenApiRestCall_567650
proc url_CertificatesGetCertificate_568757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificate_568756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568758 = path.getOrDefault("resourceGroupName")
  valid_568758 = validateParameter(valid_568758, JString, required = true,
                                 default = nil)
  if valid_568758 != nil:
    section.add "resourceGroupName", valid_568758
  var valid_568759 = path.getOrDefault("name")
  valid_568759 = validateParameter(valid_568759, JString, required = true,
                                 default = nil)
  if valid_568759 != nil:
    section.add "name", valid_568759
  var valid_568760 = path.getOrDefault("subscriptionId")
  valid_568760 = validateParameter(valid_568760, JString, required = true,
                                 default = nil)
  if valid_568760 != nil:
    section.add "subscriptionId", valid_568760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568761 = query.getOrDefault("api-version")
  valid_568761 = validateParameter(valid_568761, JString, required = true,
                                 default = nil)
  if valid_568761 != nil:
    section.add "api-version", valid_568761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568762: Call_CertificatesGetCertificate_568755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568762.validator(path, query, header, formData, body)
  let scheme = call_568762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568762.url(scheme.get, call_568762.host, call_568762.base,
                         call_568762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568762, url, valid)

proc call*(call_568763: Call_CertificatesGetCertificate_568755;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesGetCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568764 = newJObject()
  var query_568765 = newJObject()
  add(path_568764, "resourceGroupName", newJString(resourceGroupName))
  add(query_568765, "api-version", newJString(apiVersion))
  add(path_568764, "name", newJString(name))
  add(path_568764, "subscriptionId", newJString(subscriptionId))
  result = call_568763.call(path_568764, query_568765, nil, nil, nil)

var certificatesGetCertificate* = Call_CertificatesGetCertificate_568755(
    name: "certificatesGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesGetCertificate_568756, base: "",
    url: url_CertificatesGetCertificate_568757, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCertificate_568790 = ref object of OpenApiRestCall_567650
proc url_CertificatesUpdateCertificate_568792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCertificate_568791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568793 = path.getOrDefault("resourceGroupName")
  valid_568793 = validateParameter(valid_568793, JString, required = true,
                                 default = nil)
  if valid_568793 != nil:
    section.add "resourceGroupName", valid_568793
  var valid_568794 = path.getOrDefault("name")
  valid_568794 = validateParameter(valid_568794, JString, required = true,
                                 default = nil)
  if valid_568794 != nil:
    section.add "name", valid_568794
  var valid_568795 = path.getOrDefault("subscriptionId")
  valid_568795 = validateParameter(valid_568795, JString, required = true,
                                 default = nil)
  if valid_568795 != nil:
    section.add "subscriptionId", valid_568795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568796 = query.getOrDefault("api-version")
  valid_568796 = validateParameter(valid_568796, JString, required = true,
                                 default = nil)
  if valid_568796 != nil:
    section.add "api-version", valid_568796
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568798: Call_CertificatesUpdateCertificate_568790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568798.validator(path, query, header, formData, body)
  let scheme = call_568798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568798.url(scheme.get, call_568798.host, call_568798.base,
                         call_568798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568798, url, valid)

proc call*(call_568799: Call_CertificatesUpdateCertificate_568790;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_568800 = newJObject()
  var query_568801 = newJObject()
  var body_568802 = newJObject()
  add(path_568800, "resourceGroupName", newJString(resourceGroupName))
  add(query_568801, "api-version", newJString(apiVersion))
  add(path_568800, "name", newJString(name))
  add(path_568800, "subscriptionId", newJString(subscriptionId))
  if certificateEnvelope != nil:
    body_568802 = certificateEnvelope
  result = call_568799.call(path_568800, query_568801, nil, nil, body_568802)

var certificatesUpdateCertificate* = Call_CertificatesUpdateCertificate_568790(
    name: "certificatesUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesUpdateCertificate_568791, base: "",
    url: url_CertificatesUpdateCertificate_568792, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCertificate_568779 = ref object of OpenApiRestCall_567650
proc url_CertificatesDeleteCertificate_568781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCertificate_568780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568782 = path.getOrDefault("resourceGroupName")
  valid_568782 = validateParameter(valid_568782, JString, required = true,
                                 default = nil)
  if valid_568782 != nil:
    section.add "resourceGroupName", valid_568782
  var valid_568783 = path.getOrDefault("name")
  valid_568783 = validateParameter(valid_568783, JString, required = true,
                                 default = nil)
  if valid_568783 != nil:
    section.add "name", valid_568783
  var valid_568784 = path.getOrDefault("subscriptionId")
  valid_568784 = validateParameter(valid_568784, JString, required = true,
                                 default = nil)
  if valid_568784 != nil:
    section.add "subscriptionId", valid_568784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568785 = query.getOrDefault("api-version")
  valid_568785 = validateParameter(valid_568785, JString, required = true,
                                 default = nil)
  if valid_568785 != nil:
    section.add "api-version", valid_568785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568786: Call_CertificatesDeleteCertificate_568779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568786.validator(path, query, header, formData, body)
  let scheme = call_568786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568786.url(scheme.get, call_568786.host, call_568786.base,
                         call_568786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568786, url, valid)

proc call*(call_568787: Call_CertificatesDeleteCertificate_568779;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesDeleteCertificate
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568788 = newJObject()
  var query_568789 = newJObject()
  add(path_568788, "resourceGroupName", newJString(resourceGroupName))
  add(query_568789, "api-version", newJString(apiVersion))
  add(path_568788, "name", newJString(name))
  add(path_568788, "subscriptionId", newJString(subscriptionId))
  result = call_568787.call(path_568788, query_568789, nil, nil, nil)

var certificatesDeleteCertificate* = Call_CertificatesDeleteCertificate_568779(
    name: "certificatesDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesDeleteCertificate_568780, base: "",
    url: url_CertificatesDeleteCertificate_568781, schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileServices_568803 = ref object of OpenApiRestCall_567650
proc url_ClassicMobileServicesGetClassicMobileServices_568805(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileServices_568804(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568806 = path.getOrDefault("resourceGroupName")
  valid_568806 = validateParameter(valid_568806, JString, required = true,
                                 default = nil)
  if valid_568806 != nil:
    section.add "resourceGroupName", valid_568806
  var valid_568807 = path.getOrDefault("subscriptionId")
  valid_568807 = validateParameter(valid_568807, JString, required = true,
                                 default = nil)
  if valid_568807 != nil:
    section.add "subscriptionId", valid_568807
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568808 = query.getOrDefault("api-version")
  valid_568808 = validateParameter(valid_568808, JString, required = true,
                                 default = nil)
  if valid_568808 != nil:
    section.add "api-version", valid_568808
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568809: Call_ClassicMobileServicesGetClassicMobileServices_568803;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568809.validator(path, query, header, formData, body)
  let scheme = call_568809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568809.url(scheme.get, call_568809.host, call_568809.base,
                         call_568809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568809, url, valid)

proc call*(call_568810: Call_ClassicMobileServicesGetClassicMobileServices_568803;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## classicMobileServicesGetClassicMobileServices
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568811 = newJObject()
  var query_568812 = newJObject()
  add(path_568811, "resourceGroupName", newJString(resourceGroupName))
  add(query_568812, "api-version", newJString(apiVersion))
  add(path_568811, "subscriptionId", newJString(subscriptionId))
  result = call_568810.call(path_568811, query_568812, nil, nil, nil)

var classicMobileServicesGetClassicMobileServices* = Call_ClassicMobileServicesGetClassicMobileServices_568803(
    name: "classicMobileServicesGetClassicMobileServices",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_ClassicMobileServicesGetClassicMobileServices_568804,
    base: "", url: url_ClassicMobileServicesGetClassicMobileServices_568805,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileService_568813 = ref object of OpenApiRestCall_567650
proc url_ClassicMobileServicesGetClassicMobileService_568815(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileService_568814(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568816 = path.getOrDefault("resourceGroupName")
  valid_568816 = validateParameter(valid_568816, JString, required = true,
                                 default = nil)
  if valid_568816 != nil:
    section.add "resourceGroupName", valid_568816
  var valid_568817 = path.getOrDefault("name")
  valid_568817 = validateParameter(valid_568817, JString, required = true,
                                 default = nil)
  if valid_568817 != nil:
    section.add "name", valid_568817
  var valid_568818 = path.getOrDefault("subscriptionId")
  valid_568818 = validateParameter(valid_568818, JString, required = true,
                                 default = nil)
  if valid_568818 != nil:
    section.add "subscriptionId", valid_568818
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568819 = query.getOrDefault("api-version")
  valid_568819 = validateParameter(valid_568819, JString, required = true,
                                 default = nil)
  if valid_568819 != nil:
    section.add "api-version", valid_568819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568820: Call_ClassicMobileServicesGetClassicMobileService_568813;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568820.validator(path, query, header, formData, body)
  let scheme = call_568820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568820.url(scheme.get, call_568820.host, call_568820.base,
                         call_568820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568820, url, valid)

proc call*(call_568821: Call_ClassicMobileServicesGetClassicMobileService_568813;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## classicMobileServicesGetClassicMobileService
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568822 = newJObject()
  var query_568823 = newJObject()
  add(path_568822, "resourceGroupName", newJString(resourceGroupName))
  add(query_568823, "api-version", newJString(apiVersion))
  add(path_568822, "name", newJString(name))
  add(path_568822, "subscriptionId", newJString(subscriptionId))
  result = call_568821.call(path_568822, query_568823, nil, nil, nil)

var classicMobileServicesGetClassicMobileService* = Call_ClassicMobileServicesGetClassicMobileService_568813(
    name: "classicMobileServicesGetClassicMobileService",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesGetClassicMobileService_568814,
    base: "", url: url_ClassicMobileServicesGetClassicMobileService_568815,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesDeleteClassicMobileService_568824 = ref object of OpenApiRestCall_567650
proc url_ClassicMobileServicesDeleteClassicMobileService_568826(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesDeleteClassicMobileService_568825(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568827 = path.getOrDefault("resourceGroupName")
  valid_568827 = validateParameter(valid_568827, JString, required = true,
                                 default = nil)
  if valid_568827 != nil:
    section.add "resourceGroupName", valid_568827
  var valid_568828 = path.getOrDefault("name")
  valid_568828 = validateParameter(valid_568828, JString, required = true,
                                 default = nil)
  if valid_568828 != nil:
    section.add "name", valid_568828
  var valid_568829 = path.getOrDefault("subscriptionId")
  valid_568829 = validateParameter(valid_568829, JString, required = true,
                                 default = nil)
  if valid_568829 != nil:
    section.add "subscriptionId", valid_568829
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568830 = query.getOrDefault("api-version")
  valid_568830 = validateParameter(valid_568830, JString, required = true,
                                 default = nil)
  if valid_568830 != nil:
    section.add "api-version", valid_568830
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568831: Call_ClassicMobileServicesDeleteClassicMobileService_568824;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568831.validator(path, query, header, formData, body)
  let scheme = call_568831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568831.url(scheme.get, call_568831.host, call_568831.base,
                         call_568831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568831, url, valid)

proc call*(call_568832: Call_ClassicMobileServicesDeleteClassicMobileService_568824;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## classicMobileServicesDeleteClassicMobileService
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568833 = newJObject()
  var query_568834 = newJObject()
  add(path_568833, "resourceGroupName", newJString(resourceGroupName))
  add(query_568834, "api-version", newJString(apiVersion))
  add(path_568833, "name", newJString(name))
  add(path_568833, "subscriptionId", newJString(subscriptionId))
  result = call_568832.call(path_568833, query_568834, nil, nil, nil)

var classicMobileServicesDeleteClassicMobileService* = Call_ClassicMobileServicesDeleteClassicMobileService_568824(
    name: "classicMobileServicesDeleteClassicMobileService",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesDeleteClassicMobileService_568825,
    base: "", url: url_ClassicMobileServicesDeleteClassicMobileService_568826,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCsrs_568835 = ref object of OpenApiRestCall_567650
proc url_CertificatesGetCsrs_568837(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsrs_568836(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568838 = path.getOrDefault("resourceGroupName")
  valid_568838 = validateParameter(valid_568838, JString, required = true,
                                 default = nil)
  if valid_568838 != nil:
    section.add "resourceGroupName", valid_568838
  var valid_568839 = path.getOrDefault("subscriptionId")
  valid_568839 = validateParameter(valid_568839, JString, required = true,
                                 default = nil)
  if valid_568839 != nil:
    section.add "subscriptionId", valid_568839
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568840 = query.getOrDefault("api-version")
  valid_568840 = validateParameter(valid_568840, JString, required = true,
                                 default = nil)
  if valid_568840 != nil:
    section.add "api-version", valid_568840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568841: Call_CertificatesGetCsrs_568835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568841.validator(path, query, header, formData, body)
  let scheme = call_568841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568841.url(scheme.get, call_568841.host, call_568841.base,
                         call_568841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568841, url, valid)

proc call*(call_568842: Call_CertificatesGetCsrs_568835; resourceGroupName: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## certificatesGetCsrs
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568843 = newJObject()
  var query_568844 = newJObject()
  add(path_568843, "resourceGroupName", newJString(resourceGroupName))
  add(query_568844, "api-version", newJString(apiVersion))
  add(path_568843, "subscriptionId", newJString(subscriptionId))
  result = call_568842.call(path_568843, query_568844, nil, nil, nil)

var certificatesGetCsrs* = Call_CertificatesGetCsrs_568835(
    name: "certificatesGetCsrs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs",
    validator: validate_CertificatesGetCsrs_568836, base: "",
    url: url_CertificatesGetCsrs_568837, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCsr_568856 = ref object of OpenApiRestCall_567650
proc url_CertificatesCreateOrUpdateCsr_568858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCsr_568857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568859 = path.getOrDefault("resourceGroupName")
  valid_568859 = validateParameter(valid_568859, JString, required = true,
                                 default = nil)
  if valid_568859 != nil:
    section.add "resourceGroupName", valid_568859
  var valid_568860 = path.getOrDefault("name")
  valid_568860 = validateParameter(valid_568860, JString, required = true,
                                 default = nil)
  if valid_568860 != nil:
    section.add "name", valid_568860
  var valid_568861 = path.getOrDefault("subscriptionId")
  valid_568861 = validateParameter(valid_568861, JString, required = true,
                                 default = nil)
  if valid_568861 != nil:
    section.add "subscriptionId", valid_568861
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568862 = query.getOrDefault("api-version")
  valid_568862 = validateParameter(valid_568862, JString, required = true,
                                 default = nil)
  if valid_568862 != nil:
    section.add "api-version", valid_568862
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568864: Call_CertificatesCreateOrUpdateCsr_568856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568864.validator(path, query, header, formData, body)
  let scheme = call_568864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568864.url(scheme.get, call_568864.host, call_568864.base,
                         call_568864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568864, url, valid)

proc call*(call_568865: Call_CertificatesCreateOrUpdateCsr_568856;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; csrEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_568866 = newJObject()
  var query_568867 = newJObject()
  var body_568868 = newJObject()
  add(path_568866, "resourceGroupName", newJString(resourceGroupName))
  add(query_568867, "api-version", newJString(apiVersion))
  add(path_568866, "name", newJString(name))
  add(path_568866, "subscriptionId", newJString(subscriptionId))
  if csrEnvelope != nil:
    body_568868 = csrEnvelope
  result = call_568865.call(path_568866, query_568867, nil, nil, body_568868)

var certificatesCreateOrUpdateCsr* = Call_CertificatesCreateOrUpdateCsr_568856(
    name: "certificatesCreateOrUpdateCsr", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesCreateOrUpdateCsr_568857, base: "",
    url: url_CertificatesCreateOrUpdateCsr_568858, schemes: {Scheme.Https})
type
  Call_CertificatesGetCsr_568845 = ref object of OpenApiRestCall_567650
proc url_CertificatesGetCsr_568847(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsr_568846(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568848 = path.getOrDefault("resourceGroupName")
  valid_568848 = validateParameter(valid_568848, JString, required = true,
                                 default = nil)
  if valid_568848 != nil:
    section.add "resourceGroupName", valid_568848
  var valid_568849 = path.getOrDefault("name")
  valid_568849 = validateParameter(valid_568849, JString, required = true,
                                 default = nil)
  if valid_568849 != nil:
    section.add "name", valid_568849
  var valid_568850 = path.getOrDefault("subscriptionId")
  valid_568850 = validateParameter(valid_568850, JString, required = true,
                                 default = nil)
  if valid_568850 != nil:
    section.add "subscriptionId", valid_568850
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568851 = query.getOrDefault("api-version")
  valid_568851 = validateParameter(valid_568851, JString, required = true,
                                 default = nil)
  if valid_568851 != nil:
    section.add "api-version", valid_568851
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568852: Call_CertificatesGetCsr_568845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568852.validator(path, query, header, formData, body)
  let scheme = call_568852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568852.url(scheme.get, call_568852.host, call_568852.base,
                         call_568852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568852, url, valid)

proc call*(call_568853: Call_CertificatesGetCsr_568845; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## certificatesGetCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568854 = newJObject()
  var query_568855 = newJObject()
  add(path_568854, "resourceGroupName", newJString(resourceGroupName))
  add(query_568855, "api-version", newJString(apiVersion))
  add(path_568854, "name", newJString(name))
  add(path_568854, "subscriptionId", newJString(subscriptionId))
  result = call_568853.call(path_568854, query_568855, nil, nil, nil)

var certificatesGetCsr* = Call_CertificatesGetCsr_568845(
    name: "certificatesGetCsr", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesGetCsr_568846, base: "",
    url: url_CertificatesGetCsr_568847, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCsr_568880 = ref object of OpenApiRestCall_567650
proc url_CertificatesUpdateCsr_568882(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCsr_568881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568883 = path.getOrDefault("resourceGroupName")
  valid_568883 = validateParameter(valid_568883, JString, required = true,
                                 default = nil)
  if valid_568883 != nil:
    section.add "resourceGroupName", valid_568883
  var valid_568884 = path.getOrDefault("name")
  valid_568884 = validateParameter(valid_568884, JString, required = true,
                                 default = nil)
  if valid_568884 != nil:
    section.add "name", valid_568884
  var valid_568885 = path.getOrDefault("subscriptionId")
  valid_568885 = validateParameter(valid_568885, JString, required = true,
                                 default = nil)
  if valid_568885 != nil:
    section.add "subscriptionId", valid_568885
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568886 = query.getOrDefault("api-version")
  valid_568886 = validateParameter(valid_568886, JString, required = true,
                                 default = nil)
  if valid_568886 != nil:
    section.add "api-version", valid_568886
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568888: Call_CertificatesUpdateCsr_568880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568888.validator(path, query, header, formData, body)
  let scheme = call_568888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568888.url(scheme.get, call_568888.host, call_568888.base,
                         call_568888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568888, url, valid)

proc call*(call_568889: Call_CertificatesUpdateCsr_568880;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; csrEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_568890 = newJObject()
  var query_568891 = newJObject()
  var body_568892 = newJObject()
  add(path_568890, "resourceGroupName", newJString(resourceGroupName))
  add(query_568891, "api-version", newJString(apiVersion))
  add(path_568890, "name", newJString(name))
  add(path_568890, "subscriptionId", newJString(subscriptionId))
  if csrEnvelope != nil:
    body_568892 = csrEnvelope
  result = call_568889.call(path_568890, query_568891, nil, nil, body_568892)

var certificatesUpdateCsr* = Call_CertificatesUpdateCsr_568880(
    name: "certificatesUpdateCsr", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesUpdateCsr_568881, base: "",
    url: url_CertificatesUpdateCsr_568882, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCsr_568869 = ref object of OpenApiRestCall_567650
proc url_CertificatesDeleteCsr_568871(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCsr_568870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568872 = path.getOrDefault("resourceGroupName")
  valid_568872 = validateParameter(valid_568872, JString, required = true,
                                 default = nil)
  if valid_568872 != nil:
    section.add "resourceGroupName", valid_568872
  var valid_568873 = path.getOrDefault("name")
  valid_568873 = validateParameter(valid_568873, JString, required = true,
                                 default = nil)
  if valid_568873 != nil:
    section.add "name", valid_568873
  var valid_568874 = path.getOrDefault("subscriptionId")
  valid_568874 = validateParameter(valid_568874, JString, required = true,
                                 default = nil)
  if valid_568874 != nil:
    section.add "subscriptionId", valid_568874
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568875 = query.getOrDefault("api-version")
  valid_568875 = validateParameter(valid_568875, JString, required = true,
                                 default = nil)
  if valid_568875 != nil:
    section.add "api-version", valid_568875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568876: Call_CertificatesDeleteCsr_568869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568876.validator(path, query, header, formData, body)
  let scheme = call_568876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568876.url(scheme.get, call_568876.host, call_568876.base,
                         call_568876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568876, url, valid)

proc call*(call_568877: Call_CertificatesDeleteCsr_568869;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## certificatesDeleteCsr
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568878 = newJObject()
  var query_568879 = newJObject()
  add(path_568878, "resourceGroupName", newJString(resourceGroupName))
  add(query_568879, "api-version", newJString(apiVersion))
  add(path_568878, "name", newJString(name))
  add(path_568878, "subscriptionId", newJString(subscriptionId))
  result = call_568877.call(path_568878, query_568879, nil, nil, nil)

var certificatesDeleteCsr* = Call_CertificatesDeleteCsr_568869(
    name: "certificatesDeleteCsr", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesDeleteCsr_568870, base: "",
    url: url_CertificatesDeleteCsr_568871, schemes: {Scheme.Https})
type
  Call_SitesGetDeletedSites_568893 = ref object of OpenApiRestCall_567650
proc url_SitesGetDeletedSites_568895(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/deletedSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeletedSites_568894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568896 = path.getOrDefault("resourceGroupName")
  valid_568896 = validateParameter(valid_568896, JString, required = true,
                                 default = nil)
  if valid_568896 != nil:
    section.add "resourceGroupName", valid_568896
  var valid_568897 = path.getOrDefault("subscriptionId")
  valid_568897 = validateParameter(valid_568897, JString, required = true,
                                 default = nil)
  if valid_568897 != nil:
    section.add "subscriptionId", valid_568897
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  section = newJObject()
  var valid_568898 = query.getOrDefault("propertiesToInclude")
  valid_568898 = validateParameter(valid_568898, JString, required = false,
                                 default = nil)
  if valid_568898 != nil:
    section.add "propertiesToInclude", valid_568898
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568899 = query.getOrDefault("api-version")
  valid_568899 = validateParameter(valid_568899, JString, required = true,
                                 default = nil)
  if valid_568899 != nil:
    section.add "api-version", valid_568899
  var valid_568900 = query.getOrDefault("includeSiteTypes")
  valid_568900 = validateParameter(valid_568900, JString, required = false,
                                 default = nil)
  if valid_568900 != nil:
    section.add "includeSiteTypes", valid_568900
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568901: Call_SitesGetDeletedSites_568893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_568901.validator(path, query, header, formData, body)
  let scheme = call_568901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568901.url(scheme.get, call_568901.host, call_568901.base,
                         call_568901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568901, url, valid)

proc call*(call_568902: Call_SitesGetDeletedSites_568893;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          propertiesToInclude: string = ""; includeSiteTypes: string = ""): Recallable =
  ## sitesGetDeletedSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  var path_568903 = newJObject()
  var query_568904 = newJObject()
  add(path_568903, "resourceGroupName", newJString(resourceGroupName))
  add(query_568904, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_568904, "api-version", newJString(apiVersion))
  add(path_568903, "subscriptionId", newJString(subscriptionId))
  add(query_568904, "includeSiteTypes", newJString(includeSiteTypes))
  result = call_568902.call(path_568903, query_568904, nil, nil, nil)

var sitesGetDeletedSites* = Call_SitesGetDeletedSites_568893(
    name: "sitesGetDeletedSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites",
    validator: validate_SitesGetDeletedSites_568894, base: "",
    url: url_SitesGetDeletedSites_568895, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironments_568905 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironments_568907(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironments_568906(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568908 = path.getOrDefault("resourceGroupName")
  valid_568908 = validateParameter(valid_568908, JString, required = true,
                                 default = nil)
  if valid_568908 != nil:
    section.add "resourceGroupName", valid_568908
  var valid_568909 = path.getOrDefault("subscriptionId")
  valid_568909 = validateParameter(valid_568909, JString, required = true,
                                 default = nil)
  if valid_568909 != nil:
    section.add "subscriptionId", valid_568909
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568910 = query.getOrDefault("api-version")
  valid_568910 = validateParameter(valid_568910, JString, required = true,
                                 default = nil)
  if valid_568910 != nil:
    section.add "api-version", valid_568910
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568911: Call_HostingEnvironmentsGetHostingEnvironments_568905;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568911.validator(path, query, header, formData, body)
  let scheme = call_568911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568911.url(scheme.get, call_568911.host, call_568911.base,
                         call_568911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568911, url, valid)

proc call*(call_568912: Call_HostingEnvironmentsGetHostingEnvironments_568905;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568913 = newJObject()
  var query_568914 = newJObject()
  add(path_568913, "resourceGroupName", newJString(resourceGroupName))
  add(query_568914, "api-version", newJString(apiVersion))
  add(path_568913, "subscriptionId", newJString(subscriptionId))
  result = call_568912.call(path_568913, query_568914, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironments* = Call_HostingEnvironmentsGetHostingEnvironments_568905(
    name: "hostingEnvironmentsGetHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_HostingEnvironmentsGetHostingEnvironments_568906,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironments_568907,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568926 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568928(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568927(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568929 = path.getOrDefault("resourceGroupName")
  valid_568929 = validateParameter(valid_568929, JString, required = true,
                                 default = nil)
  if valid_568929 != nil:
    section.add "resourceGroupName", valid_568929
  var valid_568930 = path.getOrDefault("name")
  valid_568930 = validateParameter(valid_568930, JString, required = true,
                                 default = nil)
  if valid_568930 != nil:
    section.add "name", valid_568930
  var valid_568931 = path.getOrDefault("subscriptionId")
  valid_568931 = validateParameter(valid_568931, JString, required = true,
                                 default = nil)
  if valid_568931 != nil:
    section.add "subscriptionId", valid_568931
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568932 = query.getOrDefault("api-version")
  valid_568932 = validateParameter(valid_568932, JString, required = true,
                                 default = nil)
  if valid_568932 != nil:
    section.add "api-version", valid_568932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568934: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568926;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568934.validator(path, query, header, formData, body)
  let scheme = call_568934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568934.url(scheme.get, call_568934.host, call_568934.base,
                         call_568934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568934, url, valid)

proc call*(call_568935: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568926;
          resourceGroupName: string; apiVersion: string; name: string;
          hostingEnvironmentEnvelope: JsonNode; subscriptionId: string): Recallable =
  ## hostingEnvironmentsCreateOrUpdateHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568936 = newJObject()
  var query_568937 = newJObject()
  var body_568938 = newJObject()
  add(path_568936, "resourceGroupName", newJString(resourceGroupName))
  add(query_568937, "api-version", newJString(apiVersion))
  add(path_568936, "name", newJString(name))
  if hostingEnvironmentEnvelope != nil:
    body_568938 = hostingEnvironmentEnvelope
  add(path_568936, "subscriptionId", newJString(subscriptionId))
  result = call_568935.call(path_568936, query_568937, nil, nil, body_568938)

var hostingEnvironmentsCreateOrUpdateHostingEnvironment* = Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568926(
    name: "hostingEnvironmentsCreateOrUpdateHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568927,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_568928,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironment_568915 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironment_568917(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironment_568916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568918 = path.getOrDefault("resourceGroupName")
  valid_568918 = validateParameter(valid_568918, JString, required = true,
                                 default = nil)
  if valid_568918 != nil:
    section.add "resourceGroupName", valid_568918
  var valid_568919 = path.getOrDefault("name")
  valid_568919 = validateParameter(valid_568919, JString, required = true,
                                 default = nil)
  if valid_568919 != nil:
    section.add "name", valid_568919
  var valid_568920 = path.getOrDefault("subscriptionId")
  valid_568920 = validateParameter(valid_568920, JString, required = true,
                                 default = nil)
  if valid_568920 != nil:
    section.add "subscriptionId", valid_568920
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568921 = query.getOrDefault("api-version")
  valid_568921 = validateParameter(valid_568921, JString, required = true,
                                 default = nil)
  if valid_568921 != nil:
    section.add "api-version", valid_568921
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568922: Call_HostingEnvironmentsGetHostingEnvironment_568915;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568922.validator(path, query, header, formData, body)
  let scheme = call_568922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568922.url(scheme.get, call_568922.host, call_568922.base,
                         call_568922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568922, url, valid)

proc call*(call_568923: Call_HostingEnvironmentsGetHostingEnvironment_568915;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568924 = newJObject()
  var query_568925 = newJObject()
  add(path_568924, "resourceGroupName", newJString(resourceGroupName))
  add(query_568925, "api-version", newJString(apiVersion))
  add(path_568924, "name", newJString(name))
  add(path_568924, "subscriptionId", newJString(subscriptionId))
  result = call_568923.call(path_568924, query_568925, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironment* = Call_HostingEnvironmentsGetHostingEnvironment_568915(
    name: "hostingEnvironmentsGetHostingEnvironment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsGetHostingEnvironment_568916, base: "",
    url: url_HostingEnvironmentsGetHostingEnvironment_568917,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsDeleteHostingEnvironment_568939 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsDeleteHostingEnvironment_568941(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsDeleteHostingEnvironment_568940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568942 = path.getOrDefault("resourceGroupName")
  valid_568942 = validateParameter(valid_568942, JString, required = true,
                                 default = nil)
  if valid_568942 != nil:
    section.add "resourceGroupName", valid_568942
  var valid_568943 = path.getOrDefault("name")
  valid_568943 = validateParameter(valid_568943, JString, required = true,
                                 default = nil)
  if valid_568943 != nil:
    section.add "name", valid_568943
  var valid_568944 = path.getOrDefault("subscriptionId")
  valid_568944 = validateParameter(valid_568944, JString, required = true,
                                 default = nil)
  if valid_568944 != nil:
    section.add "subscriptionId", valid_568944
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568945 = query.getOrDefault("api-version")
  valid_568945 = validateParameter(valid_568945, JString, required = true,
                                 default = nil)
  if valid_568945 != nil:
    section.add "api-version", valid_568945
  var valid_568946 = query.getOrDefault("forceDelete")
  valid_568946 = validateParameter(valid_568946, JBool, required = false, default = nil)
  if valid_568946 != nil:
    section.add "forceDelete", valid_568946
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568947: Call_HostingEnvironmentsDeleteHostingEnvironment_568939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568947.validator(path, query, header, formData, body)
  let scheme = call_568947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568947.url(scheme.get, call_568947.host, call_568947.base,
                         call_568947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568947, url, valid)

proc call*(call_568948: Call_HostingEnvironmentsDeleteHostingEnvironment_568939;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; forceDelete: bool = false): Recallable =
  ## hostingEnvironmentsDeleteHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   forceDelete: bool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568949 = newJObject()
  var query_568950 = newJObject()
  add(path_568949, "resourceGroupName", newJString(resourceGroupName))
  add(query_568950, "api-version", newJString(apiVersion))
  add(path_568949, "name", newJString(name))
  add(query_568950, "forceDelete", newJBool(forceDelete))
  add(path_568949, "subscriptionId", newJString(subscriptionId))
  result = call_568948.call(path_568949, query_568950, nil, nil, nil)

var hostingEnvironmentsDeleteHostingEnvironment* = Call_HostingEnvironmentsDeleteHostingEnvironment_568939(
    name: "hostingEnvironmentsDeleteHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsDeleteHostingEnvironment_568940,
    base: "", url: url_HostingEnvironmentsDeleteHostingEnvironment_568941,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentCapacities_568951 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentCapacities_568953(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/compute")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentCapacities_568952(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568954 = path.getOrDefault("resourceGroupName")
  valid_568954 = validateParameter(valid_568954, JString, required = true,
                                 default = nil)
  if valid_568954 != nil:
    section.add "resourceGroupName", valid_568954
  var valid_568955 = path.getOrDefault("name")
  valid_568955 = validateParameter(valid_568955, JString, required = true,
                                 default = nil)
  if valid_568955 != nil:
    section.add "name", valid_568955
  var valid_568956 = path.getOrDefault("subscriptionId")
  valid_568956 = validateParameter(valid_568956, JString, required = true,
                                 default = nil)
  if valid_568956 != nil:
    section.add "subscriptionId", valid_568956
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568957 = query.getOrDefault("api-version")
  valid_568957 = validateParameter(valid_568957, JString, required = true,
                                 default = nil)
  if valid_568957 != nil:
    section.add "api-version", valid_568957
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568958: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_568951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568958.validator(path, query, header, formData, body)
  let scheme = call_568958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568958.url(scheme.get, call_568958.host, call_568958.base,
                         call_568958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568958, url, valid)

proc call*(call_568959: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_568951;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentCapacities
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568960 = newJObject()
  var query_568961 = newJObject()
  add(path_568960, "resourceGroupName", newJString(resourceGroupName))
  add(query_568961, "api-version", newJString(apiVersion))
  add(path_568960, "name", newJString(name))
  add(path_568960, "subscriptionId", newJString(subscriptionId))
  result = call_568959.call(path_568960, query_568961, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentCapacities* = Call_HostingEnvironmentsGetHostingEnvironmentCapacities_568951(
    name: "hostingEnvironmentsGetHostingEnvironmentCapacities",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentCapacities_568952,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentCapacities_568953,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentVips_568962 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentVips_568964(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentVips_568963(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568965 = path.getOrDefault("resourceGroupName")
  valid_568965 = validateParameter(valid_568965, JString, required = true,
                                 default = nil)
  if valid_568965 != nil:
    section.add "resourceGroupName", valid_568965
  var valid_568966 = path.getOrDefault("name")
  valid_568966 = validateParameter(valid_568966, JString, required = true,
                                 default = nil)
  if valid_568966 != nil:
    section.add "name", valid_568966
  var valid_568967 = path.getOrDefault("subscriptionId")
  valid_568967 = validateParameter(valid_568967, JString, required = true,
                                 default = nil)
  if valid_568967 != nil:
    section.add "subscriptionId", valid_568967
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568968 = query.getOrDefault("api-version")
  valid_568968 = validateParameter(valid_568968, JString, required = true,
                                 default = nil)
  if valid_568968 != nil:
    section.add "api-version", valid_568968
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568969: Call_HostingEnvironmentsGetHostingEnvironmentVips_568962;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568969.validator(path, query, header, formData, body)
  let scheme = call_568969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568969.url(scheme.get, call_568969.host, call_568969.base,
                         call_568969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568969, url, valid)

proc call*(call_568970: Call_HostingEnvironmentsGetHostingEnvironmentVips_568962;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentVips
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568971 = newJObject()
  var query_568972 = newJObject()
  add(path_568971, "resourceGroupName", newJString(resourceGroupName))
  add(query_568972, "api-version", newJString(apiVersion))
  add(path_568971, "name", newJString(name))
  add(path_568971, "subscriptionId", newJString(subscriptionId))
  result = call_568970.call(path_568971, query_568972, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentVips* = Call_HostingEnvironmentsGetHostingEnvironmentVips_568962(
    name: "hostingEnvironmentsGetHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentVips_568963,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentVips_568964,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568973 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568975(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568974(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568976 = path.getOrDefault("resourceGroupName")
  valid_568976 = validateParameter(valid_568976, JString, required = true,
                                 default = nil)
  if valid_568976 != nil:
    section.add "resourceGroupName", valid_568976
  var valid_568977 = path.getOrDefault("name")
  valid_568977 = validateParameter(valid_568977, JString, required = true,
                                 default = nil)
  if valid_568977 != nil:
    section.add "name", valid_568977
  var valid_568978 = path.getOrDefault("subscriptionId")
  valid_568978 = validateParameter(valid_568978, JString, required = true,
                                 default = nil)
  if valid_568978 != nil:
    section.add "subscriptionId", valid_568978
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568979 = query.getOrDefault("api-version")
  valid_568979 = validateParameter(valid_568979, JString, required = true,
                                 default = nil)
  if valid_568979 != nil:
    section.add "api-version", valid_568979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568980: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568973;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568980.validator(path, query, header, formData, body)
  let scheme = call_568980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568980.url(scheme.get, call_568980.host, call_568980.base,
                         call_568980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568980, url, valid)

proc call*(call_568981: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568973;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnostics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_568982 = newJObject()
  var query_568983 = newJObject()
  add(path_568982, "resourceGroupName", newJString(resourceGroupName))
  add(query_568983, "api-version", newJString(apiVersion))
  add(path_568982, "name", newJString(name))
  add(path_568982, "subscriptionId", newJString(subscriptionId))
  result = call_568981.call(path_568982, query_568983, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnostics* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568973(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnostics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568974,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_568975,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568984 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568986(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "diagnosticsName" in path, "`diagnosticsName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics/"),
               (kind: VariableSegment, value: "diagnosticsName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568985(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   diagnosticsName: JString (required)
  ##                  : Name of the diagnostics
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568987 = path.getOrDefault("resourceGroupName")
  valid_568987 = validateParameter(valid_568987, JString, required = true,
                                 default = nil)
  if valid_568987 != nil:
    section.add "resourceGroupName", valid_568987
  var valid_568988 = path.getOrDefault("name")
  valid_568988 = validateParameter(valid_568988, JString, required = true,
                                 default = nil)
  if valid_568988 != nil:
    section.add "name", valid_568988
  var valid_568989 = path.getOrDefault("subscriptionId")
  valid_568989 = validateParameter(valid_568989, JString, required = true,
                                 default = nil)
  if valid_568989 != nil:
    section.add "subscriptionId", valid_568989
  var valid_568990 = path.getOrDefault("diagnosticsName")
  valid_568990 = validateParameter(valid_568990, JString, required = true,
                                 default = nil)
  if valid_568990 != nil:
    section.add "diagnosticsName", valid_568990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568991 = query.getOrDefault("api-version")
  valid_568991 = validateParameter(valid_568991, JString, required = true,
                                 default = nil)
  if valid_568991 != nil:
    section.add "api-version", valid_568991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568992: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_568992.validator(path, query, header, formData, body)
  let scheme = call_568992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568992.url(scheme.get, call_568992.host, call_568992.base,
                         call_568992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568992, url, valid)

proc call*(call_568993: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568984;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; diagnosticsName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   diagnosticsName: string (required)
  ##                  : Name of the diagnostics
  var path_568994 = newJObject()
  var query_568995 = newJObject()
  add(path_568994, "resourceGroupName", newJString(resourceGroupName))
  add(query_568995, "api-version", newJString(apiVersion))
  add(path_568994, "name", newJString(name))
  add(path_568994, "subscriptionId", newJString(subscriptionId))
  add(path_568994, "diagnosticsName", newJString(diagnosticsName))
  result = call_568993.call(path_568994, query_568995, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568984(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}", validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568985,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_568986,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568996 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568998(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568997(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568999 = path.getOrDefault("resourceGroupName")
  valid_568999 = validateParameter(valid_568999, JString, required = true,
                                 default = nil)
  if valid_568999 != nil:
    section.add "resourceGroupName", valid_568999
  var valid_569000 = path.getOrDefault("name")
  valid_569000 = validateParameter(valid_569000, JString, required = true,
                                 default = nil)
  if valid_569000 != nil:
    section.add "name", valid_569000
  var valid_569001 = path.getOrDefault("subscriptionId")
  valid_569001 = validateParameter(valid_569001, JString, required = true,
                                 default = nil)
  if valid_569001 != nil:
    section.add "subscriptionId", valid_569001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569002 = query.getOrDefault("api-version")
  valid_569002 = validateParameter(valid_569002, JString, required = true,
                                 default = nil)
  if valid_569002 != nil:
    section.add "api-version", valid_569002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569003: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568996;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569003.validator(path, query, header, formData, body)
  let scheme = call_569003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569003.url(scheme.get, call_569003.host, call_569003.base,
                         call_569003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569003, url, valid)

proc call*(call_569004: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568996;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569005 = newJObject()
  var query_569006 = newJObject()
  add(path_569005, "resourceGroupName", newJString(resourceGroupName))
  add(query_569006, "api-version", newJString(apiVersion))
  add(path_569005, "name", newJString(name))
  add(path_569005, "subscriptionId", newJString(subscriptionId))
  result = call_569004.call(path_569005, query_569006, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568996(
    name: "hostingEnvironmentsGetHostingEnvironmentMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568997,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_568998,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetrics_569007 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentMetrics_569009(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetrics_569008(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569010 = path.getOrDefault("resourceGroupName")
  valid_569010 = validateParameter(valid_569010, JString, required = true,
                                 default = nil)
  if valid_569010 != nil:
    section.add "resourceGroupName", valid_569010
  var valid_569011 = path.getOrDefault("name")
  valid_569011 = validateParameter(valid_569011, JString, required = true,
                                 default = nil)
  if valid_569011 != nil:
    section.add "name", valid_569011
  var valid_569012 = path.getOrDefault("subscriptionId")
  valid_569012 = validateParameter(valid_569012, JString, required = true,
                                 default = nil)
  if valid_569012 != nil:
    section.add "subscriptionId", valid_569012
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569013 = query.getOrDefault("api-version")
  valid_569013 = validateParameter(valid_569013, JString, required = true,
                                 default = nil)
  if valid_569013 != nil:
    section.add "api-version", valid_569013
  var valid_569014 = query.getOrDefault("details")
  valid_569014 = validateParameter(valid_569014, JBool, required = false, default = nil)
  if valid_569014 != nil:
    section.add "details", valid_569014
  var valid_569015 = query.getOrDefault("$filter")
  valid_569015 = validateParameter(valid_569015, JString, required = false,
                                 default = nil)
  if valid_569015 != nil:
    section.add "$filter", valid_569015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569016: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_569007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569016.validator(path, query, header, formData, body)
  let scheme = call_569016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569016.url(scheme.get, call_569016.host, call_569016.base,
                         call_569016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569016, url, valid)

proc call*(call_569017: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_569007;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569018 = newJObject()
  var query_569019 = newJObject()
  add(path_569018, "resourceGroupName", newJString(resourceGroupName))
  add(query_569019, "api-version", newJString(apiVersion))
  add(path_569018, "name", newJString(name))
  add(query_569019, "details", newJBool(details))
  add(path_569018, "subscriptionId", newJString(subscriptionId))
  add(query_569019, "$filter", newJString(Filter))
  result = call_569017.call(path_569018, query_569019, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMetrics_569007(
    name: "hostingEnvironmentsGetHostingEnvironmentMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentMetrics_569008,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetrics_569009,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePools_569020 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetMultiRolePools_569022(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePools_569021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569023 = path.getOrDefault("resourceGroupName")
  valid_569023 = validateParameter(valid_569023, JString, required = true,
                                 default = nil)
  if valid_569023 != nil:
    section.add "resourceGroupName", valid_569023
  var valid_569024 = path.getOrDefault("name")
  valid_569024 = validateParameter(valid_569024, JString, required = true,
                                 default = nil)
  if valid_569024 != nil:
    section.add "name", valid_569024
  var valid_569025 = path.getOrDefault("subscriptionId")
  valid_569025 = validateParameter(valid_569025, JString, required = true,
                                 default = nil)
  if valid_569025 != nil:
    section.add "subscriptionId", valid_569025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569026 = query.getOrDefault("api-version")
  valid_569026 = validateParameter(valid_569026, JString, required = true,
                                 default = nil)
  if valid_569026 != nil:
    section.add "api-version", valid_569026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569027: Call_HostingEnvironmentsGetMultiRolePools_569020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569027.validator(path, query, header, formData, body)
  let scheme = call_569027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569027.url(scheme.get, call_569027.host, call_569027.base,
                         call_569027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569027, url, valid)

proc call*(call_569028: Call_HostingEnvironmentsGetMultiRolePools_569020;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePools
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569029 = newJObject()
  var query_569030 = newJObject()
  add(path_569029, "resourceGroupName", newJString(resourceGroupName))
  add(query_569030, "api-version", newJString(apiVersion))
  add(path_569029, "name", newJString(name))
  add(path_569029, "subscriptionId", newJString(subscriptionId))
  result = call_569028.call(path_569029, query_569030, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePools* = Call_HostingEnvironmentsGetMultiRolePools_569020(
    name: "hostingEnvironmentsGetMultiRolePools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
    validator: validate_HostingEnvironmentsGetMultiRolePools_569021, base: "",
    url: url_HostingEnvironmentsGetMultiRolePools_569022, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_569042 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsCreateOrUpdateMultiRolePool_569044(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_569043(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569045 = path.getOrDefault("resourceGroupName")
  valid_569045 = validateParameter(valid_569045, JString, required = true,
                                 default = nil)
  if valid_569045 != nil:
    section.add "resourceGroupName", valid_569045
  var valid_569046 = path.getOrDefault("name")
  valid_569046 = validateParameter(valid_569046, JString, required = true,
                                 default = nil)
  if valid_569046 != nil:
    section.add "name", valid_569046
  var valid_569047 = path.getOrDefault("subscriptionId")
  valid_569047 = validateParameter(valid_569047, JString, required = true,
                                 default = nil)
  if valid_569047 != nil:
    section.add "subscriptionId", valid_569047
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569048 = query.getOrDefault("api-version")
  valid_569048 = validateParameter(valid_569048, JString, required = true,
                                 default = nil)
  if valid_569048 != nil:
    section.add "api-version", valid_569048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569050: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_569042;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569050.validator(path, query, header, formData, body)
  let scheme = call_569050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569050.url(scheme.get, call_569050.host, call_569050.base,
                         call_569050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569050, url, valid)

proc call*(call_569051: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_569042;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; multiRolePoolEnvelope: JsonNode): Recallable =
  ## hostingEnvironmentsCreateOrUpdateMultiRolePool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  var path_569052 = newJObject()
  var query_569053 = newJObject()
  var body_569054 = newJObject()
  add(path_569052, "resourceGroupName", newJString(resourceGroupName))
  add(query_569053, "api-version", newJString(apiVersion))
  add(path_569052, "name", newJString(name))
  add(path_569052, "subscriptionId", newJString(subscriptionId))
  if multiRolePoolEnvelope != nil:
    body_569054 = multiRolePoolEnvelope
  result = call_569051.call(path_569052, query_569053, nil, nil, body_569054)

var hostingEnvironmentsCreateOrUpdateMultiRolePool* = Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_569042(
    name: "hostingEnvironmentsCreateOrUpdateMultiRolePool",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_569043,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateMultiRolePool_569044,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePool_569031 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetMultiRolePool_569033(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePool_569032(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569034 = path.getOrDefault("resourceGroupName")
  valid_569034 = validateParameter(valid_569034, JString, required = true,
                                 default = nil)
  if valid_569034 != nil:
    section.add "resourceGroupName", valid_569034
  var valid_569035 = path.getOrDefault("name")
  valid_569035 = validateParameter(valid_569035, JString, required = true,
                                 default = nil)
  if valid_569035 != nil:
    section.add "name", valid_569035
  var valid_569036 = path.getOrDefault("subscriptionId")
  valid_569036 = validateParameter(valid_569036, JString, required = true,
                                 default = nil)
  if valid_569036 != nil:
    section.add "subscriptionId", valid_569036
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569037 = query.getOrDefault("api-version")
  valid_569037 = validateParameter(valid_569037, JString, required = true,
                                 default = nil)
  if valid_569037 != nil:
    section.add "api-version", valid_569037
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569038: Call_HostingEnvironmentsGetMultiRolePool_569031;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569038.validator(path, query, header, formData, body)
  let scheme = call_569038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569038.url(scheme.get, call_569038.host, call_569038.base,
                         call_569038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569038, url, valid)

proc call*(call_569039: Call_HostingEnvironmentsGetMultiRolePool_569031;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569040 = newJObject()
  var query_569041 = newJObject()
  add(path_569040, "resourceGroupName", newJString(resourceGroupName))
  add(query_569041, "api-version", newJString(apiVersion))
  add(path_569040, "name", newJString(name))
  add(path_569040, "subscriptionId", newJString(subscriptionId))
  result = call_569039.call(path_569040, query_569041, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePool* = Call_HostingEnvironmentsGetMultiRolePool_569031(
    name: "hostingEnvironmentsGetMultiRolePool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsGetMultiRolePool_569032, base: "",
    url: url_HostingEnvironmentsGetMultiRolePool_569033, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569055 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569057(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569056(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool&gt;
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569058 = path.getOrDefault("resourceGroupName")
  valid_569058 = validateParameter(valid_569058, JString, required = true,
                                 default = nil)
  if valid_569058 != nil:
    section.add "resourceGroupName", valid_569058
  var valid_569059 = path.getOrDefault("name")
  valid_569059 = validateParameter(valid_569059, JString, required = true,
                                 default = nil)
  if valid_569059 != nil:
    section.add "name", valid_569059
  var valid_569060 = path.getOrDefault("subscriptionId")
  valid_569060 = validateParameter(valid_569060, JString, required = true,
                                 default = nil)
  if valid_569060 != nil:
    section.add "subscriptionId", valid_569060
  var valid_569061 = path.getOrDefault("instance")
  valid_569061 = validateParameter(valid_569061, JString, required = true,
                                 default = nil)
  if valid_569061 != nil:
    section.add "instance", valid_569061
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569062 = query.getOrDefault("api-version")
  valid_569062 = validateParameter(valid_569062, JString, required = true,
                                 default = nil)
  if valid_569062 != nil:
    section.add "api-version", valid_569062
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569063: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569055;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569063.validator(path, query, header, formData, body)
  let scheme = call_569063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569063.url(scheme.get, call_569063.host, call_569063.base,
                         call_569063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569063, url, valid)

proc call*(call_569064: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569055;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instance: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool&gt;
  var path_569065 = newJObject()
  var query_569066 = newJObject()
  add(path_569065, "resourceGroupName", newJString(resourceGroupName))
  add(query_569066, "api-version", newJString(apiVersion))
  add(path_569065, "name", newJString(name))
  add(path_569065, "subscriptionId", newJString(subscriptionId))
  add(path_569065, "instance", newJString(instance))
  result = call_569064.call(path_569065, query_569066, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569055(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569056,
    base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_569057,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569067 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569069(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569068(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569070 = path.getOrDefault("resourceGroupName")
  valid_569070 = validateParameter(valid_569070, JString, required = true,
                                 default = nil)
  if valid_569070 != nil:
    section.add "resourceGroupName", valid_569070
  var valid_569071 = path.getOrDefault("name")
  valid_569071 = validateParameter(valid_569071, JString, required = true,
                                 default = nil)
  if valid_569071 != nil:
    section.add "name", valid_569071
  var valid_569072 = path.getOrDefault("subscriptionId")
  valid_569072 = validateParameter(valid_569072, JString, required = true,
                                 default = nil)
  if valid_569072 != nil:
    section.add "subscriptionId", valid_569072
  var valid_569073 = path.getOrDefault("instance")
  valid_569073 = validateParameter(valid_569073, JString, required = true,
                                 default = nil)
  if valid_569073 != nil:
    section.add "instance", valid_569073
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569074 = query.getOrDefault("api-version")
  valid_569074 = validateParameter(valid_569074, JString, required = true,
                                 default = nil)
  if valid_569074 != nil:
    section.add "api-version", valid_569074
  var valid_569075 = query.getOrDefault("details")
  valid_569075 = validateParameter(valid_569075, JBool, required = false, default = nil)
  if valid_569075 != nil:
    section.add "details", valid_569075
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569076: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569076.validator(path, query, header, formData, body)
  let scheme = call_569076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569076.url(scheme.get, call_569076.host, call_569076.base,
                         call_569076.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569076, url, valid)

proc call*(call_569077: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569067;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instance: string; details: bool = false): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool
  var path_569078 = newJObject()
  var query_569079 = newJObject()
  add(path_569078, "resourceGroupName", newJString(resourceGroupName))
  add(query_569079, "api-version", newJString(apiVersion))
  add(path_569078, "name", newJString(name))
  add(query_569079, "details", newJBool(details))
  add(path_569078, "subscriptionId", newJString(subscriptionId))
  add(path_569078, "instance", newJString(instance))
  result = call_569077.call(path_569078, query_569079, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetrics* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569067(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569068,
    base: "", url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_569069,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569080 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569082(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569081(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569083 = path.getOrDefault("resourceGroupName")
  valid_569083 = validateParameter(valid_569083, JString, required = true,
                                 default = nil)
  if valid_569083 != nil:
    section.add "resourceGroupName", valid_569083
  var valid_569084 = path.getOrDefault("name")
  valid_569084 = validateParameter(valid_569084, JString, required = true,
                                 default = nil)
  if valid_569084 != nil:
    section.add "name", valid_569084
  var valid_569085 = path.getOrDefault("subscriptionId")
  valid_569085 = validateParameter(valid_569085, JString, required = true,
                                 default = nil)
  if valid_569085 != nil:
    section.add "subscriptionId", valid_569085
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569086 = query.getOrDefault("api-version")
  valid_569086 = validateParameter(valid_569086, JString, required = true,
                                 default = nil)
  if valid_569086 != nil:
    section.add "api-version", valid_569086
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569087: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569080;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569087.validator(path, query, header, formData, body)
  let scheme = call_569087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569087.url(scheme.get, call_569087.host, call_569087.base,
                         call_569087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569087, url, valid)

proc call*(call_569088: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569080;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569089 = newJObject()
  var query_569090 = newJObject()
  add(path_569089, "resourceGroupName", newJString(resourceGroupName))
  add(query_569090, "api-version", newJString(apiVersion))
  add(path_569089, "name", newJString(name))
  add(path_569089, "subscriptionId", newJString(subscriptionId))
  result = call_569088.call(path_569089, query_569090, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569080(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569081,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_569082,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569091 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569093(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569092(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569094 = path.getOrDefault("resourceGroupName")
  valid_569094 = validateParameter(valid_569094, JString, required = true,
                                 default = nil)
  if valid_569094 != nil:
    section.add "resourceGroupName", valid_569094
  var valid_569095 = path.getOrDefault("name")
  valid_569095 = validateParameter(valid_569095, JString, required = true,
                                 default = nil)
  if valid_569095 != nil:
    section.add "name", valid_569095
  var valid_569096 = path.getOrDefault("subscriptionId")
  valid_569096 = validateParameter(valid_569096, JString, required = true,
                                 default = nil)
  if valid_569096 != nil:
    section.add "subscriptionId", valid_569096
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   endTime: JString
  ##          : End time of metrics query
  ##   timeGrain: JString
  ##            : Time granularity of metrics query
  ##   startTime: JString
  ##            : Beginning time of metrics query
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569097 = query.getOrDefault("api-version")
  valid_569097 = validateParameter(valid_569097, JString, required = true,
                                 default = nil)
  if valid_569097 != nil:
    section.add "api-version", valid_569097
  var valid_569098 = query.getOrDefault("details")
  valid_569098 = validateParameter(valid_569098, JBool, required = false, default = nil)
  if valid_569098 != nil:
    section.add "details", valid_569098
  var valid_569099 = query.getOrDefault("endTime")
  valid_569099 = validateParameter(valid_569099, JString, required = false,
                                 default = nil)
  if valid_569099 != nil:
    section.add "endTime", valid_569099
  var valid_569100 = query.getOrDefault("timeGrain")
  valid_569100 = validateParameter(valid_569100, JString, required = false,
                                 default = nil)
  if valid_569100 != nil:
    section.add "timeGrain", valid_569100
  var valid_569101 = query.getOrDefault("startTime")
  valid_569101 = validateParameter(valid_569101, JString, required = false,
                                 default = nil)
  if valid_569101 != nil:
    section.add "startTime", valid_569101
  var valid_569102 = query.getOrDefault("$filter")
  valid_569102 = validateParameter(valid_569102, JString, required = false,
                                 default = nil)
  if valid_569102 != nil:
    section.add "$filter", valid_569102
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569103: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569091;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569103.validator(path, query, header, formData, body)
  let scheme = call_569103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569103.url(scheme.get, call_569103.host, call_569103.base,
                         call_569103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569103, url, valid)

proc call*(call_569104: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569091;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; endTime: string = "";
          timeGrain: string = ""; startTime: string = ""; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   endTime: string
  ##          : End time of metrics query
  ##   timeGrain: string
  ##            : Time granularity of metrics query
  ##   startTime: string
  ##            : Beginning time of metrics query
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569105 = newJObject()
  var query_569106 = newJObject()
  add(path_569105, "resourceGroupName", newJString(resourceGroupName))
  add(query_569106, "api-version", newJString(apiVersion))
  add(path_569105, "name", newJString(name))
  add(query_569106, "details", newJBool(details))
  add(path_569105, "subscriptionId", newJString(subscriptionId))
  add(query_569106, "endTime", newJString(endTime))
  add(query_569106, "timeGrain", newJString(timeGrain))
  add(query_569106, "startTime", newJString(startTime))
  add(query_569106, "$filter", newJString(Filter))
  result = call_569104.call(path_569105, query_569106, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569091(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569092,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_569093,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolSkus_569107 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetMultiRolePoolSkus_569109(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolSkus_569108(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569110 = path.getOrDefault("resourceGroupName")
  valid_569110 = validateParameter(valid_569110, JString, required = true,
                                 default = nil)
  if valid_569110 != nil:
    section.add "resourceGroupName", valid_569110
  var valid_569111 = path.getOrDefault("name")
  valid_569111 = validateParameter(valid_569111, JString, required = true,
                                 default = nil)
  if valid_569111 != nil:
    section.add "name", valid_569111
  var valid_569112 = path.getOrDefault("subscriptionId")
  valid_569112 = validateParameter(valid_569112, JString, required = true,
                                 default = nil)
  if valid_569112 != nil:
    section.add "subscriptionId", valid_569112
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569113 = query.getOrDefault("api-version")
  valid_569113 = validateParameter(valid_569113, JString, required = true,
                                 default = nil)
  if valid_569113 != nil:
    section.add "api-version", valid_569113
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569114: Call_HostingEnvironmentsGetMultiRolePoolSkus_569107;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569114.validator(path, query, header, formData, body)
  let scheme = call_569114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569114.url(scheme.get, call_569114.host, call_569114.base,
                         call_569114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569114, url, valid)

proc call*(call_569115: Call_HostingEnvironmentsGetMultiRolePoolSkus_569107;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolSkus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569116 = newJObject()
  var query_569117 = newJObject()
  add(path_569116, "resourceGroupName", newJString(resourceGroupName))
  add(query_569117, "api-version", newJString(apiVersion))
  add(path_569116, "name", newJString(name))
  add(path_569116, "subscriptionId", newJString(subscriptionId))
  result = call_569115.call(path_569116, query_569117, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolSkus* = Call_HostingEnvironmentsGetMultiRolePoolSkus_569107(
    name: "hostingEnvironmentsGetMultiRolePoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
    validator: validate_HostingEnvironmentsGetMultiRolePoolSkus_569108, base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolSkus_569109,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569118 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569120(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569119(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569121 = path.getOrDefault("resourceGroupName")
  valid_569121 = validateParameter(valid_569121, JString, required = true,
                                 default = nil)
  if valid_569121 != nil:
    section.add "resourceGroupName", valid_569121
  var valid_569122 = path.getOrDefault("name")
  valid_569122 = validateParameter(valid_569122, JString, required = true,
                                 default = nil)
  if valid_569122 != nil:
    section.add "name", valid_569122
  var valid_569123 = path.getOrDefault("subscriptionId")
  valid_569123 = validateParameter(valid_569123, JString, required = true,
                                 default = nil)
  if valid_569123 != nil:
    section.add "subscriptionId", valid_569123
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569124 = query.getOrDefault("api-version")
  valid_569124 = validateParameter(valid_569124, JString, required = true,
                                 default = nil)
  if valid_569124 != nil:
    section.add "api-version", valid_569124
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569125: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569125.validator(path, query, header, formData, body)
  let scheme = call_569125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569125.url(scheme.get, call_569125.host, call_569125.base,
                         call_569125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569125, url, valid)

proc call*(call_569126: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569118;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569127 = newJObject()
  var query_569128 = newJObject()
  add(path_569127, "resourceGroupName", newJString(resourceGroupName))
  add(query_569128, "api-version", newJString(apiVersion))
  add(path_569127, "name", newJString(name))
  add(path_569127, "subscriptionId", newJString(subscriptionId))
  result = call_569126.call(path_569127, query_569128, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569118(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569119,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_569120,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperations_569129 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentOperations_569131(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperations_569130(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569132 = path.getOrDefault("resourceGroupName")
  valid_569132 = validateParameter(valid_569132, JString, required = true,
                                 default = nil)
  if valid_569132 != nil:
    section.add "resourceGroupName", valid_569132
  var valid_569133 = path.getOrDefault("name")
  valid_569133 = validateParameter(valid_569133, JString, required = true,
                                 default = nil)
  if valid_569133 != nil:
    section.add "name", valid_569133
  var valid_569134 = path.getOrDefault("subscriptionId")
  valid_569134 = validateParameter(valid_569134, JString, required = true,
                                 default = nil)
  if valid_569134 != nil:
    section.add "subscriptionId", valid_569134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569135 = query.getOrDefault("api-version")
  valid_569135 = validateParameter(valid_569135, JString, required = true,
                                 default = nil)
  if valid_569135 != nil:
    section.add "api-version", valid_569135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569136: Call_HostingEnvironmentsGetHostingEnvironmentOperations_569129;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569136.validator(path, query, header, formData, body)
  let scheme = call_569136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569136.url(scheme.get, call_569136.host, call_569136.base,
                         call_569136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569136, url, valid)

proc call*(call_569137: Call_HostingEnvironmentsGetHostingEnvironmentOperations_569129;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperations
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569138 = newJObject()
  var query_569139 = newJObject()
  add(path_569138, "resourceGroupName", newJString(resourceGroupName))
  add(query_569139, "api-version", newJString(apiVersion))
  add(path_569138, "name", newJString(name))
  add(path_569138, "subscriptionId", newJString(subscriptionId))
  result = call_569137.call(path_569138, query_569139, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperations* = Call_HostingEnvironmentsGetHostingEnvironmentOperations_569129(
    name: "hostingEnvironmentsGetHostingEnvironmentOperations",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperations_569130,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperations_569131,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperation_569140 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentOperation_569142(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperation_569141(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569143 = path.getOrDefault("resourceGroupName")
  valid_569143 = validateParameter(valid_569143, JString, required = true,
                                 default = nil)
  if valid_569143 != nil:
    section.add "resourceGroupName", valid_569143
  var valid_569144 = path.getOrDefault("name")
  valid_569144 = validateParameter(valid_569144, JString, required = true,
                                 default = nil)
  if valid_569144 != nil:
    section.add "name", valid_569144
  var valid_569145 = path.getOrDefault("subscriptionId")
  valid_569145 = validateParameter(valid_569145, JString, required = true,
                                 default = nil)
  if valid_569145 != nil:
    section.add "subscriptionId", valid_569145
  var valid_569146 = path.getOrDefault("operationId")
  valid_569146 = validateParameter(valid_569146, JString, required = true,
                                 default = nil)
  if valid_569146 != nil:
    section.add "operationId", valid_569146
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569147 = query.getOrDefault("api-version")
  valid_569147 = validateParameter(valid_569147, JString, required = true,
                                 default = nil)
  if valid_569147 != nil:
    section.add "api-version", valid_569147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569148: Call_HostingEnvironmentsGetHostingEnvironmentOperation_569140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569148.validator(path, query, header, formData, body)
  let scheme = call_569148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569148.url(scheme.get, call_569148.host, call_569148.base,
                         call_569148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569148, url, valid)

proc call*(call_569149: Call_HostingEnvironmentsGetHostingEnvironmentOperation_569140;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : operation identifier GUID
  var path_569150 = newJObject()
  var query_569151 = newJObject()
  add(path_569150, "resourceGroupName", newJString(resourceGroupName))
  add(query_569151, "api-version", newJString(apiVersion))
  add(path_569150, "name", newJString(name))
  add(path_569150, "subscriptionId", newJString(subscriptionId))
  add(path_569150, "operationId", newJString(operationId))
  result = call_569149.call(path_569150, query_569151, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperation* = Call_HostingEnvironmentsGetHostingEnvironmentOperation_569140(
    name: "hostingEnvironmentsGetHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperation_569141,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperation_569142,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsRebootHostingEnvironment_569152 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsRebootHostingEnvironment_569154(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsRebootHostingEnvironment_569153(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569155 = path.getOrDefault("resourceGroupName")
  valid_569155 = validateParameter(valid_569155, JString, required = true,
                                 default = nil)
  if valid_569155 != nil:
    section.add "resourceGroupName", valid_569155
  var valid_569156 = path.getOrDefault("name")
  valid_569156 = validateParameter(valid_569156, JString, required = true,
                                 default = nil)
  if valid_569156 != nil:
    section.add "name", valid_569156
  var valid_569157 = path.getOrDefault("subscriptionId")
  valid_569157 = validateParameter(valid_569157, JString, required = true,
                                 default = nil)
  if valid_569157 != nil:
    section.add "subscriptionId", valid_569157
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569158 = query.getOrDefault("api-version")
  valid_569158 = validateParameter(valid_569158, JString, required = true,
                                 default = nil)
  if valid_569158 != nil:
    section.add "api-version", valid_569158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569159: Call_HostingEnvironmentsRebootHostingEnvironment_569152;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569159.validator(path, query, header, formData, body)
  let scheme = call_569159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569159.url(scheme.get, call_569159.host, call_569159.base,
                         call_569159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569159, url, valid)

proc call*(call_569160: Call_HostingEnvironmentsRebootHostingEnvironment_569152;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsRebootHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569161 = newJObject()
  var query_569162 = newJObject()
  add(path_569161, "resourceGroupName", newJString(resourceGroupName))
  add(query_569162, "api-version", newJString(apiVersion))
  add(path_569161, "name", newJString(name))
  add(path_569161, "subscriptionId", newJString(subscriptionId))
  result = call_569160.call(path_569161, query_569162, nil, nil, nil)

var hostingEnvironmentsRebootHostingEnvironment* = Call_HostingEnvironmentsRebootHostingEnvironment_569152(
    name: "hostingEnvironmentsRebootHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
    validator: validate_HostingEnvironmentsRebootHostingEnvironment_569153,
    base: "", url: url_HostingEnvironmentsRebootHostingEnvironment_569154,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsResumeHostingEnvironment_569163 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsResumeHostingEnvironment_569165(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resume")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsResumeHostingEnvironment_569164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569166 = path.getOrDefault("resourceGroupName")
  valid_569166 = validateParameter(valid_569166, JString, required = true,
                                 default = nil)
  if valid_569166 != nil:
    section.add "resourceGroupName", valid_569166
  var valid_569167 = path.getOrDefault("name")
  valid_569167 = validateParameter(valid_569167, JString, required = true,
                                 default = nil)
  if valid_569167 != nil:
    section.add "name", valid_569167
  var valid_569168 = path.getOrDefault("subscriptionId")
  valid_569168 = validateParameter(valid_569168, JString, required = true,
                                 default = nil)
  if valid_569168 != nil:
    section.add "subscriptionId", valid_569168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569169 = query.getOrDefault("api-version")
  valid_569169 = validateParameter(valid_569169, JString, required = true,
                                 default = nil)
  if valid_569169 != nil:
    section.add "api-version", valid_569169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569170: Call_HostingEnvironmentsResumeHostingEnvironment_569163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569170.validator(path, query, header, formData, body)
  let scheme = call_569170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569170.url(scheme.get, call_569170.host, call_569170.base,
                         call_569170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569170, url, valid)

proc call*(call_569171: Call_HostingEnvironmentsResumeHostingEnvironment_569163;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsResumeHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569172 = newJObject()
  var query_569173 = newJObject()
  add(path_569172, "resourceGroupName", newJString(resourceGroupName))
  add(query_569173, "api-version", newJString(apiVersion))
  add(path_569172, "name", newJString(name))
  add(path_569172, "subscriptionId", newJString(subscriptionId))
  result = call_569171.call(path_569172, query_569173, nil, nil, nil)

var hostingEnvironmentsResumeHostingEnvironment* = Call_HostingEnvironmentsResumeHostingEnvironment_569163(
    name: "hostingEnvironmentsResumeHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
    validator: validate_HostingEnvironmentsResumeHostingEnvironment_569164,
    base: "", url: url_HostingEnvironmentsResumeHostingEnvironment_569165,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_569174 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentServerFarms_569176(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_569175(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569177 = path.getOrDefault("resourceGroupName")
  valid_569177 = validateParameter(valid_569177, JString, required = true,
                                 default = nil)
  if valid_569177 != nil:
    section.add "resourceGroupName", valid_569177
  var valid_569178 = path.getOrDefault("name")
  valid_569178 = validateParameter(valid_569178, JString, required = true,
                                 default = nil)
  if valid_569178 != nil:
    section.add "name", valid_569178
  var valid_569179 = path.getOrDefault("subscriptionId")
  valid_569179 = validateParameter(valid_569179, JString, required = true,
                                 default = nil)
  if valid_569179 != nil:
    section.add "subscriptionId", valid_569179
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569180 = query.getOrDefault("api-version")
  valid_569180 = validateParameter(valid_569180, JString, required = true,
                                 default = nil)
  if valid_569180 != nil:
    section.add "api-version", valid_569180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569181: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_569174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569181.validator(path, query, header, formData, body)
  let scheme = call_569181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569181.url(scheme.get, call_569181.host, call_569181.base,
                         call_569181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569181, url, valid)

proc call*(call_569182: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_569174;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569183 = newJObject()
  var query_569184 = newJObject()
  add(path_569183, "resourceGroupName", newJString(resourceGroupName))
  add(query_569184, "api-version", newJString(apiVersion))
  add(path_569183, "name", newJString(name))
  add(path_569183, "subscriptionId", newJString(subscriptionId))
  result = call_569182.call(path_569183, query_569184, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentServerFarms* = Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_569174(
    name: "hostingEnvironmentsGetHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_569175,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentServerFarms_569176,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentSites_569185 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentSites_569187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentSites_569186(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569188 = path.getOrDefault("resourceGroupName")
  valid_569188 = validateParameter(valid_569188, JString, required = true,
                                 default = nil)
  if valid_569188 != nil:
    section.add "resourceGroupName", valid_569188
  var valid_569189 = path.getOrDefault("name")
  valid_569189 = validateParameter(valid_569189, JString, required = true,
                                 default = nil)
  if valid_569189 != nil:
    section.add "name", valid_569189
  var valid_569190 = path.getOrDefault("subscriptionId")
  valid_569190 = validateParameter(valid_569190, JString, required = true,
                                 default = nil)
  if valid_569190 != nil:
    section.add "subscriptionId", valid_569190
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_569191 = query.getOrDefault("propertiesToInclude")
  valid_569191 = validateParameter(valid_569191, JString, required = false,
                                 default = nil)
  if valid_569191 != nil:
    section.add "propertiesToInclude", valid_569191
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569192 = query.getOrDefault("api-version")
  valid_569192 = validateParameter(valid_569192, JString, required = true,
                                 default = nil)
  if valid_569192 != nil:
    section.add "api-version", valid_569192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569193: Call_HostingEnvironmentsGetHostingEnvironmentSites_569185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569193.validator(path, query, header, formData, body)
  let scheme = call_569193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569193.url(scheme.get, call_569193.host, call_569193.base,
                         call_569193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569193, url, valid)

proc call*(call_569194: Call_HostingEnvironmentsGetHostingEnvironmentSites_569185;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; propertiesToInclude: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569195 = newJObject()
  var query_569196 = newJObject()
  add(path_569195, "resourceGroupName", newJString(resourceGroupName))
  add(query_569196, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_569196, "api-version", newJString(apiVersion))
  add(path_569195, "name", newJString(name))
  add(path_569195, "subscriptionId", newJString(subscriptionId))
  result = call_569194.call(path_569195, query_569196, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentSites* = Call_HostingEnvironmentsGetHostingEnvironmentSites_569185(
    name: "hostingEnvironmentsGetHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentSites_569186,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentSites_569187,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsSuspendHostingEnvironment_569197 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsSuspendHostingEnvironment_569199(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/suspend")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsSuspendHostingEnvironment_569198(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569200 = path.getOrDefault("resourceGroupName")
  valid_569200 = validateParameter(valid_569200, JString, required = true,
                                 default = nil)
  if valid_569200 != nil:
    section.add "resourceGroupName", valid_569200
  var valid_569201 = path.getOrDefault("name")
  valid_569201 = validateParameter(valid_569201, JString, required = true,
                                 default = nil)
  if valid_569201 != nil:
    section.add "name", valid_569201
  var valid_569202 = path.getOrDefault("subscriptionId")
  valid_569202 = validateParameter(valid_569202, JString, required = true,
                                 default = nil)
  if valid_569202 != nil:
    section.add "subscriptionId", valid_569202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569203 = query.getOrDefault("api-version")
  valid_569203 = validateParameter(valid_569203, JString, required = true,
                                 default = nil)
  if valid_569203 != nil:
    section.add "api-version", valid_569203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569204: Call_HostingEnvironmentsSuspendHostingEnvironment_569197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569204.validator(path, query, header, formData, body)
  let scheme = call_569204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569204.url(scheme.get, call_569204.host, call_569204.base,
                         call_569204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569204, url, valid)

proc call*(call_569205: Call_HostingEnvironmentsSuspendHostingEnvironment_569197;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsSuspendHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569206 = newJObject()
  var query_569207 = newJObject()
  add(path_569206, "resourceGroupName", newJString(resourceGroupName))
  add(query_569207, "api-version", newJString(apiVersion))
  add(path_569206, "name", newJString(name))
  add(path_569206, "subscriptionId", newJString(subscriptionId))
  result = call_569205.call(path_569206, query_569207, nil, nil, nil)

var hostingEnvironmentsSuspendHostingEnvironment* = Call_HostingEnvironmentsSuspendHostingEnvironment_569197(
    name: "hostingEnvironmentsSuspendHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
    validator: validate_HostingEnvironmentsSuspendHostingEnvironment_569198,
    base: "", url: url_HostingEnvironmentsSuspendHostingEnvironment_569199,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentUsages_569208 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentUsages_569210(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentUsages_569209(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569211 = path.getOrDefault("resourceGroupName")
  valid_569211 = validateParameter(valid_569211, JString, required = true,
                                 default = nil)
  if valid_569211 != nil:
    section.add "resourceGroupName", valid_569211
  var valid_569212 = path.getOrDefault("name")
  valid_569212 = validateParameter(valid_569212, JString, required = true,
                                 default = nil)
  if valid_569212 != nil:
    section.add "name", valid_569212
  var valid_569213 = path.getOrDefault("subscriptionId")
  valid_569213 = validateParameter(valid_569213, JString, required = true,
                                 default = nil)
  if valid_569213 != nil:
    section.add "subscriptionId", valid_569213
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569214 = query.getOrDefault("api-version")
  valid_569214 = validateParameter(valid_569214, JString, required = true,
                                 default = nil)
  if valid_569214 != nil:
    section.add "api-version", valid_569214
  var valid_569215 = query.getOrDefault("$filter")
  valid_569215 = validateParameter(valid_569215, JString, required = false,
                                 default = nil)
  if valid_569215 != nil:
    section.add "$filter", valid_569215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569216: Call_HostingEnvironmentsGetHostingEnvironmentUsages_569208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569216.validator(path, query, header, formData, body)
  let scheme = call_569216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569216.url(scheme.get, call_569216.host, call_569216.base,
                         call_569216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569216, url, valid)

proc call*(call_569217: Call_HostingEnvironmentsGetHostingEnvironmentUsages_569208;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569218 = newJObject()
  var query_569219 = newJObject()
  add(path_569218, "resourceGroupName", newJString(resourceGroupName))
  add(query_569219, "api-version", newJString(apiVersion))
  add(path_569218, "name", newJString(name))
  add(path_569218, "subscriptionId", newJString(subscriptionId))
  add(query_569219, "$filter", newJString(Filter))
  result = call_569217.call(path_569218, query_569219, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentUsages* = Call_HostingEnvironmentsGetHostingEnvironmentUsages_569208(
    name: "hostingEnvironmentsGetHostingEnvironmentUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentUsages_569209,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentUsages_569210,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569220 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569222(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569221(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569223 = path.getOrDefault("resourceGroupName")
  valid_569223 = validateParameter(valid_569223, JString, required = true,
                                 default = nil)
  if valid_569223 != nil:
    section.add "resourceGroupName", valid_569223
  var valid_569224 = path.getOrDefault("name")
  valid_569224 = validateParameter(valid_569224, JString, required = true,
                                 default = nil)
  if valid_569224 != nil:
    section.add "name", valid_569224
  var valid_569225 = path.getOrDefault("subscriptionId")
  valid_569225 = validateParameter(valid_569225, JString, required = true,
                                 default = nil)
  if valid_569225 != nil:
    section.add "subscriptionId", valid_569225
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569226 = query.getOrDefault("api-version")
  valid_569226 = validateParameter(valid_569226, JString, required = true,
                                 default = nil)
  if valid_569226 != nil:
    section.add "api-version", valid_569226
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569227: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569227.validator(path, query, header, formData, body)
  let scheme = call_569227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569227.url(scheme.get, call_569227.host, call_569227.base,
                         call_569227.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569227, url, valid)

proc call*(call_569228: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569220;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebHostingPlans
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569229 = newJObject()
  var query_569230 = newJObject()
  add(path_569229, "resourceGroupName", newJString(resourceGroupName))
  add(query_569230, "api-version", newJString(apiVersion))
  add(path_569229, "name", newJString(name))
  add(path_569229, "subscriptionId", newJString(subscriptionId))
  result = call_569228.call(path_569229, query_569230, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebHostingPlans* = Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569220(
    name: "hostingEnvironmentsGetHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569221,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_569222,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPools_569231 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetWorkerPools_569233(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPools_569232(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569234 = path.getOrDefault("resourceGroupName")
  valid_569234 = validateParameter(valid_569234, JString, required = true,
                                 default = nil)
  if valid_569234 != nil:
    section.add "resourceGroupName", valid_569234
  var valid_569235 = path.getOrDefault("name")
  valid_569235 = validateParameter(valid_569235, JString, required = true,
                                 default = nil)
  if valid_569235 != nil:
    section.add "name", valid_569235
  var valid_569236 = path.getOrDefault("subscriptionId")
  valid_569236 = validateParameter(valid_569236, JString, required = true,
                                 default = nil)
  if valid_569236 != nil:
    section.add "subscriptionId", valid_569236
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569237 = query.getOrDefault("api-version")
  valid_569237 = validateParameter(valid_569237, JString, required = true,
                                 default = nil)
  if valid_569237 != nil:
    section.add "api-version", valid_569237
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569238: Call_HostingEnvironmentsGetWorkerPools_569231;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569238.validator(path, query, header, formData, body)
  let scheme = call_569238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569238.url(scheme.get, call_569238.host, call_569238.base,
                         call_569238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569238, url, valid)

proc call*(call_569239: Call_HostingEnvironmentsGetWorkerPools_569231;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPools
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569240 = newJObject()
  var query_569241 = newJObject()
  add(path_569240, "resourceGroupName", newJString(resourceGroupName))
  add(query_569241, "api-version", newJString(apiVersion))
  add(path_569240, "name", newJString(name))
  add(path_569240, "subscriptionId", newJString(subscriptionId))
  result = call_569239.call(path_569240, query_569241, nil, nil, nil)

var hostingEnvironmentsGetWorkerPools* = Call_HostingEnvironmentsGetWorkerPools_569231(
    name: "hostingEnvironmentsGetWorkerPools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
    validator: validate_HostingEnvironmentsGetWorkerPools_569232, base: "",
    url: url_HostingEnvironmentsGetWorkerPools_569233, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateWorkerPool_569254 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsCreateOrUpdateWorkerPool_569256(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateWorkerPool_569255(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569257 = path.getOrDefault("resourceGroupName")
  valid_569257 = validateParameter(valid_569257, JString, required = true,
                                 default = nil)
  if valid_569257 != nil:
    section.add "resourceGroupName", valid_569257
  var valid_569258 = path.getOrDefault("name")
  valid_569258 = validateParameter(valid_569258, JString, required = true,
                                 default = nil)
  if valid_569258 != nil:
    section.add "name", valid_569258
  var valid_569259 = path.getOrDefault("workerPoolName")
  valid_569259 = validateParameter(valid_569259, JString, required = true,
                                 default = nil)
  if valid_569259 != nil:
    section.add "workerPoolName", valid_569259
  var valid_569260 = path.getOrDefault("subscriptionId")
  valid_569260 = validateParameter(valid_569260, JString, required = true,
                                 default = nil)
  if valid_569260 != nil:
    section.add "subscriptionId", valid_569260
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569261 = query.getOrDefault("api-version")
  valid_569261 = validateParameter(valid_569261, JString, required = true,
                                 default = nil)
  if valid_569261 != nil:
    section.add "api-version", valid_569261
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569263: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_569254;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569263.validator(path, query, header, formData, body)
  let scheme = call_569263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569263.url(scheme.get, call_569263.host, call_569263.base,
                         call_569263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569263, url, valid)

proc call*(call_569264: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_569254;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string;
          workerPoolEnvelope: JsonNode): Recallable =
  ## hostingEnvironmentsCreateOrUpdateWorkerPool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  var path_569265 = newJObject()
  var query_569266 = newJObject()
  var body_569267 = newJObject()
  add(path_569265, "resourceGroupName", newJString(resourceGroupName))
  add(query_569266, "api-version", newJString(apiVersion))
  add(path_569265, "name", newJString(name))
  add(path_569265, "workerPoolName", newJString(workerPoolName))
  add(path_569265, "subscriptionId", newJString(subscriptionId))
  if workerPoolEnvelope != nil:
    body_569267 = workerPoolEnvelope
  result = call_569264.call(path_569265, query_569266, nil, nil, body_569267)

var hostingEnvironmentsCreateOrUpdateWorkerPool* = Call_HostingEnvironmentsCreateOrUpdateWorkerPool_569254(
    name: "hostingEnvironmentsCreateOrUpdateWorkerPool", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsCreateOrUpdateWorkerPool_569255,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateWorkerPool_569256,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPool_569242 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetWorkerPool_569244(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPool_569243(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569245 = path.getOrDefault("resourceGroupName")
  valid_569245 = validateParameter(valid_569245, JString, required = true,
                                 default = nil)
  if valid_569245 != nil:
    section.add "resourceGroupName", valid_569245
  var valid_569246 = path.getOrDefault("name")
  valid_569246 = validateParameter(valid_569246, JString, required = true,
                                 default = nil)
  if valid_569246 != nil:
    section.add "name", valid_569246
  var valid_569247 = path.getOrDefault("workerPoolName")
  valid_569247 = validateParameter(valid_569247, JString, required = true,
                                 default = nil)
  if valid_569247 != nil:
    section.add "workerPoolName", valid_569247
  var valid_569248 = path.getOrDefault("subscriptionId")
  valid_569248 = validateParameter(valid_569248, JString, required = true,
                                 default = nil)
  if valid_569248 != nil:
    section.add "subscriptionId", valid_569248
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569249 = query.getOrDefault("api-version")
  valid_569249 = validateParameter(valid_569249, JString, required = true,
                                 default = nil)
  if valid_569249 != nil:
    section.add "api-version", valid_569249
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569250: Call_HostingEnvironmentsGetWorkerPool_569242;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569250.validator(path, query, header, formData, body)
  let scheme = call_569250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569250.url(scheme.get, call_569250.host, call_569250.base,
                         call_569250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569250, url, valid)

proc call*(call_569251: Call_HostingEnvironmentsGetWorkerPool_569242;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569252 = newJObject()
  var query_569253 = newJObject()
  add(path_569252, "resourceGroupName", newJString(resourceGroupName))
  add(query_569253, "api-version", newJString(apiVersion))
  add(path_569252, "name", newJString(name))
  add(path_569252, "workerPoolName", newJString(workerPoolName))
  add(path_569252, "subscriptionId", newJString(subscriptionId))
  result = call_569251.call(path_569252, query_569253, nil, nil, nil)

var hostingEnvironmentsGetWorkerPool* = Call_HostingEnvironmentsGetWorkerPool_569242(
    name: "hostingEnvironmentsGetWorkerPool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsGetWorkerPool_569243, base: "",
    url: url_HostingEnvironmentsGetWorkerPool_569244, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569268 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569270(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569269(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569271 = path.getOrDefault("resourceGroupName")
  valid_569271 = validateParameter(valid_569271, JString, required = true,
                                 default = nil)
  if valid_569271 != nil:
    section.add "resourceGroupName", valid_569271
  var valid_569272 = path.getOrDefault("name")
  valid_569272 = validateParameter(valid_569272, JString, required = true,
                                 default = nil)
  if valid_569272 != nil:
    section.add "name", valid_569272
  var valid_569273 = path.getOrDefault("workerPoolName")
  valid_569273 = validateParameter(valid_569273, JString, required = true,
                                 default = nil)
  if valid_569273 != nil:
    section.add "workerPoolName", valid_569273
  var valid_569274 = path.getOrDefault("subscriptionId")
  valid_569274 = validateParameter(valid_569274, JString, required = true,
                                 default = nil)
  if valid_569274 != nil:
    section.add "subscriptionId", valid_569274
  var valid_569275 = path.getOrDefault("instance")
  valid_569275 = validateParameter(valid_569275, JString, required = true,
                                 default = nil)
  if valid_569275 != nil:
    section.add "instance", valid_569275
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569276 = query.getOrDefault("api-version")
  valid_569276 = validateParameter(valid_569276, JString, required = true,
                                 default = nil)
  if valid_569276 != nil:
    section.add "api-version", valid_569276
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569277: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569268;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569277.validator(path, query, header, formData, body)
  let scheme = call_569277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569277.url(scheme.get, call_569277.host, call_569277.base,
                         call_569277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569277, url, valid)

proc call*(call_569278: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569268;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; instance: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  var path_569279 = newJObject()
  var query_569280 = newJObject()
  add(path_569279, "resourceGroupName", newJString(resourceGroupName))
  add(query_569280, "api-version", newJString(apiVersion))
  add(path_569279, "name", newJString(name))
  add(path_569279, "workerPoolName", newJString(workerPoolName))
  add(path_569279, "subscriptionId", newJString(subscriptionId))
  add(path_569279, "instance", newJString(instance))
  result = call_569278.call(path_569279, query_569280, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569268(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569269,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_569270,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569281 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569283(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569282(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569284 = path.getOrDefault("resourceGroupName")
  valid_569284 = validateParameter(valid_569284, JString, required = true,
                                 default = nil)
  if valid_569284 != nil:
    section.add "resourceGroupName", valid_569284
  var valid_569285 = path.getOrDefault("name")
  valid_569285 = validateParameter(valid_569285, JString, required = true,
                                 default = nil)
  if valid_569285 != nil:
    section.add "name", valid_569285
  var valid_569286 = path.getOrDefault("workerPoolName")
  valid_569286 = validateParameter(valid_569286, JString, required = true,
                                 default = nil)
  if valid_569286 != nil:
    section.add "workerPoolName", valid_569286
  var valid_569287 = path.getOrDefault("subscriptionId")
  valid_569287 = validateParameter(valid_569287, JString, required = true,
                                 default = nil)
  if valid_569287 != nil:
    section.add "subscriptionId", valid_569287
  var valid_569288 = path.getOrDefault("instance")
  valid_569288 = validateParameter(valid_569288, JString, required = true,
                                 default = nil)
  if valid_569288 != nil:
    section.add "instance", valid_569288
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569289 = query.getOrDefault("api-version")
  valid_569289 = validateParameter(valid_569289, JString, required = true,
                                 default = nil)
  if valid_569289 != nil:
    section.add "api-version", valid_569289
  var valid_569290 = query.getOrDefault("details")
  valid_569290 = validateParameter(valid_569290, JBool, required = false, default = nil)
  if valid_569290 != nil:
    section.add "details", valid_569290
  var valid_569291 = query.getOrDefault("$filter")
  valid_569291 = validateParameter(valid_569291, JString, required = false,
                                 default = nil)
  if valid_569291 != nil:
    section.add "$filter", valid_569291
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569292: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569281;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569292.validator(path, query, header, formData, body)
  let scheme = call_569292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569292.url(scheme.get, call_569292.host, call_569292.base,
                         call_569292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569292, url, valid)

proc call*(call_569293: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569281;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; instance: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569294 = newJObject()
  var query_569295 = newJObject()
  add(path_569294, "resourceGroupName", newJString(resourceGroupName))
  add(query_569295, "api-version", newJString(apiVersion))
  add(path_569294, "name", newJString(name))
  add(query_569295, "details", newJBool(details))
  add(path_569294, "workerPoolName", newJString(workerPoolName))
  add(path_569294, "subscriptionId", newJString(subscriptionId))
  add(path_569294, "instance", newJString(instance))
  add(query_569295, "$filter", newJString(Filter))
  result = call_569293.call(path_569294, query_569295, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetrics* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569281(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569282,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_569283,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569296 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569298(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569297(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569299 = path.getOrDefault("resourceGroupName")
  valid_569299 = validateParameter(valid_569299, JString, required = true,
                                 default = nil)
  if valid_569299 != nil:
    section.add "resourceGroupName", valid_569299
  var valid_569300 = path.getOrDefault("name")
  valid_569300 = validateParameter(valid_569300, JString, required = true,
                                 default = nil)
  if valid_569300 != nil:
    section.add "name", valid_569300
  var valid_569301 = path.getOrDefault("workerPoolName")
  valid_569301 = validateParameter(valid_569301, JString, required = true,
                                 default = nil)
  if valid_569301 != nil:
    section.add "workerPoolName", valid_569301
  var valid_569302 = path.getOrDefault("subscriptionId")
  valid_569302 = validateParameter(valid_569302, JString, required = true,
                                 default = nil)
  if valid_569302 != nil:
    section.add "subscriptionId", valid_569302
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569303 = query.getOrDefault("api-version")
  valid_569303 = validateParameter(valid_569303, JString, required = true,
                                 default = nil)
  if valid_569303 != nil:
    section.add "api-version", valid_569303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569304: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569296;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569304.validator(path, query, header, formData, body)
  let scheme = call_569304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569304.url(scheme.get, call_569304.host, call_569304.base,
                         call_569304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569304, url, valid)

proc call*(call_569305: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569296;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569306 = newJObject()
  var query_569307 = newJObject()
  add(path_569306, "resourceGroupName", newJString(resourceGroupName))
  add(query_569307, "api-version", newJString(apiVersion))
  add(path_569306, "name", newJString(name))
  add(path_569306, "workerPoolName", newJString(workerPoolName))
  add(path_569306, "subscriptionId", newJString(subscriptionId))
  result = call_569305.call(path_569306, query_569307, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569296(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569297,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_569298,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569308 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569310(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569309(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569311 = path.getOrDefault("resourceGroupName")
  valid_569311 = validateParameter(valid_569311, JString, required = true,
                                 default = nil)
  if valid_569311 != nil:
    section.add "resourceGroupName", valid_569311
  var valid_569312 = path.getOrDefault("name")
  valid_569312 = validateParameter(valid_569312, JString, required = true,
                                 default = nil)
  if valid_569312 != nil:
    section.add "name", valid_569312
  var valid_569313 = path.getOrDefault("workerPoolName")
  valid_569313 = validateParameter(valid_569313, JString, required = true,
                                 default = nil)
  if valid_569313 != nil:
    section.add "workerPoolName", valid_569313
  var valid_569314 = path.getOrDefault("subscriptionId")
  valid_569314 = validateParameter(valid_569314, JString, required = true,
                                 default = nil)
  if valid_569314 != nil:
    section.add "subscriptionId", valid_569314
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Include instance details
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569315 = query.getOrDefault("api-version")
  valid_569315 = validateParameter(valid_569315, JString, required = true,
                                 default = nil)
  if valid_569315 != nil:
    section.add "api-version", valid_569315
  var valid_569316 = query.getOrDefault("details")
  valid_569316 = validateParameter(valid_569316, JBool, required = false, default = nil)
  if valid_569316 != nil:
    section.add "details", valid_569316
  var valid_569317 = query.getOrDefault("$filter")
  valid_569317 = validateParameter(valid_569317, JString, required = false,
                                 default = nil)
  if valid_569317 != nil:
    section.add "$filter", valid_569317
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569318: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569308;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569318.validator(path, query, header, formData, body)
  let scheme = call_569318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569318.url(scheme.get, call_569318.host, call_569318.base,
                         call_569318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569318, url, valid)

proc call*(call_569319: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569308;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string; details: bool = false;
          Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   details: bool
  ##          : Include instance details
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569320 = newJObject()
  var query_569321 = newJObject()
  add(path_569320, "resourceGroupName", newJString(resourceGroupName))
  add(query_569321, "api-version", newJString(apiVersion))
  add(path_569320, "name", newJString(name))
  add(query_569321, "details", newJBool(details))
  add(path_569320, "workerPoolName", newJString(workerPoolName))
  add(path_569320, "subscriptionId", newJString(subscriptionId))
  add(query_569321, "$filter", newJString(Filter))
  result = call_569319.call(path_569320, query_569321, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569308(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569309,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_569310,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolSkus_569322 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetWorkerPoolSkus_569324(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolSkus_569323(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569325 = path.getOrDefault("resourceGroupName")
  valid_569325 = validateParameter(valid_569325, JString, required = true,
                                 default = nil)
  if valid_569325 != nil:
    section.add "resourceGroupName", valid_569325
  var valid_569326 = path.getOrDefault("name")
  valid_569326 = validateParameter(valid_569326, JString, required = true,
                                 default = nil)
  if valid_569326 != nil:
    section.add "name", valid_569326
  var valid_569327 = path.getOrDefault("workerPoolName")
  valid_569327 = validateParameter(valid_569327, JString, required = true,
                                 default = nil)
  if valid_569327 != nil:
    section.add "workerPoolName", valid_569327
  var valid_569328 = path.getOrDefault("subscriptionId")
  valid_569328 = validateParameter(valid_569328, JString, required = true,
                                 default = nil)
  if valid_569328 != nil:
    section.add "subscriptionId", valid_569328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569329 = query.getOrDefault("api-version")
  valid_569329 = validateParameter(valid_569329, JString, required = true,
                                 default = nil)
  if valid_569329 != nil:
    section.add "api-version", valid_569329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569330: Call_HostingEnvironmentsGetWorkerPoolSkus_569322;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569330.validator(path, query, header, formData, body)
  let scheme = call_569330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569330.url(scheme.get, call_569330.host, call_569330.base,
                         call_569330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569330, url, valid)

proc call*(call_569331: Call_HostingEnvironmentsGetWorkerPoolSkus_569322;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolSkus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569332 = newJObject()
  var query_569333 = newJObject()
  add(path_569332, "resourceGroupName", newJString(resourceGroupName))
  add(query_569333, "api-version", newJString(apiVersion))
  add(path_569332, "name", newJString(name))
  add(path_569332, "workerPoolName", newJString(workerPoolName))
  add(path_569332, "subscriptionId", newJString(subscriptionId))
  result = call_569331.call(path_569332, query_569333, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolSkus* = Call_HostingEnvironmentsGetWorkerPoolSkus_569322(
    name: "hostingEnvironmentsGetWorkerPoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
    validator: validate_HostingEnvironmentsGetWorkerPoolSkus_569323, base: "",
    url: url_HostingEnvironmentsGetWorkerPoolSkus_569324, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569334 = ref object of OpenApiRestCall_567650
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569336(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569335(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569337 = path.getOrDefault("resourceGroupName")
  valid_569337 = validateParameter(valid_569337, JString, required = true,
                                 default = nil)
  if valid_569337 != nil:
    section.add "resourceGroupName", valid_569337
  var valid_569338 = path.getOrDefault("name")
  valid_569338 = validateParameter(valid_569338, JString, required = true,
                                 default = nil)
  if valid_569338 != nil:
    section.add "name", valid_569338
  var valid_569339 = path.getOrDefault("workerPoolName")
  valid_569339 = validateParameter(valid_569339, JString, required = true,
                                 default = nil)
  if valid_569339 != nil:
    section.add "workerPoolName", valid_569339
  var valid_569340 = path.getOrDefault("subscriptionId")
  valid_569340 = validateParameter(valid_569340, JString, required = true,
                                 default = nil)
  if valid_569340 != nil:
    section.add "subscriptionId", valid_569340
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569341 = query.getOrDefault("api-version")
  valid_569341 = validateParameter(valid_569341, JString, required = true,
                                 default = nil)
  if valid_569341 != nil:
    section.add "api-version", valid_569341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569342: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569342.validator(path, query, header, formData, body)
  let scheme = call_569342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569342.url(scheme.get, call_569342.host, call_569342.base,
                         call_569342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569342, url, valid)

proc call*(call_569343: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569334;
          resourceGroupName: string; apiVersion: string; name: string;
          workerPoolName: string; subscriptionId: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569344 = newJObject()
  var query_569345 = newJObject()
  add(path_569344, "resourceGroupName", newJString(resourceGroupName))
  add(query_569345, "api-version", newJString(apiVersion))
  add(path_569344, "name", newJString(name))
  add(path_569344, "workerPoolName", newJString(workerPoolName))
  add(path_569344, "subscriptionId", newJString(subscriptionId))
  result = call_569343.call(path_569344, query_569345, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569334(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569335,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_569336,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569346 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569348(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569347(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569349 = path.getOrDefault("resourceGroupName")
  valid_569349 = validateParameter(valid_569349, JString, required = true,
                                 default = nil)
  if valid_569349 != nil:
    section.add "resourceGroupName", valid_569349
  var valid_569350 = path.getOrDefault("subscriptionId")
  valid_569350 = validateParameter(valid_569350, JString, required = true,
                                 default = nil)
  if valid_569350 != nil:
    section.add "subscriptionId", valid_569350
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569351 = query.getOrDefault("api-version")
  valid_569351 = validateParameter(valid_569351, JString, required = true,
                                 default = nil)
  if valid_569351 != nil:
    section.add "api-version", valid_569351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569352: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569352.validator(path, query, header, formData, body)
  let scheme = call_569352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569352.url(scheme.get, call_569352.host, call_569352.base,
                         call_569352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569352, url, valid)

proc call*(call_569353: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569346;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569354 = newJObject()
  var query_569355 = newJObject()
  add(path_569354, "resourceGroupName", newJString(resourceGroupName))
  add(query_569355, "api-version", newJString(apiVersion))
  add(path_569354, "subscriptionId", newJString(subscriptionId))
  result = call_569353.call(path_569354, query_569355, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironments* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569346(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironments",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569347,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_569348,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569367 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569369(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569368(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569370 = path.getOrDefault("resourceGroupName")
  valid_569370 = validateParameter(valid_569370, JString, required = true,
                                 default = nil)
  if valid_569370 != nil:
    section.add "resourceGroupName", valid_569370
  var valid_569371 = path.getOrDefault("name")
  valid_569371 = validateParameter(valid_569371, JString, required = true,
                                 default = nil)
  if valid_569371 != nil:
    section.add "name", valid_569371
  var valid_569372 = path.getOrDefault("subscriptionId")
  valid_569372 = validateParameter(valid_569372, JString, required = true,
                                 default = nil)
  if valid_569372 != nil:
    section.add "subscriptionId", valid_569372
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569373 = query.getOrDefault("api-version")
  valid_569373 = validateParameter(valid_569373, JString, required = true,
                                 default = nil)
  if valid_569373 != nil:
    section.add "api-version", valid_569373
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569375: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569367;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569375.validator(path, query, header, formData, body)
  let scheme = call_569375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569375.url(scheme.get, call_569375.host, call_569375.base,
                         call_569375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569375, url, valid)

proc call*(call_569376: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569367;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; ManagedHostingEnvironmentEnvelope: JsonNode): Recallable =
  ## managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  var path_569377 = newJObject()
  var query_569378 = newJObject()
  var body_569379 = newJObject()
  add(path_569377, "resourceGroupName", newJString(resourceGroupName))
  add(query_569378, "api-version", newJString(apiVersion))
  add(path_569377, "name", newJString(name))
  add(path_569377, "subscriptionId", newJString(subscriptionId))
  if ManagedHostingEnvironmentEnvelope != nil:
    body_569379 = ManagedHostingEnvironmentEnvelope
  result = call_569376.call(path_569377, query_569378, nil, nil, body_569379)

var managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569367(
    name: "managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569368,
    base: "",
    url: url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_569369,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569356 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569358(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569357(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569359 = path.getOrDefault("resourceGroupName")
  valid_569359 = validateParameter(valid_569359, JString, required = true,
                                 default = nil)
  if valid_569359 != nil:
    section.add "resourceGroupName", valid_569359
  var valid_569360 = path.getOrDefault("name")
  valid_569360 = validateParameter(valid_569360, JString, required = true,
                                 default = nil)
  if valid_569360 != nil:
    section.add "name", valid_569360
  var valid_569361 = path.getOrDefault("subscriptionId")
  valid_569361 = validateParameter(valid_569361, JString, required = true,
                                 default = nil)
  if valid_569361 != nil:
    section.add "subscriptionId", valid_569361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569362 = query.getOrDefault("api-version")
  valid_569362 = validateParameter(valid_569362, JString, required = true,
                                 default = nil)
  if valid_569362 != nil:
    section.add "api-version", valid_569362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569363: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569363.validator(path, query, header, formData, body)
  let scheme = call_569363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569363.url(scheme.get, call_569363.host, call_569363.base,
                         call_569363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569363, url, valid)

proc call*(call_569364: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569356;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569365 = newJObject()
  var query_569366 = newJObject()
  add(path_569365, "resourceGroupName", newJString(resourceGroupName))
  add(query_569366, "api-version", newJString(apiVersion))
  add(path_569365, "name", newJString(name))
  add(path_569365, "subscriptionId", newJString(subscriptionId))
  result = call_569364.call(path_569365, query_569366, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569356(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironment",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
    validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569357,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_569358,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569380 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569382(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569381(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569383 = path.getOrDefault("resourceGroupName")
  valid_569383 = validateParameter(valid_569383, JString, required = true,
                                 default = nil)
  if valid_569383 != nil:
    section.add "resourceGroupName", valid_569383
  var valid_569384 = path.getOrDefault("name")
  valid_569384 = validateParameter(valid_569384, JString, required = true,
                                 default = nil)
  if valid_569384 != nil:
    section.add "name", valid_569384
  var valid_569385 = path.getOrDefault("subscriptionId")
  valid_569385 = validateParameter(valid_569385, JString, required = true,
                                 default = nil)
  if valid_569385 != nil:
    section.add "subscriptionId", valid_569385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the managed hosting environment contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569386 = query.getOrDefault("api-version")
  valid_569386 = validateParameter(valid_569386, JString, required = true,
                                 default = nil)
  if valid_569386 != nil:
    section.add "api-version", valid_569386
  var valid_569387 = query.getOrDefault("forceDelete")
  valid_569387 = validateParameter(valid_569387, JBool, required = false, default = nil)
  if valid_569387 != nil:
    section.add "forceDelete", valid_569387
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569388: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569380;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569388.validator(path, query, header, formData, body)
  let scheme = call_569388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569388.url(scheme.get, call_569388.host, call_569388.base,
                         call_569388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569388, url, valid)

proc call*(call_569389: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569380;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; forceDelete: bool = false): Recallable =
  ## managedHostingEnvironmentsDeleteManagedHostingEnvironment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   forceDelete: bool
  ##              : Delete even if the managed hosting environment contains resources
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569390 = newJObject()
  var query_569391 = newJObject()
  add(path_569390, "resourceGroupName", newJString(resourceGroupName))
  add(query_569391, "api-version", newJString(apiVersion))
  add(path_569390, "name", newJString(name))
  add(query_569391, "forceDelete", newJBool(forceDelete))
  add(path_569390, "subscriptionId", newJString(subscriptionId))
  result = call_569389.call(path_569390, query_569391, nil, nil, nil)

var managedHostingEnvironmentsDeleteManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569380(
    name: "managedHostingEnvironmentsDeleteManagedHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569381,
    base: "", url: url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_569382,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569392 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569394(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569393(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569395 = path.getOrDefault("resourceGroupName")
  valid_569395 = validateParameter(valid_569395, JString, required = true,
                                 default = nil)
  if valid_569395 != nil:
    section.add "resourceGroupName", valid_569395
  var valid_569396 = path.getOrDefault("name")
  valid_569396 = validateParameter(valid_569396, JString, required = true,
                                 default = nil)
  if valid_569396 != nil:
    section.add "name", valid_569396
  var valid_569397 = path.getOrDefault("subscriptionId")
  valid_569397 = validateParameter(valid_569397, JString, required = true,
                                 default = nil)
  if valid_569397 != nil:
    section.add "subscriptionId", valid_569397
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569398 = query.getOrDefault("api-version")
  valid_569398 = validateParameter(valid_569398, JString, required = true,
                                 default = nil)
  if valid_569398 != nil:
    section.add "api-version", valid_569398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569399: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569392;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569399.validator(path, query, header, formData, body)
  let scheme = call_569399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569399.url(scheme.get, call_569399.host, call_569399.base,
                         call_569399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569399, url, valid)

proc call*(call_569400: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569392;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentVips
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569401 = newJObject()
  var query_569402 = newJObject()
  add(path_569401, "resourceGroupName", newJString(resourceGroupName))
  add(query_569402, "api-version", newJString(apiVersion))
  add(path_569401, "name", newJString(name))
  add(path_569401, "subscriptionId", newJString(subscriptionId))
  result = call_569400.call(path_569401, query_569402, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentVips* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569392(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569393,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_569394,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569403 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569405(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569404(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569406 = path.getOrDefault("resourceGroupName")
  valid_569406 = validateParameter(valid_569406, JString, required = true,
                                 default = nil)
  if valid_569406 != nil:
    section.add "resourceGroupName", valid_569406
  var valid_569407 = path.getOrDefault("name")
  valid_569407 = validateParameter(valid_569407, JString, required = true,
                                 default = nil)
  if valid_569407 != nil:
    section.add "name", valid_569407
  var valid_569408 = path.getOrDefault("subscriptionId")
  valid_569408 = validateParameter(valid_569408, JString, required = true,
                                 default = nil)
  if valid_569408 != nil:
    section.add "subscriptionId", valid_569408
  var valid_569409 = path.getOrDefault("operationId")
  valid_569409 = validateParameter(valid_569409, JString, required = true,
                                 default = nil)
  if valid_569409 != nil:
    section.add "operationId", valid_569409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569410 = query.getOrDefault("api-version")
  valid_569410 = validateParameter(valid_569410, JString, required = true,
                                 default = nil)
  if valid_569410 != nil:
    section.add "api-version", valid_569410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569411: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569411.validator(path, query, header, formData, body)
  let scheme = call_569411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569411.url(scheme.get, call_569411.host, call_569411.base,
                         call_569411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569411, url, valid)

proc call*(call_569412: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569403;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : operation identifier GUID
  var path_569413 = newJObject()
  var query_569414 = newJObject()
  add(path_569413, "resourceGroupName", newJString(resourceGroupName))
  add(query_569414, "api-version", newJString(apiVersion))
  add(path_569413, "name", newJString(name))
  add(path_569413, "subscriptionId", newJString(subscriptionId))
  add(path_569413, "operationId", newJString(operationId))
  result = call_569412.call(path_569413, query_569414, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentOperation* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569403(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569404,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_569405,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569415 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569417(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569416(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569418 = path.getOrDefault("resourceGroupName")
  valid_569418 = validateParameter(valid_569418, JString, required = true,
                                 default = nil)
  if valid_569418 != nil:
    section.add "resourceGroupName", valid_569418
  var valid_569419 = path.getOrDefault("name")
  valid_569419 = validateParameter(valid_569419, JString, required = true,
                                 default = nil)
  if valid_569419 != nil:
    section.add "name", valid_569419
  var valid_569420 = path.getOrDefault("subscriptionId")
  valid_569420 = validateParameter(valid_569420, JString, required = true,
                                 default = nil)
  if valid_569420 != nil:
    section.add "subscriptionId", valid_569420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569421 = query.getOrDefault("api-version")
  valid_569421 = validateParameter(valid_569421, JString, required = true,
                                 default = nil)
  if valid_569421 != nil:
    section.add "api-version", valid_569421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569422: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569415;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569422.validator(path, query, header, formData, body)
  let scheme = call_569422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569422.url(scheme.get, call_569422.host, call_569422.base,
                         call_569422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569422, url, valid)

proc call*(call_569423: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569415;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569424 = newJObject()
  var query_569425 = newJObject()
  add(path_569424, "resourceGroupName", newJString(resourceGroupName))
  add(query_569425, "api-version", newJString(apiVersion))
  add(path_569424, "name", newJString(name))
  add(path_569424, "subscriptionId", newJString(subscriptionId))
  result = call_569423.call(path_569424, query_569425, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569415(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569416,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_569417,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569426 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569428(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569427(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569429 = path.getOrDefault("resourceGroupName")
  valid_569429 = validateParameter(valid_569429, JString, required = true,
                                 default = nil)
  if valid_569429 != nil:
    section.add "resourceGroupName", valid_569429
  var valid_569430 = path.getOrDefault("name")
  valid_569430 = validateParameter(valid_569430, JString, required = true,
                                 default = nil)
  if valid_569430 != nil:
    section.add "name", valid_569430
  var valid_569431 = path.getOrDefault("subscriptionId")
  valid_569431 = validateParameter(valid_569431, JString, required = true,
                                 default = nil)
  if valid_569431 != nil:
    section.add "subscriptionId", valid_569431
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_569432 = query.getOrDefault("propertiesToInclude")
  valid_569432 = validateParameter(valid_569432, JString, required = false,
                                 default = nil)
  if valid_569432 != nil:
    section.add "propertiesToInclude", valid_569432
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569433 = query.getOrDefault("api-version")
  valid_569433 = validateParameter(valid_569433, JString, required = true,
                                 default = nil)
  if valid_569433 != nil:
    section.add "api-version", valid_569433
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569434: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569426;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569434.validator(path, query, header, formData, body)
  let scheme = call_569434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569434.url(scheme.get, call_569434.host, call_569434.base,
                         call_569434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569434, url, valid)

proc call*(call_569435: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569426;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; propertiesToInclude: string = ""): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569436 = newJObject()
  var query_569437 = newJObject()
  add(path_569436, "resourceGroupName", newJString(resourceGroupName))
  add(query_569437, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_569437, "api-version", newJString(apiVersion))
  add(path_569436, "name", newJString(name))
  add(path_569436, "subscriptionId", newJString(subscriptionId))
  result = call_569435.call(path_569436, query_569437, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentSites* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569426(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569427,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_569428,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569438 = ref object of OpenApiRestCall_567650
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569440(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569439(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569441 = path.getOrDefault("resourceGroupName")
  valid_569441 = validateParameter(valid_569441, JString, required = true,
                                 default = nil)
  if valid_569441 != nil:
    section.add "resourceGroupName", valid_569441
  var valid_569442 = path.getOrDefault("name")
  valid_569442 = validateParameter(valid_569442, JString, required = true,
                                 default = nil)
  if valid_569442 != nil:
    section.add "name", valid_569442
  var valid_569443 = path.getOrDefault("subscriptionId")
  valid_569443 = validateParameter(valid_569443, JString, required = true,
                                 default = nil)
  if valid_569443 != nil:
    section.add "subscriptionId", valid_569443
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569444 = query.getOrDefault("api-version")
  valid_569444 = validateParameter(valid_569444, JString, required = true,
                                 default = nil)
  if valid_569444 != nil:
    section.add "api-version", valid_569444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569445: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569438;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569445.validator(path, query, header, formData, body)
  let scheme = call_569445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569445.url(scheme.get, call_569445.host, call_569445.base,
                         call_569445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569445, url, valid)

proc call*(call_569446: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569438;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569447 = newJObject()
  var query_569448 = newJObject()
  add(path_569447, "resourceGroupName", newJString(resourceGroupName))
  add(query_569448, "api-version", newJString(apiVersion))
  add(path_569447, "name", newJString(name))
  add(path_569447, "subscriptionId", newJString(subscriptionId))
  result = call_569446.call(path_569447, query_569448, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569438(name: "managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569439,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_569440,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarms_569449 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarms_569451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarms_569450(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569452 = path.getOrDefault("resourceGroupName")
  valid_569452 = validateParameter(valid_569452, JString, required = true,
                                 default = nil)
  if valid_569452 != nil:
    section.add "resourceGroupName", valid_569452
  var valid_569453 = path.getOrDefault("subscriptionId")
  valid_569453 = validateParameter(valid_569453, JString, required = true,
                                 default = nil)
  if valid_569453 != nil:
    section.add "subscriptionId", valid_569453
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569454 = query.getOrDefault("api-version")
  valid_569454 = validateParameter(valid_569454, JString, required = true,
                                 default = nil)
  if valid_569454 != nil:
    section.add "api-version", valid_569454
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569455: Call_ServerFarmsGetServerFarms_569449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569455.validator(path, query, header, formData, body)
  let scheme = call_569455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569455.url(scheme.get, call_569455.host, call_569455.base,
                         call_569455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569455, url, valid)

proc call*(call_569456: Call_ServerFarmsGetServerFarms_569449;
          resourceGroupName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarms
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569457 = newJObject()
  var query_569458 = newJObject()
  add(path_569457, "resourceGroupName", newJString(resourceGroupName))
  add(query_569458, "api-version", newJString(apiVersion))
  add(path_569457, "subscriptionId", newJString(subscriptionId))
  result = call_569456.call(path_569457, query_569458, nil, nil, nil)

var serverFarmsGetServerFarms* = Call_ServerFarmsGetServerFarms_569449(
    name: "serverFarmsGetServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
    validator: validate_ServerFarmsGetServerFarms_569450, base: "",
    url: url_ServerFarmsGetServerFarms_569451, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateServerFarm_569470 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsCreateOrUpdateServerFarm_569472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateServerFarm_569471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569473 = path.getOrDefault("resourceGroupName")
  valid_569473 = validateParameter(valid_569473, JString, required = true,
                                 default = nil)
  if valid_569473 != nil:
    section.add "resourceGroupName", valid_569473
  var valid_569474 = path.getOrDefault("name")
  valid_569474 = validateParameter(valid_569474, JString, required = true,
                                 default = nil)
  if valid_569474 != nil:
    section.add "name", valid_569474
  var valid_569475 = path.getOrDefault("subscriptionId")
  valid_569475 = validateParameter(valid_569475, JString, required = true,
                                 default = nil)
  if valid_569475 != nil:
    section.add "subscriptionId", valid_569475
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   allowPendingState: JBool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569476 = query.getOrDefault("api-version")
  valid_569476 = validateParameter(valid_569476, JString, required = true,
                                 default = nil)
  if valid_569476 != nil:
    section.add "api-version", valid_569476
  var valid_569477 = query.getOrDefault("allowPendingState")
  valid_569477 = validateParameter(valid_569477, JBool, required = false, default = nil)
  if valid_569477 != nil:
    section.add "allowPendingState", valid_569477
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569479: Call_ServerFarmsCreateOrUpdateServerFarm_569470;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569479.validator(path, query, header, formData, body)
  let scheme = call_569479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569479.url(scheme.get, call_569479.host, call_569479.base,
                         call_569479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569479, url, valid)

proc call*(call_569480: Call_ServerFarmsCreateOrUpdateServerFarm_569470;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; serverFarmEnvelope: JsonNode;
          allowPendingState: bool = false): Recallable =
  ## serverFarmsCreateOrUpdateServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   allowPendingState: bool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  var path_569481 = newJObject()
  var query_569482 = newJObject()
  var body_569483 = newJObject()
  add(path_569481, "resourceGroupName", newJString(resourceGroupName))
  add(query_569482, "api-version", newJString(apiVersion))
  add(path_569481, "name", newJString(name))
  add(path_569481, "subscriptionId", newJString(subscriptionId))
  add(query_569482, "allowPendingState", newJBool(allowPendingState))
  if serverFarmEnvelope != nil:
    body_569483 = serverFarmEnvelope
  result = call_569480.call(path_569481, query_569482, nil, nil, body_569483)

var serverFarmsCreateOrUpdateServerFarm* = Call_ServerFarmsCreateOrUpdateServerFarm_569470(
    name: "serverFarmsCreateOrUpdateServerFarm", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsCreateOrUpdateServerFarm_569471, base: "",
    url: url_ServerFarmsCreateOrUpdateServerFarm_569472, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarm_569459 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarm_569461(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarm_569460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569462 = path.getOrDefault("resourceGroupName")
  valid_569462 = validateParameter(valid_569462, JString, required = true,
                                 default = nil)
  if valid_569462 != nil:
    section.add "resourceGroupName", valid_569462
  var valid_569463 = path.getOrDefault("name")
  valid_569463 = validateParameter(valid_569463, JString, required = true,
                                 default = nil)
  if valid_569463 != nil:
    section.add "name", valid_569463
  var valid_569464 = path.getOrDefault("subscriptionId")
  valid_569464 = validateParameter(valid_569464, JString, required = true,
                                 default = nil)
  if valid_569464 != nil:
    section.add "subscriptionId", valid_569464
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569465 = query.getOrDefault("api-version")
  valid_569465 = validateParameter(valid_569465, JString, required = true,
                                 default = nil)
  if valid_569465 != nil:
    section.add "api-version", valid_569465
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569466: Call_ServerFarmsGetServerFarm_569459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569466.validator(path, query, header, formData, body)
  let scheme = call_569466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569466.url(scheme.get, call_569466.host, call_569466.base,
                         call_569466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569466, url, valid)

proc call*(call_569467: Call_ServerFarmsGetServerFarm_569459;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569468 = newJObject()
  var query_569469 = newJObject()
  add(path_569468, "resourceGroupName", newJString(resourceGroupName))
  add(query_569469, "api-version", newJString(apiVersion))
  add(path_569468, "name", newJString(name))
  add(path_569468, "subscriptionId", newJString(subscriptionId))
  result = call_569467.call(path_569468, query_569469, nil, nil, nil)

var serverFarmsGetServerFarm* = Call_ServerFarmsGetServerFarm_569459(
    name: "serverFarmsGetServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsGetServerFarm_569460, base: "",
    url: url_ServerFarmsGetServerFarm_569461, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteServerFarm_569484 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsDeleteServerFarm_569486(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteServerFarm_569485(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569487 = path.getOrDefault("resourceGroupName")
  valid_569487 = validateParameter(valid_569487, JString, required = true,
                                 default = nil)
  if valid_569487 != nil:
    section.add "resourceGroupName", valid_569487
  var valid_569488 = path.getOrDefault("name")
  valid_569488 = validateParameter(valid_569488, JString, required = true,
                                 default = nil)
  if valid_569488 != nil:
    section.add "name", valid_569488
  var valid_569489 = path.getOrDefault("subscriptionId")
  valid_569489 = validateParameter(valid_569489, JString, required = true,
                                 default = nil)
  if valid_569489 != nil:
    section.add "subscriptionId", valid_569489
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569490 = query.getOrDefault("api-version")
  valid_569490 = validateParameter(valid_569490, JString, required = true,
                                 default = nil)
  if valid_569490 != nil:
    section.add "api-version", valid_569490
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569491: Call_ServerFarmsDeleteServerFarm_569484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569491.validator(path, query, header, formData, body)
  let scheme = call_569491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569491.url(scheme.get, call_569491.host, call_569491.base,
                         call_569491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569491, url, valid)

proc call*(call_569492: Call_ServerFarmsDeleteServerFarm_569484;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsDeleteServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569493 = newJObject()
  var query_569494 = newJObject()
  add(path_569493, "resourceGroupName", newJString(resourceGroupName))
  add(query_569494, "api-version", newJString(apiVersion))
  add(path_569493, "name", newJString(name))
  add(path_569493, "subscriptionId", newJString(subscriptionId))
  result = call_569492.call(path_569493, query_569494, nil, nil, nil)

var serverFarmsDeleteServerFarm* = Call_ServerFarmsDeleteServerFarm_569484(
    name: "serverFarmsDeleteServerFarm", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsDeleteServerFarm_569485, base: "",
    url: url_ServerFarmsDeleteServerFarm_569486, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetricDefintions_569495 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarmMetricDefintions_569497(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetricDefintions_569496(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569498 = path.getOrDefault("resourceGroupName")
  valid_569498 = validateParameter(valid_569498, JString, required = true,
                                 default = nil)
  if valid_569498 != nil:
    section.add "resourceGroupName", valid_569498
  var valid_569499 = path.getOrDefault("name")
  valid_569499 = validateParameter(valid_569499, JString, required = true,
                                 default = nil)
  if valid_569499 != nil:
    section.add "name", valid_569499
  var valid_569500 = path.getOrDefault("subscriptionId")
  valid_569500 = validateParameter(valid_569500, JString, required = true,
                                 default = nil)
  if valid_569500 != nil:
    section.add "subscriptionId", valid_569500
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569501 = query.getOrDefault("api-version")
  valid_569501 = validateParameter(valid_569501, JString, required = true,
                                 default = nil)
  if valid_569501 != nil:
    section.add "api-version", valid_569501
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569502: Call_ServerFarmsGetServerFarmMetricDefintions_569495;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569502.validator(path, query, header, formData, body)
  let scheme = call_569502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569502.url(scheme.get, call_569502.host, call_569502.base,
                         call_569502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569502, url, valid)

proc call*(call_569503: Call_ServerFarmsGetServerFarmMetricDefintions_569495;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarmMetricDefintions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569504 = newJObject()
  var query_569505 = newJObject()
  add(path_569504, "resourceGroupName", newJString(resourceGroupName))
  add(query_569505, "api-version", newJString(apiVersion))
  add(path_569504, "name", newJString(name))
  add(path_569504, "subscriptionId", newJString(subscriptionId))
  result = call_569503.call(path_569504, query_569505, nil, nil, nil)

var serverFarmsGetServerFarmMetricDefintions* = Call_ServerFarmsGetServerFarmMetricDefintions_569495(
    name: "serverFarmsGetServerFarmMetricDefintions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
    validator: validate_ServerFarmsGetServerFarmMetricDefintions_569496, base: "",
    url: url_ServerFarmsGetServerFarmMetricDefintions_569497,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetrics_569506 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarmMetrics_569508(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetrics_569507(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569509 = path.getOrDefault("resourceGroupName")
  valid_569509 = validateParameter(valid_569509, JString, required = true,
                                 default = nil)
  if valid_569509 != nil:
    section.add "resourceGroupName", valid_569509
  var valid_569510 = path.getOrDefault("name")
  valid_569510 = validateParameter(valid_569510, JString, required = true,
                                 default = nil)
  if valid_569510 != nil:
    section.add "name", valid_569510
  var valid_569511 = path.getOrDefault("subscriptionId")
  valid_569511 = validateParameter(valid_569511, JString, required = true,
                                 default = nil)
  if valid_569511 != nil:
    section.add "subscriptionId", valid_569511
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569512 = query.getOrDefault("api-version")
  valid_569512 = validateParameter(valid_569512, JString, required = true,
                                 default = nil)
  if valid_569512 != nil:
    section.add "api-version", valid_569512
  var valid_569513 = query.getOrDefault("details")
  valid_569513 = validateParameter(valid_569513, JBool, required = false, default = nil)
  if valid_569513 != nil:
    section.add "details", valid_569513
  var valid_569514 = query.getOrDefault("$filter")
  valid_569514 = validateParameter(valid_569514, JString, required = false,
                                 default = nil)
  if valid_569514 != nil:
    section.add "$filter", valid_569514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569515: Call_ServerFarmsGetServerFarmMetrics_569506;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569515.validator(path, query, header, formData, body)
  let scheme = call_569515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569515.url(scheme.get, call_569515.host, call_569515.base,
                         call_569515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569515, url, valid)

proc call*(call_569516: Call_ServerFarmsGetServerFarmMetrics_569506;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   details: bool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569517 = newJObject()
  var query_569518 = newJObject()
  add(path_569517, "resourceGroupName", newJString(resourceGroupName))
  add(query_569518, "api-version", newJString(apiVersion))
  add(path_569517, "name", newJString(name))
  add(query_569518, "details", newJBool(details))
  add(path_569517, "subscriptionId", newJString(subscriptionId))
  add(query_569518, "$filter", newJString(Filter))
  result = call_569516.call(path_569517, query_569518, nil, nil, nil)

var serverFarmsGetServerFarmMetrics* = Call_ServerFarmsGetServerFarmMetrics_569506(
    name: "serverFarmsGetServerFarmMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics",
    validator: validate_ServerFarmsGetServerFarmMetrics_569507, base: "",
    url: url_ServerFarmsGetServerFarmMetrics_569508, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmOperation_569519 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarmOperation_569521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmOperation_569520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of Server farm operation"&gt;
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569522 = path.getOrDefault("resourceGroupName")
  valid_569522 = validateParameter(valid_569522, JString, required = true,
                                 default = nil)
  if valid_569522 != nil:
    section.add "resourceGroupName", valid_569522
  var valid_569523 = path.getOrDefault("name")
  valid_569523 = validateParameter(valid_569523, JString, required = true,
                                 default = nil)
  if valid_569523 != nil:
    section.add "name", valid_569523
  var valid_569524 = path.getOrDefault("subscriptionId")
  valid_569524 = validateParameter(valid_569524, JString, required = true,
                                 default = nil)
  if valid_569524 != nil:
    section.add "subscriptionId", valid_569524
  var valid_569525 = path.getOrDefault("operationId")
  valid_569525 = validateParameter(valid_569525, JString, required = true,
                                 default = nil)
  if valid_569525 != nil:
    section.add "operationId", valid_569525
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569526 = query.getOrDefault("api-version")
  valid_569526 = validateParameter(valid_569526, JString, required = true,
                                 default = nil)
  if valid_569526 != nil:
    section.add "api-version", valid_569526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569527: Call_ServerFarmsGetServerFarmOperation_569519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569527.validator(path, query, header, formData, body)
  let scheme = call_569527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569527.url(scheme.get, call_569527.host, call_569527.base,
                         call_569527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569527, url, valid)

proc call*(call_569528: Call_ServerFarmsGetServerFarmOperation_569519;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## serverFarmsGetServerFarmOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of Server farm operation"&gt;
  var path_569529 = newJObject()
  var query_569530 = newJObject()
  add(path_569529, "resourceGroupName", newJString(resourceGroupName))
  add(query_569530, "api-version", newJString(apiVersion))
  add(path_569529, "name", newJString(name))
  add(path_569529, "subscriptionId", newJString(subscriptionId))
  add(path_569529, "operationId", newJString(operationId))
  result = call_569528.call(path_569529, query_569530, nil, nil, nil)

var serverFarmsGetServerFarmOperation* = Call_ServerFarmsGetServerFarmOperation_569519(
    name: "serverFarmsGetServerFarmOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}",
    validator: validate_ServerFarmsGetServerFarmOperation_569520, base: "",
    url: url_ServerFarmsGetServerFarmOperation_569521, schemes: {Scheme.Https})
type
  Call_ServerFarmsRestartSitesForServerFarm_569531 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsRestartSitesForServerFarm_569533(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restartSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRestartSitesForServerFarm_569532(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569534 = path.getOrDefault("resourceGroupName")
  valid_569534 = validateParameter(valid_569534, JString, required = true,
                                 default = nil)
  if valid_569534 != nil:
    section.add "resourceGroupName", valid_569534
  var valid_569535 = path.getOrDefault("name")
  valid_569535 = validateParameter(valid_569535, JString, required = true,
                                 default = nil)
  if valid_569535 != nil:
    section.add "name", valid_569535
  var valid_569536 = path.getOrDefault("subscriptionId")
  valid_569536 = validateParameter(valid_569536, JString, required = true,
                                 default = nil)
  if valid_569536 != nil:
    section.add "subscriptionId", valid_569536
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569537 = query.getOrDefault("api-version")
  valid_569537 = validateParameter(valid_569537, JString, required = true,
                                 default = nil)
  if valid_569537 != nil:
    section.add "api-version", valid_569537
  var valid_569538 = query.getOrDefault("softRestart")
  valid_569538 = validateParameter(valid_569538, JBool, required = false, default = nil)
  if valid_569538 != nil:
    section.add "softRestart", valid_569538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569539: Call_ServerFarmsRestartSitesForServerFarm_569531;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569539.validator(path, query, header, formData, body)
  let scheme = call_569539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569539.url(scheme.get, call_569539.host, call_569539.base,
                         call_569539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569539, url, valid)

proc call*(call_569540: Call_ServerFarmsRestartSitesForServerFarm_569531;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; softRestart: bool = false): Recallable =
  ## serverFarmsRestartSitesForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  var path_569541 = newJObject()
  var query_569542 = newJObject()
  add(path_569541, "resourceGroupName", newJString(resourceGroupName))
  add(query_569542, "api-version", newJString(apiVersion))
  add(path_569541, "name", newJString(name))
  add(path_569541, "subscriptionId", newJString(subscriptionId))
  add(query_569542, "softRestart", newJBool(softRestart))
  result = call_569540.call(path_569541, query_569542, nil, nil, nil)

var serverFarmsRestartSitesForServerFarm* = Call_ServerFarmsRestartSitesForServerFarm_569531(
    name: "serverFarmsRestartSitesForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
    validator: validate_ServerFarmsRestartSitesForServerFarm_569532, base: "",
    url: url_ServerFarmsRestartSitesForServerFarm_569533, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmSites_569543 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarmSites_569545(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmSites_569544(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569546 = path.getOrDefault("resourceGroupName")
  valid_569546 = validateParameter(valid_569546, JString, required = true,
                                 default = nil)
  if valid_569546 != nil:
    section.add "resourceGroupName", valid_569546
  var valid_569547 = path.getOrDefault("name")
  valid_569547 = validateParameter(valid_569547, JString, required = true,
                                 default = nil)
  if valid_569547 != nil:
    section.add "name", valid_569547
  var valid_569548 = path.getOrDefault("subscriptionId")
  valid_569548 = validateParameter(valid_569548, JString, required = true,
                                 default = nil)
  if valid_569548 != nil:
    section.add "subscriptionId", valid_569548
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $top: JString
  ##       : List page size. If specified, results are paged.
  ##   $skipToken: JString
  ##             : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   $filter: JString
  ##          : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569549 = query.getOrDefault("api-version")
  valid_569549 = validateParameter(valid_569549, JString, required = true,
                                 default = nil)
  if valid_569549 != nil:
    section.add "api-version", valid_569549
  var valid_569550 = query.getOrDefault("$top")
  valid_569550 = validateParameter(valid_569550, JString, required = false,
                                 default = nil)
  if valid_569550 != nil:
    section.add "$top", valid_569550
  var valid_569551 = query.getOrDefault("$skipToken")
  valid_569551 = validateParameter(valid_569551, JString, required = false,
                                 default = nil)
  if valid_569551 != nil:
    section.add "$skipToken", valid_569551
  var valid_569552 = query.getOrDefault("$filter")
  valid_569552 = validateParameter(valid_569552, JString, required = false,
                                 default = nil)
  if valid_569552 != nil:
    section.add "$filter", valid_569552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569553: Call_ServerFarmsGetServerFarmSites_569543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569553.validator(path, query, header, formData, body)
  let scheme = call_569553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569553.url(scheme.get, call_569553.host, call_569553.base,
                         call_569553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569553, url, valid)

proc call*(call_569554: Call_ServerFarmsGetServerFarmSites_569543;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Top: string = ""; SkipToken: string = "";
          Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Top: string
  ##      : List page size. If specified, results are paged.
  ##   SkipToken: string
  ##            : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   Filter: string
  ##         : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  var path_569555 = newJObject()
  var query_569556 = newJObject()
  add(path_569555, "resourceGroupName", newJString(resourceGroupName))
  add(query_569556, "api-version", newJString(apiVersion))
  add(path_569555, "name", newJString(name))
  add(path_569555, "subscriptionId", newJString(subscriptionId))
  add(query_569556, "$top", newJString(Top))
  add(query_569556, "$skipToken", newJString(SkipToken))
  add(query_569556, "$filter", newJString(Filter))
  result = call_569554.call(path_569555, query_569556, nil, nil, nil)

var serverFarmsGetServerFarmSites* = Call_ServerFarmsGetServerFarmSites_569543(
    name: "serverFarmsGetServerFarmSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
    validator: validate_ServerFarmsGetServerFarmSites_569544, base: "",
    url: url_ServerFarmsGetServerFarmSites_569545, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetsForServerFarm_569557 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetVnetsForServerFarm_569559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetsForServerFarm_569558(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569560 = path.getOrDefault("resourceGroupName")
  valid_569560 = validateParameter(valid_569560, JString, required = true,
                                 default = nil)
  if valid_569560 != nil:
    section.add "resourceGroupName", valid_569560
  var valid_569561 = path.getOrDefault("name")
  valid_569561 = validateParameter(valid_569561, JString, required = true,
                                 default = nil)
  if valid_569561 != nil:
    section.add "name", valid_569561
  var valid_569562 = path.getOrDefault("subscriptionId")
  valid_569562 = validateParameter(valid_569562, JString, required = true,
                                 default = nil)
  if valid_569562 != nil:
    section.add "subscriptionId", valid_569562
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569563 = query.getOrDefault("api-version")
  valid_569563 = validateParameter(valid_569563, JString, required = true,
                                 default = nil)
  if valid_569563 != nil:
    section.add "api-version", valid_569563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569564: Call_ServerFarmsGetVnetsForServerFarm_569557;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569564.validator(path, query, header, formData, body)
  let scheme = call_569564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569564.url(scheme.get, call_569564.host, call_569564.base,
                         call_569564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569564, url, valid)

proc call*(call_569565: Call_ServerFarmsGetVnetsForServerFarm_569557;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## serverFarmsGetVnetsForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569566 = newJObject()
  var query_569567 = newJObject()
  add(path_569566, "resourceGroupName", newJString(resourceGroupName))
  add(query_569567, "api-version", newJString(apiVersion))
  add(path_569566, "name", newJString(name))
  add(path_569566, "subscriptionId", newJString(subscriptionId))
  result = call_569565.call(path_569566, query_569567, nil, nil, nil)

var serverFarmsGetVnetsForServerFarm* = Call_ServerFarmsGetVnetsForServerFarm_569557(
    name: "serverFarmsGetVnetsForServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
    validator: validate_ServerFarmsGetVnetsForServerFarm_569558, base: "",
    url: url_ServerFarmsGetVnetsForServerFarm_569559, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetFromServerFarm_569568 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetVnetFromServerFarm_569570(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetFromServerFarm_569569(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569571 = path.getOrDefault("resourceGroupName")
  valid_569571 = validateParameter(valid_569571, JString, required = true,
                                 default = nil)
  if valid_569571 != nil:
    section.add "resourceGroupName", valid_569571
  var valid_569572 = path.getOrDefault("name")
  valid_569572 = validateParameter(valid_569572, JString, required = true,
                                 default = nil)
  if valid_569572 != nil:
    section.add "name", valid_569572
  var valid_569573 = path.getOrDefault("vnetName")
  valid_569573 = validateParameter(valid_569573, JString, required = true,
                                 default = nil)
  if valid_569573 != nil:
    section.add "vnetName", valid_569573
  var valid_569574 = path.getOrDefault("subscriptionId")
  valid_569574 = validateParameter(valid_569574, JString, required = true,
                                 default = nil)
  if valid_569574 != nil:
    section.add "subscriptionId", valid_569574
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569575 = query.getOrDefault("api-version")
  valid_569575 = validateParameter(valid_569575, JString, required = true,
                                 default = nil)
  if valid_569575 != nil:
    section.add "api-version", valid_569575
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569576: Call_ServerFarmsGetVnetFromServerFarm_569568;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569576.validator(path, query, header, formData, body)
  let scheme = call_569576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569576.url(scheme.get, call_569576.host, call_569576.base,
                         call_569576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569576, url, valid)

proc call*(call_569577: Call_ServerFarmsGetVnetFromServerFarm_569568;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetVnetFromServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569578 = newJObject()
  var query_569579 = newJObject()
  add(path_569578, "resourceGroupName", newJString(resourceGroupName))
  add(query_569579, "api-version", newJString(apiVersion))
  add(path_569578, "name", newJString(name))
  add(path_569578, "vnetName", newJString(vnetName))
  add(path_569578, "subscriptionId", newJString(subscriptionId))
  result = call_569577.call(path_569578, query_569579, nil, nil, nil)

var serverFarmsGetVnetFromServerFarm* = Call_ServerFarmsGetVnetFromServerFarm_569568(
    name: "serverFarmsGetVnetFromServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_ServerFarmsGetVnetFromServerFarm_569569, base: "",
    url: url_ServerFarmsGetVnetFromServerFarm_569570, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateServerFarmVnetGateway_569593 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsUpdateServerFarmVnetGateway_569595(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateServerFarmVnetGateway_569594(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group
  ##   name: JString (required)
  ##       : The name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : The name of the virtual network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569596 = path.getOrDefault("resourceGroupName")
  valid_569596 = validateParameter(valid_569596, JString, required = true,
                                 default = nil)
  if valid_569596 != nil:
    section.add "resourceGroupName", valid_569596
  var valid_569597 = path.getOrDefault("name")
  valid_569597 = validateParameter(valid_569597, JString, required = true,
                                 default = nil)
  if valid_569597 != nil:
    section.add "name", valid_569597
  var valid_569598 = path.getOrDefault("vnetName")
  valid_569598 = validateParameter(valid_569598, JString, required = true,
                                 default = nil)
  if valid_569598 != nil:
    section.add "vnetName", valid_569598
  var valid_569599 = path.getOrDefault("gatewayName")
  valid_569599 = validateParameter(valid_569599, JString, required = true,
                                 default = nil)
  if valid_569599 != nil:
    section.add "gatewayName", valid_569599
  var valid_569600 = path.getOrDefault("subscriptionId")
  valid_569600 = validateParameter(valid_569600, JString, required = true,
                                 default = nil)
  if valid_569600 != nil:
    section.add "subscriptionId", valid_569600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569601 = query.getOrDefault("api-version")
  valid_569601 = validateParameter(valid_569601, JString, required = true,
                                 default = nil)
  if valid_569601 != nil:
    section.add "api-version", valid_569601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569603: Call_ServerFarmsUpdateServerFarmVnetGateway_569593;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569603.validator(path, query, header, formData, body)
  let scheme = call_569603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569603.url(scheme.get, call_569603.host, call_569603.base,
                         call_569603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569603, url, valid)

proc call*(call_569604: Call_ServerFarmsUpdateServerFarmVnetGateway_569593;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## serverFarmsUpdateServerFarmVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  ##   name: string (required)
  ##       : The name of the App Service Plan
  ##   vnetName: string (required)
  ##           : The name of the virtual network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569605 = newJObject()
  var query_569606 = newJObject()
  var body_569607 = newJObject()
  add(path_569605, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569607 = connectionEnvelope
  add(path_569605, "name", newJString(name))
  add(path_569605, "vnetName", newJString(vnetName))
  add(query_569606, "api-version", newJString(apiVersion))
  add(path_569605, "gatewayName", newJString(gatewayName))
  add(path_569605, "subscriptionId", newJString(subscriptionId))
  result = call_569604.call(path_569605, query_569606, nil, nil, body_569607)

var serverFarmsUpdateServerFarmVnetGateway* = Call_ServerFarmsUpdateServerFarmVnetGateway_569593(
    name: "serverFarmsUpdateServerFarmVnetGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsUpdateServerFarmVnetGateway_569594, base: "",
    url: url_ServerFarmsUpdateServerFarmVnetGateway_569595,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmVnetGateway_569580 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetServerFarmVnetGateway_569582(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmVnetGateway_569581(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of the virtual network
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569583 = path.getOrDefault("resourceGroupName")
  valid_569583 = validateParameter(valid_569583, JString, required = true,
                                 default = nil)
  if valid_569583 != nil:
    section.add "resourceGroupName", valid_569583
  var valid_569584 = path.getOrDefault("name")
  valid_569584 = validateParameter(valid_569584, JString, required = true,
                                 default = nil)
  if valid_569584 != nil:
    section.add "name", valid_569584
  var valid_569585 = path.getOrDefault("vnetName")
  valid_569585 = validateParameter(valid_569585, JString, required = true,
                                 default = nil)
  if valid_569585 != nil:
    section.add "vnetName", valid_569585
  var valid_569586 = path.getOrDefault("gatewayName")
  valid_569586 = validateParameter(valid_569586, JString, required = true,
                                 default = nil)
  if valid_569586 != nil:
    section.add "gatewayName", valid_569586
  var valid_569587 = path.getOrDefault("subscriptionId")
  valid_569587 = validateParameter(valid_569587, JString, required = true,
                                 default = nil)
  if valid_569587 != nil:
    section.add "subscriptionId", valid_569587
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569588 = query.getOrDefault("api-version")
  valid_569588 = validateParameter(valid_569588, JString, required = true,
                                 default = nil)
  if valid_569588 != nil:
    section.add "api-version", valid_569588
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569589: Call_ServerFarmsGetServerFarmVnetGateway_569580;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569589.validator(path, query, header, formData, body)
  let scheme = call_569589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569589.url(scheme.get, call_569589.host, call_569589.base,
                         call_569589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569589, url, valid)

proc call*(call_569590: Call_ServerFarmsGetServerFarmVnetGateway_569580;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetServerFarmVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the App Service Plan
  ##   vnetName: string (required)
  ##           : Name of the virtual network
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569591 = newJObject()
  var query_569592 = newJObject()
  add(path_569591, "resourceGroupName", newJString(resourceGroupName))
  add(query_569592, "api-version", newJString(apiVersion))
  add(path_569591, "name", newJString(name))
  add(path_569591, "vnetName", newJString(vnetName))
  add(path_569591, "gatewayName", newJString(gatewayName))
  add(path_569591, "subscriptionId", newJString(subscriptionId))
  result = call_569590.call(path_569591, query_569592, nil, nil, nil)

var serverFarmsGetServerFarmVnetGateway* = Call_ServerFarmsGetServerFarmVnetGateway_569580(
    name: "serverFarmsGetServerFarmVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsGetServerFarmVnetGateway_569581, base: "",
    url: url_ServerFarmsGetServerFarmVnetGateway_569582, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRoutesForVnet_569608 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetRoutesForVnet_569610(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRoutesForVnet_569609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569611 = path.getOrDefault("resourceGroupName")
  valid_569611 = validateParameter(valid_569611, JString, required = true,
                                 default = nil)
  if valid_569611 != nil:
    section.add "resourceGroupName", valid_569611
  var valid_569612 = path.getOrDefault("name")
  valid_569612 = validateParameter(valid_569612, JString, required = true,
                                 default = nil)
  if valid_569612 != nil:
    section.add "name", valid_569612
  var valid_569613 = path.getOrDefault("vnetName")
  valid_569613 = validateParameter(valid_569613, JString, required = true,
                                 default = nil)
  if valid_569613 != nil:
    section.add "vnetName", valid_569613
  var valid_569614 = path.getOrDefault("subscriptionId")
  valid_569614 = validateParameter(valid_569614, JString, required = true,
                                 default = nil)
  if valid_569614 != nil:
    section.add "subscriptionId", valid_569614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569615 = query.getOrDefault("api-version")
  valid_569615 = validateParameter(valid_569615, JString, required = true,
                                 default = nil)
  if valid_569615 != nil:
    section.add "api-version", valid_569615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569616: Call_ServerFarmsGetRoutesForVnet_569608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569616.validator(path, query, header, formData, body)
  let scheme = call_569616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569616.url(scheme.get, call_569616.host, call_569616.base,
                         call_569616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569616, url, valid)

proc call*(call_569617: Call_ServerFarmsGetRoutesForVnet_569608;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## serverFarmsGetRoutesForVnet
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569618 = newJObject()
  var query_569619 = newJObject()
  add(path_569618, "resourceGroupName", newJString(resourceGroupName))
  add(query_569619, "api-version", newJString(apiVersion))
  add(path_569618, "name", newJString(name))
  add(path_569618, "vnetName", newJString(vnetName))
  add(path_569618, "subscriptionId", newJString(subscriptionId))
  result = call_569617.call(path_569618, query_569619, nil, nil, nil)

var serverFarmsGetRoutesForVnet* = Call_ServerFarmsGetRoutesForVnet_569608(
    name: "serverFarmsGetRoutesForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
    validator: validate_ServerFarmsGetRoutesForVnet_569609, base: "",
    url: url_ServerFarmsGetRoutesForVnet_569610, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateVnetRoute_569633 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsCreateOrUpdateVnetRoute_569635(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateVnetRoute_569634(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569636 = path.getOrDefault("resourceGroupName")
  valid_569636 = validateParameter(valid_569636, JString, required = true,
                                 default = nil)
  if valid_569636 != nil:
    section.add "resourceGroupName", valid_569636
  var valid_569637 = path.getOrDefault("name")
  valid_569637 = validateParameter(valid_569637, JString, required = true,
                                 default = nil)
  if valid_569637 != nil:
    section.add "name", valid_569637
  var valid_569638 = path.getOrDefault("vnetName")
  valid_569638 = validateParameter(valid_569638, JString, required = true,
                                 default = nil)
  if valid_569638 != nil:
    section.add "vnetName", valid_569638
  var valid_569639 = path.getOrDefault("subscriptionId")
  valid_569639 = validateParameter(valid_569639, JString, required = true,
                                 default = nil)
  if valid_569639 != nil:
    section.add "subscriptionId", valid_569639
  var valid_569640 = path.getOrDefault("routeName")
  valid_569640 = validateParameter(valid_569640, JString, required = true,
                                 default = nil)
  if valid_569640 != nil:
    section.add "routeName", valid_569640
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569641 = query.getOrDefault("api-version")
  valid_569641 = validateParameter(valid_569641, JString, required = true,
                                 default = nil)
  if valid_569641 != nil:
    section.add "api-version", valid_569641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569643: Call_ServerFarmsCreateOrUpdateVnetRoute_569633;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569643.validator(path, query, header, formData, body)
  let scheme = call_569643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569643.url(scheme.get, call_569643.host, call_569643.base,
                         call_569643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569643, url, valid)

proc call*(call_569644: Call_ServerFarmsCreateOrUpdateVnetRoute_569633;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string; route: JsonNode): Recallable =
  ## serverFarmsCreateOrUpdateVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   route: JObject (required)
  ##        : The route object
  var path_569645 = newJObject()
  var query_569646 = newJObject()
  var body_569647 = newJObject()
  add(path_569645, "resourceGroupName", newJString(resourceGroupName))
  add(query_569646, "api-version", newJString(apiVersion))
  add(path_569645, "name", newJString(name))
  add(path_569645, "vnetName", newJString(vnetName))
  add(path_569645, "subscriptionId", newJString(subscriptionId))
  add(path_569645, "routeName", newJString(routeName))
  if route != nil:
    body_569647 = route
  result = call_569644.call(path_569645, query_569646, nil, nil, body_569647)

var serverFarmsCreateOrUpdateVnetRoute* = Call_ServerFarmsCreateOrUpdateVnetRoute_569633(
    name: "serverFarmsCreateOrUpdateVnetRoute", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsCreateOrUpdateVnetRoute_569634, base: "",
    url: url_ServerFarmsCreateOrUpdateVnetRoute_569635, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRouteForVnet_569620 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsGetRouteForVnet_569622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRouteForVnet_569621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569623 = path.getOrDefault("resourceGroupName")
  valid_569623 = validateParameter(valid_569623, JString, required = true,
                                 default = nil)
  if valid_569623 != nil:
    section.add "resourceGroupName", valid_569623
  var valid_569624 = path.getOrDefault("name")
  valid_569624 = validateParameter(valid_569624, JString, required = true,
                                 default = nil)
  if valid_569624 != nil:
    section.add "name", valid_569624
  var valid_569625 = path.getOrDefault("vnetName")
  valid_569625 = validateParameter(valid_569625, JString, required = true,
                                 default = nil)
  if valid_569625 != nil:
    section.add "vnetName", valid_569625
  var valid_569626 = path.getOrDefault("subscriptionId")
  valid_569626 = validateParameter(valid_569626, JString, required = true,
                                 default = nil)
  if valid_569626 != nil:
    section.add "subscriptionId", valid_569626
  var valid_569627 = path.getOrDefault("routeName")
  valid_569627 = validateParameter(valid_569627, JString, required = true,
                                 default = nil)
  if valid_569627 != nil:
    section.add "routeName", valid_569627
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569628 = query.getOrDefault("api-version")
  valid_569628 = validateParameter(valid_569628, JString, required = true,
                                 default = nil)
  if valid_569628 != nil:
    section.add "api-version", valid_569628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569629: Call_ServerFarmsGetRouteForVnet_569620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569629.validator(path, query, header, formData, body)
  let scheme = call_569629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569629.url(scheme.get, call_569629.host, call_569629.base,
                         call_569629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569629, url, valid)

proc call*(call_569630: Call_ServerFarmsGetRouteForVnet_569620;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string): Recallable =
  ## serverFarmsGetRouteForVnet
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  var path_569631 = newJObject()
  var query_569632 = newJObject()
  add(path_569631, "resourceGroupName", newJString(resourceGroupName))
  add(query_569632, "api-version", newJString(apiVersion))
  add(path_569631, "name", newJString(name))
  add(path_569631, "vnetName", newJString(vnetName))
  add(path_569631, "subscriptionId", newJString(subscriptionId))
  add(path_569631, "routeName", newJString(routeName))
  result = call_569630.call(path_569631, query_569632, nil, nil, nil)

var serverFarmsGetRouteForVnet* = Call_ServerFarmsGetRouteForVnet_569620(
    name: "serverFarmsGetRouteForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsGetRouteForVnet_569621, base: "",
    url: url_ServerFarmsGetRouteForVnet_569622, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateVnetRoute_569661 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsUpdateVnetRoute_569663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateVnetRoute_569662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569664 = path.getOrDefault("resourceGroupName")
  valid_569664 = validateParameter(valid_569664, JString, required = true,
                                 default = nil)
  if valid_569664 != nil:
    section.add "resourceGroupName", valid_569664
  var valid_569665 = path.getOrDefault("name")
  valid_569665 = validateParameter(valid_569665, JString, required = true,
                                 default = nil)
  if valid_569665 != nil:
    section.add "name", valid_569665
  var valid_569666 = path.getOrDefault("vnetName")
  valid_569666 = validateParameter(valid_569666, JString, required = true,
                                 default = nil)
  if valid_569666 != nil:
    section.add "vnetName", valid_569666
  var valid_569667 = path.getOrDefault("subscriptionId")
  valid_569667 = validateParameter(valid_569667, JString, required = true,
                                 default = nil)
  if valid_569667 != nil:
    section.add "subscriptionId", valid_569667
  var valid_569668 = path.getOrDefault("routeName")
  valid_569668 = validateParameter(valid_569668, JString, required = true,
                                 default = nil)
  if valid_569668 != nil:
    section.add "routeName", valid_569668
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569669 = query.getOrDefault("api-version")
  valid_569669 = validateParameter(valid_569669, JString, required = true,
                                 default = nil)
  if valid_569669 != nil:
    section.add "api-version", valid_569669
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569671: Call_ServerFarmsUpdateVnetRoute_569661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569671.validator(path, query, header, formData, body)
  let scheme = call_569671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569671.url(scheme.get, call_569671.host, call_569671.base,
                         call_569671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569671, url, valid)

proc call*(call_569672: Call_ServerFarmsUpdateVnetRoute_569661;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string; route: JsonNode): Recallable =
  ## serverFarmsUpdateVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   route: JObject (required)
  ##        : The route object
  var path_569673 = newJObject()
  var query_569674 = newJObject()
  var body_569675 = newJObject()
  add(path_569673, "resourceGroupName", newJString(resourceGroupName))
  add(query_569674, "api-version", newJString(apiVersion))
  add(path_569673, "name", newJString(name))
  add(path_569673, "vnetName", newJString(vnetName))
  add(path_569673, "subscriptionId", newJString(subscriptionId))
  add(path_569673, "routeName", newJString(routeName))
  if route != nil:
    body_569675 = route
  result = call_569672.call(path_569673, query_569674, nil, nil, body_569675)

var serverFarmsUpdateVnetRoute* = Call_ServerFarmsUpdateVnetRoute_569661(
    name: "serverFarmsUpdateVnetRoute", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsUpdateVnetRoute_569662, base: "",
    url: url_ServerFarmsUpdateVnetRoute_569663, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteVnetRoute_569648 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsDeleteVnetRoute_569650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteVnetRoute_569649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569651 = path.getOrDefault("resourceGroupName")
  valid_569651 = validateParameter(valid_569651, JString, required = true,
                                 default = nil)
  if valid_569651 != nil:
    section.add "resourceGroupName", valid_569651
  var valid_569652 = path.getOrDefault("name")
  valid_569652 = validateParameter(valid_569652, JString, required = true,
                                 default = nil)
  if valid_569652 != nil:
    section.add "name", valid_569652
  var valid_569653 = path.getOrDefault("vnetName")
  valid_569653 = validateParameter(valid_569653, JString, required = true,
                                 default = nil)
  if valid_569653 != nil:
    section.add "vnetName", valid_569653
  var valid_569654 = path.getOrDefault("subscriptionId")
  valid_569654 = validateParameter(valid_569654, JString, required = true,
                                 default = nil)
  if valid_569654 != nil:
    section.add "subscriptionId", valid_569654
  var valid_569655 = path.getOrDefault("routeName")
  valid_569655 = validateParameter(valid_569655, JString, required = true,
                                 default = nil)
  if valid_569655 != nil:
    section.add "routeName", valid_569655
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569656 = query.getOrDefault("api-version")
  valid_569656 = validateParameter(valid_569656, JString, required = true,
                                 default = nil)
  if valid_569656 != nil:
    section.add "api-version", valid_569656
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569657: Call_ServerFarmsDeleteVnetRoute_569648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569657.validator(path, query, header, formData, body)
  let scheme = call_569657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569657.url(scheme.get, call_569657.host, call_569657.base,
                         call_569657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569657, url, valid)

proc call*(call_569658: Call_ServerFarmsDeleteVnetRoute_569648;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; routeName: string): Recallable =
  ## serverFarmsDeleteVnetRoute
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  var path_569659 = newJObject()
  var query_569660 = newJObject()
  add(path_569659, "resourceGroupName", newJString(resourceGroupName))
  add(query_569660, "api-version", newJString(apiVersion))
  add(path_569659, "name", newJString(name))
  add(path_569659, "vnetName", newJString(vnetName))
  add(path_569659, "subscriptionId", newJString(subscriptionId))
  add(path_569659, "routeName", newJString(routeName))
  result = call_569658.call(path_569659, query_569660, nil, nil, nil)

var serverFarmsDeleteVnetRoute* = Call_ServerFarmsDeleteVnetRoute_569648(
    name: "serverFarmsDeleteVnetRoute", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsDeleteVnetRoute_569649, base: "",
    url: url_ServerFarmsDeleteVnetRoute_569650, schemes: {Scheme.Https})
type
  Call_ServerFarmsRebootWorkerForServerFarm_569676 = ref object of OpenApiRestCall_567650
proc url_ServerFarmsRebootWorkerForServerFarm_569678(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerName" in path, "`workerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workers/"),
               (kind: VariableSegment, value: "workerName"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRebootWorkerForServerFarm_569677(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   workerName: JString (required)
  ##             : Name of worker machine, typically starts with RD
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569679 = path.getOrDefault("resourceGroupName")
  valid_569679 = validateParameter(valid_569679, JString, required = true,
                                 default = nil)
  if valid_569679 != nil:
    section.add "resourceGroupName", valid_569679
  var valid_569680 = path.getOrDefault("name")
  valid_569680 = validateParameter(valid_569680, JString, required = true,
                                 default = nil)
  if valid_569680 != nil:
    section.add "name", valid_569680
  var valid_569681 = path.getOrDefault("subscriptionId")
  valid_569681 = validateParameter(valid_569681, JString, required = true,
                                 default = nil)
  if valid_569681 != nil:
    section.add "subscriptionId", valid_569681
  var valid_569682 = path.getOrDefault("workerName")
  valid_569682 = validateParameter(valid_569682, JString, required = true,
                                 default = nil)
  if valid_569682 != nil:
    section.add "workerName", valid_569682
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569683 = query.getOrDefault("api-version")
  valid_569683 = validateParameter(valid_569683, JString, required = true,
                                 default = nil)
  if valid_569683 != nil:
    section.add "api-version", valid_569683
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569684: Call_ServerFarmsRebootWorkerForServerFarm_569676;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569684.validator(path, query, header, formData, body)
  let scheme = call_569684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569684.url(scheme.get, call_569684.host, call_569684.base,
                         call_569684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569684, url, valid)

proc call*(call_569685: Call_ServerFarmsRebootWorkerForServerFarm_569676;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; workerName: string): Recallable =
  ## serverFarmsRebootWorkerForServerFarm
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   workerName: string (required)
  ##             : Name of worker machine, typically starts with RD
  var path_569686 = newJObject()
  var query_569687 = newJObject()
  add(path_569686, "resourceGroupName", newJString(resourceGroupName))
  add(query_569687, "api-version", newJString(apiVersion))
  add(path_569686, "name", newJString(name))
  add(path_569686, "subscriptionId", newJString(subscriptionId))
  add(path_569686, "workerName", newJString(workerName))
  result = call_569685.call(path_569686, query_569687, nil, nil, nil)

var serverFarmsRebootWorkerForServerFarm* = Call_ServerFarmsRebootWorkerForServerFarm_569676(
    name: "serverFarmsRebootWorkerForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
    validator: validate_ServerFarmsRebootWorkerForServerFarm_569677, base: "",
    url: url_ServerFarmsRebootWorkerForServerFarm_569678, schemes: {Scheme.Https})
type
  Call_SitesGetSites_569688 = ref object of OpenApiRestCall_567650
proc url_SitesGetSites_569690(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSites_569689(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569691 = path.getOrDefault("resourceGroupName")
  valid_569691 = validateParameter(valid_569691, JString, required = true,
                                 default = nil)
  if valid_569691 != nil:
    section.add "resourceGroupName", valid_569691
  var valid_569692 = path.getOrDefault("subscriptionId")
  valid_569692 = validateParameter(valid_569692, JString, required = true,
                                 default = nil)
  if valid_569692 != nil:
    section.add "subscriptionId", valid_569692
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  ##   includeSlots: JBool
  ##               : Whether or not to include deployments slots in results
  section = newJObject()
  var valid_569693 = query.getOrDefault("propertiesToInclude")
  valid_569693 = validateParameter(valid_569693, JString, required = false,
                                 default = nil)
  if valid_569693 != nil:
    section.add "propertiesToInclude", valid_569693
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569694 = query.getOrDefault("api-version")
  valid_569694 = validateParameter(valid_569694, JString, required = true,
                                 default = nil)
  if valid_569694 != nil:
    section.add "api-version", valid_569694
  var valid_569695 = query.getOrDefault("includeSiteTypes")
  valid_569695 = validateParameter(valid_569695, JString, required = false,
                                 default = nil)
  if valid_569695 != nil:
    section.add "includeSiteTypes", valid_569695
  var valid_569696 = query.getOrDefault("includeSlots")
  valid_569696 = validateParameter(valid_569696, JBool, required = false, default = nil)
  if valid_569696 != nil:
    section.add "includeSlots", valid_569696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569697: Call_SitesGetSites_569688; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569697.validator(path, query, header, formData, body)
  let scheme = call_569697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569697.url(scheme.get, call_569697.host, call_569697.base,
                         call_569697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569697, url, valid)

proc call*(call_569698: Call_SitesGetSites_569688; resourceGroupName: string;
          apiVersion: string; subscriptionId: string;
          propertiesToInclude: string = ""; includeSiteTypes: string = "";
          includeSlots: bool = false): Recallable =
  ## sitesGetSites
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  ##   includeSlots: bool
  ##               : Whether or not to include deployments slots in results
  var path_569699 = newJObject()
  var query_569700 = newJObject()
  add(path_569699, "resourceGroupName", newJString(resourceGroupName))
  add(query_569700, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_569700, "api-version", newJString(apiVersion))
  add(path_569699, "subscriptionId", newJString(subscriptionId))
  add(query_569700, "includeSiteTypes", newJString(includeSiteTypes))
  add(query_569700, "includeSlots", newJBool(includeSlots))
  result = call_569698.call(path_569699, query_569700, nil, nil, nil)

var sitesGetSites* = Call_SitesGetSites_569688(name: "sitesGetSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_SitesGetSites_569689, base: "", url: url_SitesGetSites_569690,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSite_569713 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSite_569715(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSite_569714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569716 = path.getOrDefault("resourceGroupName")
  valid_569716 = validateParameter(valid_569716, JString, required = true,
                                 default = nil)
  if valid_569716 != nil:
    section.add "resourceGroupName", valid_569716
  var valid_569717 = path.getOrDefault("name")
  valid_569717 = validateParameter(valid_569717, JString, required = true,
                                 default = nil)
  if valid_569717 != nil:
    section.add "name", valid_569717
  var valid_569718 = path.getOrDefault("subscriptionId")
  valid_569718 = validateParameter(valid_569718, JString, required = true,
                                 default = nil)
  if valid_569718 != nil:
    section.add "subscriptionId", valid_569718
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  section = newJObject()
  var valid_569719 = query.getOrDefault("skipDnsRegistration")
  valid_569719 = validateParameter(valid_569719, JString, required = false,
                                 default = nil)
  if valid_569719 != nil:
    section.add "skipDnsRegistration", valid_569719
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569720 = query.getOrDefault("api-version")
  valid_569720 = validateParameter(valid_569720, JString, required = true,
                                 default = nil)
  if valid_569720 != nil:
    section.add "api-version", valid_569720
  var valid_569721 = query.getOrDefault("skipCustomDomainVerification")
  valid_569721 = validateParameter(valid_569721, JString, required = false,
                                 default = nil)
  if valid_569721 != nil:
    section.add "skipCustomDomainVerification", valid_569721
  var valid_569722 = query.getOrDefault("forceDnsRegistration")
  valid_569722 = validateParameter(valid_569722, JString, required = false,
                                 default = nil)
  if valid_569722 != nil:
    section.add "forceDnsRegistration", valid_569722
  var valid_569723 = query.getOrDefault("ttlInSeconds")
  valid_569723 = validateParameter(valid_569723, JString, required = false,
                                 default = nil)
  if valid_569723 != nil:
    section.add "ttlInSeconds", valid_569723
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569725: Call_SitesCreateOrUpdateSite_569713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569725.validator(path, query, header, formData, body)
  let scheme = call_569725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569725.url(scheme.get, call_569725.host, call_569725.base,
                         call_569725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569725, url, valid)

proc call*(call_569726: Call_SitesCreateOrUpdateSite_569713;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; skipDnsRegistration: string = "";
          skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; ttlInSeconds: string = ""): Recallable =
  ## sitesCreateOrUpdateSite
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  var path_569727 = newJObject()
  var query_569728 = newJObject()
  var body_569729 = newJObject()
  if siteEnvelope != nil:
    body_569729 = siteEnvelope
  add(path_569727, "resourceGroupName", newJString(resourceGroupName))
  add(query_569728, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_569728, "api-version", newJString(apiVersion))
  add(path_569727, "name", newJString(name))
  add(query_569728, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(path_569727, "subscriptionId", newJString(subscriptionId))
  add(query_569728, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(query_569728, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_569726.call(path_569727, query_569728, nil, nil, body_569729)

var sitesCreateOrUpdateSite* = Call_SitesCreateOrUpdateSite_569713(
    name: "sitesCreateOrUpdateSite", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesCreateOrUpdateSite_569714, base: "",
    url: url_SitesCreateOrUpdateSite_569715, schemes: {Scheme.Https})
type
  Call_SitesGetSite_569701 = ref object of OpenApiRestCall_567650
proc url_SitesGetSite_569703(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSite_569702(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569704 = path.getOrDefault("resourceGroupName")
  valid_569704 = validateParameter(valid_569704, JString, required = true,
                                 default = nil)
  if valid_569704 != nil:
    section.add "resourceGroupName", valid_569704
  var valid_569705 = path.getOrDefault("name")
  valid_569705 = validateParameter(valid_569705, JString, required = true,
                                 default = nil)
  if valid_569705 != nil:
    section.add "name", valid_569705
  var valid_569706 = path.getOrDefault("subscriptionId")
  valid_569706 = validateParameter(valid_569706, JString, required = true,
                                 default = nil)
  if valid_569706 != nil:
    section.add "subscriptionId", valid_569706
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_569707 = query.getOrDefault("propertiesToInclude")
  valid_569707 = validateParameter(valid_569707, JString, required = false,
                                 default = nil)
  if valid_569707 != nil:
    section.add "propertiesToInclude", valid_569707
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569708 = query.getOrDefault("api-version")
  valid_569708 = validateParameter(valid_569708, JString, required = true,
                                 default = nil)
  if valid_569708 != nil:
    section.add "api-version", valid_569708
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569709: Call_SitesGetSite_569701; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569709.validator(path, query, header, formData, body)
  let scheme = call_569709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569709.url(scheme.get, call_569709.host, call_569709.base,
                         call_569709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569709, url, valid)

proc call*(call_569710: Call_SitesGetSite_569701; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569711 = newJObject()
  var query_569712 = newJObject()
  add(path_569711, "resourceGroupName", newJString(resourceGroupName))
  add(query_569712, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_569712, "api-version", newJString(apiVersion))
  add(path_569711, "name", newJString(name))
  add(path_569711, "subscriptionId", newJString(subscriptionId))
  result = call_569710.call(path_569711, query_569712, nil, nil, nil)

var sitesGetSite* = Call_SitesGetSite_569701(name: "sitesGetSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesGetSite_569702, base: "", url: url_SitesGetSite_569703,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSite_569730 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSite_569732(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSite_569731(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569733 = path.getOrDefault("resourceGroupName")
  valid_569733 = validateParameter(valid_569733, JString, required = true,
                                 default = nil)
  if valid_569733 != nil:
    section.add "resourceGroupName", valid_569733
  var valid_569734 = path.getOrDefault("name")
  valid_569734 = validateParameter(valid_569734, JString, required = true,
                                 default = nil)
  if valid_569734 != nil:
    section.add "name", valid_569734
  var valid_569735 = path.getOrDefault("subscriptionId")
  valid_569735 = validateParameter(valid_569735, JString, required = true,
                                 default = nil)
  if valid_569735 != nil:
    section.add "subscriptionId", valid_569735
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  var valid_569736 = query.getOrDefault("skipDnsRegistration")
  valid_569736 = validateParameter(valid_569736, JString, required = false,
                                 default = nil)
  if valid_569736 != nil:
    section.add "skipDnsRegistration", valid_569736
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569737 = query.getOrDefault("api-version")
  valid_569737 = validateParameter(valid_569737, JString, required = true,
                                 default = nil)
  if valid_569737 != nil:
    section.add "api-version", valid_569737
  var valid_569738 = query.getOrDefault("deleteMetrics")
  valid_569738 = validateParameter(valid_569738, JString, required = false,
                                 default = nil)
  if valid_569738 != nil:
    section.add "deleteMetrics", valid_569738
  var valid_569739 = query.getOrDefault("deleteEmptyServerFarm")
  valid_569739 = validateParameter(valid_569739, JString, required = false,
                                 default = nil)
  if valid_569739 != nil:
    section.add "deleteEmptyServerFarm", valid_569739
  var valid_569740 = query.getOrDefault("deleteAllSlots")
  valid_569740 = validateParameter(valid_569740, JString, required = false,
                                 default = nil)
  if valid_569740 != nil:
    section.add "deleteAllSlots", valid_569740
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569741: Call_SitesDeleteSite_569730; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569741.validator(path, query, header, formData, body)
  let scheme = call_569741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569741.url(scheme.get, call_569741.host, call_569741.base,
                         call_569741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569741, url, valid)

proc call*(call_569742: Call_SitesDeleteSite_569730; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          skipDnsRegistration: string = ""; deleteMetrics: string = "";
          deleteEmptyServerFarm: string = ""; deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_569743 = newJObject()
  var query_569744 = newJObject()
  add(path_569743, "resourceGroupName", newJString(resourceGroupName))
  add(query_569744, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_569744, "api-version", newJString(apiVersion))
  add(path_569743, "name", newJString(name))
  add(path_569743, "subscriptionId", newJString(subscriptionId))
  add(query_569744, "deleteMetrics", newJString(deleteMetrics))
  add(query_569744, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(query_569744, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_569742.call(path_569743, query_569744, nil, nil, nil)

var sitesDeleteSite* = Call_SitesDeleteSite_569730(name: "sitesDeleteSite",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesDeleteSite_569731, base: "", url: url_SitesDeleteSite_569732,
    schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigToProduction_569745 = ref object of OpenApiRestCall_567650
proc url_SitesApplySlotConfigToProduction_569747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigToProduction_569746(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569748 = path.getOrDefault("resourceGroupName")
  valid_569748 = validateParameter(valid_569748, JString, required = true,
                                 default = nil)
  if valid_569748 != nil:
    section.add "resourceGroupName", valid_569748
  var valid_569749 = path.getOrDefault("name")
  valid_569749 = validateParameter(valid_569749, JString, required = true,
                                 default = nil)
  if valid_569749 != nil:
    section.add "name", valid_569749
  var valid_569750 = path.getOrDefault("subscriptionId")
  valid_569750 = validateParameter(valid_569750, JString, required = true,
                                 default = nil)
  if valid_569750 != nil:
    section.add "subscriptionId", valid_569750
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569751 = query.getOrDefault("api-version")
  valid_569751 = validateParameter(valid_569751, JString, required = true,
                                 default = nil)
  if valid_569751 != nil:
    section.add "api-version", valid_569751
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569753: Call_SitesApplySlotConfigToProduction_569745;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569753.validator(path, query, header, formData, body)
  let scheme = call_569753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569753.url(scheme.get, call_569753.host, call_569753.base,
                         call_569753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569753, url, valid)

proc call*(call_569754: Call_SitesApplySlotConfigToProduction_569745;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesApplySlotConfigToProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  var path_569755 = newJObject()
  var query_569756 = newJObject()
  var body_569757 = newJObject()
  add(path_569755, "resourceGroupName", newJString(resourceGroupName))
  add(query_569756, "api-version", newJString(apiVersion))
  add(path_569755, "name", newJString(name))
  add(path_569755, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_569757 = slotSwapEntity
  result = call_569754.call(path_569755, query_569756, nil, nil, body_569757)

var sitesApplySlotConfigToProduction* = Call_SitesApplySlotConfigToProduction_569745(
    name: "sitesApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_SitesApplySlotConfigToProduction_569746, base: "",
    url: url_SitesApplySlotConfigToProduction_569747, schemes: {Scheme.Https})
type
  Call_SitesBackupSite_569758 = ref object of OpenApiRestCall_567650
proc url_SitesBackupSite_569760(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSite_569759(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569761 = path.getOrDefault("resourceGroupName")
  valid_569761 = validateParameter(valid_569761, JString, required = true,
                                 default = nil)
  if valid_569761 != nil:
    section.add "resourceGroupName", valid_569761
  var valid_569762 = path.getOrDefault("name")
  valid_569762 = validateParameter(valid_569762, JString, required = true,
                                 default = nil)
  if valid_569762 != nil:
    section.add "name", valid_569762
  var valid_569763 = path.getOrDefault("subscriptionId")
  valid_569763 = validateParameter(valid_569763, JString, required = true,
                                 default = nil)
  if valid_569763 != nil:
    section.add "subscriptionId", valid_569763
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569764 = query.getOrDefault("api-version")
  valid_569764 = validateParameter(valid_569764, JString, required = true,
                                 default = nil)
  if valid_569764 != nil:
    section.add "api-version", valid_569764
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569766: Call_SitesBackupSite_569758; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569766.validator(path, query, header, formData, body)
  let scheme = call_569766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569766.url(scheme.get, call_569766.host, call_569766.base,
                         call_569766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569766, url, valid)

proc call*(call_569767: Call_SitesBackupSite_569758; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## sitesBackupSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_569768 = newJObject()
  var query_569769 = newJObject()
  var body_569770 = newJObject()
  add(path_569768, "resourceGroupName", newJString(resourceGroupName))
  add(query_569769, "api-version", newJString(apiVersion))
  add(path_569768, "name", newJString(name))
  add(path_569768, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569770 = request
  result = call_569767.call(path_569768, query_569769, nil, nil, body_569770)

var sitesBackupSite* = Call_SitesBackupSite_569758(name: "sitesBackupSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_SitesBackupSite_569759, base: "", url: url_SitesBackupSite_569760,
    schemes: {Scheme.Https})
type
  Call_SitesListSiteBackups_569771 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteBackups_569773(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackups_569772(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569774 = path.getOrDefault("resourceGroupName")
  valid_569774 = validateParameter(valid_569774, JString, required = true,
                                 default = nil)
  if valid_569774 != nil:
    section.add "resourceGroupName", valid_569774
  var valid_569775 = path.getOrDefault("name")
  valid_569775 = validateParameter(valid_569775, JString, required = true,
                                 default = nil)
  if valid_569775 != nil:
    section.add "name", valid_569775
  var valid_569776 = path.getOrDefault("subscriptionId")
  valid_569776 = validateParameter(valid_569776, JString, required = true,
                                 default = nil)
  if valid_569776 != nil:
    section.add "subscriptionId", valid_569776
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569777 = query.getOrDefault("api-version")
  valid_569777 = validateParameter(valid_569777, JString, required = true,
                                 default = nil)
  if valid_569777 != nil:
    section.add "api-version", valid_569777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569778: Call_SitesListSiteBackups_569771; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569778.validator(path, query, header, formData, body)
  let scheme = call_569778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569778.url(scheme.get, call_569778.host, call_569778.base,
                         call_569778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569778, url, valid)

proc call*(call_569779: Call_SitesListSiteBackups_569771;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteBackups
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569780 = newJObject()
  var query_569781 = newJObject()
  add(path_569780, "resourceGroupName", newJString(resourceGroupName))
  add(query_569781, "api-version", newJString(apiVersion))
  add(path_569780, "name", newJString(name))
  add(path_569780, "subscriptionId", newJString(subscriptionId))
  result = call_569779.call(path_569780, query_569781, nil, nil, nil)

var sitesListSiteBackups* = Call_SitesListSiteBackups_569771(
    name: "sitesListSiteBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_SitesListSiteBackups_569772, base: "",
    url: url_SitesListSiteBackups_569773, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestore_569782 = ref object of OpenApiRestCall_567650
proc url_SitesDiscoverSiteRestore_569784(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestore_569783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569785 = path.getOrDefault("resourceGroupName")
  valid_569785 = validateParameter(valid_569785, JString, required = true,
                                 default = nil)
  if valid_569785 != nil:
    section.add "resourceGroupName", valid_569785
  var valid_569786 = path.getOrDefault("name")
  valid_569786 = validateParameter(valid_569786, JString, required = true,
                                 default = nil)
  if valid_569786 != nil:
    section.add "name", valid_569786
  var valid_569787 = path.getOrDefault("subscriptionId")
  valid_569787 = validateParameter(valid_569787, JString, required = true,
                                 default = nil)
  if valid_569787 != nil:
    section.add "subscriptionId", valid_569787
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569788 = query.getOrDefault("api-version")
  valid_569788 = validateParameter(valid_569788, JString, required = true,
                                 default = nil)
  if valid_569788 != nil:
    section.add "api-version", valid_569788
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569790: Call_SitesDiscoverSiteRestore_569782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569790.validator(path, query, header, formData, body)
  let scheme = call_569790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569790.url(scheme.get, call_569790.host, call_569790.base,
                         call_569790.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569790, url, valid)

proc call*(call_569791: Call_SitesDiscoverSiteRestore_569782;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestore
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_569792 = newJObject()
  var query_569793 = newJObject()
  var body_569794 = newJObject()
  add(path_569792, "resourceGroupName", newJString(resourceGroupName))
  add(query_569793, "api-version", newJString(apiVersion))
  add(path_569792, "name", newJString(name))
  add(path_569792, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569794 = request
  result = call_569791.call(path_569792, query_569793, nil, nil, body_569794)

var sitesDiscoverSiteRestore* = Call_SitesDiscoverSiteRestore_569782(
    name: "sitesDiscoverSiteRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_SitesDiscoverSiteRestore_569783, base: "",
    url: url_SitesDiscoverSiteRestore_569784, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatus_569795 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupStatus_569797(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatus_569796(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569798 = path.getOrDefault("resourceGroupName")
  valid_569798 = validateParameter(valid_569798, JString, required = true,
                                 default = nil)
  if valid_569798 != nil:
    section.add "resourceGroupName", valid_569798
  var valid_569799 = path.getOrDefault("name")
  valid_569799 = validateParameter(valid_569799, JString, required = true,
                                 default = nil)
  if valid_569799 != nil:
    section.add "name", valid_569799
  var valid_569800 = path.getOrDefault("subscriptionId")
  valid_569800 = validateParameter(valid_569800, JString, required = true,
                                 default = nil)
  if valid_569800 != nil:
    section.add "subscriptionId", valid_569800
  var valid_569801 = path.getOrDefault("backupId")
  valid_569801 = validateParameter(valid_569801, JString, required = true,
                                 default = nil)
  if valid_569801 != nil:
    section.add "backupId", valid_569801
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569802 = query.getOrDefault("api-version")
  valid_569802 = validateParameter(valid_569802, JString, required = true,
                                 default = nil)
  if valid_569802 != nil:
    section.add "api-version", valid_569802
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569803: Call_SitesGetSiteBackupStatus_569795; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569803.validator(path, query, header, formData, body)
  let scheme = call_569803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569803.url(scheme.get, call_569803.host, call_569803.base,
                         call_569803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569803, url, valid)

proc call*(call_569804: Call_SitesGetSiteBackupStatus_569795;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesGetSiteBackupStatus
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_569805 = newJObject()
  var query_569806 = newJObject()
  add(path_569805, "resourceGroupName", newJString(resourceGroupName))
  add(query_569806, "api-version", newJString(apiVersion))
  add(path_569805, "name", newJString(name))
  add(path_569805, "subscriptionId", newJString(subscriptionId))
  add(path_569805, "backupId", newJString(backupId))
  result = call_569804.call(path_569805, query_569806, nil, nil, nil)

var sitesGetSiteBackupStatus* = Call_SitesGetSiteBackupStatus_569795(
    name: "sitesGetSiteBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatus_569796, base: "",
    url: url_SitesGetSiteBackupStatus_569797, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackup_569807 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteBackup_569809(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackup_569808(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569810 = path.getOrDefault("resourceGroupName")
  valid_569810 = validateParameter(valid_569810, JString, required = true,
                                 default = nil)
  if valid_569810 != nil:
    section.add "resourceGroupName", valid_569810
  var valid_569811 = path.getOrDefault("name")
  valid_569811 = validateParameter(valid_569811, JString, required = true,
                                 default = nil)
  if valid_569811 != nil:
    section.add "name", valid_569811
  var valid_569812 = path.getOrDefault("subscriptionId")
  valid_569812 = validateParameter(valid_569812, JString, required = true,
                                 default = nil)
  if valid_569812 != nil:
    section.add "subscriptionId", valid_569812
  var valid_569813 = path.getOrDefault("backupId")
  valid_569813 = validateParameter(valid_569813, JString, required = true,
                                 default = nil)
  if valid_569813 != nil:
    section.add "backupId", valid_569813
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569814 = query.getOrDefault("api-version")
  valid_569814 = validateParameter(valid_569814, JString, required = true,
                                 default = nil)
  if valid_569814 != nil:
    section.add "api-version", valid_569814
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569815: Call_SitesDeleteBackup_569807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569815.validator(path, query, header, formData, body)
  let scheme = call_569815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569815.url(scheme.get, call_569815.host, call_569815.base,
                         call_569815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569815, url, valid)

proc call*(call_569816: Call_SitesDeleteBackup_569807; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## sitesDeleteBackup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_569817 = newJObject()
  var query_569818 = newJObject()
  add(path_569817, "resourceGroupName", newJString(resourceGroupName))
  add(query_569818, "api-version", newJString(apiVersion))
  add(path_569817, "name", newJString(name))
  add(path_569817, "subscriptionId", newJString(subscriptionId))
  add(path_569817, "backupId", newJString(backupId))
  result = call_569816.call(path_569817, query_569818, nil, nil, nil)

var sitesDeleteBackup* = Call_SitesDeleteBackup_569807(name: "sitesDeleteBackup",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesDeleteBackup_569808, base: "",
    url: url_SitesDeleteBackup_569809, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecrets_569819 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupStatusSecrets_569821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecrets_569820(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569822 = path.getOrDefault("resourceGroupName")
  valid_569822 = validateParameter(valid_569822, JString, required = true,
                                 default = nil)
  if valid_569822 != nil:
    section.add "resourceGroupName", valid_569822
  var valid_569823 = path.getOrDefault("name")
  valid_569823 = validateParameter(valid_569823, JString, required = true,
                                 default = nil)
  if valid_569823 != nil:
    section.add "name", valid_569823
  var valid_569824 = path.getOrDefault("subscriptionId")
  valid_569824 = validateParameter(valid_569824, JString, required = true,
                                 default = nil)
  if valid_569824 != nil:
    section.add "subscriptionId", valid_569824
  var valid_569825 = path.getOrDefault("backupId")
  valid_569825 = validateParameter(valid_569825, JString, required = true,
                                 default = nil)
  if valid_569825 != nil:
    section.add "backupId", valid_569825
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569826 = query.getOrDefault("api-version")
  valid_569826 = validateParameter(valid_569826, JString, required = true,
                                 default = nil)
  if valid_569826 != nil:
    section.add "api-version", valid_569826
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569828: Call_SitesGetSiteBackupStatusSecrets_569819;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569828.validator(path, query, header, formData, body)
  let scheme = call_569828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569828.url(scheme.get, call_569828.host, call_569828.base,
                         call_569828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569828, url, valid)

proc call*(call_569829: Call_SitesGetSiteBackupStatusSecrets_569819;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSecrets
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  ##   backupId: string (required)
  ##           : Id of backup
  var path_569830 = newJObject()
  var query_569831 = newJObject()
  var body_569832 = newJObject()
  add(path_569830, "resourceGroupName", newJString(resourceGroupName))
  add(query_569831, "api-version", newJString(apiVersion))
  add(path_569830, "name", newJString(name))
  add(path_569830, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569832 = request
  add(path_569830, "backupId", newJString(backupId))
  result = call_569829.call(path_569830, query_569831, nil, nil, body_569832)

var sitesGetSiteBackupStatusSecrets* = Call_SitesGetSiteBackupStatusSecrets_569819(
    name: "sitesGetSiteBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecrets_569820, base: "",
    url: url_SitesGetSiteBackupStatusSecrets_569821, schemes: {Scheme.Https})
type
  Call_SitesRestoreSite_569833 = ref object of OpenApiRestCall_567650
proc url_SitesRestoreSite_569835(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSite_569834(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569836 = path.getOrDefault("resourceGroupName")
  valid_569836 = validateParameter(valid_569836, JString, required = true,
                                 default = nil)
  if valid_569836 != nil:
    section.add "resourceGroupName", valid_569836
  var valid_569837 = path.getOrDefault("name")
  valid_569837 = validateParameter(valid_569837, JString, required = true,
                                 default = nil)
  if valid_569837 != nil:
    section.add "name", valid_569837
  var valid_569838 = path.getOrDefault("subscriptionId")
  valid_569838 = validateParameter(valid_569838, JString, required = true,
                                 default = nil)
  if valid_569838 != nil:
    section.add "subscriptionId", valid_569838
  var valid_569839 = path.getOrDefault("backupId")
  valid_569839 = validateParameter(valid_569839, JString, required = true,
                                 default = nil)
  if valid_569839 != nil:
    section.add "backupId", valid_569839
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569840 = query.getOrDefault("api-version")
  valid_569840 = validateParameter(valid_569840, JString, required = true,
                                 default = nil)
  if valid_569840 != nil:
    section.add "api-version", valid_569840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569842: Call_SitesRestoreSite_569833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569842.validator(path, query, header, formData, body)
  let scheme = call_569842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569842.url(scheme.get, call_569842.host, call_569842.base,
                         call_569842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569842, url, valid)

proc call*(call_569843: Call_SitesRestoreSite_569833; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## sitesRestoreSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  ##   backupId: string (required)
  ##           : Id of backup to restore
  var path_569844 = newJObject()
  var query_569845 = newJObject()
  var body_569846 = newJObject()
  add(path_569844, "resourceGroupName", newJString(resourceGroupName))
  add(query_569845, "api-version", newJString(apiVersion))
  add(path_569844, "name", newJString(name))
  add(path_569844, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569846 = request
  add(path_569844, "backupId", newJString(backupId))
  result = call_569843.call(path_569844, query_569845, nil, nil, body_569846)

var sitesRestoreSite* = Call_SitesRestoreSite_569833(name: "sitesRestoreSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSite_569834, base: "",
    url: url_SitesRestoreSite_569835, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettings_569847 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteAppSettings_569849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettings_569848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569850 = path.getOrDefault("resourceGroupName")
  valid_569850 = validateParameter(valid_569850, JString, required = true,
                                 default = nil)
  if valid_569850 != nil:
    section.add "resourceGroupName", valid_569850
  var valid_569851 = path.getOrDefault("name")
  valid_569851 = validateParameter(valid_569851, JString, required = true,
                                 default = nil)
  if valid_569851 != nil:
    section.add "name", valid_569851
  var valid_569852 = path.getOrDefault("subscriptionId")
  valid_569852 = validateParameter(valid_569852, JString, required = true,
                                 default = nil)
  if valid_569852 != nil:
    section.add "subscriptionId", valid_569852
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569853 = query.getOrDefault("api-version")
  valid_569853 = validateParameter(valid_569853, JString, required = true,
                                 default = nil)
  if valid_569853 != nil:
    section.add "api-version", valid_569853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569855: Call_SitesUpdateSiteAppSettings_569847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569855.validator(path, query, header, formData, body)
  let scheme = call_569855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569855.url(scheme.get, call_569855.host, call_569855.base,
                         call_569855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569855, url, valid)

proc call*(call_569856: Call_SitesUpdateSiteAppSettings_569847;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteAppSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569857 = newJObject()
  var query_569858 = newJObject()
  var body_569859 = newJObject()
  add(path_569857, "resourceGroupName", newJString(resourceGroupName))
  add(query_569858, "api-version", newJString(apiVersion))
  add(path_569857, "name", newJString(name))
  if appSettings != nil:
    body_569859 = appSettings
  add(path_569857, "subscriptionId", newJString(subscriptionId))
  result = call_569856.call(path_569857, query_569858, nil, nil, body_569859)

var sitesUpdateSiteAppSettings* = Call_SitesUpdateSiteAppSettings_569847(
    name: "sitesUpdateSiteAppSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettings_569848, base: "",
    url: url_SitesUpdateSiteAppSettings_569849, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettings_569860 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteAppSettings_569862(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettings_569861(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569863 = path.getOrDefault("resourceGroupName")
  valid_569863 = validateParameter(valid_569863, JString, required = true,
                                 default = nil)
  if valid_569863 != nil:
    section.add "resourceGroupName", valid_569863
  var valid_569864 = path.getOrDefault("name")
  valid_569864 = validateParameter(valid_569864, JString, required = true,
                                 default = nil)
  if valid_569864 != nil:
    section.add "name", valid_569864
  var valid_569865 = path.getOrDefault("subscriptionId")
  valid_569865 = validateParameter(valid_569865, JString, required = true,
                                 default = nil)
  if valid_569865 != nil:
    section.add "subscriptionId", valid_569865
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569866 = query.getOrDefault("api-version")
  valid_569866 = validateParameter(valid_569866, JString, required = true,
                                 default = nil)
  if valid_569866 != nil:
    section.add "api-version", valid_569866
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569867: Call_SitesListSiteAppSettings_569860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569867.validator(path, query, header, formData, body)
  let scheme = call_569867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569867.url(scheme.get, call_569867.host, call_569867.base,
                         call_569867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569867, url, valid)

proc call*(call_569868: Call_SitesListSiteAppSettings_569860;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAppSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569869 = newJObject()
  var query_569870 = newJObject()
  add(path_569869, "resourceGroupName", newJString(resourceGroupName))
  add(query_569870, "api-version", newJString(apiVersion))
  add(path_569869, "name", newJString(name))
  add(path_569869, "subscriptionId", newJString(subscriptionId))
  result = call_569868.call(path_569869, query_569870, nil, nil, nil)

var sitesListSiteAppSettings* = Call_SitesListSiteAppSettings_569860(
    name: "sitesListSiteAppSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettings_569861, base: "",
    url: url_SitesListSiteAppSettings_569862, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettings_569871 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteAuthSettings_569873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettings_569872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569874 = path.getOrDefault("resourceGroupName")
  valid_569874 = validateParameter(valid_569874, JString, required = true,
                                 default = nil)
  if valid_569874 != nil:
    section.add "resourceGroupName", valid_569874
  var valid_569875 = path.getOrDefault("name")
  valid_569875 = validateParameter(valid_569875, JString, required = true,
                                 default = nil)
  if valid_569875 != nil:
    section.add "name", valid_569875
  var valid_569876 = path.getOrDefault("subscriptionId")
  valid_569876 = validateParameter(valid_569876, JString, required = true,
                                 default = nil)
  if valid_569876 != nil:
    section.add "subscriptionId", valid_569876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569877 = query.getOrDefault("api-version")
  valid_569877 = validateParameter(valid_569877, JString, required = true,
                                 default = nil)
  if valid_569877 != nil:
    section.add "api-version", valid_569877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569879: Call_SitesUpdateSiteAuthSettings_569871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569879.validator(path, query, header, formData, body)
  let scheme = call_569879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569879.url(scheme.get, call_569879.host, call_569879.base,
                         call_569879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569879, url, valid)

proc call*(call_569880: Call_SitesUpdateSiteAuthSettings_569871;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## sitesUpdateSiteAuthSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  var path_569881 = newJObject()
  var query_569882 = newJObject()
  var body_569883 = newJObject()
  add(path_569881, "resourceGroupName", newJString(resourceGroupName))
  add(query_569882, "api-version", newJString(apiVersion))
  add(path_569881, "name", newJString(name))
  add(path_569881, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_569883 = siteAuthSettings
  result = call_569880.call(path_569881, query_569882, nil, nil, body_569883)

var sitesUpdateSiteAuthSettings* = Call_SitesUpdateSiteAuthSettings_569871(
    name: "sitesUpdateSiteAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettings_569872, base: "",
    url: url_SitesUpdateSiteAuthSettings_569873, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettings_569884 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteAuthSettings_569886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettings_569885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569887 = path.getOrDefault("resourceGroupName")
  valid_569887 = validateParameter(valid_569887, JString, required = true,
                                 default = nil)
  if valid_569887 != nil:
    section.add "resourceGroupName", valid_569887
  var valid_569888 = path.getOrDefault("name")
  valid_569888 = validateParameter(valid_569888, JString, required = true,
                                 default = nil)
  if valid_569888 != nil:
    section.add "name", valid_569888
  var valid_569889 = path.getOrDefault("subscriptionId")
  valid_569889 = validateParameter(valid_569889, JString, required = true,
                                 default = nil)
  if valid_569889 != nil:
    section.add "subscriptionId", valid_569889
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569890 = query.getOrDefault("api-version")
  valid_569890 = validateParameter(valid_569890, JString, required = true,
                                 default = nil)
  if valid_569890 != nil:
    section.add "api-version", valid_569890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569891: Call_SitesListSiteAuthSettings_569884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569891.validator(path, query, header, formData, body)
  let scheme = call_569891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569891.url(scheme.get, call_569891.host, call_569891.base,
                         call_569891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569891, url, valid)

proc call*(call_569892: Call_SitesListSiteAuthSettings_569884;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAuthSettings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569893 = newJObject()
  var query_569894 = newJObject()
  add(path_569893, "resourceGroupName", newJString(resourceGroupName))
  add(query_569894, "api-version", newJString(apiVersion))
  add(path_569893, "name", newJString(name))
  add(path_569893, "subscriptionId", newJString(subscriptionId))
  result = call_569892.call(path_569893, query_569894, nil, nil, nil)

var sitesListSiteAuthSettings* = Call_SitesListSiteAuthSettings_569884(
    name: "sitesListSiteAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettings_569885, base: "",
    url: url_SitesListSiteAuthSettings_569886, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfiguration_569895 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteBackupConfiguration_569897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfiguration_569896(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569898 = path.getOrDefault("resourceGroupName")
  valid_569898 = validateParameter(valid_569898, JString, required = true,
                                 default = nil)
  if valid_569898 != nil:
    section.add "resourceGroupName", valid_569898
  var valid_569899 = path.getOrDefault("name")
  valid_569899 = validateParameter(valid_569899, JString, required = true,
                                 default = nil)
  if valid_569899 != nil:
    section.add "name", valid_569899
  var valid_569900 = path.getOrDefault("subscriptionId")
  valid_569900 = validateParameter(valid_569900, JString, required = true,
                                 default = nil)
  if valid_569900 != nil:
    section.add "subscriptionId", valid_569900
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569901 = query.getOrDefault("api-version")
  valid_569901 = validateParameter(valid_569901, JString, required = true,
                                 default = nil)
  if valid_569901 != nil:
    section.add "api-version", valid_569901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569903: Call_SitesUpdateSiteBackupConfiguration_569895;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569903.validator(path, query, header, formData, body)
  let scheme = call_569903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569903.url(scheme.get, call_569903.host, call_569903.base,
                         call_569903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569903, url, valid)

proc call*(call_569904: Call_SitesUpdateSiteBackupConfiguration_569895;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfiguration
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_569905 = newJObject()
  var query_569906 = newJObject()
  var body_569907 = newJObject()
  add(path_569905, "resourceGroupName", newJString(resourceGroupName))
  add(query_569906, "api-version", newJString(apiVersion))
  add(path_569905, "name", newJString(name))
  add(path_569905, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569907 = request
  result = call_569904.call(path_569905, query_569906, nil, nil, body_569907)

var sitesUpdateSiteBackupConfiguration* = Call_SitesUpdateSiteBackupConfiguration_569895(
    name: "sitesUpdateSiteBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfiguration_569896, base: "",
    url: url_SitesUpdateSiteBackupConfiguration_569897, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfiguration_569908 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupConfiguration_569910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfiguration_569909(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569911 = path.getOrDefault("resourceGroupName")
  valid_569911 = validateParameter(valid_569911, JString, required = true,
                                 default = nil)
  if valid_569911 != nil:
    section.add "resourceGroupName", valid_569911
  var valid_569912 = path.getOrDefault("name")
  valid_569912 = validateParameter(valid_569912, JString, required = true,
                                 default = nil)
  if valid_569912 != nil:
    section.add "name", valid_569912
  var valid_569913 = path.getOrDefault("subscriptionId")
  valid_569913 = validateParameter(valid_569913, JString, required = true,
                                 default = nil)
  if valid_569913 != nil:
    section.add "subscriptionId", valid_569913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569914 = query.getOrDefault("api-version")
  valid_569914 = validateParameter(valid_569914, JString, required = true,
                                 default = nil)
  if valid_569914 != nil:
    section.add "api-version", valid_569914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569915: Call_SitesGetSiteBackupConfiguration_569908;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569915.validator(path, query, header, formData, body)
  let scheme = call_569915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569915.url(scheme.get, call_569915.host, call_569915.base,
                         call_569915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569915, url, valid)

proc call*(call_569916: Call_SitesGetSiteBackupConfiguration_569908;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteBackupConfiguration
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569917 = newJObject()
  var query_569918 = newJObject()
  add(path_569917, "resourceGroupName", newJString(resourceGroupName))
  add(query_569918, "api-version", newJString(apiVersion))
  add(path_569917, "name", newJString(name))
  add(path_569917, "subscriptionId", newJString(subscriptionId))
  result = call_569916.call(path_569917, query_569918, nil, nil, nil)

var sitesGetSiteBackupConfiguration* = Call_SitesGetSiteBackupConfiguration_569908(
    name: "sitesGetSiteBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfiguration_569909, base: "",
    url: url_SitesGetSiteBackupConfiguration_569910, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStrings_569919 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteConnectionStrings_569921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStrings_569920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569922 = path.getOrDefault("resourceGroupName")
  valid_569922 = validateParameter(valid_569922, JString, required = true,
                                 default = nil)
  if valid_569922 != nil:
    section.add "resourceGroupName", valid_569922
  var valid_569923 = path.getOrDefault("name")
  valid_569923 = validateParameter(valid_569923, JString, required = true,
                                 default = nil)
  if valid_569923 != nil:
    section.add "name", valid_569923
  var valid_569924 = path.getOrDefault("subscriptionId")
  valid_569924 = validateParameter(valid_569924, JString, required = true,
                                 default = nil)
  if valid_569924 != nil:
    section.add "subscriptionId", valid_569924
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569925 = query.getOrDefault("api-version")
  valid_569925 = validateParameter(valid_569925, JString, required = true,
                                 default = nil)
  if valid_569925 != nil:
    section.add "api-version", valid_569925
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569927: Call_SitesUpdateSiteConnectionStrings_569919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569927.validator(path, query, header, formData, body)
  let scheme = call_569927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569927.url(scheme.get, call_569927.host, call_569927.base,
                         call_569927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569927, url, valid)

proc call*(call_569928: Call_SitesUpdateSiteConnectionStrings_569919;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConnectionStrings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569929 = newJObject()
  var query_569930 = newJObject()
  var body_569931 = newJObject()
  add(path_569929, "resourceGroupName", newJString(resourceGroupName))
  add(query_569930, "api-version", newJString(apiVersion))
  add(path_569929, "name", newJString(name))
  if connectionStrings != nil:
    body_569931 = connectionStrings
  add(path_569929, "subscriptionId", newJString(subscriptionId))
  result = call_569928.call(path_569929, query_569930, nil, nil, body_569931)

var sitesUpdateSiteConnectionStrings* = Call_SitesUpdateSiteConnectionStrings_569919(
    name: "sitesUpdateSiteConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStrings_569920, base: "",
    url: url_SitesUpdateSiteConnectionStrings_569921, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStrings_569932 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteConnectionStrings_569934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStrings_569933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569935 = path.getOrDefault("resourceGroupName")
  valid_569935 = validateParameter(valid_569935, JString, required = true,
                                 default = nil)
  if valid_569935 != nil:
    section.add "resourceGroupName", valid_569935
  var valid_569936 = path.getOrDefault("name")
  valid_569936 = validateParameter(valid_569936, JString, required = true,
                                 default = nil)
  if valid_569936 != nil:
    section.add "name", valid_569936
  var valid_569937 = path.getOrDefault("subscriptionId")
  valid_569937 = validateParameter(valid_569937, JString, required = true,
                                 default = nil)
  if valid_569937 != nil:
    section.add "subscriptionId", valid_569937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569938 = query.getOrDefault("api-version")
  valid_569938 = validateParameter(valid_569938, JString, required = true,
                                 default = nil)
  if valid_569938 != nil:
    section.add "api-version", valid_569938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569939: Call_SitesListSiteConnectionStrings_569932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569939.validator(path, query, header, formData, body)
  let scheme = call_569939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569939.url(scheme.get, call_569939.host, call_569939.base,
                         call_569939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569939, url, valid)

proc call*(call_569940: Call_SitesListSiteConnectionStrings_569932;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteConnectionStrings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569941 = newJObject()
  var query_569942 = newJObject()
  add(path_569941, "resourceGroupName", newJString(resourceGroupName))
  add(query_569942, "api-version", newJString(apiVersion))
  add(path_569941, "name", newJString(name))
  add(path_569941, "subscriptionId", newJString(subscriptionId))
  result = call_569940.call(path_569941, query_569942, nil, nil, nil)

var sitesListSiteConnectionStrings* = Call_SitesListSiteConnectionStrings_569932(
    name: "sitesListSiteConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStrings_569933, base: "",
    url: url_SitesListSiteConnectionStrings_569934, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfig_569954 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteLogsConfig_569956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfig_569955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569957 = path.getOrDefault("resourceGroupName")
  valid_569957 = validateParameter(valid_569957, JString, required = true,
                                 default = nil)
  if valid_569957 != nil:
    section.add "resourceGroupName", valid_569957
  var valid_569958 = path.getOrDefault("name")
  valid_569958 = validateParameter(valid_569958, JString, required = true,
                                 default = nil)
  if valid_569958 != nil:
    section.add "name", valid_569958
  var valid_569959 = path.getOrDefault("subscriptionId")
  valid_569959 = validateParameter(valid_569959, JString, required = true,
                                 default = nil)
  if valid_569959 != nil:
    section.add "subscriptionId", valid_569959
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569960 = query.getOrDefault("api-version")
  valid_569960 = validateParameter(valid_569960, JString, required = true,
                                 default = nil)
  if valid_569960 != nil:
    section.add "api-version", valid_569960
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569962: Call_SitesUpdateSiteLogsConfig_569954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569962.validator(path, query, header, formData, body)
  let scheme = call_569962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569962.url(scheme.get, call_569962.host, call_569962.base,
                         call_569962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569962, url, valid)

proc call*(call_569963: Call_SitesUpdateSiteLogsConfig_569954;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteLogsConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569964 = newJObject()
  var query_569965 = newJObject()
  var body_569966 = newJObject()
  add(path_569964, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_569966 = siteLogsConfig
  add(query_569965, "api-version", newJString(apiVersion))
  add(path_569964, "name", newJString(name))
  add(path_569964, "subscriptionId", newJString(subscriptionId))
  result = call_569963.call(path_569964, query_569965, nil, nil, body_569966)

var sitesUpdateSiteLogsConfig* = Call_SitesUpdateSiteLogsConfig_569954(
    name: "sitesUpdateSiteLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfig_569955, base: "",
    url: url_SitesUpdateSiteLogsConfig_569956, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfig_569943 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteLogsConfig_569945(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfig_569944(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569946 = path.getOrDefault("resourceGroupName")
  valid_569946 = validateParameter(valid_569946, JString, required = true,
                                 default = nil)
  if valid_569946 != nil:
    section.add "resourceGroupName", valid_569946
  var valid_569947 = path.getOrDefault("name")
  valid_569947 = validateParameter(valid_569947, JString, required = true,
                                 default = nil)
  if valid_569947 != nil:
    section.add "name", valid_569947
  var valid_569948 = path.getOrDefault("subscriptionId")
  valid_569948 = validateParameter(valid_569948, JString, required = true,
                                 default = nil)
  if valid_569948 != nil:
    section.add "subscriptionId", valid_569948
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569949 = query.getOrDefault("api-version")
  valid_569949 = validateParameter(valid_569949, JString, required = true,
                                 default = nil)
  if valid_569949 != nil:
    section.add "api-version", valid_569949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569950: Call_SitesGetSiteLogsConfig_569943; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569950.validator(path, query, header, formData, body)
  let scheme = call_569950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569950.url(scheme.get, call_569950.host, call_569950.base,
                         call_569950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569950, url, valid)

proc call*(call_569951: Call_SitesGetSiteLogsConfig_569943;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteLogsConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569952 = newJObject()
  var query_569953 = newJObject()
  add(path_569952, "resourceGroupName", newJString(resourceGroupName))
  add(query_569953, "api-version", newJString(apiVersion))
  add(path_569952, "name", newJString(name))
  add(path_569952, "subscriptionId", newJString(subscriptionId))
  result = call_569951.call(path_569952, query_569953, nil, nil, nil)

var sitesGetSiteLogsConfig* = Call_SitesGetSiteLogsConfig_569943(
    name: "sitesGetSiteLogsConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesGetSiteLogsConfig_569944, base: "",
    url: url_SitesGetSiteLogsConfig_569945, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadata_569967 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteMetadata_569969(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadata_569968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569970 = path.getOrDefault("resourceGroupName")
  valid_569970 = validateParameter(valid_569970, JString, required = true,
                                 default = nil)
  if valid_569970 != nil:
    section.add "resourceGroupName", valid_569970
  var valid_569971 = path.getOrDefault("name")
  valid_569971 = validateParameter(valid_569971, JString, required = true,
                                 default = nil)
  if valid_569971 != nil:
    section.add "name", valid_569971
  var valid_569972 = path.getOrDefault("subscriptionId")
  valid_569972 = validateParameter(valid_569972, JString, required = true,
                                 default = nil)
  if valid_569972 != nil:
    section.add "subscriptionId", valid_569972
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569973 = query.getOrDefault("api-version")
  valid_569973 = validateParameter(valid_569973, JString, required = true,
                                 default = nil)
  if valid_569973 != nil:
    section.add "api-version", valid_569973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569975: Call_SitesUpdateSiteMetadata_569967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569975.validator(path, query, header, formData, body)
  let scheme = call_569975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569975.url(scheme.get, call_569975.host, call_569975.base,
                         call_569975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569975, url, valid)

proc call*(call_569976: Call_SitesUpdateSiteMetadata_569967;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## sitesUpdateSiteMetadata
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  var path_569977 = newJObject()
  var query_569978 = newJObject()
  var body_569979 = newJObject()
  add(path_569977, "resourceGroupName", newJString(resourceGroupName))
  add(query_569978, "api-version", newJString(apiVersion))
  add(path_569977, "name", newJString(name))
  add(path_569977, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_569979 = metadata
  result = call_569976.call(path_569977, query_569978, nil, nil, body_569979)

var sitesUpdateSiteMetadata* = Call_SitesUpdateSiteMetadata_569967(
    name: "sitesUpdateSiteMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_SitesUpdateSiteMetadata_569968, base: "",
    url: url_SitesUpdateSiteMetadata_569969, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadata_569980 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteMetadata_569982(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadata_569981(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569983 = path.getOrDefault("resourceGroupName")
  valid_569983 = validateParameter(valid_569983, JString, required = true,
                                 default = nil)
  if valid_569983 != nil:
    section.add "resourceGroupName", valid_569983
  var valid_569984 = path.getOrDefault("name")
  valid_569984 = validateParameter(valid_569984, JString, required = true,
                                 default = nil)
  if valid_569984 != nil:
    section.add "name", valid_569984
  var valid_569985 = path.getOrDefault("subscriptionId")
  valid_569985 = validateParameter(valid_569985, JString, required = true,
                                 default = nil)
  if valid_569985 != nil:
    section.add "subscriptionId", valid_569985
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569986 = query.getOrDefault("api-version")
  valid_569986 = validateParameter(valid_569986, JString, required = true,
                                 default = nil)
  if valid_569986 != nil:
    section.add "api-version", valid_569986
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569987: Call_SitesListSiteMetadata_569980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_569987.validator(path, query, header, formData, body)
  let scheme = call_569987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569987.url(scheme.get, call_569987.host, call_569987.base,
                         call_569987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569987, url, valid)

proc call*(call_569988: Call_SitesListSiteMetadata_569980;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteMetadata
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_569989 = newJObject()
  var query_569990 = newJObject()
  add(path_569989, "resourceGroupName", newJString(resourceGroupName))
  add(query_569990, "api-version", newJString(apiVersion))
  add(path_569989, "name", newJString(name))
  add(path_569989, "subscriptionId", newJString(subscriptionId))
  result = call_569988.call(path_569989, query_569990, nil, nil, nil)

var sitesListSiteMetadata* = Call_SitesListSiteMetadata_569980(
    name: "sitesListSiteMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_SitesListSiteMetadata_569981, base: "",
    url: url_SitesListSiteMetadata_569982, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentials_569991 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePublishingCredentials_569993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentials_569992(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569994 = path.getOrDefault("resourceGroupName")
  valid_569994 = validateParameter(valid_569994, JString, required = true,
                                 default = nil)
  if valid_569994 != nil:
    section.add "resourceGroupName", valid_569994
  var valid_569995 = path.getOrDefault("name")
  valid_569995 = validateParameter(valid_569995, JString, required = true,
                                 default = nil)
  if valid_569995 != nil:
    section.add "name", valid_569995
  var valid_569996 = path.getOrDefault("subscriptionId")
  valid_569996 = validateParameter(valid_569996, JString, required = true,
                                 default = nil)
  if valid_569996 != nil:
    section.add "subscriptionId", valid_569996
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569997 = query.getOrDefault("api-version")
  valid_569997 = validateParameter(valid_569997, JString, required = true,
                                 default = nil)
  if valid_569997 != nil:
    section.add "api-version", valid_569997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569998: Call_SitesListSitePublishingCredentials_569991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_569998.validator(path, query, header, formData, body)
  let scheme = call_569998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569998.url(scheme.get, call_569998.host, call_569998.base,
                         call_569998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569998, url, valid)

proc call*(call_569999: Call_SitesListSitePublishingCredentials_569991;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePublishingCredentials
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570000 = newJObject()
  var query_570001 = newJObject()
  add(path_570000, "resourceGroupName", newJString(resourceGroupName))
  add(query_570001, "api-version", newJString(apiVersion))
  add(path_570000, "name", newJString(name))
  add(path_570000, "subscriptionId", newJString(subscriptionId))
  result = call_569999.call(path_570000, query_570001, nil, nil, nil)

var sitesListSitePublishingCredentials* = Call_SitesListSitePublishingCredentials_569991(
    name: "sitesListSitePublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentials_569992, base: "",
    url: url_SitesListSitePublishingCredentials_569993, schemes: {Scheme.Https})
type
  Call_SitesUpdateSlotConfigNames_570013 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSlotConfigNames_570015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSlotConfigNames_570014(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570016 = path.getOrDefault("resourceGroupName")
  valid_570016 = validateParameter(valid_570016, JString, required = true,
                                 default = nil)
  if valid_570016 != nil:
    section.add "resourceGroupName", valid_570016
  var valid_570017 = path.getOrDefault("name")
  valid_570017 = validateParameter(valid_570017, JString, required = true,
                                 default = nil)
  if valid_570017 != nil:
    section.add "name", valid_570017
  var valid_570018 = path.getOrDefault("subscriptionId")
  valid_570018 = validateParameter(valid_570018, JString, required = true,
                                 default = nil)
  if valid_570018 != nil:
    section.add "subscriptionId", valid_570018
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570019 = query.getOrDefault("api-version")
  valid_570019 = validateParameter(valid_570019, JString, required = true,
                                 default = nil)
  if valid_570019 != nil:
    section.add "api-version", valid_570019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570021: Call_SitesUpdateSlotConfigNames_570013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570021.validator(path, query, header, formData, body)
  let scheme = call_570021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570021.url(scheme.get, call_570021.host, call_570021.base,
                         call_570021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570021, url, valid)

proc call*(call_570022: Call_SitesUpdateSlotConfigNames_570013;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSlotConfigNames
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570023 = newJObject()
  var query_570024 = newJObject()
  var body_570025 = newJObject()
  add(path_570023, "resourceGroupName", newJString(resourceGroupName))
  add(query_570024, "api-version", newJString(apiVersion))
  add(path_570023, "name", newJString(name))
  if slotConfigNames != nil:
    body_570025 = slotConfigNames
  add(path_570023, "subscriptionId", newJString(subscriptionId))
  result = call_570022.call(path_570023, query_570024, nil, nil, body_570025)

var sitesUpdateSlotConfigNames* = Call_SitesUpdateSlotConfigNames_570013(
    name: "sitesUpdateSlotConfigNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesUpdateSlotConfigNames_570014, base: "",
    url: url_SitesUpdateSlotConfigNames_570015, schemes: {Scheme.Https})
type
  Call_SitesGetSlotConfigNames_570002 = ref object of OpenApiRestCall_567650
proc url_SitesGetSlotConfigNames_570004(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotConfigNames_570003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570005 = path.getOrDefault("resourceGroupName")
  valid_570005 = validateParameter(valid_570005, JString, required = true,
                                 default = nil)
  if valid_570005 != nil:
    section.add "resourceGroupName", valid_570005
  var valid_570006 = path.getOrDefault("name")
  valid_570006 = validateParameter(valid_570006, JString, required = true,
                                 default = nil)
  if valid_570006 != nil:
    section.add "name", valid_570006
  var valid_570007 = path.getOrDefault("subscriptionId")
  valid_570007 = validateParameter(valid_570007, JString, required = true,
                                 default = nil)
  if valid_570007 != nil:
    section.add "subscriptionId", valid_570007
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570008 = query.getOrDefault("api-version")
  valid_570008 = validateParameter(valid_570008, JString, required = true,
                                 default = nil)
  if valid_570008 != nil:
    section.add "api-version", valid_570008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570009: Call_SitesGetSlotConfigNames_570002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570009.validator(path, query, header, formData, body)
  let scheme = call_570009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570009.url(scheme.get, call_570009.host, call_570009.base,
                         call_570009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570009, url, valid)

proc call*(call_570010: Call_SitesGetSlotConfigNames_570002;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSlotConfigNames
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570011 = newJObject()
  var query_570012 = newJObject()
  add(path_570011, "resourceGroupName", newJString(resourceGroupName))
  add(query_570012, "api-version", newJString(apiVersion))
  add(path_570011, "name", newJString(name))
  add(path_570011, "subscriptionId", newJString(subscriptionId))
  result = call_570010.call(path_570011, query_570012, nil, nil, nil)

var sitesGetSlotConfigNames* = Call_SitesGetSlotConfigNames_570002(
    name: "sitesGetSlotConfigNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesGetSlotConfigNames_570003, base: "",
    url: url_SitesGetSlotConfigNames_570004, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfig_570037 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteConfig_570039(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfig_570038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570040 = path.getOrDefault("resourceGroupName")
  valid_570040 = validateParameter(valid_570040, JString, required = true,
                                 default = nil)
  if valid_570040 != nil:
    section.add "resourceGroupName", valid_570040
  var valid_570041 = path.getOrDefault("name")
  valid_570041 = validateParameter(valid_570041, JString, required = true,
                                 default = nil)
  if valid_570041 != nil:
    section.add "name", valid_570041
  var valid_570042 = path.getOrDefault("subscriptionId")
  valid_570042 = validateParameter(valid_570042, JString, required = true,
                                 default = nil)
  if valid_570042 != nil:
    section.add "subscriptionId", valid_570042
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570043 = query.getOrDefault("api-version")
  valid_570043 = validateParameter(valid_570043, JString, required = true,
                                 default = nil)
  if valid_570043 != nil:
    section.add "api-version", valid_570043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570045: Call_SitesCreateOrUpdateSiteConfig_570037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570045.validator(path, query, header, formData, body)
  let scheme = call_570045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570045.url(scheme.get, call_570045.host, call_570045.base,
                         call_570045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570045, url, valid)

proc call*(call_570046: Call_SitesCreateOrUpdateSiteConfig_570037;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570047 = newJObject()
  var query_570048 = newJObject()
  var body_570049 = newJObject()
  add(path_570047, "resourceGroupName", newJString(resourceGroupName))
  add(query_570048, "api-version", newJString(apiVersion))
  add(path_570047, "name", newJString(name))
  if siteConfig != nil:
    body_570049 = siteConfig
  add(path_570047, "subscriptionId", newJString(subscriptionId))
  result = call_570046.call(path_570047, query_570048, nil, nil, body_570049)

var sitesCreateOrUpdateSiteConfig* = Call_SitesCreateOrUpdateSiteConfig_570037(
    name: "sitesCreateOrUpdateSiteConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfig_570038, base: "",
    url: url_SitesCreateOrUpdateSiteConfig_570039, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfig_570026 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteConfig_570028(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfig_570027(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570029 = path.getOrDefault("resourceGroupName")
  valid_570029 = validateParameter(valid_570029, JString, required = true,
                                 default = nil)
  if valid_570029 != nil:
    section.add "resourceGroupName", valid_570029
  var valid_570030 = path.getOrDefault("name")
  valid_570030 = validateParameter(valid_570030, JString, required = true,
                                 default = nil)
  if valid_570030 != nil:
    section.add "name", valid_570030
  var valid_570031 = path.getOrDefault("subscriptionId")
  valid_570031 = validateParameter(valid_570031, JString, required = true,
                                 default = nil)
  if valid_570031 != nil:
    section.add "subscriptionId", valid_570031
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570032 = query.getOrDefault("api-version")
  valid_570032 = validateParameter(valid_570032, JString, required = true,
                                 default = nil)
  if valid_570032 != nil:
    section.add "api-version", valid_570032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570033: Call_SitesGetSiteConfig_570026; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570033.validator(path, query, header, formData, body)
  let scheme = call_570033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570033.url(scheme.get, call_570033.host, call_570033.base,
                         call_570033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570033, url, valid)

proc call*(call_570034: Call_SitesGetSiteConfig_570026; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesGetSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570035 = newJObject()
  var query_570036 = newJObject()
  add(path_570035, "resourceGroupName", newJString(resourceGroupName))
  add(query_570036, "api-version", newJString(apiVersion))
  add(path_570035, "name", newJString(name))
  add(path_570035, "subscriptionId", newJString(subscriptionId))
  result = call_570034.call(path_570035, query_570036, nil, nil, nil)

var sitesGetSiteConfig* = Call_SitesGetSiteConfig_570026(
    name: "sitesGetSiteConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesGetSiteConfig_570027, base: "",
    url: url_SitesGetSiteConfig_570028, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfig_570050 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteConfig_570052(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfig_570051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570053 = path.getOrDefault("resourceGroupName")
  valid_570053 = validateParameter(valid_570053, JString, required = true,
                                 default = nil)
  if valid_570053 != nil:
    section.add "resourceGroupName", valid_570053
  var valid_570054 = path.getOrDefault("name")
  valid_570054 = validateParameter(valid_570054, JString, required = true,
                                 default = nil)
  if valid_570054 != nil:
    section.add "name", valid_570054
  var valid_570055 = path.getOrDefault("subscriptionId")
  valid_570055 = validateParameter(valid_570055, JString, required = true,
                                 default = nil)
  if valid_570055 != nil:
    section.add "subscriptionId", valid_570055
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570056 = query.getOrDefault("api-version")
  valid_570056 = validateParameter(valid_570056, JString, required = true,
                                 default = nil)
  if valid_570056 != nil:
    section.add "api-version", valid_570056
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570058: Call_SitesUpdateSiteConfig_570050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570058.validator(path, query, header, formData, body)
  let scheme = call_570058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570058.url(scheme.get, call_570058.host, call_570058.base,
                         call_570058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570058, url, valid)

proc call*(call_570059: Call_SitesUpdateSiteConfig_570050;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570060 = newJObject()
  var query_570061 = newJObject()
  var body_570062 = newJObject()
  add(path_570060, "resourceGroupName", newJString(resourceGroupName))
  add(query_570061, "api-version", newJString(apiVersion))
  add(path_570060, "name", newJString(name))
  if siteConfig != nil:
    body_570062 = siteConfig
  add(path_570060, "subscriptionId", newJString(subscriptionId))
  result = call_570059.call(path_570060, query_570061, nil, nil, body_570062)

var sitesUpdateSiteConfig* = Call_SitesUpdateSiteConfig_570050(
    name: "sitesUpdateSiteConfig", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesUpdateSiteConfig_570051, base: "",
    url: url_SitesUpdateSiteConfig_570052, schemes: {Scheme.Https})
type
  Call_SitesGetDeployments_570063 = ref object of OpenApiRestCall_567650
proc url_SitesGetDeployments_570065(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployments_570064(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570066 = path.getOrDefault("resourceGroupName")
  valid_570066 = validateParameter(valid_570066, JString, required = true,
                                 default = nil)
  if valid_570066 != nil:
    section.add "resourceGroupName", valid_570066
  var valid_570067 = path.getOrDefault("name")
  valid_570067 = validateParameter(valid_570067, JString, required = true,
                                 default = nil)
  if valid_570067 != nil:
    section.add "name", valid_570067
  var valid_570068 = path.getOrDefault("subscriptionId")
  valid_570068 = validateParameter(valid_570068, JString, required = true,
                                 default = nil)
  if valid_570068 != nil:
    section.add "subscriptionId", valid_570068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570069 = query.getOrDefault("api-version")
  valid_570069 = validateParameter(valid_570069, JString, required = true,
                                 default = nil)
  if valid_570069 != nil:
    section.add "api-version", valid_570069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570070: Call_SitesGetDeployments_570063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570070.validator(path, query, header, formData, body)
  let scheme = call_570070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570070.url(scheme.get, call_570070.host, call_570070.base,
                         call_570070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570070, url, valid)

proc call*(call_570071: Call_SitesGetDeployments_570063; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesGetDeployments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570072 = newJObject()
  var query_570073 = newJObject()
  add(path_570072, "resourceGroupName", newJString(resourceGroupName))
  add(query_570073, "api-version", newJString(apiVersion))
  add(path_570072, "name", newJString(name))
  add(path_570072, "subscriptionId", newJString(subscriptionId))
  result = call_570071.call(path_570072, query_570073, nil, nil, nil)

var sitesGetDeployments* = Call_SitesGetDeployments_570063(
    name: "sitesGetDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_SitesGetDeployments_570064, base: "",
    url: url_SitesGetDeployments_570065, schemes: {Scheme.Https})
type
  Call_SitesCreateDeployment_570086 = ref object of OpenApiRestCall_567650
proc url_SitesCreateDeployment_570088(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeployment_570087(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570089 = path.getOrDefault("resourceGroupName")
  valid_570089 = validateParameter(valid_570089, JString, required = true,
                                 default = nil)
  if valid_570089 != nil:
    section.add "resourceGroupName", valid_570089
  var valid_570090 = path.getOrDefault("name")
  valid_570090 = validateParameter(valid_570090, JString, required = true,
                                 default = nil)
  if valid_570090 != nil:
    section.add "name", valid_570090
  var valid_570091 = path.getOrDefault("subscriptionId")
  valid_570091 = validateParameter(valid_570091, JString, required = true,
                                 default = nil)
  if valid_570091 != nil:
    section.add "subscriptionId", valid_570091
  var valid_570092 = path.getOrDefault("id")
  valid_570092 = validateParameter(valid_570092, JString, required = true,
                                 default = nil)
  if valid_570092 != nil:
    section.add "id", valid_570092
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570093 = query.getOrDefault("api-version")
  valid_570093 = validateParameter(valid_570093, JString, required = true,
                                 default = nil)
  if valid_570093 != nil:
    section.add "api-version", valid_570093
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570095: Call_SitesCreateDeployment_570086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570095.validator(path, query, header, formData, body)
  let scheme = call_570095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570095.url(scheme.get, call_570095.host, call_570095.base,
                         call_570095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570095, url, valid)

proc call*(call_570096: Call_SitesCreateDeployment_570086;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_570097 = newJObject()
  var query_570098 = newJObject()
  var body_570099 = newJObject()
  add(path_570097, "resourceGroupName", newJString(resourceGroupName))
  add(query_570098, "api-version", newJString(apiVersion))
  add(path_570097, "name", newJString(name))
  add(path_570097, "subscriptionId", newJString(subscriptionId))
  add(path_570097, "id", newJString(id))
  if deployment != nil:
    body_570099 = deployment
  result = call_570096.call(path_570097, query_570098, nil, nil, body_570099)

var sitesCreateDeployment* = Call_SitesCreateDeployment_570086(
    name: "sitesCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesCreateDeployment_570087, base: "",
    url: url_SitesCreateDeployment_570088, schemes: {Scheme.Https})
type
  Call_SitesGetDeployment_570074 = ref object of OpenApiRestCall_567650
proc url_SitesGetDeployment_570076(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployment_570075(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570077 = path.getOrDefault("resourceGroupName")
  valid_570077 = validateParameter(valid_570077, JString, required = true,
                                 default = nil)
  if valid_570077 != nil:
    section.add "resourceGroupName", valid_570077
  var valid_570078 = path.getOrDefault("name")
  valid_570078 = validateParameter(valid_570078, JString, required = true,
                                 default = nil)
  if valid_570078 != nil:
    section.add "name", valid_570078
  var valid_570079 = path.getOrDefault("subscriptionId")
  valid_570079 = validateParameter(valid_570079, JString, required = true,
                                 default = nil)
  if valid_570079 != nil:
    section.add "subscriptionId", valid_570079
  var valid_570080 = path.getOrDefault("id")
  valid_570080 = validateParameter(valid_570080, JString, required = true,
                                 default = nil)
  if valid_570080 != nil:
    section.add "id", valid_570080
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570081 = query.getOrDefault("api-version")
  valid_570081 = validateParameter(valid_570081, JString, required = true,
                                 default = nil)
  if valid_570081 != nil:
    section.add "api-version", valid_570081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570082: Call_SitesGetDeployment_570074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570082.validator(path, query, header, formData, body)
  let scheme = call_570082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570082.url(scheme.get, call_570082.host, call_570082.base,
                         call_570082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570082, url, valid)

proc call*(call_570083: Call_SitesGetDeployment_570074; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; id: string): Recallable =
  ## sitesGetDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570084 = newJObject()
  var query_570085 = newJObject()
  add(path_570084, "resourceGroupName", newJString(resourceGroupName))
  add(query_570085, "api-version", newJString(apiVersion))
  add(path_570084, "name", newJString(name))
  add(path_570084, "subscriptionId", newJString(subscriptionId))
  add(path_570084, "id", newJString(id))
  result = call_570083.call(path_570084, query_570085, nil, nil, nil)

var sitesGetDeployment* = Call_SitesGetDeployment_570074(
    name: "sitesGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesGetDeployment_570075, base: "",
    url: url_SitesGetDeployment_570076, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeployment_570100 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteDeployment_570102(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeployment_570101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570103 = path.getOrDefault("resourceGroupName")
  valid_570103 = validateParameter(valid_570103, JString, required = true,
                                 default = nil)
  if valid_570103 != nil:
    section.add "resourceGroupName", valid_570103
  var valid_570104 = path.getOrDefault("name")
  valid_570104 = validateParameter(valid_570104, JString, required = true,
                                 default = nil)
  if valid_570104 != nil:
    section.add "name", valid_570104
  var valid_570105 = path.getOrDefault("subscriptionId")
  valid_570105 = validateParameter(valid_570105, JString, required = true,
                                 default = nil)
  if valid_570105 != nil:
    section.add "subscriptionId", valid_570105
  var valid_570106 = path.getOrDefault("id")
  valid_570106 = validateParameter(valid_570106, JString, required = true,
                                 default = nil)
  if valid_570106 != nil:
    section.add "id", valid_570106
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570107 = query.getOrDefault("api-version")
  valid_570107 = validateParameter(valid_570107, JString, required = true,
                                 default = nil)
  if valid_570107 != nil:
    section.add "api-version", valid_570107
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570108: Call_SitesDeleteDeployment_570100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570108.validator(path, query, header, formData, body)
  let scheme = call_570108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570108.url(scheme.get, call_570108.host, call_570108.base,
                         call_570108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570108, url, valid)

proc call*(call_570109: Call_SitesDeleteDeployment_570100;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesDeleteDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570110 = newJObject()
  var query_570111 = newJObject()
  add(path_570110, "resourceGroupName", newJString(resourceGroupName))
  add(query_570111, "api-version", newJString(apiVersion))
  add(path_570110, "name", newJString(name))
  add(path_570110, "subscriptionId", newJString(subscriptionId))
  add(path_570110, "id", newJString(id))
  result = call_570109.call(path_570110, query_570111, nil, nil, nil)

var sitesDeleteDeployment* = Call_SitesDeleteDeployment_570100(
    name: "sitesDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesDeleteDeployment_570101, base: "",
    url: url_SitesDeleteDeployment_570102, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindings_570112 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteHostNameBindings_570114(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindings_570113(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570115 = path.getOrDefault("resourceGroupName")
  valid_570115 = validateParameter(valid_570115, JString, required = true,
                                 default = nil)
  if valid_570115 != nil:
    section.add "resourceGroupName", valid_570115
  var valid_570116 = path.getOrDefault("name")
  valid_570116 = validateParameter(valid_570116, JString, required = true,
                                 default = nil)
  if valid_570116 != nil:
    section.add "name", valid_570116
  var valid_570117 = path.getOrDefault("subscriptionId")
  valid_570117 = validateParameter(valid_570117, JString, required = true,
                                 default = nil)
  if valid_570117 != nil:
    section.add "subscriptionId", valid_570117
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570118 = query.getOrDefault("api-version")
  valid_570118 = validateParameter(valid_570118, JString, required = true,
                                 default = nil)
  if valid_570118 != nil:
    section.add "api-version", valid_570118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570119: Call_SitesGetSiteHostNameBindings_570112; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570119.validator(path, query, header, formData, body)
  let scheme = call_570119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570119.url(scheme.get, call_570119.host, call_570119.base,
                         call_570119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570119, url, valid)

proc call*(call_570120: Call_SitesGetSiteHostNameBindings_570112;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteHostNameBindings
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570121 = newJObject()
  var query_570122 = newJObject()
  add(path_570121, "resourceGroupName", newJString(resourceGroupName))
  add(query_570122, "api-version", newJString(apiVersion))
  add(path_570121, "name", newJString(name))
  add(path_570121, "subscriptionId", newJString(subscriptionId))
  result = call_570120.call(path_570121, query_570122, nil, nil, nil)

var sitesGetSiteHostNameBindings* = Call_SitesGetSiteHostNameBindings_570112(
    name: "sitesGetSiteHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindings_570113, base: "",
    url: url_SitesGetSiteHostNameBindings_570114, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBinding_570135 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteHostNameBinding_570137(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBinding_570136(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570138 = path.getOrDefault("resourceGroupName")
  valid_570138 = validateParameter(valid_570138, JString, required = true,
                                 default = nil)
  if valid_570138 != nil:
    section.add "resourceGroupName", valid_570138
  var valid_570139 = path.getOrDefault("name")
  valid_570139 = validateParameter(valid_570139, JString, required = true,
                                 default = nil)
  if valid_570139 != nil:
    section.add "name", valid_570139
  var valid_570140 = path.getOrDefault("subscriptionId")
  valid_570140 = validateParameter(valid_570140, JString, required = true,
                                 default = nil)
  if valid_570140 != nil:
    section.add "subscriptionId", valid_570140
  var valid_570141 = path.getOrDefault("hostName")
  valid_570141 = validateParameter(valid_570141, JString, required = true,
                                 default = nil)
  if valid_570141 != nil:
    section.add "hostName", valid_570141
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570142 = query.getOrDefault("api-version")
  valid_570142 = validateParameter(valid_570142, JString, required = true,
                                 default = nil)
  if valid_570142 != nil:
    section.add "api-version", valid_570142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570144: Call_SitesCreateOrUpdateSiteHostNameBinding_570135;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570144.validator(path, query, header, formData, body)
  let scheme = call_570144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570144.url(scheme.get, call_570144.host, call_570144.base,
                         call_570144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570144, url, valid)

proc call*(call_570145: Call_SitesCreateOrUpdateSiteHostNameBinding_570135;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  var path_570146 = newJObject()
  var query_570147 = newJObject()
  var body_570148 = newJObject()
  add(path_570146, "resourceGroupName", newJString(resourceGroupName))
  add(query_570147, "api-version", newJString(apiVersion))
  add(path_570146, "name", newJString(name))
  add(path_570146, "subscriptionId", newJString(subscriptionId))
  add(path_570146, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_570148 = hostNameBinding
  result = call_570145.call(path_570146, query_570147, nil, nil, body_570148)

var sitesCreateOrUpdateSiteHostNameBinding* = Call_SitesCreateOrUpdateSiteHostNameBinding_570135(
    name: "sitesCreateOrUpdateSiteHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBinding_570136, base: "",
    url: url_SitesCreateOrUpdateSiteHostNameBinding_570137,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBinding_570123 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteHostNameBinding_570125(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBinding_570124(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570126 = path.getOrDefault("resourceGroupName")
  valid_570126 = validateParameter(valid_570126, JString, required = true,
                                 default = nil)
  if valid_570126 != nil:
    section.add "resourceGroupName", valid_570126
  var valid_570127 = path.getOrDefault("name")
  valid_570127 = validateParameter(valid_570127, JString, required = true,
                                 default = nil)
  if valid_570127 != nil:
    section.add "name", valid_570127
  var valid_570128 = path.getOrDefault("subscriptionId")
  valid_570128 = validateParameter(valid_570128, JString, required = true,
                                 default = nil)
  if valid_570128 != nil:
    section.add "subscriptionId", valid_570128
  var valid_570129 = path.getOrDefault("hostName")
  valid_570129 = validateParameter(valid_570129, JString, required = true,
                                 default = nil)
  if valid_570129 != nil:
    section.add "hostName", valid_570129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570130 = query.getOrDefault("api-version")
  valid_570130 = validateParameter(valid_570130, JString, required = true,
                                 default = nil)
  if valid_570130 != nil:
    section.add "api-version", valid_570130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570131: Call_SitesGetSiteHostNameBinding_570123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570131.validator(path, query, header, formData, body)
  let scheme = call_570131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570131.url(scheme.get, call_570131.host, call_570131.base,
                         call_570131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570131, url, valid)

proc call*(call_570132: Call_SitesGetSiteHostNameBinding_570123;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_570133 = newJObject()
  var query_570134 = newJObject()
  add(path_570133, "resourceGroupName", newJString(resourceGroupName))
  add(query_570134, "api-version", newJString(apiVersion))
  add(path_570133, "name", newJString(name))
  add(path_570133, "subscriptionId", newJString(subscriptionId))
  add(path_570133, "hostName", newJString(hostName))
  result = call_570132.call(path_570133, query_570134, nil, nil, nil)

var sitesGetSiteHostNameBinding* = Call_SitesGetSiteHostNameBinding_570123(
    name: "sitesGetSiteHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBinding_570124, base: "",
    url: url_SitesGetSiteHostNameBinding_570125, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBinding_570149 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteHostNameBinding_570151(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBinding_570150(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570152 = path.getOrDefault("resourceGroupName")
  valid_570152 = validateParameter(valid_570152, JString, required = true,
                                 default = nil)
  if valid_570152 != nil:
    section.add "resourceGroupName", valid_570152
  var valid_570153 = path.getOrDefault("name")
  valid_570153 = validateParameter(valid_570153, JString, required = true,
                                 default = nil)
  if valid_570153 != nil:
    section.add "name", valid_570153
  var valid_570154 = path.getOrDefault("subscriptionId")
  valid_570154 = validateParameter(valid_570154, JString, required = true,
                                 default = nil)
  if valid_570154 != nil:
    section.add "subscriptionId", valid_570154
  var valid_570155 = path.getOrDefault("hostName")
  valid_570155 = validateParameter(valid_570155, JString, required = true,
                                 default = nil)
  if valid_570155 != nil:
    section.add "hostName", valid_570155
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570156 = query.getOrDefault("api-version")
  valid_570156 = validateParameter(valid_570156, JString, required = true,
                                 default = nil)
  if valid_570156 != nil:
    section.add "api-version", valid_570156
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570157: Call_SitesDeleteSiteHostNameBinding_570149; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570157.validator(path, query, header, formData, body)
  let scheme = call_570157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570157.url(scheme.get, call_570157.host, call_570157.base,
                         call_570157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570157, url, valid)

proc call*(call_570158: Call_SitesDeleteSiteHostNameBinding_570149;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBinding
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_570159 = newJObject()
  var query_570160 = newJObject()
  add(path_570159, "resourceGroupName", newJString(resourceGroupName))
  add(query_570160, "api-version", newJString(apiVersion))
  add(path_570159, "name", newJString(name))
  add(path_570159, "subscriptionId", newJString(subscriptionId))
  add(path_570159, "hostName", newJString(hostName))
  result = call_570158.call(path_570159, query_570160, nil, nil, nil)

var sitesDeleteSiteHostNameBinding* = Call_SitesDeleteSiteHostNameBinding_570149(
    name: "sitesDeleteSiteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBinding_570150, base: "",
    url: url_SitesDeleteSiteHostNameBinding_570151, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnections_570161 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteRelayServiceConnections_570163(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnections_570162(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570164 = path.getOrDefault("resourceGroupName")
  valid_570164 = validateParameter(valid_570164, JString, required = true,
                                 default = nil)
  if valid_570164 != nil:
    section.add "resourceGroupName", valid_570164
  var valid_570165 = path.getOrDefault("name")
  valid_570165 = validateParameter(valid_570165, JString, required = true,
                                 default = nil)
  if valid_570165 != nil:
    section.add "name", valid_570165
  var valid_570166 = path.getOrDefault("subscriptionId")
  valid_570166 = validateParameter(valid_570166, JString, required = true,
                                 default = nil)
  if valid_570166 != nil:
    section.add "subscriptionId", valid_570166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570167 = query.getOrDefault("api-version")
  valid_570167 = validateParameter(valid_570167, JString, required = true,
                                 default = nil)
  if valid_570167 != nil:
    section.add "api-version", valid_570167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570168: Call_SitesListSiteRelayServiceConnections_570161;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570168.validator(path, query, header, formData, body)
  let scheme = call_570168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570168.url(scheme.get, call_570168.host, call_570168.base,
                         call_570168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570168, url, valid)

proc call*(call_570169: Call_SitesListSiteRelayServiceConnections_570161;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteRelayServiceConnections
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570170 = newJObject()
  var query_570171 = newJObject()
  add(path_570170, "resourceGroupName", newJString(resourceGroupName))
  add(query_570171, "api-version", newJString(apiVersion))
  add(path_570170, "name", newJString(name))
  add(path_570170, "subscriptionId", newJString(subscriptionId))
  result = call_570169.call(path_570170, query_570171, nil, nil, nil)

var sitesListSiteRelayServiceConnections* = Call_SitesListSiteRelayServiceConnections_570161(
    name: "sitesListSiteRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnections_570162, base: "",
    url: url_SitesListSiteRelayServiceConnections_570163, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnection_570184 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteRelayServiceConnection_570186(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnection_570185(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570187 = path.getOrDefault("resourceGroupName")
  valid_570187 = validateParameter(valid_570187, JString, required = true,
                                 default = nil)
  if valid_570187 != nil:
    section.add "resourceGroupName", valid_570187
  var valid_570188 = path.getOrDefault("name")
  valid_570188 = validateParameter(valid_570188, JString, required = true,
                                 default = nil)
  if valid_570188 != nil:
    section.add "name", valid_570188
  var valid_570189 = path.getOrDefault("subscriptionId")
  valid_570189 = validateParameter(valid_570189, JString, required = true,
                                 default = nil)
  if valid_570189 != nil:
    section.add "subscriptionId", valid_570189
  var valid_570190 = path.getOrDefault("entityName")
  valid_570190 = validateParameter(valid_570190, JString, required = true,
                                 default = nil)
  if valid_570190 != nil:
    section.add "entityName", valid_570190
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570191 = query.getOrDefault("api-version")
  valid_570191 = validateParameter(valid_570191, JString, required = true,
                                 default = nil)
  if valid_570191 != nil:
    section.add "api-version", valid_570191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570193: Call_SitesCreateOrUpdateSiteRelayServiceConnection_570184;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570193.validator(path, query, header, formData, body)
  let scheme = call_570193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570193.url(scheme.get, call_570193.host, call_570193.base,
                         call_570193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570193, url, valid)

proc call*(call_570194: Call_SitesCreateOrUpdateSiteRelayServiceConnection_570184;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570195 = newJObject()
  var query_570196 = newJObject()
  var body_570197 = newJObject()
  add(path_570195, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570197 = connectionEnvelope
  add(path_570195, "name", newJString(name))
  add(query_570196, "api-version", newJString(apiVersion))
  add(path_570195, "subscriptionId", newJString(subscriptionId))
  add(path_570195, "entityName", newJString(entityName))
  result = call_570194.call(path_570195, query_570196, nil, nil, body_570197)

var sitesCreateOrUpdateSiteRelayServiceConnection* = Call_SitesCreateOrUpdateSiteRelayServiceConnection_570184(
    name: "sitesCreateOrUpdateSiteRelayServiceConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnection_570185,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnection_570186,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnection_570172 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteRelayServiceConnection_570174(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnection_570173(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570175 = path.getOrDefault("resourceGroupName")
  valid_570175 = validateParameter(valid_570175, JString, required = true,
                                 default = nil)
  if valid_570175 != nil:
    section.add "resourceGroupName", valid_570175
  var valid_570176 = path.getOrDefault("name")
  valid_570176 = validateParameter(valid_570176, JString, required = true,
                                 default = nil)
  if valid_570176 != nil:
    section.add "name", valid_570176
  var valid_570177 = path.getOrDefault("subscriptionId")
  valid_570177 = validateParameter(valid_570177, JString, required = true,
                                 default = nil)
  if valid_570177 != nil:
    section.add "subscriptionId", valid_570177
  var valid_570178 = path.getOrDefault("entityName")
  valid_570178 = validateParameter(valid_570178, JString, required = true,
                                 default = nil)
  if valid_570178 != nil:
    section.add "entityName", valid_570178
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570179 = query.getOrDefault("api-version")
  valid_570179 = validateParameter(valid_570179, JString, required = true,
                                 default = nil)
  if valid_570179 != nil:
    section.add "api-version", valid_570179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570180: Call_SitesGetSiteRelayServiceConnection_570172;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570180.validator(path, query, header, formData, body)
  let scheme = call_570180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570180.url(scheme.get, call_570180.host, call_570180.base,
                         call_570180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570180, url, valid)

proc call*(call_570181: Call_SitesGetSiteRelayServiceConnection_570172;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570182 = newJObject()
  var query_570183 = newJObject()
  add(path_570182, "resourceGroupName", newJString(resourceGroupName))
  add(query_570183, "api-version", newJString(apiVersion))
  add(path_570182, "name", newJString(name))
  add(path_570182, "subscriptionId", newJString(subscriptionId))
  add(path_570182, "entityName", newJString(entityName))
  result = call_570181.call(path_570182, query_570183, nil, nil, nil)

var sitesGetSiteRelayServiceConnection* = Call_SitesGetSiteRelayServiceConnection_570172(
    name: "sitesGetSiteRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnection_570173, base: "",
    url: url_SitesGetSiteRelayServiceConnection_570174, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnection_570210 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteRelayServiceConnection_570212(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnection_570211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570213 = path.getOrDefault("resourceGroupName")
  valid_570213 = validateParameter(valid_570213, JString, required = true,
                                 default = nil)
  if valid_570213 != nil:
    section.add "resourceGroupName", valid_570213
  var valid_570214 = path.getOrDefault("name")
  valid_570214 = validateParameter(valid_570214, JString, required = true,
                                 default = nil)
  if valid_570214 != nil:
    section.add "name", valid_570214
  var valid_570215 = path.getOrDefault("subscriptionId")
  valid_570215 = validateParameter(valid_570215, JString, required = true,
                                 default = nil)
  if valid_570215 != nil:
    section.add "subscriptionId", valid_570215
  var valid_570216 = path.getOrDefault("entityName")
  valid_570216 = validateParameter(valid_570216, JString, required = true,
                                 default = nil)
  if valid_570216 != nil:
    section.add "entityName", valid_570216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570217 = query.getOrDefault("api-version")
  valid_570217 = validateParameter(valid_570217, JString, required = true,
                                 default = nil)
  if valid_570217 != nil:
    section.add "api-version", valid_570217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570219: Call_SitesUpdateSiteRelayServiceConnection_570210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570219.validator(path, query, header, formData, body)
  let scheme = call_570219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570219.url(scheme.get, call_570219.host, call_570219.base,
                         call_570219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570219, url, valid)

proc call*(call_570220: Call_SitesUpdateSiteRelayServiceConnection_570210;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570221 = newJObject()
  var query_570222 = newJObject()
  var body_570223 = newJObject()
  add(path_570221, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570223 = connectionEnvelope
  add(path_570221, "name", newJString(name))
  add(query_570222, "api-version", newJString(apiVersion))
  add(path_570221, "subscriptionId", newJString(subscriptionId))
  add(path_570221, "entityName", newJString(entityName))
  result = call_570220.call(path_570221, query_570222, nil, nil, body_570223)

var sitesUpdateSiteRelayServiceConnection* = Call_SitesUpdateSiteRelayServiceConnection_570210(
    name: "sitesUpdateSiteRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnection_570211, base: "",
    url: url_SitesUpdateSiteRelayServiceConnection_570212, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnection_570198 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteRelayServiceConnection_570200(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnection_570199(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570201 = path.getOrDefault("resourceGroupName")
  valid_570201 = validateParameter(valid_570201, JString, required = true,
                                 default = nil)
  if valid_570201 != nil:
    section.add "resourceGroupName", valid_570201
  var valid_570202 = path.getOrDefault("name")
  valid_570202 = validateParameter(valid_570202, JString, required = true,
                                 default = nil)
  if valid_570202 != nil:
    section.add "name", valid_570202
  var valid_570203 = path.getOrDefault("subscriptionId")
  valid_570203 = validateParameter(valid_570203, JString, required = true,
                                 default = nil)
  if valid_570203 != nil:
    section.add "subscriptionId", valid_570203
  var valid_570204 = path.getOrDefault("entityName")
  valid_570204 = validateParameter(valid_570204, JString, required = true,
                                 default = nil)
  if valid_570204 != nil:
    section.add "entityName", valid_570204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570205 = query.getOrDefault("api-version")
  valid_570205 = validateParameter(valid_570205, JString, required = true,
                                 default = nil)
  if valid_570205 != nil:
    section.add "api-version", valid_570205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570206: Call_SitesDeleteSiteRelayServiceConnection_570198;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570206.validator(path, query, header, formData, body)
  let scheme = call_570206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570206.url(scheme.get, call_570206.host, call_570206.base,
                         call_570206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570206, url, valid)

proc call*(call_570207: Call_SitesDeleteSiteRelayServiceConnection_570198;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570208 = newJObject()
  var query_570209 = newJObject()
  add(path_570208, "resourceGroupName", newJString(resourceGroupName))
  add(query_570209, "api-version", newJString(apiVersion))
  add(path_570208, "name", newJString(name))
  add(path_570208, "subscriptionId", newJString(subscriptionId))
  add(path_570208, "entityName", newJString(entityName))
  result = call_570207.call(path_570208, query_570209, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnection* = Call_SitesDeleteSiteRelayServiceConnection_570198(
    name: "sitesDeleteSiteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnection_570199, base: "",
    url: url_SitesDeleteSiteRelayServiceConnection_570200, schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiers_570224 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteInstanceIdentifiers_570226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiers_570225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570227 = path.getOrDefault("resourceGroupName")
  valid_570227 = validateParameter(valid_570227, JString, required = true,
                                 default = nil)
  if valid_570227 != nil:
    section.add "resourceGroupName", valid_570227
  var valid_570228 = path.getOrDefault("name")
  valid_570228 = validateParameter(valid_570228, JString, required = true,
                                 default = nil)
  if valid_570228 != nil:
    section.add "name", valid_570228
  var valid_570229 = path.getOrDefault("subscriptionId")
  valid_570229 = validateParameter(valid_570229, JString, required = true,
                                 default = nil)
  if valid_570229 != nil:
    section.add "subscriptionId", valid_570229
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570230 = query.getOrDefault("api-version")
  valid_570230 = validateParameter(valid_570230, JString, required = true,
                                 default = nil)
  if valid_570230 != nil:
    section.add "api-version", valid_570230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570231: Call_SitesGetSiteInstanceIdentifiers_570224;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570231.validator(path, query, header, formData, body)
  let scheme = call_570231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570231.url(scheme.get, call_570231.host, call_570231.base,
                         call_570231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570231, url, valid)

proc call*(call_570232: Call_SitesGetSiteInstanceIdentifiers_570224;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteInstanceIdentifiers
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570233 = newJObject()
  var query_570234 = newJObject()
  add(path_570233, "resourceGroupName", newJString(resourceGroupName))
  add(query_570234, "api-version", newJString(apiVersion))
  add(path_570233, "name", newJString(name))
  add(path_570233, "subscriptionId", newJString(subscriptionId))
  result = call_570232.call(path_570233, query_570234, nil, nil, nil)

var sitesGetSiteInstanceIdentifiers* = Call_SitesGetSiteInstanceIdentifiers_570224(
    name: "sitesGetSiteInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiers_570225, base: "",
    url: url_SitesGetSiteInstanceIdentifiers_570226, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployments_570235 = ref object of OpenApiRestCall_567650
proc url_SitesGetInstanceDeployments_570237(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployments_570236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570238 = path.getOrDefault("resourceGroupName")
  valid_570238 = validateParameter(valid_570238, JString, required = true,
                                 default = nil)
  if valid_570238 != nil:
    section.add "resourceGroupName", valid_570238
  var valid_570239 = path.getOrDefault("name")
  valid_570239 = validateParameter(valid_570239, JString, required = true,
                                 default = nil)
  if valid_570239 != nil:
    section.add "name", valid_570239
  var valid_570240 = path.getOrDefault("subscriptionId")
  valid_570240 = validateParameter(valid_570240, JString, required = true,
                                 default = nil)
  if valid_570240 != nil:
    section.add "subscriptionId", valid_570240
  var valid_570241 = path.getOrDefault("instanceId")
  valid_570241 = validateParameter(valid_570241, JString, required = true,
                                 default = nil)
  if valid_570241 != nil:
    section.add "instanceId", valid_570241
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570242 = query.getOrDefault("api-version")
  valid_570242 = validateParameter(valid_570242, JString, required = true,
                                 default = nil)
  if valid_570242 != nil:
    section.add "api-version", valid_570242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570243: Call_SitesGetInstanceDeployments_570235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570243.validator(path, query, header, formData, body)
  let scheme = call_570243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570243.url(scheme.get, call_570243.host, call_570243.base,
                         call_570243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570243, url, valid)

proc call*(call_570244: Call_SitesGetInstanceDeployments_570235;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeployments
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_570245 = newJObject()
  var query_570246 = newJObject()
  add(path_570245, "resourceGroupName", newJString(resourceGroupName))
  add(query_570246, "api-version", newJString(apiVersion))
  add(path_570245, "name", newJString(name))
  add(path_570245, "subscriptionId", newJString(subscriptionId))
  add(path_570245, "instanceId", newJString(instanceId))
  result = call_570244.call(path_570245, query_570246, nil, nil, nil)

var sitesGetInstanceDeployments* = Call_SitesGetInstanceDeployments_570235(
    name: "sitesGetInstanceDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeployments_570236, base: "",
    url: url_SitesGetInstanceDeployments_570237, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeployment_570260 = ref object of OpenApiRestCall_567650
proc url_SitesCreateInstanceDeployment_570262(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeployment_570261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570263 = path.getOrDefault("resourceGroupName")
  valid_570263 = validateParameter(valid_570263, JString, required = true,
                                 default = nil)
  if valid_570263 != nil:
    section.add "resourceGroupName", valid_570263
  var valid_570264 = path.getOrDefault("name")
  valid_570264 = validateParameter(valid_570264, JString, required = true,
                                 default = nil)
  if valid_570264 != nil:
    section.add "name", valid_570264
  var valid_570265 = path.getOrDefault("subscriptionId")
  valid_570265 = validateParameter(valid_570265, JString, required = true,
                                 default = nil)
  if valid_570265 != nil:
    section.add "subscriptionId", valid_570265
  var valid_570266 = path.getOrDefault("instanceId")
  valid_570266 = validateParameter(valid_570266, JString, required = true,
                                 default = nil)
  if valid_570266 != nil:
    section.add "instanceId", valid_570266
  var valid_570267 = path.getOrDefault("id")
  valid_570267 = validateParameter(valid_570267, JString, required = true,
                                 default = nil)
  if valid_570267 != nil:
    section.add "id", valid_570267
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570268 = query.getOrDefault("api-version")
  valid_570268 = validateParameter(valid_570268, JString, required = true,
                                 default = nil)
  if valid_570268 != nil:
    section.add "api-version", valid_570268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570270: Call_SitesCreateInstanceDeployment_570260; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570270.validator(path, query, header, formData, body)
  let scheme = call_570270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570270.url(scheme.get, call_570270.host, call_570270.base,
                         call_570270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570270, url, valid)

proc call*(call_570271: Call_SitesCreateInstanceDeployment_570260;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_570272 = newJObject()
  var query_570273 = newJObject()
  var body_570274 = newJObject()
  add(path_570272, "resourceGroupName", newJString(resourceGroupName))
  add(query_570273, "api-version", newJString(apiVersion))
  add(path_570272, "name", newJString(name))
  add(path_570272, "subscriptionId", newJString(subscriptionId))
  add(path_570272, "instanceId", newJString(instanceId))
  add(path_570272, "id", newJString(id))
  if deployment != nil:
    body_570274 = deployment
  result = call_570271.call(path_570272, query_570273, nil, nil, body_570274)

var sitesCreateInstanceDeployment* = Call_SitesCreateInstanceDeployment_570260(
    name: "sitesCreateInstanceDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeployment_570261, base: "",
    url: url_SitesCreateInstanceDeployment_570262, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployment_570247 = ref object of OpenApiRestCall_567650
proc url_SitesGetInstanceDeployment_570249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployment_570248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570250 = path.getOrDefault("resourceGroupName")
  valid_570250 = validateParameter(valid_570250, JString, required = true,
                                 default = nil)
  if valid_570250 != nil:
    section.add "resourceGroupName", valid_570250
  var valid_570251 = path.getOrDefault("name")
  valid_570251 = validateParameter(valid_570251, JString, required = true,
                                 default = nil)
  if valid_570251 != nil:
    section.add "name", valid_570251
  var valid_570252 = path.getOrDefault("subscriptionId")
  valid_570252 = validateParameter(valid_570252, JString, required = true,
                                 default = nil)
  if valid_570252 != nil:
    section.add "subscriptionId", valid_570252
  var valid_570253 = path.getOrDefault("instanceId")
  valid_570253 = validateParameter(valid_570253, JString, required = true,
                                 default = nil)
  if valid_570253 != nil:
    section.add "instanceId", valid_570253
  var valid_570254 = path.getOrDefault("id")
  valid_570254 = validateParameter(valid_570254, JString, required = true,
                                 default = nil)
  if valid_570254 != nil:
    section.add "id", valid_570254
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570255 = query.getOrDefault("api-version")
  valid_570255 = validateParameter(valid_570255, JString, required = true,
                                 default = nil)
  if valid_570255 != nil:
    section.add "api-version", valid_570255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570256: Call_SitesGetInstanceDeployment_570247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570256.validator(path, query, header, formData, body)
  let scheme = call_570256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570256.url(scheme.get, call_570256.host, call_570256.base,
                         call_570256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570256, url, valid)

proc call*(call_570257: Call_SitesGetInstanceDeployment_570247;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesGetInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570258 = newJObject()
  var query_570259 = newJObject()
  add(path_570258, "resourceGroupName", newJString(resourceGroupName))
  add(query_570259, "api-version", newJString(apiVersion))
  add(path_570258, "name", newJString(name))
  add(path_570258, "subscriptionId", newJString(subscriptionId))
  add(path_570258, "instanceId", newJString(instanceId))
  add(path_570258, "id", newJString(id))
  result = call_570257.call(path_570258, query_570259, nil, nil, nil)

var sitesGetInstanceDeployment* = Call_SitesGetInstanceDeployment_570247(
    name: "sitesGetInstanceDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeployment_570248, base: "",
    url: url_SitesGetInstanceDeployment_570249, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeployment_570275 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteInstanceDeployment_570277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeployment_570276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570278 = path.getOrDefault("resourceGroupName")
  valid_570278 = validateParameter(valid_570278, JString, required = true,
                                 default = nil)
  if valid_570278 != nil:
    section.add "resourceGroupName", valid_570278
  var valid_570279 = path.getOrDefault("name")
  valid_570279 = validateParameter(valid_570279, JString, required = true,
                                 default = nil)
  if valid_570279 != nil:
    section.add "name", valid_570279
  var valid_570280 = path.getOrDefault("subscriptionId")
  valid_570280 = validateParameter(valid_570280, JString, required = true,
                                 default = nil)
  if valid_570280 != nil:
    section.add "subscriptionId", valid_570280
  var valid_570281 = path.getOrDefault("instanceId")
  valid_570281 = validateParameter(valid_570281, JString, required = true,
                                 default = nil)
  if valid_570281 != nil:
    section.add "instanceId", valid_570281
  var valid_570282 = path.getOrDefault("id")
  valid_570282 = validateParameter(valid_570282, JString, required = true,
                                 default = nil)
  if valid_570282 != nil:
    section.add "id", valid_570282
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570283 = query.getOrDefault("api-version")
  valid_570283 = validateParameter(valid_570283, JString, required = true,
                                 default = nil)
  if valid_570283 != nil:
    section.add "api-version", valid_570283
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570284: Call_SitesDeleteInstanceDeployment_570275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570284.validator(path, query, header, formData, body)
  let scheme = call_570284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570284.url(scheme.get, call_570284.host, call_570284.base,
                         call_570284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570284, url, valid)

proc call*(call_570285: Call_SitesDeleteInstanceDeployment_570275;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesDeleteInstanceDeployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570286 = newJObject()
  var query_570287 = newJObject()
  add(path_570286, "resourceGroupName", newJString(resourceGroupName))
  add(query_570287, "api-version", newJString(apiVersion))
  add(path_570286, "name", newJString(name))
  add(path_570286, "subscriptionId", newJString(subscriptionId))
  add(path_570286, "instanceId", newJString(instanceId))
  add(path_570286, "id", newJString(id))
  result = call_570285.call(path_570286, query_570287, nil, nil, nil)

var sitesDeleteInstanceDeployment* = Call_SitesDeleteInstanceDeployment_570275(
    name: "sitesDeleteInstanceDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeployment_570276, base: "",
    url: url_SitesDeleteInstanceDeployment_570277, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneable_570288 = ref object of OpenApiRestCall_567650
proc url_SitesIsSiteCloneable_570290(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneable_570289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570291 = path.getOrDefault("resourceGroupName")
  valid_570291 = validateParameter(valid_570291, JString, required = true,
                                 default = nil)
  if valid_570291 != nil:
    section.add "resourceGroupName", valid_570291
  var valid_570292 = path.getOrDefault("name")
  valid_570292 = validateParameter(valid_570292, JString, required = true,
                                 default = nil)
  if valid_570292 != nil:
    section.add "name", valid_570292
  var valid_570293 = path.getOrDefault("subscriptionId")
  valid_570293 = validateParameter(valid_570293, JString, required = true,
                                 default = nil)
  if valid_570293 != nil:
    section.add "subscriptionId", valid_570293
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570294 = query.getOrDefault("api-version")
  valid_570294 = validateParameter(valid_570294, JString, required = true,
                                 default = nil)
  if valid_570294 != nil:
    section.add "api-version", valid_570294
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570295: Call_SitesIsSiteCloneable_570288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570295.validator(path, query, header, formData, body)
  let scheme = call_570295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570295.url(scheme.get, call_570295.host, call_570295.base,
                         call_570295.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570295, url, valid)

proc call*(call_570296: Call_SitesIsSiteCloneable_570288;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesIsSiteCloneable
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570297 = newJObject()
  var query_570298 = newJObject()
  add(path_570297, "resourceGroupName", newJString(resourceGroupName))
  add(query_570298, "api-version", newJString(apiVersion))
  add(path_570297, "name", newJString(name))
  add(path_570297, "subscriptionId", newJString(subscriptionId))
  result = call_570296.call(path_570297, query_570298, nil, nil, nil)

var sitesIsSiteCloneable* = Call_SitesIsSiteCloneable_570288(
    name: "sitesIsSiteCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_SitesIsSiteCloneable_570289, base: "",
    url: url_SitesIsSiteCloneable_570290, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitions_570299 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteMetricDefinitions_570301(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitions_570300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570302 = path.getOrDefault("resourceGroupName")
  valid_570302 = validateParameter(valid_570302, JString, required = true,
                                 default = nil)
  if valid_570302 != nil:
    section.add "resourceGroupName", valid_570302
  var valid_570303 = path.getOrDefault("name")
  valid_570303 = validateParameter(valid_570303, JString, required = true,
                                 default = nil)
  if valid_570303 != nil:
    section.add "name", valid_570303
  var valid_570304 = path.getOrDefault("subscriptionId")
  valid_570304 = validateParameter(valid_570304, JString, required = true,
                                 default = nil)
  if valid_570304 != nil:
    section.add "subscriptionId", valid_570304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570305 = query.getOrDefault("api-version")
  valid_570305 = validateParameter(valid_570305, JString, required = true,
                                 default = nil)
  if valid_570305 != nil:
    section.add "api-version", valid_570305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570306: Call_SitesGetSiteMetricDefinitions_570299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570306.validator(path, query, header, formData, body)
  let scheme = call_570306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570306.url(scheme.get, call_570306.host, call_570306.base,
                         call_570306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570306, url, valid)

proc call*(call_570307: Call_SitesGetSiteMetricDefinitions_570299;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteMetricDefinitions
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570308 = newJObject()
  var query_570309 = newJObject()
  add(path_570308, "resourceGroupName", newJString(resourceGroupName))
  add(query_570309, "api-version", newJString(apiVersion))
  add(path_570308, "name", newJString(name))
  add(path_570308, "subscriptionId", newJString(subscriptionId))
  result = call_570307.call(path_570308, query_570309, nil, nil, nil)

var sitesGetSiteMetricDefinitions* = Call_SitesGetSiteMetricDefinitions_570299(
    name: "sitesGetSiteMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitions_570300, base: "",
    url: url_SitesGetSiteMetricDefinitions_570301, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetrics_570310 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteMetrics_570312(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetrics_570311(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570313 = path.getOrDefault("resourceGroupName")
  valid_570313 = validateParameter(valid_570313, JString, required = true,
                                 default = nil)
  if valid_570313 != nil:
    section.add "resourceGroupName", valid_570313
  var valid_570314 = path.getOrDefault("name")
  valid_570314 = validateParameter(valid_570314, JString, required = true,
                                 default = nil)
  if valid_570314 != nil:
    section.add "name", valid_570314
  var valid_570315 = path.getOrDefault("subscriptionId")
  valid_570315 = validateParameter(valid_570315, JString, required = true,
                                 default = nil)
  if valid_570315 != nil:
    section.add "subscriptionId", valid_570315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570316 = query.getOrDefault("api-version")
  valid_570316 = validateParameter(valid_570316, JString, required = true,
                                 default = nil)
  if valid_570316 != nil:
    section.add "api-version", valid_570316
  var valid_570317 = query.getOrDefault("details")
  valid_570317 = validateParameter(valid_570317, JBool, required = false, default = nil)
  if valid_570317 != nil:
    section.add "details", valid_570317
  var valid_570318 = query.getOrDefault("$filter")
  valid_570318 = validateParameter(valid_570318, JString, required = false,
                                 default = nil)
  if valid_570318 != nil:
    section.add "$filter", valid_570318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570319: Call_SitesGetSiteMetrics_570310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570319.validator(path, query, header, formData, body)
  let scheme = call_570319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570319.url(scheme.get, call_570319.host, call_570319.base,
                         call_570319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570319, url, valid)

proc call*(call_570320: Call_SitesGetSiteMetrics_570310; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetrics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_570321 = newJObject()
  var query_570322 = newJObject()
  add(path_570321, "resourceGroupName", newJString(resourceGroupName))
  add(query_570322, "api-version", newJString(apiVersion))
  add(path_570321, "name", newJString(name))
  add(query_570322, "details", newJBool(details))
  add(path_570321, "subscriptionId", newJString(subscriptionId))
  add(query_570322, "$filter", newJString(Filter))
  result = call_570320.call(path_570321, query_570322, nil, nil, nil)

var sitesGetSiteMetrics* = Call_SitesGetSiteMetrics_570310(
    name: "sitesGetSiteMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_SitesGetSiteMetrics_570311, base: "",
    url: url_SitesGetSiteMetrics_570312, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeatures_570323 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteNetworkFeatures_570325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeatures_570324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570326 = path.getOrDefault("resourceGroupName")
  valid_570326 = validateParameter(valid_570326, JString, required = true,
                                 default = nil)
  if valid_570326 != nil:
    section.add "resourceGroupName", valid_570326
  var valid_570327 = path.getOrDefault("name")
  valid_570327 = validateParameter(valid_570327, JString, required = true,
                                 default = nil)
  if valid_570327 != nil:
    section.add "name", valid_570327
  var valid_570328 = path.getOrDefault("subscriptionId")
  valid_570328 = validateParameter(valid_570328, JString, required = true,
                                 default = nil)
  if valid_570328 != nil:
    section.add "subscriptionId", valid_570328
  var valid_570329 = path.getOrDefault("view")
  valid_570329 = validateParameter(valid_570329, JString, required = true,
                                 default = nil)
  if valid_570329 != nil:
    section.add "view", valid_570329
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570330 = query.getOrDefault("api-version")
  valid_570330 = validateParameter(valid_570330, JString, required = true,
                                 default = nil)
  if valid_570330 != nil:
    section.add "api-version", valid_570330
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570331: Call_SitesGetSiteNetworkFeatures_570323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570331.validator(path, query, header, formData, body)
  let scheme = call_570331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570331.url(scheme.get, call_570331.host, call_570331.base,
                         call_570331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570331, url, valid)

proc call*(call_570332: Call_SitesGetSiteNetworkFeatures_570323;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## sitesGetSiteNetworkFeatures
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_570333 = newJObject()
  var query_570334 = newJObject()
  add(path_570333, "resourceGroupName", newJString(resourceGroupName))
  add(query_570334, "api-version", newJString(apiVersion))
  add(path_570333, "name", newJString(name))
  add(path_570333, "subscriptionId", newJString(subscriptionId))
  add(path_570333, "view", newJString(view))
  result = call_570332.call(path_570333, query_570334, nil, nil, nil)

var sitesGetSiteNetworkFeatures* = Call_SitesGetSiteNetworkFeatures_570323(
    name: "sitesGetSiteNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeatures_570324, base: "",
    url: url_SitesGetSiteNetworkFeatures_570325, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPassword_570335 = ref object of OpenApiRestCall_567650
proc url_SitesGenerateNewSitePublishingPassword_570337(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPassword_570336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570338 = path.getOrDefault("resourceGroupName")
  valid_570338 = validateParameter(valid_570338, JString, required = true,
                                 default = nil)
  if valid_570338 != nil:
    section.add "resourceGroupName", valid_570338
  var valid_570339 = path.getOrDefault("name")
  valid_570339 = validateParameter(valid_570339, JString, required = true,
                                 default = nil)
  if valid_570339 != nil:
    section.add "name", valid_570339
  var valid_570340 = path.getOrDefault("subscriptionId")
  valid_570340 = validateParameter(valid_570340, JString, required = true,
                                 default = nil)
  if valid_570340 != nil:
    section.add "subscriptionId", valid_570340
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570341 = query.getOrDefault("api-version")
  valid_570341 = validateParameter(valid_570341, JString, required = true,
                                 default = nil)
  if valid_570341 != nil:
    section.add "api-version", valid_570341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570342: Call_SitesGenerateNewSitePublishingPassword_570335;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570342.validator(path, query, header, formData, body)
  let scheme = call_570342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570342.url(scheme.get, call_570342.host, call_570342.base,
                         call_570342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570342, url, valid)

proc call*(call_570343: Call_SitesGenerateNewSitePublishingPassword_570335;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGenerateNewSitePublishingPassword
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570344 = newJObject()
  var query_570345 = newJObject()
  add(path_570344, "resourceGroupName", newJString(resourceGroupName))
  add(query_570345, "api-version", newJString(apiVersion))
  add(path_570344, "name", newJString(name))
  add(path_570344, "subscriptionId", newJString(subscriptionId))
  result = call_570343.call(path_570344, query_570345, nil, nil, nil)

var sitesGenerateNewSitePublishingPassword* = Call_SitesGenerateNewSitePublishingPassword_570335(
    name: "sitesGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPassword_570336, base: "",
    url: url_SitesGenerateNewSitePublishingPassword_570337,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperation_570346 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteOperation_570348(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperation_570347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of an operation
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570349 = path.getOrDefault("resourceGroupName")
  valid_570349 = validateParameter(valid_570349, JString, required = true,
                                 default = nil)
  if valid_570349 != nil:
    section.add "resourceGroupName", valid_570349
  var valid_570350 = path.getOrDefault("name")
  valid_570350 = validateParameter(valid_570350, JString, required = true,
                                 default = nil)
  if valid_570350 != nil:
    section.add "name", valid_570350
  var valid_570351 = path.getOrDefault("subscriptionId")
  valid_570351 = validateParameter(valid_570351, JString, required = true,
                                 default = nil)
  if valid_570351 != nil:
    section.add "subscriptionId", valid_570351
  var valid_570352 = path.getOrDefault("operationId")
  valid_570352 = validateParameter(valid_570352, JString, required = true,
                                 default = nil)
  if valid_570352 != nil:
    section.add "operationId", valid_570352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570353 = query.getOrDefault("api-version")
  valid_570353 = validateParameter(valid_570353, JString, required = true,
                                 default = nil)
  if valid_570353 != nil:
    section.add "api-version", valid_570353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570354: Call_SitesGetSiteOperation_570346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570354.validator(path, query, header, formData, body)
  let scheme = call_570354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570354.url(scheme.get, call_570354.host, call_570354.base,
                         call_570354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570354, url, valid)

proc call*(call_570355: Call_SitesGetSiteOperation_570346;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## sitesGetSiteOperation
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of an operation
  var path_570356 = newJObject()
  var query_570357 = newJObject()
  add(path_570356, "resourceGroupName", newJString(resourceGroupName))
  add(query_570357, "api-version", newJString(apiVersion))
  add(path_570356, "name", newJString(name))
  add(path_570356, "subscriptionId", newJString(subscriptionId))
  add(path_570356, "operationId", newJString(operationId))
  result = call_570355.call(path_570356, query_570357, nil, nil, nil)

var sitesGetSiteOperation* = Call_SitesGetSiteOperation_570346(
    name: "sitesGetSiteOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperation_570347, base: "",
    url: url_SitesGetSiteOperation_570348, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOns_570358 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePremierAddOns_570360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOns_570359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570361 = path.getOrDefault("resourceGroupName")
  valid_570361 = validateParameter(valid_570361, JString, required = true,
                                 default = nil)
  if valid_570361 != nil:
    section.add "resourceGroupName", valid_570361
  var valid_570362 = path.getOrDefault("name")
  valid_570362 = validateParameter(valid_570362, JString, required = true,
                                 default = nil)
  if valid_570362 != nil:
    section.add "name", valid_570362
  var valid_570363 = path.getOrDefault("subscriptionId")
  valid_570363 = validateParameter(valid_570363, JString, required = true,
                                 default = nil)
  if valid_570363 != nil:
    section.add "subscriptionId", valid_570363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570364 = query.getOrDefault("api-version")
  valid_570364 = validateParameter(valid_570364, JString, required = true,
                                 default = nil)
  if valid_570364 != nil:
    section.add "api-version", valid_570364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570365: Call_SitesListSitePremierAddOns_570358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570365.validator(path, query, header, formData, body)
  let scheme = call_570365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570365.url(scheme.get, call_570365.host, call_570365.base,
                         call_570365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570365, url, valid)

proc call*(call_570366: Call_SitesListSitePremierAddOns_570358;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePremierAddOns
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570367 = newJObject()
  var query_570368 = newJObject()
  add(path_570367, "resourceGroupName", newJString(resourceGroupName))
  add(query_570368, "api-version", newJString(apiVersion))
  add(path_570367, "name", newJString(name))
  add(path_570367, "subscriptionId", newJString(subscriptionId))
  result = call_570366.call(path_570367, query_570368, nil, nil, nil)

var sitesListSitePremierAddOns* = Call_SitesListSitePremierAddOns_570358(
    name: "sitesListSitePremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_SitesListSitePremierAddOns_570359, base: "",
    url: url_SitesListSitePremierAddOns_570360, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOn_570381 = ref object of OpenApiRestCall_567650
proc url_SitesAddSitePremierAddOn_570383(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOn_570382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570384 = path.getOrDefault("resourceGroupName")
  valid_570384 = validateParameter(valid_570384, JString, required = true,
                                 default = nil)
  if valid_570384 != nil:
    section.add "resourceGroupName", valid_570384
  var valid_570385 = path.getOrDefault("name")
  valid_570385 = validateParameter(valid_570385, JString, required = true,
                                 default = nil)
  if valid_570385 != nil:
    section.add "name", valid_570385
  var valid_570386 = path.getOrDefault("subscriptionId")
  valid_570386 = validateParameter(valid_570386, JString, required = true,
                                 default = nil)
  if valid_570386 != nil:
    section.add "subscriptionId", valid_570386
  var valid_570387 = path.getOrDefault("premierAddOnName")
  valid_570387 = validateParameter(valid_570387, JString, required = true,
                                 default = nil)
  if valid_570387 != nil:
    section.add "premierAddOnName", valid_570387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570388 = query.getOrDefault("api-version")
  valid_570388 = validateParameter(valid_570388, JString, required = true,
                                 default = nil)
  if valid_570388 != nil:
    section.add "api-version", valid_570388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570390: Call_SitesAddSitePremierAddOn_570381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570390.validator(path, query, header, formData, body)
  let scheme = call_570390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570390.url(scheme.get, call_570390.host, call_570390.base,
                         call_570390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570390, url, valid)

proc call*(call_570391: Call_SitesAddSitePremierAddOn_570381;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesAddSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   premierAddOn: JObject (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_570392 = newJObject()
  var query_570393 = newJObject()
  var body_570394 = newJObject()
  add(path_570392, "resourceGroupName", newJString(resourceGroupName))
  add(query_570393, "api-version", newJString(apiVersion))
  add(path_570392, "name", newJString(name))
  if premierAddOn != nil:
    body_570394 = premierAddOn
  add(path_570392, "subscriptionId", newJString(subscriptionId))
  add(path_570392, "premierAddOnName", newJString(premierAddOnName))
  result = call_570391.call(path_570392, query_570393, nil, nil, body_570394)

var sitesAddSitePremierAddOn* = Call_SitesAddSitePremierAddOn_570381(
    name: "sitesAddSitePremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOn_570382, base: "",
    url: url_SitesAddSitePremierAddOn_570383, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOn_570369 = ref object of OpenApiRestCall_567650
proc url_SitesGetSitePremierAddOn_570371(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOn_570370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570372 = path.getOrDefault("resourceGroupName")
  valid_570372 = validateParameter(valid_570372, JString, required = true,
                                 default = nil)
  if valid_570372 != nil:
    section.add "resourceGroupName", valid_570372
  var valid_570373 = path.getOrDefault("name")
  valid_570373 = validateParameter(valid_570373, JString, required = true,
                                 default = nil)
  if valid_570373 != nil:
    section.add "name", valid_570373
  var valid_570374 = path.getOrDefault("subscriptionId")
  valid_570374 = validateParameter(valid_570374, JString, required = true,
                                 default = nil)
  if valid_570374 != nil:
    section.add "subscriptionId", valid_570374
  var valid_570375 = path.getOrDefault("premierAddOnName")
  valid_570375 = validateParameter(valid_570375, JString, required = true,
                                 default = nil)
  if valid_570375 != nil:
    section.add "premierAddOnName", valid_570375
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570376 = query.getOrDefault("api-version")
  valid_570376 = validateParameter(valid_570376, JString, required = true,
                                 default = nil)
  if valid_570376 != nil:
    section.add "api-version", valid_570376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570377: Call_SitesGetSitePremierAddOn_570369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570377.validator(path, query, header, formData, body)
  let scheme = call_570377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570377.url(scheme.get, call_570377.host, call_570377.base,
                         call_570377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570377, url, valid)

proc call*(call_570378: Call_SitesGetSitePremierAddOn_570369;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesGetSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_570379 = newJObject()
  var query_570380 = newJObject()
  add(path_570379, "resourceGroupName", newJString(resourceGroupName))
  add(query_570380, "api-version", newJString(apiVersion))
  add(path_570379, "name", newJString(name))
  add(path_570379, "subscriptionId", newJString(subscriptionId))
  add(path_570379, "premierAddOnName", newJString(premierAddOnName))
  result = call_570378.call(path_570379, query_570380, nil, nil, nil)

var sitesGetSitePremierAddOn* = Call_SitesGetSitePremierAddOn_570369(
    name: "sitesGetSitePremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOn_570370, base: "",
    url: url_SitesGetSitePremierAddOn_570371, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOn_570395 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSitePremierAddOn_570397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOn_570396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570398 = path.getOrDefault("resourceGroupName")
  valid_570398 = validateParameter(valid_570398, JString, required = true,
                                 default = nil)
  if valid_570398 != nil:
    section.add "resourceGroupName", valid_570398
  var valid_570399 = path.getOrDefault("name")
  valid_570399 = validateParameter(valid_570399, JString, required = true,
                                 default = nil)
  if valid_570399 != nil:
    section.add "name", valid_570399
  var valid_570400 = path.getOrDefault("subscriptionId")
  valid_570400 = validateParameter(valid_570400, JString, required = true,
                                 default = nil)
  if valid_570400 != nil:
    section.add "subscriptionId", valid_570400
  var valid_570401 = path.getOrDefault("premierAddOnName")
  valid_570401 = validateParameter(valid_570401, JString, required = true,
                                 default = nil)
  if valid_570401 != nil:
    section.add "premierAddOnName", valid_570401
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570402 = query.getOrDefault("api-version")
  valid_570402 = validateParameter(valid_570402, JString, required = true,
                                 default = nil)
  if valid_570402 != nil:
    section.add "api-version", valid_570402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570403: Call_SitesDeleteSitePremierAddOn_570395; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570403.validator(path, query, header, formData, body)
  let scheme = call_570403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570403.url(scheme.get, call_570403.host, call_570403.base,
                         call_570403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570403, url, valid)

proc call*(call_570404: Call_SitesDeleteSitePremierAddOn_570395;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesDeleteSitePremierAddOn
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_570405 = newJObject()
  var query_570406 = newJObject()
  add(path_570405, "resourceGroupName", newJString(resourceGroupName))
  add(query_570406, "api-version", newJString(apiVersion))
  add(path_570405, "name", newJString(name))
  add(path_570405, "subscriptionId", newJString(subscriptionId))
  add(path_570405, "premierAddOnName", newJString(premierAddOnName))
  result = call_570404.call(path_570405, query_570406, nil, nil, nil)

var sitesDeleteSitePremierAddOn* = Call_SitesDeleteSitePremierAddOn_570395(
    name: "sitesDeleteSitePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOn_570396, base: "",
    url: url_SitesDeleteSitePremierAddOn_570397, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXml_570407 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePublishingProfileXml_570409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXml_570408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570410 = path.getOrDefault("resourceGroupName")
  valid_570410 = validateParameter(valid_570410, JString, required = true,
                                 default = nil)
  if valid_570410 != nil:
    section.add "resourceGroupName", valid_570410
  var valid_570411 = path.getOrDefault("name")
  valid_570411 = validateParameter(valid_570411, JString, required = true,
                                 default = nil)
  if valid_570411 != nil:
    section.add "name", valid_570411
  var valid_570412 = path.getOrDefault("subscriptionId")
  valid_570412 = validateParameter(valid_570412, JString, required = true,
                                 default = nil)
  if valid_570412 != nil:
    section.add "subscriptionId", valid_570412
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570413 = query.getOrDefault("api-version")
  valid_570413 = validateParameter(valid_570413, JString, required = true,
                                 default = nil)
  if valid_570413 != nil:
    section.add "api-version", valid_570413
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570415: Call_SitesListSitePublishingProfileXml_570407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570415.validator(path, query, header, formData, body)
  let scheme = call_570415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570415.url(scheme.get, call_570415.host, call_570415.base,
                         call_570415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570415, url, valid)

proc call*(call_570416: Call_SitesListSitePublishingProfileXml_570407;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; options: JsonNode): Recallable =
  ## sitesListSitePublishingProfileXml
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  var path_570417 = newJObject()
  var query_570418 = newJObject()
  var body_570419 = newJObject()
  add(path_570417, "resourceGroupName", newJString(resourceGroupName))
  add(query_570418, "api-version", newJString(apiVersion))
  add(path_570417, "name", newJString(name))
  add(path_570417, "subscriptionId", newJString(subscriptionId))
  if options != nil:
    body_570419 = options
  result = call_570416.call(path_570417, query_570418, nil, nil, body_570419)

var sitesListSitePublishingProfileXml* = Call_SitesListSitePublishingProfileXml_570407(
    name: "sitesListSitePublishingProfileXml", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_SitesListSitePublishingProfileXml_570408, base: "",
    url: url_SitesListSitePublishingProfileXml_570409, schemes: {Scheme.Https})
type
  Call_SitesRecoverSite_570420 = ref object of OpenApiRestCall_567650
proc url_SitesRecoverSite_570422(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSite_570421(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570423 = path.getOrDefault("resourceGroupName")
  valid_570423 = validateParameter(valid_570423, JString, required = true,
                                 default = nil)
  if valid_570423 != nil:
    section.add "resourceGroupName", valid_570423
  var valid_570424 = path.getOrDefault("name")
  valid_570424 = validateParameter(valid_570424, JString, required = true,
                                 default = nil)
  if valid_570424 != nil:
    section.add "name", valid_570424
  var valid_570425 = path.getOrDefault("subscriptionId")
  valid_570425 = validateParameter(valid_570425, JString, required = true,
                                 default = nil)
  if valid_570425 != nil:
    section.add "subscriptionId", valid_570425
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570426 = query.getOrDefault("api-version")
  valid_570426 = validateParameter(valid_570426, JString, required = true,
                                 default = nil)
  if valid_570426 != nil:
    section.add "api-version", valid_570426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570428: Call_SitesRecoverSite_570420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570428.validator(path, query, header, formData, body)
  let scheme = call_570428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570428.url(scheme.get, call_570428.host, call_570428.base,
                         call_570428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570428, url, valid)

proc call*(call_570429: Call_SitesRecoverSite_570420; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_570430 = newJObject()
  var query_570431 = newJObject()
  var body_570432 = newJObject()
  add(path_570430, "resourceGroupName", newJString(resourceGroupName))
  add(query_570431, "api-version", newJString(apiVersion))
  add(path_570430, "name", newJString(name))
  add(path_570430, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_570432 = recoveryEntity
  result = call_570429.call(path_570430, query_570431, nil, nil, body_570432)

var sitesRecoverSite* = Call_SitesRecoverSite_570420(name: "sitesRecoverSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_SitesRecoverSite_570421, base: "",
    url: url_SitesRecoverSite_570422, schemes: {Scheme.Https})
type
  Call_SitesResetProductionSlotConfig_570433 = ref object of OpenApiRestCall_567650
proc url_SitesResetProductionSlotConfig_570435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetProductionSlotConfig_570434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570436 = path.getOrDefault("resourceGroupName")
  valid_570436 = validateParameter(valid_570436, JString, required = true,
                                 default = nil)
  if valid_570436 != nil:
    section.add "resourceGroupName", valid_570436
  var valid_570437 = path.getOrDefault("name")
  valid_570437 = validateParameter(valid_570437, JString, required = true,
                                 default = nil)
  if valid_570437 != nil:
    section.add "name", valid_570437
  var valid_570438 = path.getOrDefault("subscriptionId")
  valid_570438 = validateParameter(valid_570438, JString, required = true,
                                 default = nil)
  if valid_570438 != nil:
    section.add "subscriptionId", valid_570438
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570439 = query.getOrDefault("api-version")
  valid_570439 = validateParameter(valid_570439, JString, required = true,
                                 default = nil)
  if valid_570439 != nil:
    section.add "api-version", valid_570439
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570440: Call_SitesResetProductionSlotConfig_570433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570440.validator(path, query, header, formData, body)
  let scheme = call_570440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570440.url(scheme.get, call_570440.host, call_570440.base,
                         call_570440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570440, url, valid)

proc call*(call_570441: Call_SitesResetProductionSlotConfig_570433;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesResetProductionSlotConfig
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570442 = newJObject()
  var query_570443 = newJObject()
  add(path_570442, "resourceGroupName", newJString(resourceGroupName))
  add(query_570443, "api-version", newJString(apiVersion))
  add(path_570442, "name", newJString(name))
  add(path_570442, "subscriptionId", newJString(subscriptionId))
  result = call_570441.call(path_570442, query_570443, nil, nil, nil)

var sitesResetProductionSlotConfig* = Call_SitesResetProductionSlotConfig_570433(
    name: "sitesResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_SitesResetProductionSlotConfig_570434, base: "",
    url: url_SitesResetProductionSlotConfig_570435, schemes: {Scheme.Https})
type
  Call_SitesRestartSite_570444 = ref object of OpenApiRestCall_567650
proc url_SitesRestartSite_570446(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSite_570445(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570447 = path.getOrDefault("resourceGroupName")
  valid_570447 = validateParameter(valid_570447, JString, required = true,
                                 default = nil)
  if valid_570447 != nil:
    section.add "resourceGroupName", valid_570447
  var valid_570448 = path.getOrDefault("name")
  valid_570448 = validateParameter(valid_570448, JString, required = true,
                                 default = nil)
  if valid_570448 != nil:
    section.add "name", valid_570448
  var valid_570449 = path.getOrDefault("subscriptionId")
  valid_570449 = validateParameter(valid_570449, JString, required = true,
                                 default = nil)
  if valid_570449 != nil:
    section.add "subscriptionId", valid_570449
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570450 = query.getOrDefault("api-version")
  valid_570450 = validateParameter(valid_570450, JString, required = true,
                                 default = nil)
  if valid_570450 != nil:
    section.add "api-version", valid_570450
  var valid_570451 = query.getOrDefault("synchronous")
  valid_570451 = validateParameter(valid_570451, JBool, required = false, default = nil)
  if valid_570451 != nil:
    section.add "synchronous", valid_570451
  var valid_570452 = query.getOrDefault("softRestart")
  valid_570452 = validateParameter(valid_570452, JBool, required = false, default = nil)
  if valid_570452 != nil:
    section.add "softRestart", valid_570452
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570453: Call_SitesRestartSite_570444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570453.validator(path, query, header, formData, body)
  let scheme = call_570453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570453.url(scheme.get, call_570453.host, call_570453.base,
                         call_570453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570453, url, valid)

proc call*(call_570454: Call_SitesRestartSite_570444; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## sitesRestartSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_570455 = newJObject()
  var query_570456 = newJObject()
  add(path_570455, "resourceGroupName", newJString(resourceGroupName))
  add(query_570456, "api-version", newJString(apiVersion))
  add(path_570455, "name", newJString(name))
  add(path_570455, "subscriptionId", newJString(subscriptionId))
  add(query_570456, "synchronous", newJBool(synchronous))
  add(query_570456, "softRestart", newJBool(softRestart))
  result = call_570454.call(path_570455, query_570456, nil, nil, nil)

var sitesRestartSite* = Call_SitesRestartSite_570444(name: "sitesRestartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_SitesRestartSite_570445, base: "",
    url: url_SitesRestartSite_570446, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlots_570457 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSlots_570459(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlots_570458(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570460 = path.getOrDefault("resourceGroupName")
  valid_570460 = validateParameter(valid_570460, JString, required = true,
                                 default = nil)
  if valid_570460 != nil:
    section.add "resourceGroupName", valid_570460
  var valid_570461 = path.getOrDefault("name")
  valid_570461 = validateParameter(valid_570461, JString, required = true,
                                 default = nil)
  if valid_570461 != nil:
    section.add "name", valid_570461
  var valid_570462 = path.getOrDefault("subscriptionId")
  valid_570462 = validateParameter(valid_570462, JString, required = true,
                                 default = nil)
  if valid_570462 != nil:
    section.add "subscriptionId", valid_570462
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : List of app properties to include in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_570463 = query.getOrDefault("propertiesToInclude")
  valid_570463 = validateParameter(valid_570463, JString, required = false,
                                 default = nil)
  if valid_570463 != nil:
    section.add "propertiesToInclude", valid_570463
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570464 = query.getOrDefault("api-version")
  valid_570464 = validateParameter(valid_570464, JString, required = true,
                                 default = nil)
  if valid_570464 != nil:
    section.add "api-version", valid_570464
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570465: Call_SitesGetSiteSlots_570457; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570465.validator(path, query, header, formData, body)
  let scheme = call_570465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570465.url(scheme.get, call_570465.host, call_570465.base,
                         call_570465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570465, url, valid)

proc call*(call_570466: Call_SitesGetSiteSlots_570457; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlots
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : List of app properties to include in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570467 = newJObject()
  var query_570468 = newJObject()
  add(path_570467, "resourceGroupName", newJString(resourceGroupName))
  add(query_570468, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_570468, "api-version", newJString(apiVersion))
  add(path_570467, "name", newJString(name))
  add(path_570467, "subscriptionId", newJString(subscriptionId))
  result = call_570466.call(path_570467, query_570468, nil, nil, nil)

var sitesGetSiteSlots* = Call_SitesGetSiteSlots_570457(name: "sitesGetSiteSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_SitesGetSiteSlots_570458, base: "",
    url: url_SitesGetSiteSlots_570459, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSlot_570482 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteSlot_570484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSlot_570483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570485 = path.getOrDefault("resourceGroupName")
  valid_570485 = validateParameter(valid_570485, JString, required = true,
                                 default = nil)
  if valid_570485 != nil:
    section.add "resourceGroupName", valid_570485
  var valid_570486 = path.getOrDefault("name")
  valid_570486 = validateParameter(valid_570486, JString, required = true,
                                 default = nil)
  if valid_570486 != nil:
    section.add "name", valid_570486
  var valid_570487 = path.getOrDefault("slot")
  valid_570487 = validateParameter(valid_570487, JString, required = true,
                                 default = nil)
  if valid_570487 != nil:
    section.add "slot", valid_570487
  var valid_570488 = path.getOrDefault("subscriptionId")
  valid_570488 = validateParameter(valid_570488, JString, required = true,
                                 default = nil)
  if valid_570488 != nil:
    section.add "subscriptionId", valid_570488
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  section = newJObject()
  var valid_570489 = query.getOrDefault("skipDnsRegistration")
  valid_570489 = validateParameter(valid_570489, JString, required = false,
                                 default = nil)
  if valid_570489 != nil:
    section.add "skipDnsRegistration", valid_570489
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570490 = query.getOrDefault("api-version")
  valid_570490 = validateParameter(valid_570490, JString, required = true,
                                 default = nil)
  if valid_570490 != nil:
    section.add "api-version", valid_570490
  var valid_570491 = query.getOrDefault("skipCustomDomainVerification")
  valid_570491 = validateParameter(valid_570491, JString, required = false,
                                 default = nil)
  if valid_570491 != nil:
    section.add "skipCustomDomainVerification", valid_570491
  var valid_570492 = query.getOrDefault("forceDnsRegistration")
  valid_570492 = validateParameter(valid_570492, JString, required = false,
                                 default = nil)
  if valid_570492 != nil:
    section.add "forceDnsRegistration", valid_570492
  var valid_570493 = query.getOrDefault("ttlInSeconds")
  valid_570493 = validateParameter(valid_570493, JString, required = false,
                                 default = nil)
  if valid_570493 != nil:
    section.add "ttlInSeconds", valid_570493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570495: Call_SitesCreateOrUpdateSiteSlot_570482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570495.validator(path, query, header, formData, body)
  let scheme = call_570495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570495.url(scheme.get, call_570495.host, call_570495.base,
                         call_570495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570495, url, valid)

proc call*(call_570496: Call_SitesCreateOrUpdateSiteSlot_570482;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: string = "";
          skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; ttlInSeconds: string = ""): Recallable =
  ## sitesCreateOrUpdateSiteSlot
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  var path_570497 = newJObject()
  var query_570498 = newJObject()
  var body_570499 = newJObject()
  if siteEnvelope != nil:
    body_570499 = siteEnvelope
  add(path_570497, "resourceGroupName", newJString(resourceGroupName))
  add(query_570498, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_570498, "api-version", newJString(apiVersion))
  add(path_570497, "name", newJString(name))
  add(query_570498, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(path_570497, "slot", newJString(slot))
  add(path_570497, "subscriptionId", newJString(subscriptionId))
  add(query_570498, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(query_570498, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_570496.call(path_570497, query_570498, nil, nil, body_570499)

var sitesCreateOrUpdateSiteSlot* = Call_SitesCreateOrUpdateSiteSlot_570482(
    name: "sitesCreateOrUpdateSiteSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesCreateOrUpdateSiteSlot_570483, base: "",
    url: url_SitesCreateOrUpdateSiteSlot_570484, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlot_570469 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSlot_570471(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlot_570470(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570472 = path.getOrDefault("resourceGroupName")
  valid_570472 = validateParameter(valid_570472, JString, required = true,
                                 default = nil)
  if valid_570472 != nil:
    section.add "resourceGroupName", valid_570472
  var valid_570473 = path.getOrDefault("name")
  valid_570473 = validateParameter(valid_570473, JString, required = true,
                                 default = nil)
  if valid_570473 != nil:
    section.add "name", valid_570473
  var valid_570474 = path.getOrDefault("slot")
  valid_570474 = validateParameter(valid_570474, JString, required = true,
                                 default = nil)
  if valid_570474 != nil:
    section.add "slot", valid_570474
  var valid_570475 = path.getOrDefault("subscriptionId")
  valid_570475 = validateParameter(valid_570475, JString, required = true,
                                 default = nil)
  if valid_570475 != nil:
    section.add "subscriptionId", valid_570475
  result.add "path", section
  ## parameters in `query` object:
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_570476 = query.getOrDefault("propertiesToInclude")
  valid_570476 = validateParameter(valid_570476, JString, required = false,
                                 default = nil)
  if valid_570476 != nil:
    section.add "propertiesToInclude", valid_570476
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570477 = query.getOrDefault("api-version")
  valid_570477 = validateParameter(valid_570477, JString, required = true,
                                 default = nil)
  if valid_570477 != nil:
    section.add "api-version", valid_570477
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570478: Call_SitesGetSiteSlot_570469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570478.validator(path, query, header, formData, body)
  let scheme = call_570478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570478.url(scheme.get, call_570478.host, call_570478.base,
                         call_570478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570478, url, valid)

proc call*(call_570479: Call_SitesGetSiteSlot_570469; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570480 = newJObject()
  var query_570481 = newJObject()
  add(path_570480, "resourceGroupName", newJString(resourceGroupName))
  add(query_570481, "propertiesToInclude", newJString(propertiesToInclude))
  add(query_570481, "api-version", newJString(apiVersion))
  add(path_570480, "name", newJString(name))
  add(path_570480, "slot", newJString(slot))
  add(path_570480, "subscriptionId", newJString(subscriptionId))
  result = call_570479.call(path_570480, query_570481, nil, nil, nil)

var sitesGetSiteSlot* = Call_SitesGetSiteSlot_570469(name: "sitesGetSiteSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesGetSiteSlot_570470, base: "",
    url: url_SitesGetSiteSlot_570471, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSlot_570500 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteSlot_570502(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSlot_570501(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570503 = path.getOrDefault("resourceGroupName")
  valid_570503 = validateParameter(valid_570503, JString, required = true,
                                 default = nil)
  if valid_570503 != nil:
    section.add "resourceGroupName", valid_570503
  var valid_570504 = path.getOrDefault("name")
  valid_570504 = validateParameter(valid_570504, JString, required = true,
                                 default = nil)
  if valid_570504 != nil:
    section.add "name", valid_570504
  var valid_570505 = path.getOrDefault("slot")
  valid_570505 = validateParameter(valid_570505, JString, required = true,
                                 default = nil)
  if valid_570505 != nil:
    section.add "slot", valid_570505
  var valid_570506 = path.getOrDefault("subscriptionId")
  valid_570506 = validateParameter(valid_570506, JString, required = true,
                                 default = nil)
  if valid_570506 != nil:
    section.add "subscriptionId", valid_570506
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  var valid_570507 = query.getOrDefault("skipDnsRegistration")
  valid_570507 = validateParameter(valid_570507, JString, required = false,
                                 default = nil)
  if valid_570507 != nil:
    section.add "skipDnsRegistration", valid_570507
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570508 = query.getOrDefault("api-version")
  valid_570508 = validateParameter(valid_570508, JString, required = true,
                                 default = nil)
  if valid_570508 != nil:
    section.add "api-version", valid_570508
  var valid_570509 = query.getOrDefault("deleteMetrics")
  valid_570509 = validateParameter(valid_570509, JString, required = false,
                                 default = nil)
  if valid_570509 != nil:
    section.add "deleteMetrics", valid_570509
  var valid_570510 = query.getOrDefault("deleteEmptyServerFarm")
  valid_570510 = validateParameter(valid_570510, JString, required = false,
                                 default = nil)
  if valid_570510 != nil:
    section.add "deleteEmptyServerFarm", valid_570510
  var valid_570511 = query.getOrDefault("deleteAllSlots")
  valid_570511 = validateParameter(valid_570511, JString, required = false,
                                 default = nil)
  if valid_570511 != nil:
    section.add "deleteAllSlots", valid_570511
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570512: Call_SitesDeleteSiteSlot_570500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570512.validator(path, query, header, formData, body)
  let scheme = call_570512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570512.url(scheme.get, call_570512.host, call_570512.base,
                         call_570512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570512, url, valid)

proc call*(call_570513: Call_SitesDeleteSiteSlot_570500; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: string = ""; deleteMetrics: string = "";
          deleteEmptyServerFarm: string = ""; deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_570514 = newJObject()
  var query_570515 = newJObject()
  add(path_570514, "resourceGroupName", newJString(resourceGroupName))
  add(query_570515, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_570515, "api-version", newJString(apiVersion))
  add(path_570514, "name", newJString(name))
  add(path_570514, "slot", newJString(slot))
  add(path_570514, "subscriptionId", newJString(subscriptionId))
  add(query_570515, "deleteMetrics", newJString(deleteMetrics))
  add(query_570515, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(query_570515, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_570513.call(path_570514, query_570515, nil, nil, nil)

var sitesDeleteSiteSlot* = Call_SitesDeleteSiteSlot_570500(
    name: "sitesDeleteSiteSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesDeleteSiteSlot_570501, base: "",
    url: url_SitesDeleteSiteSlot_570502, schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigSlot_570516 = ref object of OpenApiRestCall_567650
proc url_SitesApplySlotConfigSlot_570518(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigSlot_570517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570519 = path.getOrDefault("resourceGroupName")
  valid_570519 = validateParameter(valid_570519, JString, required = true,
                                 default = nil)
  if valid_570519 != nil:
    section.add "resourceGroupName", valid_570519
  var valid_570520 = path.getOrDefault("name")
  valid_570520 = validateParameter(valid_570520, JString, required = true,
                                 default = nil)
  if valid_570520 != nil:
    section.add "name", valid_570520
  var valid_570521 = path.getOrDefault("slot")
  valid_570521 = validateParameter(valid_570521, JString, required = true,
                                 default = nil)
  if valid_570521 != nil:
    section.add "slot", valid_570521
  var valid_570522 = path.getOrDefault("subscriptionId")
  valid_570522 = validateParameter(valid_570522, JString, required = true,
                                 default = nil)
  if valid_570522 != nil:
    section.add "subscriptionId", valid_570522
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570523 = query.getOrDefault("api-version")
  valid_570523 = validateParameter(valid_570523, JString, required = true,
                                 default = nil)
  if valid_570523 != nil:
    section.add "api-version", valid_570523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570525: Call_SitesApplySlotConfigSlot_570516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570525.validator(path, query, header, formData, body)
  let scheme = call_570525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570525.url(scheme.get, call_570525.host, call_570525.base,
                         call_570525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570525, url, valid)

proc call*(call_570526: Call_SitesApplySlotConfigSlot_570516;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesApplySlotConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  var path_570527 = newJObject()
  var query_570528 = newJObject()
  var body_570529 = newJObject()
  add(path_570527, "resourceGroupName", newJString(resourceGroupName))
  add(query_570528, "api-version", newJString(apiVersion))
  add(path_570527, "name", newJString(name))
  add(path_570527, "slot", newJString(slot))
  add(path_570527, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_570529 = slotSwapEntity
  result = call_570526.call(path_570527, query_570528, nil, nil, body_570529)

var sitesApplySlotConfigSlot* = Call_SitesApplySlotConfigSlot_570516(
    name: "sitesApplySlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_SitesApplySlotConfigSlot_570517, base: "",
    url: url_SitesApplySlotConfigSlot_570518, schemes: {Scheme.Https})
type
  Call_SitesBackupSiteSlot_570530 = ref object of OpenApiRestCall_567650
proc url_SitesBackupSiteSlot_570532(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSiteSlot_570531(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570533 = path.getOrDefault("resourceGroupName")
  valid_570533 = validateParameter(valid_570533, JString, required = true,
                                 default = nil)
  if valid_570533 != nil:
    section.add "resourceGroupName", valid_570533
  var valid_570534 = path.getOrDefault("name")
  valid_570534 = validateParameter(valid_570534, JString, required = true,
                                 default = nil)
  if valid_570534 != nil:
    section.add "name", valid_570534
  var valid_570535 = path.getOrDefault("slot")
  valid_570535 = validateParameter(valid_570535, JString, required = true,
                                 default = nil)
  if valid_570535 != nil:
    section.add "slot", valid_570535
  var valid_570536 = path.getOrDefault("subscriptionId")
  valid_570536 = validateParameter(valid_570536, JString, required = true,
                                 default = nil)
  if valid_570536 != nil:
    section.add "subscriptionId", valid_570536
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570537 = query.getOrDefault("api-version")
  valid_570537 = validateParameter(valid_570537, JString, required = true,
                                 default = nil)
  if valid_570537 != nil:
    section.add "api-version", valid_570537
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570539: Call_SitesBackupSiteSlot_570530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570539.validator(path, query, header, formData, body)
  let scheme = call_570539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570539.url(scheme.get, call_570539.host, call_570539.base,
                         call_570539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570539, url, valid)

proc call*(call_570540: Call_SitesBackupSiteSlot_570530; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## sitesBackupSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_570541 = newJObject()
  var query_570542 = newJObject()
  var body_570543 = newJObject()
  add(path_570541, "resourceGroupName", newJString(resourceGroupName))
  add(query_570542, "api-version", newJString(apiVersion))
  add(path_570541, "name", newJString(name))
  add(path_570541, "slot", newJString(slot))
  add(path_570541, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570543 = request
  result = call_570540.call(path_570541, query_570542, nil, nil, body_570543)

var sitesBackupSiteSlot* = Call_SitesBackupSiteSlot_570530(
    name: "sitesBackupSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_SitesBackupSiteSlot_570531, base: "",
    url: url_SitesBackupSiteSlot_570532, schemes: {Scheme.Https})
type
  Call_SitesListSiteBackupsSlot_570544 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteBackupsSlot_570546(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackupsSlot_570545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570547 = path.getOrDefault("resourceGroupName")
  valid_570547 = validateParameter(valid_570547, JString, required = true,
                                 default = nil)
  if valid_570547 != nil:
    section.add "resourceGroupName", valid_570547
  var valid_570548 = path.getOrDefault("name")
  valid_570548 = validateParameter(valid_570548, JString, required = true,
                                 default = nil)
  if valid_570548 != nil:
    section.add "name", valid_570548
  var valid_570549 = path.getOrDefault("slot")
  valid_570549 = validateParameter(valid_570549, JString, required = true,
                                 default = nil)
  if valid_570549 != nil:
    section.add "slot", valid_570549
  var valid_570550 = path.getOrDefault("subscriptionId")
  valid_570550 = validateParameter(valid_570550, JString, required = true,
                                 default = nil)
  if valid_570550 != nil:
    section.add "subscriptionId", valid_570550
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570551 = query.getOrDefault("api-version")
  valid_570551 = validateParameter(valid_570551, JString, required = true,
                                 default = nil)
  if valid_570551 != nil:
    section.add "api-version", valid_570551
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570552: Call_SitesListSiteBackupsSlot_570544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570552.validator(path, query, header, formData, body)
  let scheme = call_570552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570552.url(scheme.get, call_570552.host, call_570552.base,
                         call_570552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570552, url, valid)

proc call*(call_570553: Call_SitesListSiteBackupsSlot_570544;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteBackupsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570554 = newJObject()
  var query_570555 = newJObject()
  add(path_570554, "resourceGroupName", newJString(resourceGroupName))
  add(query_570555, "api-version", newJString(apiVersion))
  add(path_570554, "name", newJString(name))
  add(path_570554, "slot", newJString(slot))
  add(path_570554, "subscriptionId", newJString(subscriptionId))
  result = call_570553.call(path_570554, query_570555, nil, nil, nil)

var sitesListSiteBackupsSlot* = Call_SitesListSiteBackupsSlot_570544(
    name: "sitesListSiteBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_SitesListSiteBackupsSlot_570545, base: "",
    url: url_SitesListSiteBackupsSlot_570546, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestoreSlot_570556 = ref object of OpenApiRestCall_567650
proc url_SitesDiscoverSiteRestoreSlot_570558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestoreSlot_570557(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570559 = path.getOrDefault("resourceGroupName")
  valid_570559 = validateParameter(valid_570559, JString, required = true,
                                 default = nil)
  if valid_570559 != nil:
    section.add "resourceGroupName", valid_570559
  var valid_570560 = path.getOrDefault("name")
  valid_570560 = validateParameter(valid_570560, JString, required = true,
                                 default = nil)
  if valid_570560 != nil:
    section.add "name", valid_570560
  var valid_570561 = path.getOrDefault("slot")
  valid_570561 = validateParameter(valid_570561, JString, required = true,
                                 default = nil)
  if valid_570561 != nil:
    section.add "slot", valid_570561
  var valid_570562 = path.getOrDefault("subscriptionId")
  valid_570562 = validateParameter(valid_570562, JString, required = true,
                                 default = nil)
  if valid_570562 != nil:
    section.add "subscriptionId", valid_570562
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570563 = query.getOrDefault("api-version")
  valid_570563 = validateParameter(valid_570563, JString, required = true,
                                 default = nil)
  if valid_570563 != nil:
    section.add "api-version", valid_570563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570565: Call_SitesDiscoverSiteRestoreSlot_570556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570565.validator(path, query, header, formData, body)
  let scheme = call_570565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570565.url(scheme.get, call_570565.host, call_570565.base,
                         call_570565.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570565, url, valid)

proc call*(call_570566: Call_SitesDiscoverSiteRestoreSlot_570556;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestoreSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_570567 = newJObject()
  var query_570568 = newJObject()
  var body_570569 = newJObject()
  add(path_570567, "resourceGroupName", newJString(resourceGroupName))
  add(query_570568, "api-version", newJString(apiVersion))
  add(path_570567, "name", newJString(name))
  add(path_570567, "slot", newJString(slot))
  add(path_570567, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570569 = request
  result = call_570566.call(path_570567, query_570568, nil, nil, body_570569)

var sitesDiscoverSiteRestoreSlot* = Call_SitesDiscoverSiteRestoreSlot_570556(
    name: "sitesDiscoverSiteRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_SitesDiscoverSiteRestoreSlot_570557, base: "",
    url: url_SitesDiscoverSiteRestoreSlot_570558, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSlot_570570 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupStatusSlot_570572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSlot_570571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570573 = path.getOrDefault("resourceGroupName")
  valid_570573 = validateParameter(valid_570573, JString, required = true,
                                 default = nil)
  if valid_570573 != nil:
    section.add "resourceGroupName", valid_570573
  var valid_570574 = path.getOrDefault("name")
  valid_570574 = validateParameter(valid_570574, JString, required = true,
                                 default = nil)
  if valid_570574 != nil:
    section.add "name", valid_570574
  var valid_570575 = path.getOrDefault("slot")
  valid_570575 = validateParameter(valid_570575, JString, required = true,
                                 default = nil)
  if valid_570575 != nil:
    section.add "slot", valid_570575
  var valid_570576 = path.getOrDefault("subscriptionId")
  valid_570576 = validateParameter(valid_570576, JString, required = true,
                                 default = nil)
  if valid_570576 != nil:
    section.add "subscriptionId", valid_570576
  var valid_570577 = path.getOrDefault("backupId")
  valid_570577 = validateParameter(valid_570577, JString, required = true,
                                 default = nil)
  if valid_570577 != nil:
    section.add "backupId", valid_570577
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570578 = query.getOrDefault("api-version")
  valid_570578 = validateParameter(valid_570578, JString, required = true,
                                 default = nil)
  if valid_570578 != nil:
    section.add "api-version", valid_570578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570579: Call_SitesGetSiteBackupStatusSlot_570570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570579.validator(path, query, header, formData, body)
  let scheme = call_570579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570579.url(scheme.get, call_570579.host, call_570579.base,
                         call_570579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570579, url, valid)

proc call*(call_570580: Call_SitesGetSiteBackupStatusSlot_570570;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_570581 = newJObject()
  var query_570582 = newJObject()
  add(path_570581, "resourceGroupName", newJString(resourceGroupName))
  add(query_570582, "api-version", newJString(apiVersion))
  add(path_570581, "name", newJString(name))
  add(path_570581, "slot", newJString(slot))
  add(path_570581, "subscriptionId", newJString(subscriptionId))
  add(path_570581, "backupId", newJString(backupId))
  result = call_570580.call(path_570581, query_570582, nil, nil, nil)

var sitesGetSiteBackupStatusSlot* = Call_SitesGetSiteBackupStatusSlot_570570(
    name: "sitesGetSiteBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatusSlot_570571, base: "",
    url: url_SitesGetSiteBackupStatusSlot_570572, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackupSlot_570583 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteBackupSlot_570585(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackupSlot_570584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570586 = path.getOrDefault("resourceGroupName")
  valid_570586 = validateParameter(valid_570586, JString, required = true,
                                 default = nil)
  if valid_570586 != nil:
    section.add "resourceGroupName", valid_570586
  var valid_570587 = path.getOrDefault("name")
  valid_570587 = validateParameter(valid_570587, JString, required = true,
                                 default = nil)
  if valid_570587 != nil:
    section.add "name", valid_570587
  var valid_570588 = path.getOrDefault("slot")
  valid_570588 = validateParameter(valid_570588, JString, required = true,
                                 default = nil)
  if valid_570588 != nil:
    section.add "slot", valid_570588
  var valid_570589 = path.getOrDefault("subscriptionId")
  valid_570589 = validateParameter(valid_570589, JString, required = true,
                                 default = nil)
  if valid_570589 != nil:
    section.add "subscriptionId", valid_570589
  var valid_570590 = path.getOrDefault("backupId")
  valid_570590 = validateParameter(valid_570590, JString, required = true,
                                 default = nil)
  if valid_570590 != nil:
    section.add "backupId", valid_570590
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570591 = query.getOrDefault("api-version")
  valid_570591 = validateParameter(valid_570591, JString, required = true,
                                 default = nil)
  if valid_570591 != nil:
    section.add "api-version", valid_570591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570592: Call_SitesDeleteBackupSlot_570583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570592.validator(path, query, header, formData, body)
  let scheme = call_570592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570592.url(scheme.get, call_570592.host, call_570592.base,
                         call_570592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570592, url, valid)

proc call*(call_570593: Call_SitesDeleteBackupSlot_570583;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## sitesDeleteBackupSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  var path_570594 = newJObject()
  var query_570595 = newJObject()
  add(path_570594, "resourceGroupName", newJString(resourceGroupName))
  add(query_570595, "api-version", newJString(apiVersion))
  add(path_570594, "name", newJString(name))
  add(path_570594, "slot", newJString(slot))
  add(path_570594, "subscriptionId", newJString(subscriptionId))
  add(path_570594, "backupId", newJString(backupId))
  result = call_570593.call(path_570594, query_570595, nil, nil, nil)

var sitesDeleteBackupSlot* = Call_SitesDeleteBackupSlot_570583(
    name: "sitesDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesDeleteBackupSlot_570584, base: "",
    url: url_SitesDeleteBackupSlot_570585, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecretsSlot_570596 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupStatusSecretsSlot_570598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecretsSlot_570597(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570599 = path.getOrDefault("resourceGroupName")
  valid_570599 = validateParameter(valid_570599, JString, required = true,
                                 default = nil)
  if valid_570599 != nil:
    section.add "resourceGroupName", valid_570599
  var valid_570600 = path.getOrDefault("name")
  valid_570600 = validateParameter(valid_570600, JString, required = true,
                                 default = nil)
  if valid_570600 != nil:
    section.add "name", valid_570600
  var valid_570601 = path.getOrDefault("slot")
  valid_570601 = validateParameter(valid_570601, JString, required = true,
                                 default = nil)
  if valid_570601 != nil:
    section.add "slot", valid_570601
  var valid_570602 = path.getOrDefault("subscriptionId")
  valid_570602 = validateParameter(valid_570602, JString, required = true,
                                 default = nil)
  if valid_570602 != nil:
    section.add "subscriptionId", valid_570602
  var valid_570603 = path.getOrDefault("backupId")
  valid_570603 = validateParameter(valid_570603, JString, required = true,
                                 default = nil)
  if valid_570603 != nil:
    section.add "backupId", valid_570603
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570604 = query.getOrDefault("api-version")
  valid_570604 = validateParameter(valid_570604, JString, required = true,
                                 default = nil)
  if valid_570604 != nil:
    section.add "api-version", valid_570604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570606: Call_SitesGetSiteBackupStatusSecretsSlot_570596;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570606.validator(path, query, header, formData, body)
  let scheme = call_570606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570606.url(scheme.get, call_570606.host, call_570606.base,
                         call_570606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570606, url, valid)

proc call*(call_570607: Call_SitesGetSiteBackupStatusSecretsSlot_570596;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesGetSiteBackupStatusSecretsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  ##   backupId: string (required)
  ##           : Id of backup
  var path_570608 = newJObject()
  var query_570609 = newJObject()
  var body_570610 = newJObject()
  add(path_570608, "resourceGroupName", newJString(resourceGroupName))
  add(query_570609, "api-version", newJString(apiVersion))
  add(path_570608, "name", newJString(name))
  add(path_570608, "slot", newJString(slot))
  add(path_570608, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570610 = request
  add(path_570608, "backupId", newJString(backupId))
  result = call_570607.call(path_570608, query_570609, nil, nil, body_570610)

var sitesGetSiteBackupStatusSecretsSlot* = Call_SitesGetSiteBackupStatusSecretsSlot_570596(
    name: "sitesGetSiteBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecretsSlot_570597, base: "",
    url: url_SitesGetSiteBackupStatusSecretsSlot_570598, schemes: {Scheme.Https})
type
  Call_SitesRestoreSiteSlot_570611 = ref object of OpenApiRestCall_567650
proc url_SitesRestoreSiteSlot_570613(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSiteSlot_570612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570614 = path.getOrDefault("resourceGroupName")
  valid_570614 = validateParameter(valid_570614, JString, required = true,
                                 default = nil)
  if valid_570614 != nil:
    section.add "resourceGroupName", valid_570614
  var valid_570615 = path.getOrDefault("name")
  valid_570615 = validateParameter(valid_570615, JString, required = true,
                                 default = nil)
  if valid_570615 != nil:
    section.add "name", valid_570615
  var valid_570616 = path.getOrDefault("slot")
  valid_570616 = validateParameter(valid_570616, JString, required = true,
                                 default = nil)
  if valid_570616 != nil:
    section.add "slot", valid_570616
  var valid_570617 = path.getOrDefault("subscriptionId")
  valid_570617 = validateParameter(valid_570617, JString, required = true,
                                 default = nil)
  if valid_570617 != nil:
    section.add "subscriptionId", valid_570617
  var valid_570618 = path.getOrDefault("backupId")
  valid_570618 = validateParameter(valid_570618, JString, required = true,
                                 default = nil)
  if valid_570618 != nil:
    section.add "backupId", valid_570618
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570619 = query.getOrDefault("api-version")
  valid_570619 = validateParameter(valid_570619, JString, required = true,
                                 default = nil)
  if valid_570619 != nil:
    section.add "api-version", valid_570619
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570621: Call_SitesRestoreSiteSlot_570611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570621.validator(path, query, header, formData, body)
  let scheme = call_570621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570621.url(scheme.get, call_570621.host, call_570621.base,
                         call_570621.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570621, url, valid)

proc call*(call_570622: Call_SitesRestoreSiteSlot_570611;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## sitesRestoreSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on restore request
  ##   backupId: string (required)
  ##           : Id of backup to restore
  var path_570623 = newJObject()
  var query_570624 = newJObject()
  var body_570625 = newJObject()
  add(path_570623, "resourceGroupName", newJString(resourceGroupName))
  add(query_570624, "api-version", newJString(apiVersion))
  add(path_570623, "name", newJString(name))
  add(path_570623, "slot", newJString(slot))
  add(path_570623, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570625 = request
  add(path_570623, "backupId", newJString(backupId))
  result = call_570622.call(path_570623, query_570624, nil, nil, body_570625)

var sitesRestoreSiteSlot* = Call_SitesRestoreSiteSlot_570611(
    name: "sitesRestoreSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSiteSlot_570612, base: "",
    url: url_SitesRestoreSiteSlot_570613, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettingsSlot_570626 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteAppSettingsSlot_570628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettingsSlot_570627(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570629 = path.getOrDefault("resourceGroupName")
  valid_570629 = validateParameter(valid_570629, JString, required = true,
                                 default = nil)
  if valid_570629 != nil:
    section.add "resourceGroupName", valid_570629
  var valid_570630 = path.getOrDefault("name")
  valid_570630 = validateParameter(valid_570630, JString, required = true,
                                 default = nil)
  if valid_570630 != nil:
    section.add "name", valid_570630
  var valid_570631 = path.getOrDefault("slot")
  valid_570631 = validateParameter(valid_570631, JString, required = true,
                                 default = nil)
  if valid_570631 != nil:
    section.add "slot", valid_570631
  var valid_570632 = path.getOrDefault("subscriptionId")
  valid_570632 = validateParameter(valid_570632, JString, required = true,
                                 default = nil)
  if valid_570632 != nil:
    section.add "subscriptionId", valid_570632
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570633 = query.getOrDefault("api-version")
  valid_570633 = validateParameter(valid_570633, JString, required = true,
                                 default = nil)
  if valid_570633 != nil:
    section.add "api-version", valid_570633
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570635: Call_SitesUpdateSiteAppSettingsSlot_570626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570635.validator(path, query, header, formData, body)
  let scheme = call_570635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570635.url(scheme.get, call_570635.host, call_570635.base,
                         call_570635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570635, url, valid)

proc call*(call_570636: Call_SitesUpdateSiteAppSettingsSlot_570626;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteAppSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570637 = newJObject()
  var query_570638 = newJObject()
  var body_570639 = newJObject()
  add(path_570637, "resourceGroupName", newJString(resourceGroupName))
  add(query_570638, "api-version", newJString(apiVersion))
  add(path_570637, "name", newJString(name))
  if appSettings != nil:
    body_570639 = appSettings
  add(path_570637, "slot", newJString(slot))
  add(path_570637, "subscriptionId", newJString(subscriptionId))
  result = call_570636.call(path_570637, query_570638, nil, nil, body_570639)

var sitesUpdateSiteAppSettingsSlot* = Call_SitesUpdateSiteAppSettingsSlot_570626(
    name: "sitesUpdateSiteAppSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettingsSlot_570627, base: "",
    url: url_SitesUpdateSiteAppSettingsSlot_570628, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettingsSlot_570640 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteAppSettingsSlot_570642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettingsSlot_570641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570643 = path.getOrDefault("resourceGroupName")
  valid_570643 = validateParameter(valid_570643, JString, required = true,
                                 default = nil)
  if valid_570643 != nil:
    section.add "resourceGroupName", valid_570643
  var valid_570644 = path.getOrDefault("name")
  valid_570644 = validateParameter(valid_570644, JString, required = true,
                                 default = nil)
  if valid_570644 != nil:
    section.add "name", valid_570644
  var valid_570645 = path.getOrDefault("slot")
  valid_570645 = validateParameter(valid_570645, JString, required = true,
                                 default = nil)
  if valid_570645 != nil:
    section.add "slot", valid_570645
  var valid_570646 = path.getOrDefault("subscriptionId")
  valid_570646 = validateParameter(valid_570646, JString, required = true,
                                 default = nil)
  if valid_570646 != nil:
    section.add "subscriptionId", valid_570646
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570647 = query.getOrDefault("api-version")
  valid_570647 = validateParameter(valid_570647, JString, required = true,
                                 default = nil)
  if valid_570647 != nil:
    section.add "api-version", valid_570647
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570648: Call_SitesListSiteAppSettingsSlot_570640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570648.validator(path, query, header, formData, body)
  let scheme = call_570648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570648.url(scheme.get, call_570648.host, call_570648.base,
                         call_570648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570648, url, valid)

proc call*(call_570649: Call_SitesListSiteAppSettingsSlot_570640;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAppSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570650 = newJObject()
  var query_570651 = newJObject()
  add(path_570650, "resourceGroupName", newJString(resourceGroupName))
  add(query_570651, "api-version", newJString(apiVersion))
  add(path_570650, "name", newJString(name))
  add(path_570650, "slot", newJString(slot))
  add(path_570650, "subscriptionId", newJString(subscriptionId))
  result = call_570649.call(path_570650, query_570651, nil, nil, nil)

var sitesListSiteAppSettingsSlot* = Call_SitesListSiteAppSettingsSlot_570640(
    name: "sitesListSiteAppSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettingsSlot_570641, base: "",
    url: url_SitesListSiteAppSettingsSlot_570642, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettingsSlot_570652 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteAuthSettingsSlot_570654(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettingsSlot_570653(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570655 = path.getOrDefault("resourceGroupName")
  valid_570655 = validateParameter(valid_570655, JString, required = true,
                                 default = nil)
  if valid_570655 != nil:
    section.add "resourceGroupName", valid_570655
  var valid_570656 = path.getOrDefault("name")
  valid_570656 = validateParameter(valid_570656, JString, required = true,
                                 default = nil)
  if valid_570656 != nil:
    section.add "name", valid_570656
  var valid_570657 = path.getOrDefault("slot")
  valid_570657 = validateParameter(valid_570657, JString, required = true,
                                 default = nil)
  if valid_570657 != nil:
    section.add "slot", valid_570657
  var valid_570658 = path.getOrDefault("subscriptionId")
  valid_570658 = validateParameter(valid_570658, JString, required = true,
                                 default = nil)
  if valid_570658 != nil:
    section.add "subscriptionId", valid_570658
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570659 = query.getOrDefault("api-version")
  valid_570659 = validateParameter(valid_570659, JString, required = true,
                                 default = nil)
  if valid_570659 != nil:
    section.add "api-version", valid_570659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570661: Call_SitesUpdateSiteAuthSettingsSlot_570652;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570661.validator(path, query, header, formData, body)
  let scheme = call_570661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570661.url(scheme.get, call_570661.host, call_570661.base,
                         call_570661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570661, url, valid)

proc call*(call_570662: Call_SitesUpdateSiteAuthSettingsSlot_570652;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## sitesUpdateSiteAuthSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  var path_570663 = newJObject()
  var query_570664 = newJObject()
  var body_570665 = newJObject()
  add(path_570663, "resourceGroupName", newJString(resourceGroupName))
  add(query_570664, "api-version", newJString(apiVersion))
  add(path_570663, "name", newJString(name))
  add(path_570663, "slot", newJString(slot))
  add(path_570663, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_570665 = siteAuthSettings
  result = call_570662.call(path_570663, query_570664, nil, nil, body_570665)

var sitesUpdateSiteAuthSettingsSlot* = Call_SitesUpdateSiteAuthSettingsSlot_570652(
    name: "sitesUpdateSiteAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettingsSlot_570653, base: "",
    url: url_SitesUpdateSiteAuthSettingsSlot_570654, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettingsSlot_570666 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteAuthSettingsSlot_570668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettingsSlot_570667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570669 = path.getOrDefault("resourceGroupName")
  valid_570669 = validateParameter(valid_570669, JString, required = true,
                                 default = nil)
  if valid_570669 != nil:
    section.add "resourceGroupName", valid_570669
  var valid_570670 = path.getOrDefault("name")
  valid_570670 = validateParameter(valid_570670, JString, required = true,
                                 default = nil)
  if valid_570670 != nil:
    section.add "name", valid_570670
  var valid_570671 = path.getOrDefault("slot")
  valid_570671 = validateParameter(valid_570671, JString, required = true,
                                 default = nil)
  if valid_570671 != nil:
    section.add "slot", valid_570671
  var valid_570672 = path.getOrDefault("subscriptionId")
  valid_570672 = validateParameter(valid_570672, JString, required = true,
                                 default = nil)
  if valid_570672 != nil:
    section.add "subscriptionId", valid_570672
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570673 = query.getOrDefault("api-version")
  valid_570673 = validateParameter(valid_570673, JString, required = true,
                                 default = nil)
  if valid_570673 != nil:
    section.add "api-version", valid_570673
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570674: Call_SitesListSiteAuthSettingsSlot_570666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570674.validator(path, query, header, formData, body)
  let scheme = call_570674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570674.url(scheme.get, call_570674.host, call_570674.base,
                         call_570674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570674, url, valid)

proc call*(call_570675: Call_SitesListSiteAuthSettingsSlot_570666;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteAuthSettingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570676 = newJObject()
  var query_570677 = newJObject()
  add(path_570676, "resourceGroupName", newJString(resourceGroupName))
  add(query_570677, "api-version", newJString(apiVersion))
  add(path_570676, "name", newJString(name))
  add(path_570676, "slot", newJString(slot))
  add(path_570676, "subscriptionId", newJString(subscriptionId))
  result = call_570675.call(path_570676, query_570677, nil, nil, nil)

var sitesListSiteAuthSettingsSlot* = Call_SitesListSiteAuthSettingsSlot_570666(
    name: "sitesListSiteAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettingsSlot_570667, base: "",
    url: url_SitesListSiteAuthSettingsSlot_570668, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfigurationSlot_570678 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteBackupConfigurationSlot_570680(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfigurationSlot_570679(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570681 = path.getOrDefault("resourceGroupName")
  valid_570681 = validateParameter(valid_570681, JString, required = true,
                                 default = nil)
  if valid_570681 != nil:
    section.add "resourceGroupName", valid_570681
  var valid_570682 = path.getOrDefault("name")
  valid_570682 = validateParameter(valid_570682, JString, required = true,
                                 default = nil)
  if valid_570682 != nil:
    section.add "name", valid_570682
  var valid_570683 = path.getOrDefault("slot")
  valid_570683 = validateParameter(valid_570683, JString, required = true,
                                 default = nil)
  if valid_570683 != nil:
    section.add "slot", valid_570683
  var valid_570684 = path.getOrDefault("subscriptionId")
  valid_570684 = validateParameter(valid_570684, JString, required = true,
                                 default = nil)
  if valid_570684 != nil:
    section.add "subscriptionId", valid_570684
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570685 = query.getOrDefault("api-version")
  valid_570685 = validateParameter(valid_570685, JString, required = true,
                                 default = nil)
  if valid_570685 != nil:
    section.add "api-version", valid_570685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570687: Call_SitesUpdateSiteBackupConfigurationSlot_570678;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570687.validator(path, query, header, formData, body)
  let scheme = call_570687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570687.url(scheme.get, call_570687.host, call_570687.base,
                         call_570687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570687, url, valid)

proc call*(call_570688: Call_SitesUpdateSiteBackupConfigurationSlot_570678;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfigurationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_570689 = newJObject()
  var query_570690 = newJObject()
  var body_570691 = newJObject()
  add(path_570689, "resourceGroupName", newJString(resourceGroupName))
  add(query_570690, "api-version", newJString(apiVersion))
  add(path_570689, "name", newJString(name))
  add(path_570689, "slot", newJString(slot))
  add(path_570689, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570691 = request
  result = call_570688.call(path_570689, query_570690, nil, nil, body_570691)

var sitesUpdateSiteBackupConfigurationSlot* = Call_SitesUpdateSiteBackupConfigurationSlot_570678(
    name: "sitesUpdateSiteBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfigurationSlot_570679, base: "",
    url: url_SitesUpdateSiteBackupConfigurationSlot_570680,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfigurationSlot_570692 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteBackupConfigurationSlot_570694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfigurationSlot_570693(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570695 = path.getOrDefault("resourceGroupName")
  valid_570695 = validateParameter(valid_570695, JString, required = true,
                                 default = nil)
  if valid_570695 != nil:
    section.add "resourceGroupName", valid_570695
  var valid_570696 = path.getOrDefault("name")
  valid_570696 = validateParameter(valid_570696, JString, required = true,
                                 default = nil)
  if valid_570696 != nil:
    section.add "name", valid_570696
  var valid_570697 = path.getOrDefault("slot")
  valid_570697 = validateParameter(valid_570697, JString, required = true,
                                 default = nil)
  if valid_570697 != nil:
    section.add "slot", valid_570697
  var valid_570698 = path.getOrDefault("subscriptionId")
  valid_570698 = validateParameter(valid_570698, JString, required = true,
                                 default = nil)
  if valid_570698 != nil:
    section.add "subscriptionId", valid_570698
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570699 = query.getOrDefault("api-version")
  valid_570699 = validateParameter(valid_570699, JString, required = true,
                                 default = nil)
  if valid_570699 != nil:
    section.add "api-version", valid_570699
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570700: Call_SitesGetSiteBackupConfigurationSlot_570692;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570700.validator(path, query, header, formData, body)
  let scheme = call_570700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570700.url(scheme.get, call_570700.host, call_570700.base,
                         call_570700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570700, url, valid)

proc call*(call_570701: Call_SitesGetSiteBackupConfigurationSlot_570692;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteBackupConfigurationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570702 = newJObject()
  var query_570703 = newJObject()
  add(path_570702, "resourceGroupName", newJString(resourceGroupName))
  add(query_570703, "api-version", newJString(apiVersion))
  add(path_570702, "name", newJString(name))
  add(path_570702, "slot", newJString(slot))
  add(path_570702, "subscriptionId", newJString(subscriptionId))
  result = call_570701.call(path_570702, query_570703, nil, nil, nil)

var sitesGetSiteBackupConfigurationSlot* = Call_SitesGetSiteBackupConfigurationSlot_570692(
    name: "sitesGetSiteBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfigurationSlot_570693, base: "",
    url: url_SitesGetSiteBackupConfigurationSlot_570694, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStringsSlot_570704 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteConnectionStringsSlot_570706(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStringsSlot_570705(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570707 = path.getOrDefault("resourceGroupName")
  valid_570707 = validateParameter(valid_570707, JString, required = true,
                                 default = nil)
  if valid_570707 != nil:
    section.add "resourceGroupName", valid_570707
  var valid_570708 = path.getOrDefault("name")
  valid_570708 = validateParameter(valid_570708, JString, required = true,
                                 default = nil)
  if valid_570708 != nil:
    section.add "name", valid_570708
  var valid_570709 = path.getOrDefault("slot")
  valid_570709 = validateParameter(valid_570709, JString, required = true,
                                 default = nil)
  if valid_570709 != nil:
    section.add "slot", valid_570709
  var valid_570710 = path.getOrDefault("subscriptionId")
  valid_570710 = validateParameter(valid_570710, JString, required = true,
                                 default = nil)
  if valid_570710 != nil:
    section.add "subscriptionId", valid_570710
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570711 = query.getOrDefault("api-version")
  valid_570711 = validateParameter(valid_570711, JString, required = true,
                                 default = nil)
  if valid_570711 != nil:
    section.add "api-version", valid_570711
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570713: Call_SitesUpdateSiteConnectionStringsSlot_570704;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570713.validator(path, query, header, formData, body)
  let scheme = call_570713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570713.url(scheme.get, call_570713.host, call_570713.base,
                         call_570713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570713, url, valid)

proc call*(call_570714: Call_SitesUpdateSiteConnectionStringsSlot_570704;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConnectionStringsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570715 = newJObject()
  var query_570716 = newJObject()
  var body_570717 = newJObject()
  add(path_570715, "resourceGroupName", newJString(resourceGroupName))
  add(query_570716, "api-version", newJString(apiVersion))
  add(path_570715, "name", newJString(name))
  add(path_570715, "slot", newJString(slot))
  if connectionStrings != nil:
    body_570717 = connectionStrings
  add(path_570715, "subscriptionId", newJString(subscriptionId))
  result = call_570714.call(path_570715, query_570716, nil, nil, body_570717)

var sitesUpdateSiteConnectionStringsSlot* = Call_SitesUpdateSiteConnectionStringsSlot_570704(
    name: "sitesUpdateSiteConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStringsSlot_570705, base: "",
    url: url_SitesUpdateSiteConnectionStringsSlot_570706, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStringsSlot_570718 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteConnectionStringsSlot_570720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStringsSlot_570719(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570721 = path.getOrDefault("resourceGroupName")
  valid_570721 = validateParameter(valid_570721, JString, required = true,
                                 default = nil)
  if valid_570721 != nil:
    section.add "resourceGroupName", valid_570721
  var valid_570722 = path.getOrDefault("name")
  valid_570722 = validateParameter(valid_570722, JString, required = true,
                                 default = nil)
  if valid_570722 != nil:
    section.add "name", valid_570722
  var valid_570723 = path.getOrDefault("slot")
  valid_570723 = validateParameter(valid_570723, JString, required = true,
                                 default = nil)
  if valid_570723 != nil:
    section.add "slot", valid_570723
  var valid_570724 = path.getOrDefault("subscriptionId")
  valid_570724 = validateParameter(valid_570724, JString, required = true,
                                 default = nil)
  if valid_570724 != nil:
    section.add "subscriptionId", valid_570724
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570725 = query.getOrDefault("api-version")
  valid_570725 = validateParameter(valid_570725, JString, required = true,
                                 default = nil)
  if valid_570725 != nil:
    section.add "api-version", valid_570725
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570726: Call_SitesListSiteConnectionStringsSlot_570718;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570726.validator(path, query, header, formData, body)
  let scheme = call_570726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570726.url(scheme.get, call_570726.host, call_570726.base,
                         call_570726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570726, url, valid)

proc call*(call_570727: Call_SitesListSiteConnectionStringsSlot_570718;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteConnectionStringsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570728 = newJObject()
  var query_570729 = newJObject()
  add(path_570728, "resourceGroupName", newJString(resourceGroupName))
  add(query_570729, "api-version", newJString(apiVersion))
  add(path_570728, "name", newJString(name))
  add(path_570728, "slot", newJString(slot))
  add(path_570728, "subscriptionId", newJString(subscriptionId))
  result = call_570727.call(path_570728, query_570729, nil, nil, nil)

var sitesListSiteConnectionStringsSlot* = Call_SitesListSiteConnectionStringsSlot_570718(
    name: "sitesListSiteConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStringsSlot_570719, base: "",
    url: url_SitesListSiteConnectionStringsSlot_570720, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfigSlot_570742 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteLogsConfigSlot_570744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfigSlot_570743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570745 = path.getOrDefault("resourceGroupName")
  valid_570745 = validateParameter(valid_570745, JString, required = true,
                                 default = nil)
  if valid_570745 != nil:
    section.add "resourceGroupName", valid_570745
  var valid_570746 = path.getOrDefault("name")
  valid_570746 = validateParameter(valid_570746, JString, required = true,
                                 default = nil)
  if valid_570746 != nil:
    section.add "name", valid_570746
  var valid_570747 = path.getOrDefault("slot")
  valid_570747 = validateParameter(valid_570747, JString, required = true,
                                 default = nil)
  if valid_570747 != nil:
    section.add "slot", valid_570747
  var valid_570748 = path.getOrDefault("subscriptionId")
  valid_570748 = validateParameter(valid_570748, JString, required = true,
                                 default = nil)
  if valid_570748 != nil:
    section.add "subscriptionId", valid_570748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570749 = query.getOrDefault("api-version")
  valid_570749 = validateParameter(valid_570749, JString, required = true,
                                 default = nil)
  if valid_570749 != nil:
    section.add "api-version", valid_570749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570751: Call_SitesUpdateSiteLogsConfigSlot_570742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570751.validator(path, query, header, formData, body)
  let scheme = call_570751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570751.url(scheme.get, call_570751.host, call_570751.base,
                         call_570751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570751, url, valid)

proc call*(call_570752: Call_SitesUpdateSiteLogsConfigSlot_570742;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteLogsConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570753 = newJObject()
  var query_570754 = newJObject()
  var body_570755 = newJObject()
  add(path_570753, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_570755 = siteLogsConfig
  add(query_570754, "api-version", newJString(apiVersion))
  add(path_570753, "name", newJString(name))
  add(path_570753, "slot", newJString(slot))
  add(path_570753, "subscriptionId", newJString(subscriptionId))
  result = call_570752.call(path_570753, query_570754, nil, nil, body_570755)

var sitesUpdateSiteLogsConfigSlot* = Call_SitesUpdateSiteLogsConfigSlot_570742(
    name: "sitesUpdateSiteLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfigSlot_570743, base: "",
    url: url_SitesUpdateSiteLogsConfigSlot_570744, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfigSlot_570730 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteLogsConfigSlot_570732(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfigSlot_570731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570733 = path.getOrDefault("resourceGroupName")
  valid_570733 = validateParameter(valid_570733, JString, required = true,
                                 default = nil)
  if valid_570733 != nil:
    section.add "resourceGroupName", valid_570733
  var valid_570734 = path.getOrDefault("name")
  valid_570734 = validateParameter(valid_570734, JString, required = true,
                                 default = nil)
  if valid_570734 != nil:
    section.add "name", valid_570734
  var valid_570735 = path.getOrDefault("slot")
  valid_570735 = validateParameter(valid_570735, JString, required = true,
                                 default = nil)
  if valid_570735 != nil:
    section.add "slot", valid_570735
  var valid_570736 = path.getOrDefault("subscriptionId")
  valid_570736 = validateParameter(valid_570736, JString, required = true,
                                 default = nil)
  if valid_570736 != nil:
    section.add "subscriptionId", valid_570736
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570737 = query.getOrDefault("api-version")
  valid_570737 = validateParameter(valid_570737, JString, required = true,
                                 default = nil)
  if valid_570737 != nil:
    section.add "api-version", valid_570737
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570738: Call_SitesGetSiteLogsConfigSlot_570730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570738.validator(path, query, header, formData, body)
  let scheme = call_570738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570738.url(scheme.get, call_570738.host, call_570738.base,
                         call_570738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570738, url, valid)

proc call*(call_570739: Call_SitesGetSiteLogsConfigSlot_570730;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteLogsConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570740 = newJObject()
  var query_570741 = newJObject()
  add(path_570740, "resourceGroupName", newJString(resourceGroupName))
  add(query_570741, "api-version", newJString(apiVersion))
  add(path_570740, "name", newJString(name))
  add(path_570740, "slot", newJString(slot))
  add(path_570740, "subscriptionId", newJString(subscriptionId))
  result = call_570739.call(path_570740, query_570741, nil, nil, nil)

var sitesGetSiteLogsConfigSlot* = Call_SitesGetSiteLogsConfigSlot_570730(
    name: "sitesGetSiteLogsConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesGetSiteLogsConfigSlot_570731, base: "",
    url: url_SitesGetSiteLogsConfigSlot_570732, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadataSlot_570756 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteMetadataSlot_570758(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadataSlot_570757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570759 = path.getOrDefault("resourceGroupName")
  valid_570759 = validateParameter(valid_570759, JString, required = true,
                                 default = nil)
  if valid_570759 != nil:
    section.add "resourceGroupName", valid_570759
  var valid_570760 = path.getOrDefault("name")
  valid_570760 = validateParameter(valid_570760, JString, required = true,
                                 default = nil)
  if valid_570760 != nil:
    section.add "name", valid_570760
  var valid_570761 = path.getOrDefault("slot")
  valid_570761 = validateParameter(valid_570761, JString, required = true,
                                 default = nil)
  if valid_570761 != nil:
    section.add "slot", valid_570761
  var valid_570762 = path.getOrDefault("subscriptionId")
  valid_570762 = validateParameter(valid_570762, JString, required = true,
                                 default = nil)
  if valid_570762 != nil:
    section.add "subscriptionId", valid_570762
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570763 = query.getOrDefault("api-version")
  valid_570763 = validateParameter(valid_570763, JString, required = true,
                                 default = nil)
  if valid_570763 != nil:
    section.add "api-version", valid_570763
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570765: Call_SitesUpdateSiteMetadataSlot_570756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570765.validator(path, query, header, formData, body)
  let scheme = call_570765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570765.url(scheme.get, call_570765.host, call_570765.base,
                         call_570765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570765, url, valid)

proc call*(call_570766: Call_SitesUpdateSiteMetadataSlot_570756;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## sitesUpdateSiteMetadataSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  var path_570767 = newJObject()
  var query_570768 = newJObject()
  var body_570769 = newJObject()
  add(path_570767, "resourceGroupName", newJString(resourceGroupName))
  add(query_570768, "api-version", newJString(apiVersion))
  add(path_570767, "name", newJString(name))
  add(path_570767, "slot", newJString(slot))
  add(path_570767, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_570769 = metadata
  result = call_570766.call(path_570767, query_570768, nil, nil, body_570769)

var sitesUpdateSiteMetadataSlot* = Call_SitesUpdateSiteMetadataSlot_570756(
    name: "sitesUpdateSiteMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_SitesUpdateSiteMetadataSlot_570757, base: "",
    url: url_SitesUpdateSiteMetadataSlot_570758, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadataSlot_570770 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteMetadataSlot_570772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadataSlot_570771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570773 = path.getOrDefault("resourceGroupName")
  valid_570773 = validateParameter(valid_570773, JString, required = true,
                                 default = nil)
  if valid_570773 != nil:
    section.add "resourceGroupName", valid_570773
  var valid_570774 = path.getOrDefault("name")
  valid_570774 = validateParameter(valid_570774, JString, required = true,
                                 default = nil)
  if valid_570774 != nil:
    section.add "name", valid_570774
  var valid_570775 = path.getOrDefault("slot")
  valid_570775 = validateParameter(valid_570775, JString, required = true,
                                 default = nil)
  if valid_570775 != nil:
    section.add "slot", valid_570775
  var valid_570776 = path.getOrDefault("subscriptionId")
  valid_570776 = validateParameter(valid_570776, JString, required = true,
                                 default = nil)
  if valid_570776 != nil:
    section.add "subscriptionId", valid_570776
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570777 = query.getOrDefault("api-version")
  valid_570777 = validateParameter(valid_570777, JString, required = true,
                                 default = nil)
  if valid_570777 != nil:
    section.add "api-version", valid_570777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570778: Call_SitesListSiteMetadataSlot_570770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570778.validator(path, query, header, formData, body)
  let scheme = call_570778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570778.url(scheme.get, call_570778.host, call_570778.base,
                         call_570778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570778, url, valid)

proc call*(call_570779: Call_SitesListSiteMetadataSlot_570770;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteMetadataSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570780 = newJObject()
  var query_570781 = newJObject()
  add(path_570780, "resourceGroupName", newJString(resourceGroupName))
  add(query_570781, "api-version", newJString(apiVersion))
  add(path_570780, "name", newJString(name))
  add(path_570780, "slot", newJString(slot))
  add(path_570780, "subscriptionId", newJString(subscriptionId))
  result = call_570779.call(path_570780, query_570781, nil, nil, nil)

var sitesListSiteMetadataSlot* = Call_SitesListSiteMetadataSlot_570770(
    name: "sitesListSiteMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_SitesListSiteMetadataSlot_570771, base: "",
    url: url_SitesListSiteMetadataSlot_570772, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentialsSlot_570782 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePublishingCredentialsSlot_570784(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentialsSlot_570783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570785 = path.getOrDefault("resourceGroupName")
  valid_570785 = validateParameter(valid_570785, JString, required = true,
                                 default = nil)
  if valid_570785 != nil:
    section.add "resourceGroupName", valid_570785
  var valid_570786 = path.getOrDefault("name")
  valid_570786 = validateParameter(valid_570786, JString, required = true,
                                 default = nil)
  if valid_570786 != nil:
    section.add "name", valid_570786
  var valid_570787 = path.getOrDefault("slot")
  valid_570787 = validateParameter(valid_570787, JString, required = true,
                                 default = nil)
  if valid_570787 != nil:
    section.add "slot", valid_570787
  var valid_570788 = path.getOrDefault("subscriptionId")
  valid_570788 = validateParameter(valid_570788, JString, required = true,
                                 default = nil)
  if valid_570788 != nil:
    section.add "subscriptionId", valid_570788
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570789 = query.getOrDefault("api-version")
  valid_570789 = validateParameter(valid_570789, JString, required = true,
                                 default = nil)
  if valid_570789 != nil:
    section.add "api-version", valid_570789
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570790: Call_SitesListSitePublishingCredentialsSlot_570782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570790.validator(path, query, header, formData, body)
  let scheme = call_570790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570790.url(scheme.get, call_570790.host, call_570790.base,
                         call_570790.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570790, url, valid)

proc call*(call_570791: Call_SitesListSitePublishingCredentialsSlot_570782;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePublishingCredentialsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570792 = newJObject()
  var query_570793 = newJObject()
  add(path_570792, "resourceGroupName", newJString(resourceGroupName))
  add(query_570793, "api-version", newJString(apiVersion))
  add(path_570792, "name", newJString(name))
  add(path_570792, "slot", newJString(slot))
  add(path_570792, "subscriptionId", newJString(subscriptionId))
  result = call_570791.call(path_570792, query_570793, nil, nil, nil)

var sitesListSitePublishingCredentialsSlot* = Call_SitesListSitePublishingCredentialsSlot_570782(
    name: "sitesListSitePublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentialsSlot_570783, base: "",
    url: url_SitesListSitePublishingCredentialsSlot_570784,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfigSlot_570806 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteConfigSlot_570808(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfigSlot_570807(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570809 = path.getOrDefault("resourceGroupName")
  valid_570809 = validateParameter(valid_570809, JString, required = true,
                                 default = nil)
  if valid_570809 != nil:
    section.add "resourceGroupName", valid_570809
  var valid_570810 = path.getOrDefault("name")
  valid_570810 = validateParameter(valid_570810, JString, required = true,
                                 default = nil)
  if valid_570810 != nil:
    section.add "name", valid_570810
  var valid_570811 = path.getOrDefault("slot")
  valid_570811 = validateParameter(valid_570811, JString, required = true,
                                 default = nil)
  if valid_570811 != nil:
    section.add "slot", valid_570811
  var valid_570812 = path.getOrDefault("subscriptionId")
  valid_570812 = validateParameter(valid_570812, JString, required = true,
                                 default = nil)
  if valid_570812 != nil:
    section.add "subscriptionId", valid_570812
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570813 = query.getOrDefault("api-version")
  valid_570813 = validateParameter(valid_570813, JString, required = true,
                                 default = nil)
  if valid_570813 != nil:
    section.add "api-version", valid_570813
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570815: Call_SitesCreateOrUpdateSiteConfigSlot_570806;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570815.validator(path, query, header, formData, body)
  let scheme = call_570815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570815.url(scheme.get, call_570815.host, call_570815.base,
                         call_570815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570815, url, valid)

proc call*(call_570816: Call_SitesCreateOrUpdateSiteConfigSlot_570806;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570817 = newJObject()
  var query_570818 = newJObject()
  var body_570819 = newJObject()
  add(path_570817, "resourceGroupName", newJString(resourceGroupName))
  add(query_570818, "api-version", newJString(apiVersion))
  add(path_570817, "name", newJString(name))
  if siteConfig != nil:
    body_570819 = siteConfig
  add(path_570817, "slot", newJString(slot))
  add(path_570817, "subscriptionId", newJString(subscriptionId))
  result = call_570816.call(path_570817, query_570818, nil, nil, body_570819)

var sitesCreateOrUpdateSiteConfigSlot* = Call_SitesCreateOrUpdateSiteConfigSlot_570806(
    name: "sitesCreateOrUpdateSiteConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfigSlot_570807, base: "",
    url: url_SitesCreateOrUpdateSiteConfigSlot_570808, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfigSlot_570794 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteConfigSlot_570796(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfigSlot_570795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570797 = path.getOrDefault("resourceGroupName")
  valid_570797 = validateParameter(valid_570797, JString, required = true,
                                 default = nil)
  if valid_570797 != nil:
    section.add "resourceGroupName", valid_570797
  var valid_570798 = path.getOrDefault("name")
  valid_570798 = validateParameter(valid_570798, JString, required = true,
                                 default = nil)
  if valid_570798 != nil:
    section.add "name", valid_570798
  var valid_570799 = path.getOrDefault("slot")
  valid_570799 = validateParameter(valid_570799, JString, required = true,
                                 default = nil)
  if valid_570799 != nil:
    section.add "slot", valid_570799
  var valid_570800 = path.getOrDefault("subscriptionId")
  valid_570800 = validateParameter(valid_570800, JString, required = true,
                                 default = nil)
  if valid_570800 != nil:
    section.add "subscriptionId", valid_570800
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570801 = query.getOrDefault("api-version")
  valid_570801 = validateParameter(valid_570801, JString, required = true,
                                 default = nil)
  if valid_570801 != nil:
    section.add "api-version", valid_570801
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570802: Call_SitesGetSiteConfigSlot_570794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570802.validator(path, query, header, formData, body)
  let scheme = call_570802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570802.url(scheme.get, call_570802.host, call_570802.base,
                         call_570802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570802, url, valid)

proc call*(call_570803: Call_SitesGetSiteConfigSlot_570794;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570804 = newJObject()
  var query_570805 = newJObject()
  add(path_570804, "resourceGroupName", newJString(resourceGroupName))
  add(query_570805, "api-version", newJString(apiVersion))
  add(path_570804, "name", newJString(name))
  add(path_570804, "slot", newJString(slot))
  add(path_570804, "subscriptionId", newJString(subscriptionId))
  result = call_570803.call(path_570804, query_570805, nil, nil, nil)

var sitesGetSiteConfigSlot* = Call_SitesGetSiteConfigSlot_570794(
    name: "sitesGetSiteConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesGetSiteConfigSlot_570795, base: "",
    url: url_SitesGetSiteConfigSlot_570796, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfigSlot_570820 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteConfigSlot_570822(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfigSlot_570821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570823 = path.getOrDefault("resourceGroupName")
  valid_570823 = validateParameter(valid_570823, JString, required = true,
                                 default = nil)
  if valid_570823 != nil:
    section.add "resourceGroupName", valid_570823
  var valid_570824 = path.getOrDefault("name")
  valid_570824 = validateParameter(valid_570824, JString, required = true,
                                 default = nil)
  if valid_570824 != nil:
    section.add "name", valid_570824
  var valid_570825 = path.getOrDefault("slot")
  valid_570825 = validateParameter(valid_570825, JString, required = true,
                                 default = nil)
  if valid_570825 != nil:
    section.add "slot", valid_570825
  var valid_570826 = path.getOrDefault("subscriptionId")
  valid_570826 = validateParameter(valid_570826, JString, required = true,
                                 default = nil)
  if valid_570826 != nil:
    section.add "subscriptionId", valid_570826
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570827 = query.getOrDefault("api-version")
  valid_570827 = validateParameter(valid_570827, JString, required = true,
                                 default = nil)
  if valid_570827 != nil:
    section.add "api-version", valid_570827
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570829: Call_SitesUpdateSiteConfigSlot_570820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570829.validator(path, query, header, formData, body)
  let scheme = call_570829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570829.url(scheme.get, call_570829.host, call_570829.base,
                         call_570829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570829, url, valid)

proc call*(call_570830: Call_SitesUpdateSiteConfigSlot_570820;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570831 = newJObject()
  var query_570832 = newJObject()
  var body_570833 = newJObject()
  add(path_570831, "resourceGroupName", newJString(resourceGroupName))
  add(query_570832, "api-version", newJString(apiVersion))
  add(path_570831, "name", newJString(name))
  if siteConfig != nil:
    body_570833 = siteConfig
  add(path_570831, "slot", newJString(slot))
  add(path_570831, "subscriptionId", newJString(subscriptionId))
  result = call_570830.call(path_570831, query_570832, nil, nil, body_570833)

var sitesUpdateSiteConfigSlot* = Call_SitesUpdateSiteConfigSlot_570820(
    name: "sitesUpdateSiteConfigSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesUpdateSiteConfigSlot_570821, base: "",
    url: url_SitesUpdateSiteConfigSlot_570822, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentsSlot_570834 = ref object of OpenApiRestCall_567650
proc url_SitesGetDeploymentsSlot_570836(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentsSlot_570835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570837 = path.getOrDefault("resourceGroupName")
  valid_570837 = validateParameter(valid_570837, JString, required = true,
                                 default = nil)
  if valid_570837 != nil:
    section.add "resourceGroupName", valid_570837
  var valid_570838 = path.getOrDefault("name")
  valid_570838 = validateParameter(valid_570838, JString, required = true,
                                 default = nil)
  if valid_570838 != nil:
    section.add "name", valid_570838
  var valid_570839 = path.getOrDefault("slot")
  valid_570839 = validateParameter(valid_570839, JString, required = true,
                                 default = nil)
  if valid_570839 != nil:
    section.add "slot", valid_570839
  var valid_570840 = path.getOrDefault("subscriptionId")
  valid_570840 = validateParameter(valid_570840, JString, required = true,
                                 default = nil)
  if valid_570840 != nil:
    section.add "subscriptionId", valid_570840
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570841 = query.getOrDefault("api-version")
  valid_570841 = validateParameter(valid_570841, JString, required = true,
                                 default = nil)
  if valid_570841 != nil:
    section.add "api-version", valid_570841
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570842: Call_SitesGetDeploymentsSlot_570834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570842.validator(path, query, header, formData, body)
  let scheme = call_570842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570842.url(scheme.get, call_570842.host, call_570842.base,
                         call_570842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570842, url, valid)

proc call*(call_570843: Call_SitesGetDeploymentsSlot_570834;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetDeploymentsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570844 = newJObject()
  var query_570845 = newJObject()
  add(path_570844, "resourceGroupName", newJString(resourceGroupName))
  add(query_570845, "api-version", newJString(apiVersion))
  add(path_570844, "name", newJString(name))
  add(path_570844, "slot", newJString(slot))
  add(path_570844, "subscriptionId", newJString(subscriptionId))
  result = call_570843.call(path_570844, query_570845, nil, nil, nil)

var sitesGetDeploymentsSlot* = Call_SitesGetDeploymentsSlot_570834(
    name: "sitesGetDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_SitesGetDeploymentsSlot_570835, base: "",
    url: url_SitesGetDeploymentsSlot_570836, schemes: {Scheme.Https})
type
  Call_SitesCreateDeploymentSlot_570859 = ref object of OpenApiRestCall_567650
proc url_SitesCreateDeploymentSlot_570861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeploymentSlot_570860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570862 = path.getOrDefault("resourceGroupName")
  valid_570862 = validateParameter(valid_570862, JString, required = true,
                                 default = nil)
  if valid_570862 != nil:
    section.add "resourceGroupName", valid_570862
  var valid_570863 = path.getOrDefault("name")
  valid_570863 = validateParameter(valid_570863, JString, required = true,
                                 default = nil)
  if valid_570863 != nil:
    section.add "name", valid_570863
  var valid_570864 = path.getOrDefault("slot")
  valid_570864 = validateParameter(valid_570864, JString, required = true,
                                 default = nil)
  if valid_570864 != nil:
    section.add "slot", valid_570864
  var valid_570865 = path.getOrDefault("subscriptionId")
  valid_570865 = validateParameter(valid_570865, JString, required = true,
                                 default = nil)
  if valid_570865 != nil:
    section.add "subscriptionId", valid_570865
  var valid_570866 = path.getOrDefault("id")
  valid_570866 = validateParameter(valid_570866, JString, required = true,
                                 default = nil)
  if valid_570866 != nil:
    section.add "id", valid_570866
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570867 = query.getOrDefault("api-version")
  valid_570867 = validateParameter(valid_570867, JString, required = true,
                                 default = nil)
  if valid_570867 != nil:
    section.add "api-version", valid_570867
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570869: Call_SitesCreateDeploymentSlot_570859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570869.validator(path, query, header, formData, body)
  let scheme = call_570869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570869.url(scheme.get, call_570869.host, call_570869.base,
                         call_570869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570869, url, valid)

proc call*(call_570870: Call_SitesCreateDeploymentSlot_570859;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_570871 = newJObject()
  var query_570872 = newJObject()
  var body_570873 = newJObject()
  add(path_570871, "resourceGroupName", newJString(resourceGroupName))
  add(query_570872, "api-version", newJString(apiVersion))
  add(path_570871, "name", newJString(name))
  add(path_570871, "slot", newJString(slot))
  add(path_570871, "subscriptionId", newJString(subscriptionId))
  add(path_570871, "id", newJString(id))
  if deployment != nil:
    body_570873 = deployment
  result = call_570870.call(path_570871, query_570872, nil, nil, body_570873)

var sitesCreateDeploymentSlot* = Call_SitesCreateDeploymentSlot_570859(
    name: "sitesCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesCreateDeploymentSlot_570860, base: "",
    url: url_SitesCreateDeploymentSlot_570861, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentSlot_570846 = ref object of OpenApiRestCall_567650
proc url_SitesGetDeploymentSlot_570848(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentSlot_570847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570849 = path.getOrDefault("resourceGroupName")
  valid_570849 = validateParameter(valid_570849, JString, required = true,
                                 default = nil)
  if valid_570849 != nil:
    section.add "resourceGroupName", valid_570849
  var valid_570850 = path.getOrDefault("name")
  valid_570850 = validateParameter(valid_570850, JString, required = true,
                                 default = nil)
  if valid_570850 != nil:
    section.add "name", valid_570850
  var valid_570851 = path.getOrDefault("slot")
  valid_570851 = validateParameter(valid_570851, JString, required = true,
                                 default = nil)
  if valid_570851 != nil:
    section.add "slot", valid_570851
  var valid_570852 = path.getOrDefault("subscriptionId")
  valid_570852 = validateParameter(valid_570852, JString, required = true,
                                 default = nil)
  if valid_570852 != nil:
    section.add "subscriptionId", valid_570852
  var valid_570853 = path.getOrDefault("id")
  valid_570853 = validateParameter(valid_570853, JString, required = true,
                                 default = nil)
  if valid_570853 != nil:
    section.add "id", valid_570853
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570854 = query.getOrDefault("api-version")
  valid_570854 = validateParameter(valid_570854, JString, required = true,
                                 default = nil)
  if valid_570854 != nil:
    section.add "api-version", valid_570854
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570855: Call_SitesGetDeploymentSlot_570846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570855.validator(path, query, header, formData, body)
  let scheme = call_570855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570855.url(scheme.get, call_570855.host, call_570855.base,
                         call_570855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570855, url, valid)

proc call*(call_570856: Call_SitesGetDeploymentSlot_570846;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesGetDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570857 = newJObject()
  var query_570858 = newJObject()
  add(path_570857, "resourceGroupName", newJString(resourceGroupName))
  add(query_570858, "api-version", newJString(apiVersion))
  add(path_570857, "name", newJString(name))
  add(path_570857, "slot", newJString(slot))
  add(path_570857, "subscriptionId", newJString(subscriptionId))
  add(path_570857, "id", newJString(id))
  result = call_570856.call(path_570857, query_570858, nil, nil, nil)

var sitesGetDeploymentSlot* = Call_SitesGetDeploymentSlot_570846(
    name: "sitesGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesGetDeploymentSlot_570847, base: "",
    url: url_SitesGetDeploymentSlot_570848, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeploymentSlot_570874 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteDeploymentSlot_570876(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeploymentSlot_570875(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570877 = path.getOrDefault("resourceGroupName")
  valid_570877 = validateParameter(valid_570877, JString, required = true,
                                 default = nil)
  if valid_570877 != nil:
    section.add "resourceGroupName", valid_570877
  var valid_570878 = path.getOrDefault("name")
  valid_570878 = validateParameter(valid_570878, JString, required = true,
                                 default = nil)
  if valid_570878 != nil:
    section.add "name", valid_570878
  var valid_570879 = path.getOrDefault("slot")
  valid_570879 = validateParameter(valid_570879, JString, required = true,
                                 default = nil)
  if valid_570879 != nil:
    section.add "slot", valid_570879
  var valid_570880 = path.getOrDefault("subscriptionId")
  valid_570880 = validateParameter(valid_570880, JString, required = true,
                                 default = nil)
  if valid_570880 != nil:
    section.add "subscriptionId", valid_570880
  var valid_570881 = path.getOrDefault("id")
  valid_570881 = validateParameter(valid_570881, JString, required = true,
                                 default = nil)
  if valid_570881 != nil:
    section.add "id", valid_570881
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570882 = query.getOrDefault("api-version")
  valid_570882 = validateParameter(valid_570882, JString, required = true,
                                 default = nil)
  if valid_570882 != nil:
    section.add "api-version", valid_570882
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570883: Call_SitesDeleteDeploymentSlot_570874; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_570883.validator(path, query, header, formData, body)
  let scheme = call_570883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570883.url(scheme.get, call_570883.host, call_570883.base,
                         call_570883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570883, url, valid)

proc call*(call_570884: Call_SitesDeleteDeploymentSlot_570874;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## sitesDeleteDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   id: string (required)
  ##     : Id of the deployment
  var path_570885 = newJObject()
  var query_570886 = newJObject()
  add(path_570885, "resourceGroupName", newJString(resourceGroupName))
  add(query_570886, "api-version", newJString(apiVersion))
  add(path_570885, "name", newJString(name))
  add(path_570885, "slot", newJString(slot))
  add(path_570885, "subscriptionId", newJString(subscriptionId))
  add(path_570885, "id", newJString(id))
  result = call_570884.call(path_570885, query_570886, nil, nil, nil)

var sitesDeleteDeploymentSlot* = Call_SitesDeleteDeploymentSlot_570874(
    name: "sitesDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesDeleteDeploymentSlot_570875, base: "",
    url: url_SitesDeleteDeploymentSlot_570876, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingsSlot_570887 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteHostNameBindingsSlot_570889(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingsSlot_570888(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570890 = path.getOrDefault("resourceGroupName")
  valid_570890 = validateParameter(valid_570890, JString, required = true,
                                 default = nil)
  if valid_570890 != nil:
    section.add "resourceGroupName", valid_570890
  var valid_570891 = path.getOrDefault("name")
  valid_570891 = validateParameter(valid_570891, JString, required = true,
                                 default = nil)
  if valid_570891 != nil:
    section.add "name", valid_570891
  var valid_570892 = path.getOrDefault("slot")
  valid_570892 = validateParameter(valid_570892, JString, required = true,
                                 default = nil)
  if valid_570892 != nil:
    section.add "slot", valid_570892
  var valid_570893 = path.getOrDefault("subscriptionId")
  valid_570893 = validateParameter(valid_570893, JString, required = true,
                                 default = nil)
  if valid_570893 != nil:
    section.add "subscriptionId", valid_570893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570894 = query.getOrDefault("api-version")
  valid_570894 = validateParameter(valid_570894, JString, required = true,
                                 default = nil)
  if valid_570894 != nil:
    section.add "api-version", valid_570894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570895: Call_SitesGetSiteHostNameBindingsSlot_570887;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570895.validator(path, query, header, formData, body)
  let scheme = call_570895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570895.url(scheme.get, call_570895.host, call_570895.base,
                         call_570895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570895, url, valid)

proc call*(call_570896: Call_SitesGetSiteHostNameBindingsSlot_570887;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteHostNameBindingsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570897 = newJObject()
  var query_570898 = newJObject()
  add(path_570897, "resourceGroupName", newJString(resourceGroupName))
  add(query_570898, "api-version", newJString(apiVersion))
  add(path_570897, "name", newJString(name))
  add(path_570897, "slot", newJString(slot))
  add(path_570897, "subscriptionId", newJString(subscriptionId))
  result = call_570896.call(path_570897, query_570898, nil, nil, nil)

var sitesGetSiteHostNameBindingsSlot* = Call_SitesGetSiteHostNameBindingsSlot_570887(
    name: "sitesGetSiteHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindingsSlot_570888, base: "",
    url: url_SitesGetSiteHostNameBindingsSlot_570889, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBindingSlot_570912 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteHostNameBindingSlot_570914(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBindingSlot_570913(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570915 = path.getOrDefault("resourceGroupName")
  valid_570915 = validateParameter(valid_570915, JString, required = true,
                                 default = nil)
  if valid_570915 != nil:
    section.add "resourceGroupName", valid_570915
  var valid_570916 = path.getOrDefault("name")
  valid_570916 = validateParameter(valid_570916, JString, required = true,
                                 default = nil)
  if valid_570916 != nil:
    section.add "name", valid_570916
  var valid_570917 = path.getOrDefault("slot")
  valid_570917 = validateParameter(valid_570917, JString, required = true,
                                 default = nil)
  if valid_570917 != nil:
    section.add "slot", valid_570917
  var valid_570918 = path.getOrDefault("subscriptionId")
  valid_570918 = validateParameter(valid_570918, JString, required = true,
                                 default = nil)
  if valid_570918 != nil:
    section.add "subscriptionId", valid_570918
  var valid_570919 = path.getOrDefault("hostName")
  valid_570919 = validateParameter(valid_570919, JString, required = true,
                                 default = nil)
  if valid_570919 != nil:
    section.add "hostName", valid_570919
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570920 = query.getOrDefault("api-version")
  valid_570920 = validateParameter(valid_570920, JString, required = true,
                                 default = nil)
  if valid_570920 != nil:
    section.add "api-version", valid_570920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570922: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_570912;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570922.validator(path, query, header, formData, body)
  let scheme = call_570922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570922.url(scheme.get, call_570922.host, call_570922.base,
                         call_570922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570922, url, valid)

proc call*(call_570923: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_570912;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  var path_570924 = newJObject()
  var query_570925 = newJObject()
  var body_570926 = newJObject()
  add(path_570924, "resourceGroupName", newJString(resourceGroupName))
  add(query_570925, "api-version", newJString(apiVersion))
  add(path_570924, "name", newJString(name))
  add(path_570924, "slot", newJString(slot))
  add(path_570924, "subscriptionId", newJString(subscriptionId))
  add(path_570924, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_570926 = hostNameBinding
  result = call_570923.call(path_570924, query_570925, nil, nil, body_570926)

var sitesCreateOrUpdateSiteHostNameBindingSlot* = Call_SitesCreateOrUpdateSiteHostNameBindingSlot_570912(
    name: "sitesCreateOrUpdateSiteHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBindingSlot_570913,
    base: "", url: url_SitesCreateOrUpdateSiteHostNameBindingSlot_570914,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingSlot_570899 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteHostNameBindingSlot_570901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingSlot_570900(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570902 = path.getOrDefault("resourceGroupName")
  valid_570902 = validateParameter(valid_570902, JString, required = true,
                                 default = nil)
  if valid_570902 != nil:
    section.add "resourceGroupName", valid_570902
  var valid_570903 = path.getOrDefault("name")
  valid_570903 = validateParameter(valid_570903, JString, required = true,
                                 default = nil)
  if valid_570903 != nil:
    section.add "name", valid_570903
  var valid_570904 = path.getOrDefault("slot")
  valid_570904 = validateParameter(valid_570904, JString, required = true,
                                 default = nil)
  if valid_570904 != nil:
    section.add "slot", valid_570904
  var valid_570905 = path.getOrDefault("subscriptionId")
  valid_570905 = validateParameter(valid_570905, JString, required = true,
                                 default = nil)
  if valid_570905 != nil:
    section.add "subscriptionId", valid_570905
  var valid_570906 = path.getOrDefault("hostName")
  valid_570906 = validateParameter(valid_570906, JString, required = true,
                                 default = nil)
  if valid_570906 != nil:
    section.add "hostName", valid_570906
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570907 = query.getOrDefault("api-version")
  valid_570907 = validateParameter(valid_570907, JString, required = true,
                                 default = nil)
  if valid_570907 != nil:
    section.add "api-version", valid_570907
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570908: Call_SitesGetSiteHostNameBindingSlot_570899;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570908.validator(path, query, header, formData, body)
  let scheme = call_570908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570908.url(scheme.get, call_570908.host, call_570908.base,
                         call_570908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570908, url, valid)

proc call*(call_570909: Call_SitesGetSiteHostNameBindingSlot_570899;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_570910 = newJObject()
  var query_570911 = newJObject()
  add(path_570910, "resourceGroupName", newJString(resourceGroupName))
  add(query_570911, "api-version", newJString(apiVersion))
  add(path_570910, "name", newJString(name))
  add(path_570910, "slot", newJString(slot))
  add(path_570910, "subscriptionId", newJString(subscriptionId))
  add(path_570910, "hostName", newJString(hostName))
  result = call_570909.call(path_570910, query_570911, nil, nil, nil)

var sitesGetSiteHostNameBindingSlot* = Call_SitesGetSiteHostNameBindingSlot_570899(
    name: "sitesGetSiteHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBindingSlot_570900, base: "",
    url: url_SitesGetSiteHostNameBindingSlot_570901, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBindingSlot_570927 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteHostNameBindingSlot_570929(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBindingSlot_570928(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570930 = path.getOrDefault("resourceGroupName")
  valid_570930 = validateParameter(valid_570930, JString, required = true,
                                 default = nil)
  if valid_570930 != nil:
    section.add "resourceGroupName", valid_570930
  var valid_570931 = path.getOrDefault("name")
  valid_570931 = validateParameter(valid_570931, JString, required = true,
                                 default = nil)
  if valid_570931 != nil:
    section.add "name", valid_570931
  var valid_570932 = path.getOrDefault("slot")
  valid_570932 = validateParameter(valid_570932, JString, required = true,
                                 default = nil)
  if valid_570932 != nil:
    section.add "slot", valid_570932
  var valid_570933 = path.getOrDefault("subscriptionId")
  valid_570933 = validateParameter(valid_570933, JString, required = true,
                                 default = nil)
  if valid_570933 != nil:
    section.add "subscriptionId", valid_570933
  var valid_570934 = path.getOrDefault("hostName")
  valid_570934 = validateParameter(valid_570934, JString, required = true,
                                 default = nil)
  if valid_570934 != nil:
    section.add "hostName", valid_570934
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570935 = query.getOrDefault("api-version")
  valid_570935 = validateParameter(valid_570935, JString, required = true,
                                 default = nil)
  if valid_570935 != nil:
    section.add "api-version", valid_570935
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570936: Call_SitesDeleteSiteHostNameBindingSlot_570927;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570936.validator(path, query, header, formData, body)
  let scheme = call_570936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570936.url(scheme.get, call_570936.host, call_570936.base,
                         call_570936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570936, url, valid)

proc call*(call_570937: Call_SitesDeleteSiteHostNameBindingSlot_570927;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBindingSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   hostName: string (required)
  ##           : Name of host
  var path_570938 = newJObject()
  var query_570939 = newJObject()
  add(path_570938, "resourceGroupName", newJString(resourceGroupName))
  add(query_570939, "api-version", newJString(apiVersion))
  add(path_570938, "name", newJString(name))
  add(path_570938, "slot", newJString(slot))
  add(path_570938, "subscriptionId", newJString(subscriptionId))
  add(path_570938, "hostName", newJString(hostName))
  result = call_570937.call(path_570938, query_570939, nil, nil, nil)

var sitesDeleteSiteHostNameBindingSlot* = Call_SitesDeleteSiteHostNameBindingSlot_570927(
    name: "sitesDeleteSiteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBindingSlot_570928, base: "",
    url: url_SitesDeleteSiteHostNameBindingSlot_570929, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnectionsSlot_570940 = ref object of OpenApiRestCall_567650
proc url_SitesListSiteRelayServiceConnectionsSlot_570942(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnectionsSlot_570941(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570943 = path.getOrDefault("resourceGroupName")
  valid_570943 = validateParameter(valid_570943, JString, required = true,
                                 default = nil)
  if valid_570943 != nil:
    section.add "resourceGroupName", valid_570943
  var valid_570944 = path.getOrDefault("name")
  valid_570944 = validateParameter(valid_570944, JString, required = true,
                                 default = nil)
  if valid_570944 != nil:
    section.add "name", valid_570944
  var valid_570945 = path.getOrDefault("slot")
  valid_570945 = validateParameter(valid_570945, JString, required = true,
                                 default = nil)
  if valid_570945 != nil:
    section.add "slot", valid_570945
  var valid_570946 = path.getOrDefault("subscriptionId")
  valid_570946 = validateParameter(valid_570946, JString, required = true,
                                 default = nil)
  if valid_570946 != nil:
    section.add "subscriptionId", valid_570946
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570947 = query.getOrDefault("api-version")
  valid_570947 = validateParameter(valid_570947, JString, required = true,
                                 default = nil)
  if valid_570947 != nil:
    section.add "api-version", valid_570947
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570948: Call_SitesListSiteRelayServiceConnectionsSlot_570940;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570948.validator(path, query, header, formData, body)
  let scheme = call_570948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570948.url(scheme.get, call_570948.host, call_570948.base,
                         call_570948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570948, url, valid)

proc call*(call_570949: Call_SitesListSiteRelayServiceConnectionsSlot_570940;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSiteRelayServiceConnectionsSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_570950 = newJObject()
  var query_570951 = newJObject()
  add(path_570950, "resourceGroupName", newJString(resourceGroupName))
  add(query_570951, "api-version", newJString(apiVersion))
  add(path_570950, "name", newJString(name))
  add(path_570950, "slot", newJString(slot))
  add(path_570950, "subscriptionId", newJString(subscriptionId))
  result = call_570949.call(path_570950, query_570951, nil, nil, nil)

var sitesListSiteRelayServiceConnectionsSlot* = Call_SitesListSiteRelayServiceConnectionsSlot_570940(
    name: "sitesListSiteRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnectionsSlot_570941, base: "",
    url: url_SitesListSiteRelayServiceConnectionsSlot_570942,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570965 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570967(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570966(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570968 = path.getOrDefault("resourceGroupName")
  valid_570968 = validateParameter(valid_570968, JString, required = true,
                                 default = nil)
  if valid_570968 != nil:
    section.add "resourceGroupName", valid_570968
  var valid_570969 = path.getOrDefault("name")
  valid_570969 = validateParameter(valid_570969, JString, required = true,
                                 default = nil)
  if valid_570969 != nil:
    section.add "name", valid_570969
  var valid_570970 = path.getOrDefault("slot")
  valid_570970 = validateParameter(valid_570970, JString, required = true,
                                 default = nil)
  if valid_570970 != nil:
    section.add "slot", valid_570970
  var valid_570971 = path.getOrDefault("subscriptionId")
  valid_570971 = validateParameter(valid_570971, JString, required = true,
                                 default = nil)
  if valid_570971 != nil:
    section.add "subscriptionId", valid_570971
  var valid_570972 = path.getOrDefault("entityName")
  valid_570972 = validateParameter(valid_570972, JString, required = true,
                                 default = nil)
  if valid_570972 != nil:
    section.add "entityName", valid_570972
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570973 = query.getOrDefault("api-version")
  valid_570973 = validateParameter(valid_570973, JString, required = true,
                                 default = nil)
  if valid_570973 != nil:
    section.add "api-version", valid_570973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570975: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570975.validator(path, query, header, formData, body)
  let scheme = call_570975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570975.url(scheme.get, call_570975.host, call_570975.base,
                         call_570975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570975, url, valid)

proc call*(call_570976: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570965;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570977 = newJObject()
  var query_570978 = newJObject()
  var body_570979 = newJObject()
  add(path_570977, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570979 = connectionEnvelope
  add(path_570977, "name", newJString(name))
  add(query_570978, "api-version", newJString(apiVersion))
  add(path_570977, "slot", newJString(slot))
  add(path_570977, "subscriptionId", newJString(subscriptionId))
  add(path_570977, "entityName", newJString(entityName))
  result = call_570976.call(path_570977, query_570978, nil, nil, body_570979)

var sitesCreateOrUpdateSiteRelayServiceConnectionSlot* = Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570965(
    name: "sitesCreateOrUpdateSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570966,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_570967,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnectionSlot_570952 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteRelayServiceConnectionSlot_570954(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnectionSlot_570953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570955 = path.getOrDefault("resourceGroupName")
  valid_570955 = validateParameter(valid_570955, JString, required = true,
                                 default = nil)
  if valid_570955 != nil:
    section.add "resourceGroupName", valid_570955
  var valid_570956 = path.getOrDefault("name")
  valid_570956 = validateParameter(valid_570956, JString, required = true,
                                 default = nil)
  if valid_570956 != nil:
    section.add "name", valid_570956
  var valid_570957 = path.getOrDefault("slot")
  valid_570957 = validateParameter(valid_570957, JString, required = true,
                                 default = nil)
  if valid_570957 != nil:
    section.add "slot", valid_570957
  var valid_570958 = path.getOrDefault("subscriptionId")
  valid_570958 = validateParameter(valid_570958, JString, required = true,
                                 default = nil)
  if valid_570958 != nil:
    section.add "subscriptionId", valid_570958
  var valid_570959 = path.getOrDefault("entityName")
  valid_570959 = validateParameter(valid_570959, JString, required = true,
                                 default = nil)
  if valid_570959 != nil:
    section.add "entityName", valid_570959
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570960 = query.getOrDefault("api-version")
  valid_570960 = validateParameter(valid_570960, JString, required = true,
                                 default = nil)
  if valid_570960 != nil:
    section.add "api-version", valid_570960
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570961: Call_SitesGetSiteRelayServiceConnectionSlot_570952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570961.validator(path, query, header, formData, body)
  let scheme = call_570961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570961.url(scheme.get, call_570961.host, call_570961.base,
                         call_570961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570961, url, valid)

proc call*(call_570962: Call_SitesGetSiteRelayServiceConnectionSlot_570952;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570963 = newJObject()
  var query_570964 = newJObject()
  add(path_570963, "resourceGroupName", newJString(resourceGroupName))
  add(query_570964, "api-version", newJString(apiVersion))
  add(path_570963, "name", newJString(name))
  add(path_570963, "slot", newJString(slot))
  add(path_570963, "subscriptionId", newJString(subscriptionId))
  add(path_570963, "entityName", newJString(entityName))
  result = call_570962.call(path_570963, query_570964, nil, nil, nil)

var sitesGetSiteRelayServiceConnectionSlot* = Call_SitesGetSiteRelayServiceConnectionSlot_570952(
    name: "sitesGetSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnectionSlot_570953, base: "",
    url: url_SitesGetSiteRelayServiceConnectionSlot_570954,
    schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnectionSlot_570993 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteRelayServiceConnectionSlot_570995(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnectionSlot_570994(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570996 = path.getOrDefault("resourceGroupName")
  valid_570996 = validateParameter(valid_570996, JString, required = true,
                                 default = nil)
  if valid_570996 != nil:
    section.add "resourceGroupName", valid_570996
  var valid_570997 = path.getOrDefault("name")
  valid_570997 = validateParameter(valid_570997, JString, required = true,
                                 default = nil)
  if valid_570997 != nil:
    section.add "name", valid_570997
  var valid_570998 = path.getOrDefault("slot")
  valid_570998 = validateParameter(valid_570998, JString, required = true,
                                 default = nil)
  if valid_570998 != nil:
    section.add "slot", valid_570998
  var valid_570999 = path.getOrDefault("subscriptionId")
  valid_570999 = validateParameter(valid_570999, JString, required = true,
                                 default = nil)
  if valid_570999 != nil:
    section.add "subscriptionId", valid_570999
  var valid_571000 = path.getOrDefault("entityName")
  valid_571000 = validateParameter(valid_571000, JString, required = true,
                                 default = nil)
  if valid_571000 != nil:
    section.add "entityName", valid_571000
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571001 = query.getOrDefault("api-version")
  valid_571001 = validateParameter(valid_571001, JString, required = true,
                                 default = nil)
  if valid_571001 != nil:
    section.add "api-version", valid_571001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571003: Call_SitesUpdateSiteRelayServiceConnectionSlot_570993;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571003.validator(path, query, header, formData, body)
  let scheme = call_571003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571003.url(scheme.get, call_571003.host, call_571003.base,
                         call_571003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571003, url, valid)

proc call*(call_571004: Call_SitesUpdateSiteRelayServiceConnectionSlot_570993;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_571005 = newJObject()
  var query_571006 = newJObject()
  var body_571007 = newJObject()
  add(path_571005, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571007 = connectionEnvelope
  add(path_571005, "name", newJString(name))
  add(query_571006, "api-version", newJString(apiVersion))
  add(path_571005, "slot", newJString(slot))
  add(path_571005, "subscriptionId", newJString(subscriptionId))
  add(path_571005, "entityName", newJString(entityName))
  result = call_571004.call(path_571005, query_571006, nil, nil, body_571007)

var sitesUpdateSiteRelayServiceConnectionSlot* = Call_SitesUpdateSiteRelayServiceConnectionSlot_570993(
    name: "sitesUpdateSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnectionSlot_570994,
    base: "", url: url_SitesUpdateSiteRelayServiceConnectionSlot_570995,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnectionSlot_570980 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteRelayServiceConnectionSlot_570982(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnectionSlot_570981(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570983 = path.getOrDefault("resourceGroupName")
  valid_570983 = validateParameter(valid_570983, JString, required = true,
                                 default = nil)
  if valid_570983 != nil:
    section.add "resourceGroupName", valid_570983
  var valid_570984 = path.getOrDefault("name")
  valid_570984 = validateParameter(valid_570984, JString, required = true,
                                 default = nil)
  if valid_570984 != nil:
    section.add "name", valid_570984
  var valid_570985 = path.getOrDefault("slot")
  valid_570985 = validateParameter(valid_570985, JString, required = true,
                                 default = nil)
  if valid_570985 != nil:
    section.add "slot", valid_570985
  var valid_570986 = path.getOrDefault("subscriptionId")
  valid_570986 = validateParameter(valid_570986, JString, required = true,
                                 default = nil)
  if valid_570986 != nil:
    section.add "subscriptionId", valid_570986
  var valid_570987 = path.getOrDefault("entityName")
  valid_570987 = validateParameter(valid_570987, JString, required = true,
                                 default = nil)
  if valid_570987 != nil:
    section.add "entityName", valid_570987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570988 = query.getOrDefault("api-version")
  valid_570988 = validateParameter(valid_570988, JString, required = true,
                                 default = nil)
  if valid_570988 != nil:
    section.add "api-version", valid_570988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570989: Call_SitesDeleteSiteRelayServiceConnectionSlot_570980;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_570989.validator(path, query, header, formData, body)
  let scheme = call_570989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570989.url(scheme.get, call_570989.host, call_570989.base,
                         call_570989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570989, url, valid)

proc call*(call_570990: Call_SitesDeleteSiteRelayServiceConnectionSlot_570980;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_570991 = newJObject()
  var query_570992 = newJObject()
  add(path_570991, "resourceGroupName", newJString(resourceGroupName))
  add(query_570992, "api-version", newJString(apiVersion))
  add(path_570991, "name", newJString(name))
  add(path_570991, "slot", newJString(slot))
  add(path_570991, "subscriptionId", newJString(subscriptionId))
  add(path_570991, "entityName", newJString(entityName))
  result = call_570990.call(path_570991, query_570992, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnectionSlot* = Call_SitesDeleteSiteRelayServiceConnectionSlot_570980(
    name: "sitesDeleteSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnectionSlot_570981,
    base: "", url: url_SitesDeleteSiteRelayServiceConnectionSlot_570982,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiersSlot_571008 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteInstanceIdentifiersSlot_571010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiersSlot_571009(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571011 = path.getOrDefault("resourceGroupName")
  valid_571011 = validateParameter(valid_571011, JString, required = true,
                                 default = nil)
  if valid_571011 != nil:
    section.add "resourceGroupName", valid_571011
  var valid_571012 = path.getOrDefault("name")
  valid_571012 = validateParameter(valid_571012, JString, required = true,
                                 default = nil)
  if valid_571012 != nil:
    section.add "name", valid_571012
  var valid_571013 = path.getOrDefault("slot")
  valid_571013 = validateParameter(valid_571013, JString, required = true,
                                 default = nil)
  if valid_571013 != nil:
    section.add "slot", valid_571013
  var valid_571014 = path.getOrDefault("subscriptionId")
  valid_571014 = validateParameter(valid_571014, JString, required = true,
                                 default = nil)
  if valid_571014 != nil:
    section.add "subscriptionId", valid_571014
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571015 = query.getOrDefault("api-version")
  valid_571015 = validateParameter(valid_571015, JString, required = true,
                                 default = nil)
  if valid_571015 != nil:
    section.add "api-version", valid_571015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571016: Call_SitesGetSiteInstanceIdentifiersSlot_571008;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571016.validator(path, query, header, formData, body)
  let scheme = call_571016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571016.url(scheme.get, call_571016.host, call_571016.base,
                         call_571016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571016, url, valid)

proc call*(call_571017: Call_SitesGetSiteInstanceIdentifiersSlot_571008;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteInstanceIdentifiersSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571018 = newJObject()
  var query_571019 = newJObject()
  add(path_571018, "resourceGroupName", newJString(resourceGroupName))
  add(query_571019, "api-version", newJString(apiVersion))
  add(path_571018, "name", newJString(name))
  add(path_571018, "slot", newJString(slot))
  add(path_571018, "subscriptionId", newJString(subscriptionId))
  result = call_571017.call(path_571018, query_571019, nil, nil, nil)

var sitesGetSiteInstanceIdentifiersSlot* = Call_SitesGetSiteInstanceIdentifiersSlot_571008(
    name: "sitesGetSiteInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiersSlot_571009, base: "",
    url: url_SitesGetSiteInstanceIdentifiersSlot_571010, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentsSlot_571020 = ref object of OpenApiRestCall_567650
proc url_SitesGetInstanceDeploymentsSlot_571022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentsSlot_571021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571023 = path.getOrDefault("resourceGroupName")
  valid_571023 = validateParameter(valid_571023, JString, required = true,
                                 default = nil)
  if valid_571023 != nil:
    section.add "resourceGroupName", valid_571023
  var valid_571024 = path.getOrDefault("name")
  valid_571024 = validateParameter(valid_571024, JString, required = true,
                                 default = nil)
  if valid_571024 != nil:
    section.add "name", valid_571024
  var valid_571025 = path.getOrDefault("slot")
  valid_571025 = validateParameter(valid_571025, JString, required = true,
                                 default = nil)
  if valid_571025 != nil:
    section.add "slot", valid_571025
  var valid_571026 = path.getOrDefault("subscriptionId")
  valid_571026 = validateParameter(valid_571026, JString, required = true,
                                 default = nil)
  if valid_571026 != nil:
    section.add "subscriptionId", valid_571026
  var valid_571027 = path.getOrDefault("instanceId")
  valid_571027 = validateParameter(valid_571027, JString, required = true,
                                 default = nil)
  if valid_571027 != nil:
    section.add "instanceId", valid_571027
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571028 = query.getOrDefault("api-version")
  valid_571028 = validateParameter(valid_571028, JString, required = true,
                                 default = nil)
  if valid_571028 != nil:
    section.add "api-version", valid_571028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571029: Call_SitesGetInstanceDeploymentsSlot_571020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571029.validator(path, query, header, formData, body)
  let scheme = call_571029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571029.url(scheme.get, call_571029.host, call_571029.base,
                         call_571029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571029, url, valid)

proc call*(call_571030: Call_SitesGetInstanceDeploymentsSlot_571020;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeploymentsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_571031 = newJObject()
  var query_571032 = newJObject()
  add(path_571031, "resourceGroupName", newJString(resourceGroupName))
  add(query_571032, "api-version", newJString(apiVersion))
  add(path_571031, "name", newJString(name))
  add(path_571031, "slot", newJString(slot))
  add(path_571031, "subscriptionId", newJString(subscriptionId))
  add(path_571031, "instanceId", newJString(instanceId))
  result = call_571030.call(path_571031, query_571032, nil, nil, nil)

var sitesGetInstanceDeploymentsSlot* = Call_SitesGetInstanceDeploymentsSlot_571020(
    name: "sitesGetInstanceDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeploymentsSlot_571021, base: "",
    url: url_SitesGetInstanceDeploymentsSlot_571022, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeploymentSlot_571047 = ref object of OpenApiRestCall_567650
proc url_SitesCreateInstanceDeploymentSlot_571049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeploymentSlot_571048(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571050 = path.getOrDefault("resourceGroupName")
  valid_571050 = validateParameter(valid_571050, JString, required = true,
                                 default = nil)
  if valid_571050 != nil:
    section.add "resourceGroupName", valid_571050
  var valid_571051 = path.getOrDefault("name")
  valid_571051 = validateParameter(valid_571051, JString, required = true,
                                 default = nil)
  if valid_571051 != nil:
    section.add "name", valid_571051
  var valid_571052 = path.getOrDefault("slot")
  valid_571052 = validateParameter(valid_571052, JString, required = true,
                                 default = nil)
  if valid_571052 != nil:
    section.add "slot", valid_571052
  var valid_571053 = path.getOrDefault("subscriptionId")
  valid_571053 = validateParameter(valid_571053, JString, required = true,
                                 default = nil)
  if valid_571053 != nil:
    section.add "subscriptionId", valid_571053
  var valid_571054 = path.getOrDefault("instanceId")
  valid_571054 = validateParameter(valid_571054, JString, required = true,
                                 default = nil)
  if valid_571054 != nil:
    section.add "instanceId", valid_571054
  var valid_571055 = path.getOrDefault("id")
  valid_571055 = validateParameter(valid_571055, JString, required = true,
                                 default = nil)
  if valid_571055 != nil:
    section.add "id", valid_571055
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571056 = query.getOrDefault("api-version")
  valid_571056 = validateParameter(valid_571056, JString, required = true,
                                 default = nil)
  if valid_571056 != nil:
    section.add "api-version", valid_571056
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571058: Call_SitesCreateInstanceDeploymentSlot_571047;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571058.validator(path, query, header, formData, body)
  let scheme = call_571058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571058.url(scheme.get, call_571058.host, call_571058.base,
                         call_571058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571058, url, valid)

proc call*(call_571059: Call_SitesCreateInstanceDeploymentSlot_571047;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string; deployment: JsonNode): Recallable =
  ## sitesCreateInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  ##   deployment: JObject (required)
  ##             : Details of deployment
  var path_571060 = newJObject()
  var query_571061 = newJObject()
  var body_571062 = newJObject()
  add(path_571060, "resourceGroupName", newJString(resourceGroupName))
  add(query_571061, "api-version", newJString(apiVersion))
  add(path_571060, "name", newJString(name))
  add(path_571060, "slot", newJString(slot))
  add(path_571060, "subscriptionId", newJString(subscriptionId))
  add(path_571060, "instanceId", newJString(instanceId))
  add(path_571060, "id", newJString(id))
  if deployment != nil:
    body_571062 = deployment
  result = call_571059.call(path_571060, query_571061, nil, nil, body_571062)

var sitesCreateInstanceDeploymentSlot* = Call_SitesCreateInstanceDeploymentSlot_571047(
    name: "sitesCreateInstanceDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeploymentSlot_571048, base: "",
    url: url_SitesCreateInstanceDeploymentSlot_571049, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentSlot_571033 = ref object of OpenApiRestCall_567650
proc url_SitesGetInstanceDeploymentSlot_571035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentSlot_571034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571036 = path.getOrDefault("resourceGroupName")
  valid_571036 = validateParameter(valid_571036, JString, required = true,
                                 default = nil)
  if valid_571036 != nil:
    section.add "resourceGroupName", valid_571036
  var valid_571037 = path.getOrDefault("name")
  valid_571037 = validateParameter(valid_571037, JString, required = true,
                                 default = nil)
  if valid_571037 != nil:
    section.add "name", valid_571037
  var valid_571038 = path.getOrDefault("slot")
  valid_571038 = validateParameter(valid_571038, JString, required = true,
                                 default = nil)
  if valid_571038 != nil:
    section.add "slot", valid_571038
  var valid_571039 = path.getOrDefault("subscriptionId")
  valid_571039 = validateParameter(valid_571039, JString, required = true,
                                 default = nil)
  if valid_571039 != nil:
    section.add "subscriptionId", valid_571039
  var valid_571040 = path.getOrDefault("instanceId")
  valid_571040 = validateParameter(valid_571040, JString, required = true,
                                 default = nil)
  if valid_571040 != nil:
    section.add "instanceId", valid_571040
  var valid_571041 = path.getOrDefault("id")
  valid_571041 = validateParameter(valid_571041, JString, required = true,
                                 default = nil)
  if valid_571041 != nil:
    section.add "id", valid_571041
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571042 = query.getOrDefault("api-version")
  valid_571042 = validateParameter(valid_571042, JString, required = true,
                                 default = nil)
  if valid_571042 != nil:
    section.add "api-version", valid_571042
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571043: Call_SitesGetInstanceDeploymentSlot_571033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571043.validator(path, query, header, formData, body)
  let scheme = call_571043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571043.url(scheme.get, call_571043.host, call_571043.base,
                         call_571043.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571043, url, valid)

proc call*(call_571044: Call_SitesGetInstanceDeploymentSlot_571033;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesGetInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_571045 = newJObject()
  var query_571046 = newJObject()
  add(path_571045, "resourceGroupName", newJString(resourceGroupName))
  add(query_571046, "api-version", newJString(apiVersion))
  add(path_571045, "name", newJString(name))
  add(path_571045, "slot", newJString(slot))
  add(path_571045, "subscriptionId", newJString(subscriptionId))
  add(path_571045, "instanceId", newJString(instanceId))
  add(path_571045, "id", newJString(id))
  result = call_571044.call(path_571045, query_571046, nil, nil, nil)

var sitesGetInstanceDeploymentSlot* = Call_SitesGetInstanceDeploymentSlot_571033(
    name: "sitesGetInstanceDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeploymentSlot_571034, base: "",
    url: url_SitesGetInstanceDeploymentSlot_571035, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeploymentSlot_571063 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteInstanceDeploymentSlot_571065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeploymentSlot_571064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  ##   id: JString (required)
  ##     : Id of the deployment
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571066 = path.getOrDefault("resourceGroupName")
  valid_571066 = validateParameter(valid_571066, JString, required = true,
                                 default = nil)
  if valid_571066 != nil:
    section.add "resourceGroupName", valid_571066
  var valid_571067 = path.getOrDefault("name")
  valid_571067 = validateParameter(valid_571067, JString, required = true,
                                 default = nil)
  if valid_571067 != nil:
    section.add "name", valid_571067
  var valid_571068 = path.getOrDefault("slot")
  valid_571068 = validateParameter(valid_571068, JString, required = true,
                                 default = nil)
  if valid_571068 != nil:
    section.add "slot", valid_571068
  var valid_571069 = path.getOrDefault("subscriptionId")
  valid_571069 = validateParameter(valid_571069, JString, required = true,
                                 default = nil)
  if valid_571069 != nil:
    section.add "subscriptionId", valid_571069
  var valid_571070 = path.getOrDefault("instanceId")
  valid_571070 = validateParameter(valid_571070, JString, required = true,
                                 default = nil)
  if valid_571070 != nil:
    section.add "instanceId", valid_571070
  var valid_571071 = path.getOrDefault("id")
  valid_571071 = validateParameter(valid_571071, JString, required = true,
                                 default = nil)
  if valid_571071 != nil:
    section.add "id", valid_571071
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571072 = query.getOrDefault("api-version")
  valid_571072 = validateParameter(valid_571072, JString, required = true,
                                 default = nil)
  if valid_571072 != nil:
    section.add "api-version", valid_571072
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571073: Call_SitesDeleteInstanceDeploymentSlot_571063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571073.validator(path, query, header, formData, body)
  let scheme = call_571073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571073.url(scheme.get, call_571073.host, call_571073.base,
                         call_571073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571073, url, valid)

proc call*(call_571074: Call_SitesDeleteInstanceDeploymentSlot_571063;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; id: string): Recallable =
  ## sitesDeleteInstanceDeploymentSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instanceId: string (required)
  ##             : Id of web app instance
  ##   id: string (required)
  ##     : Id of the deployment
  var path_571075 = newJObject()
  var query_571076 = newJObject()
  add(path_571075, "resourceGroupName", newJString(resourceGroupName))
  add(query_571076, "api-version", newJString(apiVersion))
  add(path_571075, "name", newJString(name))
  add(path_571075, "slot", newJString(slot))
  add(path_571075, "subscriptionId", newJString(subscriptionId))
  add(path_571075, "instanceId", newJString(instanceId))
  add(path_571075, "id", newJString(id))
  result = call_571074.call(path_571075, query_571076, nil, nil, nil)

var sitesDeleteInstanceDeploymentSlot* = Call_SitesDeleteInstanceDeploymentSlot_571063(
    name: "sitesDeleteInstanceDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeploymentSlot_571064, base: "",
    url: url_SitesDeleteInstanceDeploymentSlot_571065, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneableSlot_571077 = ref object of OpenApiRestCall_567650
proc url_SitesIsSiteCloneableSlot_571079(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneableSlot_571078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   name: JString (required)
  ##       : Name of the web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571080 = path.getOrDefault("resourceGroupName")
  valid_571080 = validateParameter(valid_571080, JString, required = true,
                                 default = nil)
  if valid_571080 != nil:
    section.add "resourceGroupName", valid_571080
  var valid_571081 = path.getOrDefault("name")
  valid_571081 = validateParameter(valid_571081, JString, required = true,
                                 default = nil)
  if valid_571081 != nil:
    section.add "name", valid_571081
  var valid_571082 = path.getOrDefault("slot")
  valid_571082 = validateParameter(valid_571082, JString, required = true,
                                 default = nil)
  if valid_571082 != nil:
    section.add "slot", valid_571082
  var valid_571083 = path.getOrDefault("subscriptionId")
  valid_571083 = validateParameter(valid_571083, JString, required = true,
                                 default = nil)
  if valid_571083 != nil:
    section.add "subscriptionId", valid_571083
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571084 = query.getOrDefault("api-version")
  valid_571084 = validateParameter(valid_571084, JString, required = true,
                                 default = nil)
  if valid_571084 != nil:
    section.add "api-version", valid_571084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571085: Call_SitesIsSiteCloneableSlot_571077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571085.validator(path, query, header, formData, body)
  let scheme = call_571085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571085.url(scheme.get, call_571085.host, call_571085.base,
                         call_571085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571085, url, valid)

proc call*(call_571086: Call_SitesIsSiteCloneableSlot_571077;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesIsSiteCloneableSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571087 = newJObject()
  var query_571088 = newJObject()
  add(path_571087, "resourceGroupName", newJString(resourceGroupName))
  add(query_571088, "api-version", newJString(apiVersion))
  add(path_571087, "name", newJString(name))
  add(path_571087, "slot", newJString(slot))
  add(path_571087, "subscriptionId", newJString(subscriptionId))
  result = call_571086.call(path_571087, query_571088, nil, nil, nil)

var sitesIsSiteCloneableSlot* = Call_SitesIsSiteCloneableSlot_571077(
    name: "sitesIsSiteCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_SitesIsSiteCloneableSlot_571078, base: "",
    url: url_SitesIsSiteCloneableSlot_571079, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitionsSlot_571089 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteMetricDefinitionsSlot_571091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitionsSlot_571090(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571092 = path.getOrDefault("resourceGroupName")
  valid_571092 = validateParameter(valid_571092, JString, required = true,
                                 default = nil)
  if valid_571092 != nil:
    section.add "resourceGroupName", valid_571092
  var valid_571093 = path.getOrDefault("name")
  valid_571093 = validateParameter(valid_571093, JString, required = true,
                                 default = nil)
  if valid_571093 != nil:
    section.add "name", valid_571093
  var valid_571094 = path.getOrDefault("slot")
  valid_571094 = validateParameter(valid_571094, JString, required = true,
                                 default = nil)
  if valid_571094 != nil:
    section.add "slot", valid_571094
  var valid_571095 = path.getOrDefault("subscriptionId")
  valid_571095 = validateParameter(valid_571095, JString, required = true,
                                 default = nil)
  if valid_571095 != nil:
    section.add "subscriptionId", valid_571095
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571096 = query.getOrDefault("api-version")
  valid_571096 = validateParameter(valid_571096, JString, required = true,
                                 default = nil)
  if valid_571096 != nil:
    section.add "api-version", valid_571096
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571097: Call_SitesGetSiteMetricDefinitionsSlot_571089;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571097.validator(path, query, header, formData, body)
  let scheme = call_571097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571097.url(scheme.get, call_571097.host, call_571097.base,
                         call_571097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571097, url, valid)

proc call*(call_571098: Call_SitesGetSiteMetricDefinitionsSlot_571089;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteMetricDefinitionsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571099 = newJObject()
  var query_571100 = newJObject()
  add(path_571099, "resourceGroupName", newJString(resourceGroupName))
  add(query_571100, "api-version", newJString(apiVersion))
  add(path_571099, "name", newJString(name))
  add(path_571099, "slot", newJString(slot))
  add(path_571099, "subscriptionId", newJString(subscriptionId))
  result = call_571098.call(path_571099, query_571100, nil, nil, nil)

var sitesGetSiteMetricDefinitionsSlot* = Call_SitesGetSiteMetricDefinitionsSlot_571089(
    name: "sitesGetSiteMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitionsSlot_571090, base: "",
    url: url_SitesGetSiteMetricDefinitionsSlot_571091, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricsSlot_571101 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteMetricsSlot_571103(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricsSlot_571102(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571104 = path.getOrDefault("resourceGroupName")
  valid_571104 = validateParameter(valid_571104, JString, required = true,
                                 default = nil)
  if valid_571104 != nil:
    section.add "resourceGroupName", valid_571104
  var valid_571105 = path.getOrDefault("name")
  valid_571105 = validateParameter(valid_571105, JString, required = true,
                                 default = nil)
  if valid_571105 != nil:
    section.add "name", valid_571105
  var valid_571106 = path.getOrDefault("slot")
  valid_571106 = validateParameter(valid_571106, JString, required = true,
                                 default = nil)
  if valid_571106 != nil:
    section.add "slot", valid_571106
  var valid_571107 = path.getOrDefault("subscriptionId")
  valid_571107 = validateParameter(valid_571107, JString, required = true,
                                 default = nil)
  if valid_571107 != nil:
    section.add "subscriptionId", valid_571107
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571108 = query.getOrDefault("api-version")
  valid_571108 = validateParameter(valid_571108, JString, required = true,
                                 default = nil)
  if valid_571108 != nil:
    section.add "api-version", valid_571108
  var valid_571109 = query.getOrDefault("details")
  valid_571109 = validateParameter(valid_571109, JBool, required = false, default = nil)
  if valid_571109 != nil:
    section.add "details", valid_571109
  var valid_571110 = query.getOrDefault("$filter")
  valid_571110 = validateParameter(valid_571110, JString, required = false,
                                 default = nil)
  if valid_571110 != nil:
    section.add "$filter", valid_571110
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571111: Call_SitesGetSiteMetricsSlot_571101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571111.validator(path, query, header, formData, body)
  let scheme = call_571111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571111.url(scheme.get, call_571111.host, call_571111.base,
                         call_571111.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571111, url, valid)

proc call*(call_571112: Call_SitesGetSiteMetricsSlot_571101;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetricsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571113 = newJObject()
  var query_571114 = newJObject()
  add(path_571113, "resourceGroupName", newJString(resourceGroupName))
  add(query_571114, "api-version", newJString(apiVersion))
  add(path_571113, "name", newJString(name))
  add(query_571114, "details", newJBool(details))
  add(path_571113, "slot", newJString(slot))
  add(path_571113, "subscriptionId", newJString(subscriptionId))
  add(query_571114, "$filter", newJString(Filter))
  result = call_571112.call(path_571113, query_571114, nil, nil, nil)

var sitesGetSiteMetricsSlot* = Call_SitesGetSiteMetricsSlot_571101(
    name: "sitesGetSiteMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_SitesGetSiteMetricsSlot_571102, base: "",
    url: url_SitesGetSiteMetricsSlot_571103, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeaturesSlot_571115 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteNetworkFeaturesSlot_571117(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeaturesSlot_571116(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571118 = path.getOrDefault("resourceGroupName")
  valid_571118 = validateParameter(valid_571118, JString, required = true,
                                 default = nil)
  if valid_571118 != nil:
    section.add "resourceGroupName", valid_571118
  var valid_571119 = path.getOrDefault("name")
  valid_571119 = validateParameter(valid_571119, JString, required = true,
                                 default = nil)
  if valid_571119 != nil:
    section.add "name", valid_571119
  var valid_571120 = path.getOrDefault("slot")
  valid_571120 = validateParameter(valid_571120, JString, required = true,
                                 default = nil)
  if valid_571120 != nil:
    section.add "slot", valid_571120
  var valid_571121 = path.getOrDefault("subscriptionId")
  valid_571121 = validateParameter(valid_571121, JString, required = true,
                                 default = nil)
  if valid_571121 != nil:
    section.add "subscriptionId", valid_571121
  var valid_571122 = path.getOrDefault("view")
  valid_571122 = validateParameter(valid_571122, JString, required = true,
                                 default = nil)
  if valid_571122 != nil:
    section.add "view", valid_571122
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571123 = query.getOrDefault("api-version")
  valid_571123 = validateParameter(valid_571123, JString, required = true,
                                 default = nil)
  if valid_571123 != nil:
    section.add "api-version", valid_571123
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571124: Call_SitesGetSiteNetworkFeaturesSlot_571115;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571124.validator(path, query, header, formData, body)
  let scheme = call_571124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571124.url(scheme.get, call_571124.host, call_571124.base,
                         call_571124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571124, url, valid)

proc call*(call_571125: Call_SitesGetSiteNetworkFeaturesSlot_571115;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## sitesGetSiteNetworkFeaturesSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_571126 = newJObject()
  var query_571127 = newJObject()
  add(path_571126, "resourceGroupName", newJString(resourceGroupName))
  add(query_571127, "api-version", newJString(apiVersion))
  add(path_571126, "name", newJString(name))
  add(path_571126, "slot", newJString(slot))
  add(path_571126, "subscriptionId", newJString(subscriptionId))
  add(path_571126, "view", newJString(view))
  result = call_571125.call(path_571126, query_571127, nil, nil, nil)

var sitesGetSiteNetworkFeaturesSlot* = Call_SitesGetSiteNetworkFeaturesSlot_571115(
    name: "sitesGetSiteNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeaturesSlot_571116, base: "",
    url: url_SitesGetSiteNetworkFeaturesSlot_571117, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPasswordSlot_571128 = ref object of OpenApiRestCall_567650
proc url_SitesGenerateNewSitePublishingPasswordSlot_571130(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPasswordSlot_571129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571131 = path.getOrDefault("resourceGroupName")
  valid_571131 = validateParameter(valid_571131, JString, required = true,
                                 default = nil)
  if valid_571131 != nil:
    section.add "resourceGroupName", valid_571131
  var valid_571132 = path.getOrDefault("name")
  valid_571132 = validateParameter(valid_571132, JString, required = true,
                                 default = nil)
  if valid_571132 != nil:
    section.add "name", valid_571132
  var valid_571133 = path.getOrDefault("slot")
  valid_571133 = validateParameter(valid_571133, JString, required = true,
                                 default = nil)
  if valid_571133 != nil:
    section.add "slot", valid_571133
  var valid_571134 = path.getOrDefault("subscriptionId")
  valid_571134 = validateParameter(valid_571134, JString, required = true,
                                 default = nil)
  if valid_571134 != nil:
    section.add "subscriptionId", valid_571134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571135 = query.getOrDefault("api-version")
  valid_571135 = validateParameter(valid_571135, JString, required = true,
                                 default = nil)
  if valid_571135 != nil:
    section.add "api-version", valid_571135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571136: Call_SitesGenerateNewSitePublishingPasswordSlot_571128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571136.validator(path, query, header, formData, body)
  let scheme = call_571136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571136.url(scheme.get, call_571136.host, call_571136.base,
                         call_571136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571136, url, valid)

proc call*(call_571137: Call_SitesGenerateNewSitePublishingPasswordSlot_571128;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGenerateNewSitePublishingPasswordSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571138 = newJObject()
  var query_571139 = newJObject()
  add(path_571138, "resourceGroupName", newJString(resourceGroupName))
  add(query_571139, "api-version", newJString(apiVersion))
  add(path_571138, "name", newJString(name))
  add(path_571138, "slot", newJString(slot))
  add(path_571138, "subscriptionId", newJString(subscriptionId))
  result = call_571137.call(path_571138, query_571139, nil, nil, nil)

var sitesGenerateNewSitePublishingPasswordSlot* = Call_SitesGenerateNewSitePublishingPasswordSlot_571128(
    name: "sitesGenerateNewSitePublishingPasswordSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPasswordSlot_571129,
    base: "", url: url_SitesGenerateNewSitePublishingPasswordSlot_571130,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperationSlot_571140 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteOperationSlot_571142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperationSlot_571141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   operationId: JString (required)
  ##              : Id of an operation
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571143 = path.getOrDefault("resourceGroupName")
  valid_571143 = validateParameter(valid_571143, JString, required = true,
                                 default = nil)
  if valid_571143 != nil:
    section.add "resourceGroupName", valid_571143
  var valid_571144 = path.getOrDefault("name")
  valid_571144 = validateParameter(valid_571144, JString, required = true,
                                 default = nil)
  if valid_571144 != nil:
    section.add "name", valid_571144
  var valid_571145 = path.getOrDefault("slot")
  valid_571145 = validateParameter(valid_571145, JString, required = true,
                                 default = nil)
  if valid_571145 != nil:
    section.add "slot", valid_571145
  var valid_571146 = path.getOrDefault("subscriptionId")
  valid_571146 = validateParameter(valid_571146, JString, required = true,
                                 default = nil)
  if valid_571146 != nil:
    section.add "subscriptionId", valid_571146
  var valid_571147 = path.getOrDefault("operationId")
  valid_571147 = validateParameter(valid_571147, JString, required = true,
                                 default = nil)
  if valid_571147 != nil:
    section.add "operationId", valid_571147
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571148 = query.getOrDefault("api-version")
  valid_571148 = validateParameter(valid_571148, JString, required = true,
                                 default = nil)
  if valid_571148 != nil:
    section.add "api-version", valid_571148
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571149: Call_SitesGetSiteOperationSlot_571140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571149.validator(path, query, header, formData, body)
  let scheme = call_571149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571149.url(scheme.get, call_571149.host, call_571149.base,
                         call_571149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571149, url, valid)

proc call*(call_571150: Call_SitesGetSiteOperationSlot_571140;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## sitesGetSiteOperationSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   operationId: string (required)
  ##              : Id of an operation
  var path_571151 = newJObject()
  var query_571152 = newJObject()
  add(path_571151, "resourceGroupName", newJString(resourceGroupName))
  add(query_571152, "api-version", newJString(apiVersion))
  add(path_571151, "name", newJString(name))
  add(path_571151, "slot", newJString(slot))
  add(path_571151, "subscriptionId", newJString(subscriptionId))
  add(path_571151, "operationId", newJString(operationId))
  result = call_571150.call(path_571151, query_571152, nil, nil, nil)

var sitesGetSiteOperationSlot* = Call_SitesGetSiteOperationSlot_571140(
    name: "sitesGetSiteOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperationSlot_571141, base: "",
    url: url_SitesGetSiteOperationSlot_571142, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOnsSlot_571153 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePremierAddOnsSlot_571155(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOnsSlot_571154(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571156 = path.getOrDefault("resourceGroupName")
  valid_571156 = validateParameter(valid_571156, JString, required = true,
                                 default = nil)
  if valid_571156 != nil:
    section.add "resourceGroupName", valid_571156
  var valid_571157 = path.getOrDefault("name")
  valid_571157 = validateParameter(valid_571157, JString, required = true,
                                 default = nil)
  if valid_571157 != nil:
    section.add "name", valid_571157
  var valid_571158 = path.getOrDefault("slot")
  valid_571158 = validateParameter(valid_571158, JString, required = true,
                                 default = nil)
  if valid_571158 != nil:
    section.add "slot", valid_571158
  var valid_571159 = path.getOrDefault("subscriptionId")
  valid_571159 = validateParameter(valid_571159, JString, required = true,
                                 default = nil)
  if valid_571159 != nil:
    section.add "subscriptionId", valid_571159
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571160 = query.getOrDefault("api-version")
  valid_571160 = validateParameter(valid_571160, JString, required = true,
                                 default = nil)
  if valid_571160 != nil:
    section.add "api-version", valid_571160
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571161: Call_SitesListSitePremierAddOnsSlot_571153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571161.validator(path, query, header, formData, body)
  let scheme = call_571161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571161.url(scheme.get, call_571161.host, call_571161.base,
                         call_571161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571161, url, valid)

proc call*(call_571162: Call_SitesListSitePremierAddOnsSlot_571153;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesListSitePremierAddOnsSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571163 = newJObject()
  var query_571164 = newJObject()
  add(path_571163, "resourceGroupName", newJString(resourceGroupName))
  add(query_571164, "api-version", newJString(apiVersion))
  add(path_571163, "name", newJString(name))
  add(path_571163, "slot", newJString(slot))
  add(path_571163, "subscriptionId", newJString(subscriptionId))
  result = call_571162.call(path_571163, query_571164, nil, nil, nil)

var sitesListSitePremierAddOnsSlot* = Call_SitesListSitePremierAddOnsSlot_571153(
    name: "sitesListSitePremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_SitesListSitePremierAddOnsSlot_571154, base: "",
    url: url_SitesListSitePremierAddOnsSlot_571155, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOnSlot_571178 = ref object of OpenApiRestCall_567650
proc url_SitesAddSitePremierAddOnSlot_571180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOnSlot_571179(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571181 = path.getOrDefault("resourceGroupName")
  valid_571181 = validateParameter(valid_571181, JString, required = true,
                                 default = nil)
  if valid_571181 != nil:
    section.add "resourceGroupName", valid_571181
  var valid_571182 = path.getOrDefault("name")
  valid_571182 = validateParameter(valid_571182, JString, required = true,
                                 default = nil)
  if valid_571182 != nil:
    section.add "name", valid_571182
  var valid_571183 = path.getOrDefault("slot")
  valid_571183 = validateParameter(valid_571183, JString, required = true,
                                 default = nil)
  if valid_571183 != nil:
    section.add "slot", valid_571183
  var valid_571184 = path.getOrDefault("subscriptionId")
  valid_571184 = validateParameter(valid_571184, JString, required = true,
                                 default = nil)
  if valid_571184 != nil:
    section.add "subscriptionId", valid_571184
  var valid_571185 = path.getOrDefault("premierAddOnName")
  valid_571185 = validateParameter(valid_571185, JString, required = true,
                                 default = nil)
  if valid_571185 != nil:
    section.add "premierAddOnName", valid_571185
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571186 = query.getOrDefault("api-version")
  valid_571186 = validateParameter(valid_571186, JString, required = true,
                                 default = nil)
  if valid_571186 != nil:
    section.add "api-version", valid_571186
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571188: Call_SitesAddSitePremierAddOnSlot_571178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571188.validator(path, query, header, formData, body)
  let scheme = call_571188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571188.url(scheme.get, call_571188.host, call_571188.base,
                         call_571188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571188, url, valid)

proc call*(call_571189: Call_SitesAddSitePremierAddOnSlot_571178;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## sitesAddSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   premierAddOn: JObject (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_571190 = newJObject()
  var query_571191 = newJObject()
  var body_571192 = newJObject()
  add(path_571190, "resourceGroupName", newJString(resourceGroupName))
  add(query_571191, "api-version", newJString(apiVersion))
  add(path_571190, "name", newJString(name))
  if premierAddOn != nil:
    body_571192 = premierAddOn
  add(path_571190, "slot", newJString(slot))
  add(path_571190, "subscriptionId", newJString(subscriptionId))
  add(path_571190, "premierAddOnName", newJString(premierAddOnName))
  result = call_571189.call(path_571190, query_571191, nil, nil, body_571192)

var sitesAddSitePremierAddOnSlot* = Call_SitesAddSitePremierAddOnSlot_571178(
    name: "sitesAddSitePremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOnSlot_571179, base: "",
    url: url_SitesAddSitePremierAddOnSlot_571180, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOnSlot_571165 = ref object of OpenApiRestCall_567650
proc url_SitesGetSitePremierAddOnSlot_571167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOnSlot_571166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571168 = path.getOrDefault("resourceGroupName")
  valid_571168 = validateParameter(valid_571168, JString, required = true,
                                 default = nil)
  if valid_571168 != nil:
    section.add "resourceGroupName", valid_571168
  var valid_571169 = path.getOrDefault("name")
  valid_571169 = validateParameter(valid_571169, JString, required = true,
                                 default = nil)
  if valid_571169 != nil:
    section.add "name", valid_571169
  var valid_571170 = path.getOrDefault("slot")
  valid_571170 = validateParameter(valid_571170, JString, required = true,
                                 default = nil)
  if valid_571170 != nil:
    section.add "slot", valid_571170
  var valid_571171 = path.getOrDefault("subscriptionId")
  valid_571171 = validateParameter(valid_571171, JString, required = true,
                                 default = nil)
  if valid_571171 != nil:
    section.add "subscriptionId", valid_571171
  var valid_571172 = path.getOrDefault("premierAddOnName")
  valid_571172 = validateParameter(valid_571172, JString, required = true,
                                 default = nil)
  if valid_571172 != nil:
    section.add "premierAddOnName", valid_571172
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571173 = query.getOrDefault("api-version")
  valid_571173 = validateParameter(valid_571173, JString, required = true,
                                 default = nil)
  if valid_571173 != nil:
    section.add "api-version", valid_571173
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571174: Call_SitesGetSitePremierAddOnSlot_571165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571174.validator(path, query, header, formData, body)
  let scheme = call_571174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571174.url(scheme.get, call_571174.host, call_571174.base,
                         call_571174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571174, url, valid)

proc call*(call_571175: Call_SitesGetSitePremierAddOnSlot_571165;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesGetSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_571176 = newJObject()
  var query_571177 = newJObject()
  add(path_571176, "resourceGroupName", newJString(resourceGroupName))
  add(query_571177, "api-version", newJString(apiVersion))
  add(path_571176, "name", newJString(name))
  add(path_571176, "slot", newJString(slot))
  add(path_571176, "subscriptionId", newJString(subscriptionId))
  add(path_571176, "premierAddOnName", newJString(premierAddOnName))
  result = call_571175.call(path_571176, query_571177, nil, nil, nil)

var sitesGetSitePremierAddOnSlot* = Call_SitesGetSitePremierAddOnSlot_571165(
    name: "sitesGetSitePremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOnSlot_571166, base: "",
    url: url_SitesGetSitePremierAddOnSlot_571167, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOnSlot_571193 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSitePremierAddOnSlot_571195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOnSlot_571194(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571196 = path.getOrDefault("resourceGroupName")
  valid_571196 = validateParameter(valid_571196, JString, required = true,
                                 default = nil)
  if valid_571196 != nil:
    section.add "resourceGroupName", valid_571196
  var valid_571197 = path.getOrDefault("name")
  valid_571197 = validateParameter(valid_571197, JString, required = true,
                                 default = nil)
  if valid_571197 != nil:
    section.add "name", valid_571197
  var valid_571198 = path.getOrDefault("slot")
  valid_571198 = validateParameter(valid_571198, JString, required = true,
                                 default = nil)
  if valid_571198 != nil:
    section.add "slot", valid_571198
  var valid_571199 = path.getOrDefault("subscriptionId")
  valid_571199 = validateParameter(valid_571199, JString, required = true,
                                 default = nil)
  if valid_571199 != nil:
    section.add "subscriptionId", valid_571199
  var valid_571200 = path.getOrDefault("premierAddOnName")
  valid_571200 = validateParameter(valid_571200, JString, required = true,
                                 default = nil)
  if valid_571200 != nil:
    section.add "premierAddOnName", valid_571200
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571201 = query.getOrDefault("api-version")
  valid_571201 = validateParameter(valid_571201, JString, required = true,
                                 default = nil)
  if valid_571201 != nil:
    section.add "api-version", valid_571201
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571202: Call_SitesDeleteSitePremierAddOnSlot_571193;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571202.validator(path, query, header, formData, body)
  let scheme = call_571202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571202.url(scheme.get, call_571202.host, call_571202.base,
                         call_571202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571202, url, valid)

proc call*(call_571203: Call_SitesDeleteSitePremierAddOnSlot_571193;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## sitesDeleteSitePremierAddOnSlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  var path_571204 = newJObject()
  var query_571205 = newJObject()
  add(path_571204, "resourceGroupName", newJString(resourceGroupName))
  add(query_571205, "api-version", newJString(apiVersion))
  add(path_571204, "name", newJString(name))
  add(path_571204, "slot", newJString(slot))
  add(path_571204, "subscriptionId", newJString(subscriptionId))
  add(path_571204, "premierAddOnName", newJString(premierAddOnName))
  result = call_571203.call(path_571204, query_571205, nil, nil, nil)

var sitesDeleteSitePremierAddOnSlot* = Call_SitesDeleteSitePremierAddOnSlot_571193(
    name: "sitesDeleteSitePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOnSlot_571194, base: "",
    url: url_SitesDeleteSitePremierAddOnSlot_571195, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXmlSlot_571206 = ref object of OpenApiRestCall_567650
proc url_SitesListSitePublishingProfileXmlSlot_571208(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXmlSlot_571207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571209 = path.getOrDefault("resourceGroupName")
  valid_571209 = validateParameter(valid_571209, JString, required = true,
                                 default = nil)
  if valid_571209 != nil:
    section.add "resourceGroupName", valid_571209
  var valid_571210 = path.getOrDefault("name")
  valid_571210 = validateParameter(valid_571210, JString, required = true,
                                 default = nil)
  if valid_571210 != nil:
    section.add "name", valid_571210
  var valid_571211 = path.getOrDefault("slot")
  valid_571211 = validateParameter(valid_571211, JString, required = true,
                                 default = nil)
  if valid_571211 != nil:
    section.add "slot", valid_571211
  var valid_571212 = path.getOrDefault("subscriptionId")
  valid_571212 = validateParameter(valid_571212, JString, required = true,
                                 default = nil)
  if valid_571212 != nil:
    section.add "subscriptionId", valid_571212
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571213 = query.getOrDefault("api-version")
  valid_571213 = validateParameter(valid_571213, JString, required = true,
                                 default = nil)
  if valid_571213 != nil:
    section.add "api-version", valid_571213
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571215: Call_SitesListSitePublishingProfileXmlSlot_571206;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571215.validator(path, query, header, formData, body)
  let scheme = call_571215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571215.url(scheme.get, call_571215.host, call_571215.base,
                         call_571215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571215, url, valid)

proc call*(call_571216: Call_SitesListSitePublishingProfileXmlSlot_571206;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; options: JsonNode): Recallable =
  ## sitesListSitePublishingProfileXmlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  var path_571217 = newJObject()
  var query_571218 = newJObject()
  var body_571219 = newJObject()
  add(path_571217, "resourceGroupName", newJString(resourceGroupName))
  add(query_571218, "api-version", newJString(apiVersion))
  add(path_571217, "name", newJString(name))
  add(path_571217, "slot", newJString(slot))
  add(path_571217, "subscriptionId", newJString(subscriptionId))
  if options != nil:
    body_571219 = options
  result = call_571216.call(path_571217, query_571218, nil, nil, body_571219)

var sitesListSitePublishingProfileXmlSlot* = Call_SitesListSitePublishingProfileXmlSlot_571206(
    name: "sitesListSitePublishingProfileXmlSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_SitesListSitePublishingProfileXmlSlot_571207, base: "",
    url: url_SitesListSitePublishingProfileXmlSlot_571208, schemes: {Scheme.Https})
type
  Call_SitesRecoverSiteSlot_571220 = ref object of OpenApiRestCall_567650
proc url_SitesRecoverSiteSlot_571222(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSiteSlot_571221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571223 = path.getOrDefault("resourceGroupName")
  valid_571223 = validateParameter(valid_571223, JString, required = true,
                                 default = nil)
  if valid_571223 != nil:
    section.add "resourceGroupName", valid_571223
  var valid_571224 = path.getOrDefault("name")
  valid_571224 = validateParameter(valid_571224, JString, required = true,
                                 default = nil)
  if valid_571224 != nil:
    section.add "name", valid_571224
  var valid_571225 = path.getOrDefault("slot")
  valid_571225 = validateParameter(valid_571225, JString, required = true,
                                 default = nil)
  if valid_571225 != nil:
    section.add "slot", valid_571225
  var valid_571226 = path.getOrDefault("subscriptionId")
  valid_571226 = validateParameter(valid_571226, JString, required = true,
                                 default = nil)
  if valid_571226 != nil:
    section.add "subscriptionId", valid_571226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571227 = query.getOrDefault("api-version")
  valid_571227 = validateParameter(valid_571227, JString, required = true,
                                 default = nil)
  if valid_571227 != nil:
    section.add "api-version", valid_571227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571229: Call_SitesRecoverSiteSlot_571220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571229.validator(path, query, header, formData, body)
  let scheme = call_571229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571229.url(scheme.get, call_571229.host, call_571229.base,
                         call_571229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571229, url, valid)

proc call*(call_571230: Call_SitesRecoverSiteSlot_571220;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_571231 = newJObject()
  var query_571232 = newJObject()
  var body_571233 = newJObject()
  add(path_571231, "resourceGroupName", newJString(resourceGroupName))
  add(query_571232, "api-version", newJString(apiVersion))
  add(path_571231, "name", newJString(name))
  add(path_571231, "slot", newJString(slot))
  add(path_571231, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_571233 = recoveryEntity
  result = call_571230.call(path_571231, query_571232, nil, nil, body_571233)

var sitesRecoverSiteSlot* = Call_SitesRecoverSiteSlot_571220(
    name: "sitesRecoverSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_SitesRecoverSiteSlot_571221, base: "",
    url: url_SitesRecoverSiteSlot_571222, schemes: {Scheme.Https})
type
  Call_SitesResetSlotConfigSlot_571234 = ref object of OpenApiRestCall_567650
proc url_SitesResetSlotConfigSlot_571236(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetSlotConfigSlot_571235(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571237 = path.getOrDefault("resourceGroupName")
  valid_571237 = validateParameter(valid_571237, JString, required = true,
                                 default = nil)
  if valid_571237 != nil:
    section.add "resourceGroupName", valid_571237
  var valid_571238 = path.getOrDefault("name")
  valid_571238 = validateParameter(valid_571238, JString, required = true,
                                 default = nil)
  if valid_571238 != nil:
    section.add "name", valid_571238
  var valid_571239 = path.getOrDefault("slot")
  valid_571239 = validateParameter(valid_571239, JString, required = true,
                                 default = nil)
  if valid_571239 != nil:
    section.add "slot", valid_571239
  var valid_571240 = path.getOrDefault("subscriptionId")
  valid_571240 = validateParameter(valid_571240, JString, required = true,
                                 default = nil)
  if valid_571240 != nil:
    section.add "subscriptionId", valid_571240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571241 = query.getOrDefault("api-version")
  valid_571241 = validateParameter(valid_571241, JString, required = true,
                                 default = nil)
  if valid_571241 != nil:
    section.add "api-version", valid_571241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571242: Call_SitesResetSlotConfigSlot_571234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571242.validator(path, query, header, formData, body)
  let scheme = call_571242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571242.url(scheme.get, call_571242.host, call_571242.base,
                         call_571242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571242, url, valid)

proc call*(call_571243: Call_SitesResetSlotConfigSlot_571234;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesResetSlotConfigSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571244 = newJObject()
  var query_571245 = newJObject()
  add(path_571244, "resourceGroupName", newJString(resourceGroupName))
  add(query_571245, "api-version", newJString(apiVersion))
  add(path_571244, "name", newJString(name))
  add(path_571244, "slot", newJString(slot))
  add(path_571244, "subscriptionId", newJString(subscriptionId))
  result = call_571243.call(path_571244, query_571245, nil, nil, nil)

var sitesResetSlotConfigSlot* = Call_SitesResetSlotConfigSlot_571234(
    name: "sitesResetSlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_SitesResetSlotConfigSlot_571235, base: "",
    url: url_SitesResetSlotConfigSlot_571236, schemes: {Scheme.Https})
type
  Call_SitesRestartSiteSlot_571246 = ref object of OpenApiRestCall_567650
proc url_SitesRestartSiteSlot_571248(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSiteSlot_571247(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571249 = path.getOrDefault("resourceGroupName")
  valid_571249 = validateParameter(valid_571249, JString, required = true,
                                 default = nil)
  if valid_571249 != nil:
    section.add "resourceGroupName", valid_571249
  var valid_571250 = path.getOrDefault("name")
  valid_571250 = validateParameter(valid_571250, JString, required = true,
                                 default = nil)
  if valid_571250 != nil:
    section.add "name", valid_571250
  var valid_571251 = path.getOrDefault("slot")
  valid_571251 = validateParameter(valid_571251, JString, required = true,
                                 default = nil)
  if valid_571251 != nil:
    section.add "slot", valid_571251
  var valid_571252 = path.getOrDefault("subscriptionId")
  valid_571252 = validateParameter(valid_571252, JString, required = true,
                                 default = nil)
  if valid_571252 != nil:
    section.add "subscriptionId", valid_571252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571253 = query.getOrDefault("api-version")
  valid_571253 = validateParameter(valid_571253, JString, required = true,
                                 default = nil)
  if valid_571253 != nil:
    section.add "api-version", valid_571253
  var valid_571254 = query.getOrDefault("synchronous")
  valid_571254 = validateParameter(valid_571254, JBool, required = false, default = nil)
  if valid_571254 != nil:
    section.add "synchronous", valid_571254
  var valid_571255 = query.getOrDefault("softRestart")
  valid_571255 = validateParameter(valid_571255, JBool, required = false, default = nil)
  if valid_571255 != nil:
    section.add "softRestart", valid_571255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571256: Call_SitesRestartSiteSlot_571246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571256.validator(path, query, header, formData, body)
  let scheme = call_571256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571256.url(scheme.get, call_571256.host, call_571256.base,
                         call_571256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571256, url, valid)

proc call*(call_571257: Call_SitesRestartSiteSlot_571246;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; synchronous: bool = false; softRestart: bool = false): Recallable =
  ## sitesRestartSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_571258 = newJObject()
  var query_571259 = newJObject()
  add(path_571258, "resourceGroupName", newJString(resourceGroupName))
  add(query_571259, "api-version", newJString(apiVersion))
  add(path_571258, "name", newJString(name))
  add(path_571258, "slot", newJString(slot))
  add(path_571258, "subscriptionId", newJString(subscriptionId))
  add(query_571259, "synchronous", newJBool(synchronous))
  add(query_571259, "softRestart", newJBool(softRestart))
  result = call_571257.call(path_571258, query_571259, nil, nil, nil)

var sitesRestartSiteSlot* = Call_SitesRestartSiteSlot_571246(
    name: "sitesRestartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_SitesRestartSiteSlot_571247, base: "",
    url: url_SitesRestartSiteSlot_571248, schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesSlot_571260 = ref object of OpenApiRestCall_567650
proc url_SitesGetSlotsDifferencesSlot_571262(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesSlot_571261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of the source slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571263 = path.getOrDefault("resourceGroupName")
  valid_571263 = validateParameter(valid_571263, JString, required = true,
                                 default = nil)
  if valid_571263 != nil:
    section.add "resourceGroupName", valid_571263
  var valid_571264 = path.getOrDefault("name")
  valid_571264 = validateParameter(valid_571264, JString, required = true,
                                 default = nil)
  if valid_571264 != nil:
    section.add "name", valid_571264
  var valid_571265 = path.getOrDefault("slot")
  valid_571265 = validateParameter(valid_571265, JString, required = true,
                                 default = nil)
  if valid_571265 != nil:
    section.add "slot", valid_571265
  var valid_571266 = path.getOrDefault("subscriptionId")
  valid_571266 = validateParameter(valid_571266, JString, required = true,
                                 default = nil)
  if valid_571266 != nil:
    section.add "subscriptionId", valid_571266
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571267 = query.getOrDefault("api-version")
  valid_571267 = validateParameter(valid_571267, JString, required = true,
                                 default = nil)
  if valid_571267 != nil:
    section.add "api-version", valid_571267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571269: Call_SitesGetSlotsDifferencesSlot_571260; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571269.validator(path, query, header, formData, body)
  let scheme = call_571269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571269.url(scheme.get, call_571269.host, call_571269.base,
                         call_571269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571269, url, valid)

proc call*(call_571270: Call_SitesGetSlotsDifferencesSlot_571260;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesGetSlotsDifferencesSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of the source slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_571271 = newJObject()
  var query_571272 = newJObject()
  var body_571273 = newJObject()
  add(path_571271, "resourceGroupName", newJString(resourceGroupName))
  add(query_571272, "api-version", newJString(apiVersion))
  add(path_571271, "name", newJString(name))
  add(path_571271, "slot", newJString(slot))
  add(path_571271, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571273 = slotSwapEntity
  result = call_571270.call(path_571271, query_571272, nil, nil, body_571273)

var sitesGetSlotsDifferencesSlot* = Call_SitesGetSlotsDifferencesSlot_571260(
    name: "sitesGetSlotsDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesSlot_571261, base: "",
    url: url_SitesGetSlotsDifferencesSlot_571262, schemes: {Scheme.Https})
type
  Call_SitesSwapSlotsSlot_571274 = ref object of OpenApiRestCall_567650
proc url_SitesSwapSlotsSlot_571276(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotsSlot_571275(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of source slot for the swap
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571277 = path.getOrDefault("resourceGroupName")
  valid_571277 = validateParameter(valid_571277, JString, required = true,
                                 default = nil)
  if valid_571277 != nil:
    section.add "resourceGroupName", valid_571277
  var valid_571278 = path.getOrDefault("name")
  valid_571278 = validateParameter(valid_571278, JString, required = true,
                                 default = nil)
  if valid_571278 != nil:
    section.add "name", valid_571278
  var valid_571279 = path.getOrDefault("slot")
  valid_571279 = validateParameter(valid_571279, JString, required = true,
                                 default = nil)
  if valid_571279 != nil:
    section.add "slot", valid_571279
  var valid_571280 = path.getOrDefault("subscriptionId")
  valid_571280 = validateParameter(valid_571280, JString, required = true,
                                 default = nil)
  if valid_571280 != nil:
    section.add "subscriptionId", valid_571280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571281 = query.getOrDefault("api-version")
  valid_571281 = validateParameter(valid_571281, JString, required = true,
                                 default = nil)
  if valid_571281 != nil:
    section.add "api-version", valid_571281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571283: Call_SitesSwapSlotsSlot_571274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571283.validator(path, query, header, formData, body)
  let scheme = call_571283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571283.url(scheme.get, call_571283.host, call_571283.base,
                         call_571283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571283, url, valid)

proc call*(call_571284: Call_SitesSwapSlotsSlot_571274; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## sitesSwapSlotsSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of source slot for the swap
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_571285 = newJObject()
  var query_571286 = newJObject()
  var body_571287 = newJObject()
  add(path_571285, "resourceGroupName", newJString(resourceGroupName))
  add(query_571286, "api-version", newJString(apiVersion))
  add(path_571285, "name", newJString(name))
  add(path_571285, "slot", newJString(slot))
  add(path_571285, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571287 = slotSwapEntity
  result = call_571284.call(path_571285, query_571286, nil, nil, body_571287)

var sitesSwapSlotsSlot* = Call_SitesSwapSlotsSlot_571274(
    name: "sitesSwapSlotsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_SitesSwapSlotsSlot_571275, base: "",
    url: url_SitesSwapSlotsSlot_571276, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshotsSlot_571288 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSnapshotsSlot_571290(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshotsSlot_571289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  ##   name: JString (required)
  ##       : Website Name
  ##   slot: JString (required)
  ##       : Website Slot
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571291 = path.getOrDefault("resourceGroupName")
  valid_571291 = validateParameter(valid_571291, JString, required = true,
                                 default = nil)
  if valid_571291 != nil:
    section.add "resourceGroupName", valid_571291
  var valid_571292 = path.getOrDefault("name")
  valid_571292 = validateParameter(valid_571292, JString, required = true,
                                 default = nil)
  if valid_571292 != nil:
    section.add "name", valid_571292
  var valid_571293 = path.getOrDefault("slot")
  valid_571293 = validateParameter(valid_571293, JString, required = true,
                                 default = nil)
  if valid_571293 != nil:
    section.add "slot", valid_571293
  var valid_571294 = path.getOrDefault("subscriptionId")
  valid_571294 = validateParameter(valid_571294, JString, required = true,
                                 default = nil)
  if valid_571294 != nil:
    section.add "subscriptionId", valid_571294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571295 = query.getOrDefault("api-version")
  valid_571295 = validateParameter(valid_571295, JString, required = true,
                                 default = nil)
  if valid_571295 != nil:
    section.add "api-version", valid_571295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571296: Call_SitesGetSiteSnapshotsSlot_571288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571296.validator(path, query, header, formData, body)
  let scheme = call_571296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571296.url(scheme.get, call_571296.host, call_571296.base,
                         call_571296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571296, url, valid)

proc call*(call_571297: Call_SitesGetSiteSnapshotsSlot_571288;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSnapshotsSlot
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   slot: string (required)
  ##       : Website Slot
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571298 = newJObject()
  var query_571299 = newJObject()
  add(path_571298, "resourceGroupName", newJString(resourceGroupName))
  add(query_571299, "api-version", newJString(apiVersion))
  add(path_571298, "name", newJString(name))
  add(path_571298, "slot", newJString(slot))
  add(path_571298, "subscriptionId", newJString(subscriptionId))
  result = call_571297.call(path_571298, query_571299, nil, nil, nil)

var sitesGetSiteSnapshotsSlot* = Call_SitesGetSiteSnapshotsSlot_571288(
    name: "sitesGetSiteSnapshotsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_SitesGetSiteSnapshotsSlot_571289, base: "",
    url: url_SitesGetSiteSnapshotsSlot_571290, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControlSlot_571312 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteSourceControlSlot_571314(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControlSlot_571313(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571315 = path.getOrDefault("resourceGroupName")
  valid_571315 = validateParameter(valid_571315, JString, required = true,
                                 default = nil)
  if valid_571315 != nil:
    section.add "resourceGroupName", valid_571315
  var valid_571316 = path.getOrDefault("name")
  valid_571316 = validateParameter(valid_571316, JString, required = true,
                                 default = nil)
  if valid_571316 != nil:
    section.add "name", valid_571316
  var valid_571317 = path.getOrDefault("slot")
  valid_571317 = validateParameter(valid_571317, JString, required = true,
                                 default = nil)
  if valid_571317 != nil:
    section.add "slot", valid_571317
  var valid_571318 = path.getOrDefault("subscriptionId")
  valid_571318 = validateParameter(valid_571318, JString, required = true,
                                 default = nil)
  if valid_571318 != nil:
    section.add "subscriptionId", valid_571318
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571319 = query.getOrDefault("api-version")
  valid_571319 = validateParameter(valid_571319, JString, required = true,
                                 default = nil)
  if valid_571319 != nil:
    section.add "api-version", valid_571319
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571321: Call_SitesCreateOrUpdateSiteSourceControlSlot_571312;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571321.validator(path, query, header, formData, body)
  let scheme = call_571321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571321.url(scheme.get, call_571321.host, call_571321.base,
                         call_571321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571321, url, valid)

proc call*(call_571322: Call_SitesCreateOrUpdateSiteSourceControlSlot_571312;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_571323 = newJObject()
  var query_571324 = newJObject()
  var body_571325 = newJObject()
  add(path_571323, "resourceGroupName", newJString(resourceGroupName))
  add(query_571324, "api-version", newJString(apiVersion))
  add(path_571323, "name", newJString(name))
  add(path_571323, "slot", newJString(slot))
  add(path_571323, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571325 = siteSourceControl
  result = call_571322.call(path_571323, query_571324, nil, nil, body_571325)

var sitesCreateOrUpdateSiteSourceControlSlot* = Call_SitesCreateOrUpdateSiteSourceControlSlot_571312(
    name: "sitesCreateOrUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControlSlot_571313, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControlSlot_571314,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControlSlot_571300 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSourceControlSlot_571302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControlSlot_571301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571303 = path.getOrDefault("resourceGroupName")
  valid_571303 = validateParameter(valid_571303, JString, required = true,
                                 default = nil)
  if valid_571303 != nil:
    section.add "resourceGroupName", valid_571303
  var valid_571304 = path.getOrDefault("name")
  valid_571304 = validateParameter(valid_571304, JString, required = true,
                                 default = nil)
  if valid_571304 != nil:
    section.add "name", valid_571304
  var valid_571305 = path.getOrDefault("slot")
  valid_571305 = validateParameter(valid_571305, JString, required = true,
                                 default = nil)
  if valid_571305 != nil:
    section.add "slot", valid_571305
  var valid_571306 = path.getOrDefault("subscriptionId")
  valid_571306 = validateParameter(valid_571306, JString, required = true,
                                 default = nil)
  if valid_571306 != nil:
    section.add "subscriptionId", valid_571306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571307 = query.getOrDefault("api-version")
  valid_571307 = validateParameter(valid_571307, JString, required = true,
                                 default = nil)
  if valid_571307 != nil:
    section.add "api-version", valid_571307
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571308: Call_SitesGetSiteSourceControlSlot_571300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571308.validator(path, query, header, formData, body)
  let scheme = call_571308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571308.url(scheme.get, call_571308.host, call_571308.base,
                         call_571308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571308, url, valid)

proc call*(call_571309: Call_SitesGetSiteSourceControlSlot_571300;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571310 = newJObject()
  var query_571311 = newJObject()
  add(path_571310, "resourceGroupName", newJString(resourceGroupName))
  add(query_571311, "api-version", newJString(apiVersion))
  add(path_571310, "name", newJString(name))
  add(path_571310, "slot", newJString(slot))
  add(path_571310, "subscriptionId", newJString(subscriptionId))
  result = call_571309.call(path_571310, query_571311, nil, nil, nil)

var sitesGetSiteSourceControlSlot* = Call_SitesGetSiteSourceControlSlot_571300(
    name: "sitesGetSiteSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControlSlot_571301, base: "",
    url: url_SitesGetSiteSourceControlSlot_571302, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControlSlot_571338 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteSourceControlSlot_571340(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControlSlot_571339(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571341 = path.getOrDefault("resourceGroupName")
  valid_571341 = validateParameter(valid_571341, JString, required = true,
                                 default = nil)
  if valid_571341 != nil:
    section.add "resourceGroupName", valid_571341
  var valid_571342 = path.getOrDefault("name")
  valid_571342 = validateParameter(valid_571342, JString, required = true,
                                 default = nil)
  if valid_571342 != nil:
    section.add "name", valid_571342
  var valid_571343 = path.getOrDefault("slot")
  valid_571343 = validateParameter(valid_571343, JString, required = true,
                                 default = nil)
  if valid_571343 != nil:
    section.add "slot", valid_571343
  var valid_571344 = path.getOrDefault("subscriptionId")
  valid_571344 = validateParameter(valid_571344, JString, required = true,
                                 default = nil)
  if valid_571344 != nil:
    section.add "subscriptionId", valid_571344
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571345 = query.getOrDefault("api-version")
  valid_571345 = validateParameter(valid_571345, JString, required = true,
                                 default = nil)
  if valid_571345 != nil:
    section.add "api-version", valid_571345
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571347: Call_SitesUpdateSiteSourceControlSlot_571338;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571347.validator(path, query, header, formData, body)
  let scheme = call_571347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571347.url(scheme.get, call_571347.host, call_571347.base,
                         call_571347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571347, url, valid)

proc call*(call_571348: Call_SitesUpdateSiteSourceControlSlot_571338;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesUpdateSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_571349 = newJObject()
  var query_571350 = newJObject()
  var body_571351 = newJObject()
  add(path_571349, "resourceGroupName", newJString(resourceGroupName))
  add(query_571350, "api-version", newJString(apiVersion))
  add(path_571349, "name", newJString(name))
  add(path_571349, "slot", newJString(slot))
  add(path_571349, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571351 = siteSourceControl
  result = call_571348.call(path_571349, query_571350, nil, nil, body_571351)

var sitesUpdateSiteSourceControlSlot* = Call_SitesUpdateSiteSourceControlSlot_571338(
    name: "sitesUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControlSlot_571339, base: "",
    url: url_SitesUpdateSiteSourceControlSlot_571340, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControlSlot_571326 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteSourceControlSlot_571328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControlSlot_571327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571329 = path.getOrDefault("resourceGroupName")
  valid_571329 = validateParameter(valid_571329, JString, required = true,
                                 default = nil)
  if valid_571329 != nil:
    section.add "resourceGroupName", valid_571329
  var valid_571330 = path.getOrDefault("name")
  valid_571330 = validateParameter(valid_571330, JString, required = true,
                                 default = nil)
  if valid_571330 != nil:
    section.add "name", valid_571330
  var valid_571331 = path.getOrDefault("slot")
  valid_571331 = validateParameter(valid_571331, JString, required = true,
                                 default = nil)
  if valid_571331 != nil:
    section.add "slot", valid_571331
  var valid_571332 = path.getOrDefault("subscriptionId")
  valid_571332 = validateParameter(valid_571332, JString, required = true,
                                 default = nil)
  if valid_571332 != nil:
    section.add "subscriptionId", valid_571332
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571333 = query.getOrDefault("api-version")
  valid_571333 = validateParameter(valid_571333, JString, required = true,
                                 default = nil)
  if valid_571333 != nil:
    section.add "api-version", valid_571333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571334: Call_SitesDeleteSiteSourceControlSlot_571326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571334.validator(path, query, header, formData, body)
  let scheme = call_571334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571334.url(scheme.get, call_571334.host, call_571334.base,
                         call_571334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571334, url, valid)

proc call*(call_571335: Call_SitesDeleteSiteSourceControlSlot_571326;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesDeleteSiteSourceControlSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571336 = newJObject()
  var query_571337 = newJObject()
  add(path_571336, "resourceGroupName", newJString(resourceGroupName))
  add(query_571337, "api-version", newJString(apiVersion))
  add(path_571336, "name", newJString(name))
  add(path_571336, "slot", newJString(slot))
  add(path_571336, "subscriptionId", newJString(subscriptionId))
  result = call_571335.call(path_571336, query_571337, nil, nil, nil)

var sitesDeleteSiteSourceControlSlot* = Call_SitesDeleteSiteSourceControlSlot_571326(
    name: "sitesDeleteSiteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControlSlot_571327, base: "",
    url: url_SitesDeleteSiteSourceControlSlot_571328, schemes: {Scheme.Https})
type
  Call_SitesStartSiteSlot_571352 = ref object of OpenApiRestCall_567650
proc url_SitesStartSiteSlot_571354(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSiteSlot_571353(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571355 = path.getOrDefault("resourceGroupName")
  valid_571355 = validateParameter(valid_571355, JString, required = true,
                                 default = nil)
  if valid_571355 != nil:
    section.add "resourceGroupName", valid_571355
  var valid_571356 = path.getOrDefault("name")
  valid_571356 = validateParameter(valid_571356, JString, required = true,
                                 default = nil)
  if valid_571356 != nil:
    section.add "name", valid_571356
  var valid_571357 = path.getOrDefault("slot")
  valid_571357 = validateParameter(valid_571357, JString, required = true,
                                 default = nil)
  if valid_571357 != nil:
    section.add "slot", valid_571357
  var valid_571358 = path.getOrDefault("subscriptionId")
  valid_571358 = validateParameter(valid_571358, JString, required = true,
                                 default = nil)
  if valid_571358 != nil:
    section.add "subscriptionId", valid_571358
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571359 = query.getOrDefault("api-version")
  valid_571359 = validateParameter(valid_571359, JString, required = true,
                                 default = nil)
  if valid_571359 != nil:
    section.add "api-version", valid_571359
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571360: Call_SitesStartSiteSlot_571352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571360.validator(path, query, header, formData, body)
  let scheme = call_571360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571360.url(scheme.get, call_571360.host, call_571360.base,
                         call_571360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571360, url, valid)

proc call*(call_571361: Call_SitesStartSiteSlot_571352; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesStartSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571362 = newJObject()
  var query_571363 = newJObject()
  add(path_571362, "resourceGroupName", newJString(resourceGroupName))
  add(query_571363, "api-version", newJString(apiVersion))
  add(path_571362, "name", newJString(name))
  add(path_571362, "slot", newJString(slot))
  add(path_571362, "subscriptionId", newJString(subscriptionId))
  result = call_571361.call(path_571362, query_571363, nil, nil, nil)

var sitesStartSiteSlot* = Call_SitesStartSiteSlot_571352(
    name: "sitesStartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_SitesStartSiteSlot_571353, base: "",
    url: url_SitesStartSiteSlot_571354, schemes: {Scheme.Https})
type
  Call_SitesStopSiteSlot_571364 = ref object of OpenApiRestCall_567650
proc url_SitesStopSiteSlot_571366(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSiteSlot_571365(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571367 = path.getOrDefault("resourceGroupName")
  valid_571367 = validateParameter(valid_571367, JString, required = true,
                                 default = nil)
  if valid_571367 != nil:
    section.add "resourceGroupName", valid_571367
  var valid_571368 = path.getOrDefault("name")
  valid_571368 = validateParameter(valid_571368, JString, required = true,
                                 default = nil)
  if valid_571368 != nil:
    section.add "name", valid_571368
  var valid_571369 = path.getOrDefault("slot")
  valid_571369 = validateParameter(valid_571369, JString, required = true,
                                 default = nil)
  if valid_571369 != nil:
    section.add "slot", valid_571369
  var valid_571370 = path.getOrDefault("subscriptionId")
  valid_571370 = validateParameter(valid_571370, JString, required = true,
                                 default = nil)
  if valid_571370 != nil:
    section.add "subscriptionId", valid_571370
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571371 = query.getOrDefault("api-version")
  valid_571371 = validateParameter(valid_571371, JString, required = true,
                                 default = nil)
  if valid_571371 != nil:
    section.add "api-version", valid_571371
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571372: Call_SitesStopSiteSlot_571364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571372.validator(path, query, header, formData, body)
  let scheme = call_571372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571372.url(scheme.get, call_571372.host, call_571372.base,
                         call_571372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571372, url, valid)

proc call*(call_571373: Call_SitesStopSiteSlot_571364; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## sitesStopSiteSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571374 = newJObject()
  var query_571375 = newJObject()
  add(path_571374, "resourceGroupName", newJString(resourceGroupName))
  add(query_571375, "api-version", newJString(apiVersion))
  add(path_571374, "name", newJString(name))
  add(path_571374, "slot", newJString(slot))
  add(path_571374, "subscriptionId", newJString(subscriptionId))
  result = call_571373.call(path_571374, query_571375, nil, nil, nil)

var sitesStopSiteSlot* = Call_SitesStopSiteSlot_571364(name: "sitesStopSiteSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_SitesStopSiteSlot_571365, base: "",
    url: url_SitesStopSiteSlot_571366, schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepositorySlot_571376 = ref object of OpenApiRestCall_567650
proc url_SitesSyncSiteRepositorySlot_571378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepositorySlot_571377(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   slot: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571379 = path.getOrDefault("resourceGroupName")
  valid_571379 = validateParameter(valid_571379, JString, required = true,
                                 default = nil)
  if valid_571379 != nil:
    section.add "resourceGroupName", valid_571379
  var valid_571380 = path.getOrDefault("name")
  valid_571380 = validateParameter(valid_571380, JString, required = true,
                                 default = nil)
  if valid_571380 != nil:
    section.add "name", valid_571380
  var valid_571381 = path.getOrDefault("slot")
  valid_571381 = validateParameter(valid_571381, JString, required = true,
                                 default = nil)
  if valid_571381 != nil:
    section.add "slot", valid_571381
  var valid_571382 = path.getOrDefault("subscriptionId")
  valid_571382 = validateParameter(valid_571382, JString, required = true,
                                 default = nil)
  if valid_571382 != nil:
    section.add "subscriptionId", valid_571382
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571383 = query.getOrDefault("api-version")
  valid_571383 = validateParameter(valid_571383, JString, required = true,
                                 default = nil)
  if valid_571383 != nil:
    section.add "api-version", valid_571383
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571384: Call_SitesSyncSiteRepositorySlot_571376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571384.validator(path, query, header, formData, body)
  let scheme = call_571384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571384.url(scheme.get, call_571384.host, call_571384.base,
                         call_571384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571384, url, valid)

proc call*(call_571385: Call_SitesSyncSiteRepositorySlot_571376;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesSyncSiteRepositorySlot
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   slot: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571386 = newJObject()
  var query_571387 = newJObject()
  add(path_571386, "resourceGroupName", newJString(resourceGroupName))
  add(query_571387, "api-version", newJString(apiVersion))
  add(path_571386, "name", newJString(name))
  add(path_571386, "slot", newJString(slot))
  add(path_571386, "subscriptionId", newJString(subscriptionId))
  result = call_571385.call(path_571386, query_571387, nil, nil, nil)

var sitesSyncSiteRepositorySlot* = Call_SitesSyncSiteRepositorySlot_571376(
    name: "sitesSyncSiteRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_SitesSyncSiteRepositorySlot_571377, base: "",
    url: url_SitesSyncSiteRepositorySlot_571378, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsagesSlot_571388 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteUsagesSlot_571390(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsagesSlot_571389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571391 = path.getOrDefault("resourceGroupName")
  valid_571391 = validateParameter(valid_571391, JString, required = true,
                                 default = nil)
  if valid_571391 != nil:
    section.add "resourceGroupName", valid_571391
  var valid_571392 = path.getOrDefault("name")
  valid_571392 = validateParameter(valid_571392, JString, required = true,
                                 default = nil)
  if valid_571392 != nil:
    section.add "name", valid_571392
  var valid_571393 = path.getOrDefault("slot")
  valid_571393 = validateParameter(valid_571393, JString, required = true,
                                 default = nil)
  if valid_571393 != nil:
    section.add "slot", valid_571393
  var valid_571394 = path.getOrDefault("subscriptionId")
  valid_571394 = validateParameter(valid_571394, JString, required = true,
                                 default = nil)
  if valid_571394 != nil:
    section.add "subscriptionId", valid_571394
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571395 = query.getOrDefault("api-version")
  valid_571395 = validateParameter(valid_571395, JString, required = true,
                                 default = nil)
  if valid_571395 != nil:
    section.add "api-version", valid_571395
  var valid_571396 = query.getOrDefault("$filter")
  valid_571396 = validateParameter(valid_571396, JString, required = false,
                                 default = nil)
  if valid_571396 != nil:
    section.add "$filter", valid_571396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571397: Call_SitesGetSiteUsagesSlot_571388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571397.validator(path, query, header, formData, body)
  let scheme = call_571397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571397.url(scheme.get, call_571397.host, call_571397.base,
                         call_571397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571397, url, valid)

proc call*(call_571398: Call_SitesGetSiteUsagesSlot_571388;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## sitesGetSiteUsagesSlot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571399 = newJObject()
  var query_571400 = newJObject()
  add(path_571399, "resourceGroupName", newJString(resourceGroupName))
  add(query_571400, "api-version", newJString(apiVersion))
  add(path_571399, "name", newJString(name))
  add(path_571399, "slot", newJString(slot))
  add(path_571399, "subscriptionId", newJString(subscriptionId))
  add(query_571400, "$filter", newJString(Filter))
  result = call_571398.call(path_571399, query_571400, nil, nil, nil)

var sitesGetSiteUsagesSlot* = Call_SitesGetSiteUsagesSlot_571388(
    name: "sitesGetSiteUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_SitesGetSiteUsagesSlot_571389, base: "",
    url: url_SitesGetSiteUsagesSlot_571390, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionsSlot_571401 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVNETConnectionsSlot_571403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionsSlot_571402(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571404 = path.getOrDefault("resourceGroupName")
  valid_571404 = validateParameter(valid_571404, JString, required = true,
                                 default = nil)
  if valid_571404 != nil:
    section.add "resourceGroupName", valid_571404
  var valid_571405 = path.getOrDefault("name")
  valid_571405 = validateParameter(valid_571405, JString, required = true,
                                 default = nil)
  if valid_571405 != nil:
    section.add "name", valid_571405
  var valid_571406 = path.getOrDefault("slot")
  valid_571406 = validateParameter(valid_571406, JString, required = true,
                                 default = nil)
  if valid_571406 != nil:
    section.add "slot", valid_571406
  var valid_571407 = path.getOrDefault("subscriptionId")
  valid_571407 = validateParameter(valid_571407, JString, required = true,
                                 default = nil)
  if valid_571407 != nil:
    section.add "subscriptionId", valid_571407
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571408 = query.getOrDefault("api-version")
  valid_571408 = validateParameter(valid_571408, JString, required = true,
                                 default = nil)
  if valid_571408 != nil:
    section.add "api-version", valid_571408
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571409: Call_SitesGetSiteVNETConnectionsSlot_571401;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571409.validator(path, query, header, formData, body)
  let scheme = call_571409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571409.url(scheme.get, call_571409.host, call_571409.base,
                         call_571409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571409, url, valid)

proc call*(call_571410: Call_SitesGetSiteVNETConnectionsSlot_571401;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnectionsSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571411 = newJObject()
  var query_571412 = newJObject()
  add(path_571411, "resourceGroupName", newJString(resourceGroupName))
  add(query_571412, "api-version", newJString(apiVersion))
  add(path_571411, "name", newJString(name))
  add(path_571411, "slot", newJString(slot))
  add(path_571411, "subscriptionId", newJString(subscriptionId))
  result = call_571410.call(path_571411, query_571412, nil, nil, nil)

var sitesGetSiteVNETConnectionsSlot* = Call_SitesGetSiteVNETConnectionsSlot_571401(
    name: "sitesGetSiteVNETConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnectionsSlot_571402, base: "",
    url: url_SitesGetSiteVNETConnectionsSlot_571403, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionSlot_571426 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteVNETConnectionSlot_571428(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionSlot_571427(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571429 = path.getOrDefault("resourceGroupName")
  valid_571429 = validateParameter(valid_571429, JString, required = true,
                                 default = nil)
  if valid_571429 != nil:
    section.add "resourceGroupName", valid_571429
  var valid_571430 = path.getOrDefault("name")
  valid_571430 = validateParameter(valid_571430, JString, required = true,
                                 default = nil)
  if valid_571430 != nil:
    section.add "name", valid_571430
  var valid_571431 = path.getOrDefault("vnetName")
  valid_571431 = validateParameter(valid_571431, JString, required = true,
                                 default = nil)
  if valid_571431 != nil:
    section.add "vnetName", valid_571431
  var valid_571432 = path.getOrDefault("slot")
  valid_571432 = validateParameter(valid_571432, JString, required = true,
                                 default = nil)
  if valid_571432 != nil:
    section.add "slot", valid_571432
  var valid_571433 = path.getOrDefault("subscriptionId")
  valid_571433 = validateParameter(valid_571433, JString, required = true,
                                 default = nil)
  if valid_571433 != nil:
    section.add "subscriptionId", valid_571433
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571434 = query.getOrDefault("api-version")
  valid_571434 = validateParameter(valid_571434, JString, required = true,
                                 default = nil)
  if valid_571434 != nil:
    section.add "api-version", valid_571434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571436: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_571426;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571436.validator(path, query, header, formData, body)
  let scheme = call_571436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571436.url(scheme.get, call_571436.host, call_571436.base,
                         call_571436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571436, url, valid)

proc call*(call_571437: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_571426;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571438 = newJObject()
  var query_571439 = newJObject()
  var body_571440 = newJObject()
  add(path_571438, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571440 = connectionEnvelope
  add(path_571438, "name", newJString(name))
  add(path_571438, "vnetName", newJString(vnetName))
  add(query_571439, "api-version", newJString(apiVersion))
  add(path_571438, "slot", newJString(slot))
  add(path_571438, "subscriptionId", newJString(subscriptionId))
  result = call_571437.call(path_571438, query_571439, nil, nil, body_571440)

var sitesCreateOrUpdateSiteVNETConnectionSlot* = Call_SitesCreateOrUpdateSiteVNETConnectionSlot_571426(
    name: "sitesCreateOrUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionSlot_571427,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionSlot_571428,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionSlot_571413 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVNETConnectionSlot_571415(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionSlot_571414(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571416 = path.getOrDefault("resourceGroupName")
  valid_571416 = validateParameter(valid_571416, JString, required = true,
                                 default = nil)
  if valid_571416 != nil:
    section.add "resourceGroupName", valid_571416
  var valid_571417 = path.getOrDefault("name")
  valid_571417 = validateParameter(valid_571417, JString, required = true,
                                 default = nil)
  if valid_571417 != nil:
    section.add "name", valid_571417
  var valid_571418 = path.getOrDefault("vnetName")
  valid_571418 = validateParameter(valid_571418, JString, required = true,
                                 default = nil)
  if valid_571418 != nil:
    section.add "vnetName", valid_571418
  var valid_571419 = path.getOrDefault("slot")
  valid_571419 = validateParameter(valid_571419, JString, required = true,
                                 default = nil)
  if valid_571419 != nil:
    section.add "slot", valid_571419
  var valid_571420 = path.getOrDefault("subscriptionId")
  valid_571420 = validateParameter(valid_571420, JString, required = true,
                                 default = nil)
  if valid_571420 != nil:
    section.add "subscriptionId", valid_571420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571421 = query.getOrDefault("api-version")
  valid_571421 = validateParameter(valid_571421, JString, required = true,
                                 default = nil)
  if valid_571421 != nil:
    section.add "api-version", valid_571421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571422: Call_SitesGetSiteVNETConnectionSlot_571413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571422.validator(path, query, header, formData, body)
  let scheme = call_571422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571422.url(scheme.get, call_571422.host, call_571422.base,
                         call_571422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571422, url, valid)

proc call*(call_571423: Call_SitesGetSiteVNETConnectionSlot_571413;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571424 = newJObject()
  var query_571425 = newJObject()
  add(path_571424, "resourceGroupName", newJString(resourceGroupName))
  add(query_571425, "api-version", newJString(apiVersion))
  add(path_571424, "name", newJString(name))
  add(path_571424, "vnetName", newJString(vnetName))
  add(path_571424, "slot", newJString(slot))
  add(path_571424, "subscriptionId", newJString(subscriptionId))
  result = call_571423.call(path_571424, query_571425, nil, nil, nil)

var sitesGetSiteVNETConnectionSlot* = Call_SitesGetSiteVNETConnectionSlot_571413(
    name: "sitesGetSiteVNETConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnectionSlot_571414, base: "",
    url: url_SitesGetSiteVNETConnectionSlot_571415, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionSlot_571454 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteVNETConnectionSlot_571456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionSlot_571455(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571457 = path.getOrDefault("resourceGroupName")
  valid_571457 = validateParameter(valid_571457, JString, required = true,
                                 default = nil)
  if valid_571457 != nil:
    section.add "resourceGroupName", valid_571457
  var valid_571458 = path.getOrDefault("name")
  valid_571458 = validateParameter(valid_571458, JString, required = true,
                                 default = nil)
  if valid_571458 != nil:
    section.add "name", valid_571458
  var valid_571459 = path.getOrDefault("vnetName")
  valid_571459 = validateParameter(valid_571459, JString, required = true,
                                 default = nil)
  if valid_571459 != nil:
    section.add "vnetName", valid_571459
  var valid_571460 = path.getOrDefault("slot")
  valid_571460 = validateParameter(valid_571460, JString, required = true,
                                 default = nil)
  if valid_571460 != nil:
    section.add "slot", valid_571460
  var valid_571461 = path.getOrDefault("subscriptionId")
  valid_571461 = validateParameter(valid_571461, JString, required = true,
                                 default = nil)
  if valid_571461 != nil:
    section.add "subscriptionId", valid_571461
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571462 = query.getOrDefault("api-version")
  valid_571462 = validateParameter(valid_571462, JString, required = true,
                                 default = nil)
  if valid_571462 != nil:
    section.add "api-version", valid_571462
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571464: Call_SitesUpdateSiteVNETConnectionSlot_571454;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571464.validator(path, query, header, formData, body)
  let scheme = call_571464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571464.url(scheme.get, call_571464.host, call_571464.base,
                         call_571464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571464, url, valid)

proc call*(call_571465: Call_SitesUpdateSiteVNETConnectionSlot_571454;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571466 = newJObject()
  var query_571467 = newJObject()
  var body_571468 = newJObject()
  add(path_571466, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571468 = connectionEnvelope
  add(path_571466, "name", newJString(name))
  add(path_571466, "vnetName", newJString(vnetName))
  add(query_571467, "api-version", newJString(apiVersion))
  add(path_571466, "slot", newJString(slot))
  add(path_571466, "subscriptionId", newJString(subscriptionId))
  result = call_571465.call(path_571466, query_571467, nil, nil, body_571468)

var sitesUpdateSiteVNETConnectionSlot* = Call_SitesUpdateSiteVNETConnectionSlot_571454(
    name: "sitesUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnectionSlot_571455, base: "",
    url: url_SitesUpdateSiteVNETConnectionSlot_571456, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnectionSlot_571441 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteVNETConnectionSlot_571443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnectionSlot_571442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571444 = path.getOrDefault("resourceGroupName")
  valid_571444 = validateParameter(valid_571444, JString, required = true,
                                 default = nil)
  if valid_571444 != nil:
    section.add "resourceGroupName", valid_571444
  var valid_571445 = path.getOrDefault("name")
  valid_571445 = validateParameter(valid_571445, JString, required = true,
                                 default = nil)
  if valid_571445 != nil:
    section.add "name", valid_571445
  var valid_571446 = path.getOrDefault("vnetName")
  valid_571446 = validateParameter(valid_571446, JString, required = true,
                                 default = nil)
  if valid_571446 != nil:
    section.add "vnetName", valid_571446
  var valid_571447 = path.getOrDefault("slot")
  valid_571447 = validateParameter(valid_571447, JString, required = true,
                                 default = nil)
  if valid_571447 != nil:
    section.add "slot", valid_571447
  var valid_571448 = path.getOrDefault("subscriptionId")
  valid_571448 = validateParameter(valid_571448, JString, required = true,
                                 default = nil)
  if valid_571448 != nil:
    section.add "subscriptionId", valid_571448
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571449 = query.getOrDefault("api-version")
  valid_571449 = validateParameter(valid_571449, JString, required = true,
                                 default = nil)
  if valid_571449 != nil:
    section.add "api-version", valid_571449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571450: Call_SitesDeleteSiteVNETConnectionSlot_571441;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571450.validator(path, query, header, formData, body)
  let scheme = call_571450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571450.url(scheme.get, call_571450.host, call_571450.base,
                         call_571450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571450, url, valid)

proc call*(call_571451: Call_SitesDeleteSiteVNETConnectionSlot_571441;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## sitesDeleteSiteVNETConnectionSlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571452 = newJObject()
  var query_571453 = newJObject()
  add(path_571452, "resourceGroupName", newJString(resourceGroupName))
  add(query_571453, "api-version", newJString(apiVersion))
  add(path_571452, "name", newJString(name))
  add(path_571452, "vnetName", newJString(vnetName))
  add(path_571452, "slot", newJString(slot))
  add(path_571452, "subscriptionId", newJString(subscriptionId))
  result = call_571451.call(path_571452, query_571453, nil, nil, nil)

var sitesDeleteSiteVNETConnectionSlot* = Call_SitesDeleteSiteVNETConnectionSlot_571441(
    name: "sitesDeleteSiteVNETConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnectionSlot_571442, base: "",
    url: url_SitesDeleteSiteVNETConnectionSlot_571443, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571483 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571485(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571484(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571486 = path.getOrDefault("resourceGroupName")
  valid_571486 = validateParameter(valid_571486, JString, required = true,
                                 default = nil)
  if valid_571486 != nil:
    section.add "resourceGroupName", valid_571486
  var valid_571487 = path.getOrDefault("name")
  valid_571487 = validateParameter(valid_571487, JString, required = true,
                                 default = nil)
  if valid_571487 != nil:
    section.add "name", valid_571487
  var valid_571488 = path.getOrDefault("vnetName")
  valid_571488 = validateParameter(valid_571488, JString, required = true,
                                 default = nil)
  if valid_571488 != nil:
    section.add "vnetName", valid_571488
  var valid_571489 = path.getOrDefault("slot")
  valid_571489 = validateParameter(valid_571489, JString, required = true,
                                 default = nil)
  if valid_571489 != nil:
    section.add "slot", valid_571489
  var valid_571490 = path.getOrDefault("gatewayName")
  valid_571490 = validateParameter(valid_571490, JString, required = true,
                                 default = nil)
  if valid_571490 != nil:
    section.add "gatewayName", valid_571490
  var valid_571491 = path.getOrDefault("subscriptionId")
  valid_571491 = validateParameter(valid_571491, JString, required = true,
                                 default = nil)
  if valid_571491 != nil:
    section.add "subscriptionId", valid_571491
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571492 = query.getOrDefault("api-version")
  valid_571492 = validateParameter(valid_571492, JString, required = true,
                                 default = nil)
  if valid_571492 != nil:
    section.add "api-version", valid_571492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571494: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571483;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571494.validator(path, query, header, formData, body)
  let scheme = call_571494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571494.url(scheme.get, call_571494.host, call_571494.base,
                         call_571494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571494, url, valid)

proc call*(call_571495: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571483;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571496 = newJObject()
  var query_571497 = newJObject()
  var body_571498 = newJObject()
  add(path_571496, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571498 = connectionEnvelope
  add(path_571496, "name", newJString(name))
  add(path_571496, "vnetName", newJString(vnetName))
  add(query_571497, "api-version", newJString(apiVersion))
  add(path_571496, "slot", newJString(slot))
  add(path_571496, "gatewayName", newJString(gatewayName))
  add(path_571496, "subscriptionId", newJString(subscriptionId))
  result = call_571495.call(path_571496, query_571497, nil, nil, body_571498)

var sitesCreateOrUpdateSiteVNETConnectionGatewaySlot* = Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571483(
    name: "sitesCreateOrUpdateSiteVNETConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571484,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_571485,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGatewaySlot_571469 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVnetGatewaySlot_571471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGatewaySlot_571470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571472 = path.getOrDefault("resourceGroupName")
  valid_571472 = validateParameter(valid_571472, JString, required = true,
                                 default = nil)
  if valid_571472 != nil:
    section.add "resourceGroupName", valid_571472
  var valid_571473 = path.getOrDefault("name")
  valid_571473 = validateParameter(valid_571473, JString, required = true,
                                 default = nil)
  if valid_571473 != nil:
    section.add "name", valid_571473
  var valid_571474 = path.getOrDefault("vnetName")
  valid_571474 = validateParameter(valid_571474, JString, required = true,
                                 default = nil)
  if valid_571474 != nil:
    section.add "vnetName", valid_571474
  var valid_571475 = path.getOrDefault("slot")
  valid_571475 = validateParameter(valid_571475, JString, required = true,
                                 default = nil)
  if valid_571475 != nil:
    section.add "slot", valid_571475
  var valid_571476 = path.getOrDefault("gatewayName")
  valid_571476 = validateParameter(valid_571476, JString, required = true,
                                 default = nil)
  if valid_571476 != nil:
    section.add "gatewayName", valid_571476
  var valid_571477 = path.getOrDefault("subscriptionId")
  valid_571477 = validateParameter(valid_571477, JString, required = true,
                                 default = nil)
  if valid_571477 != nil:
    section.add "subscriptionId", valid_571477
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571478 = query.getOrDefault("api-version")
  valid_571478 = validateParameter(valid_571478, JString, required = true,
                                 default = nil)
  if valid_571478 != nil:
    section.add "api-version", valid_571478
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571479: Call_SitesGetSiteVnetGatewaySlot_571469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571479.validator(path, query, header, formData, body)
  let scheme = call_571479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571479.url(scheme.get, call_571479.host, call_571479.base,
                         call_571479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571479, url, valid)

proc call*(call_571480: Call_SitesGetSiteVnetGatewaySlot_571469;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVnetGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571481 = newJObject()
  var query_571482 = newJObject()
  add(path_571481, "resourceGroupName", newJString(resourceGroupName))
  add(query_571482, "api-version", newJString(apiVersion))
  add(path_571481, "name", newJString(name))
  add(path_571481, "vnetName", newJString(vnetName))
  add(path_571481, "slot", newJString(slot))
  add(path_571481, "gatewayName", newJString(gatewayName))
  add(path_571481, "subscriptionId", newJString(subscriptionId))
  result = call_571480.call(path_571481, query_571482, nil, nil, nil)

var sitesGetSiteVnetGatewaySlot* = Call_SitesGetSiteVnetGatewaySlot_571469(
    name: "sitesGetSiteVnetGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGatewaySlot_571470, base: "",
    url: url_SitesGetSiteVnetGatewaySlot_571471, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGatewaySlot_571499 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteVNETConnectionGatewaySlot_571501(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGatewaySlot_571500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571502 = path.getOrDefault("resourceGroupName")
  valid_571502 = validateParameter(valid_571502, JString, required = true,
                                 default = nil)
  if valid_571502 != nil:
    section.add "resourceGroupName", valid_571502
  var valid_571503 = path.getOrDefault("name")
  valid_571503 = validateParameter(valid_571503, JString, required = true,
                                 default = nil)
  if valid_571503 != nil:
    section.add "name", valid_571503
  var valid_571504 = path.getOrDefault("vnetName")
  valid_571504 = validateParameter(valid_571504, JString, required = true,
                                 default = nil)
  if valid_571504 != nil:
    section.add "vnetName", valid_571504
  var valid_571505 = path.getOrDefault("slot")
  valid_571505 = validateParameter(valid_571505, JString, required = true,
                                 default = nil)
  if valid_571505 != nil:
    section.add "slot", valid_571505
  var valid_571506 = path.getOrDefault("gatewayName")
  valid_571506 = validateParameter(valid_571506, JString, required = true,
                                 default = nil)
  if valid_571506 != nil:
    section.add "gatewayName", valid_571506
  var valid_571507 = path.getOrDefault("subscriptionId")
  valid_571507 = validateParameter(valid_571507, JString, required = true,
                                 default = nil)
  if valid_571507 != nil:
    section.add "subscriptionId", valid_571507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571508 = query.getOrDefault("api-version")
  valid_571508 = validateParameter(valid_571508, JString, required = true,
                                 default = nil)
  if valid_571508 != nil:
    section.add "api-version", valid_571508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571510: Call_SitesUpdateSiteVNETConnectionGatewaySlot_571499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571510.validator(path, query, header, formData, body)
  let scheme = call_571510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571510.url(scheme.get, call_571510.host, call_571510.base,
                         call_571510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571510, url, valid)

proc call*(call_571511: Call_SitesUpdateSiteVNETConnectionGatewaySlot_571499;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGatewaySlot
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571512 = newJObject()
  var query_571513 = newJObject()
  var body_571514 = newJObject()
  add(path_571512, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571514 = connectionEnvelope
  add(path_571512, "name", newJString(name))
  add(path_571512, "vnetName", newJString(vnetName))
  add(query_571513, "api-version", newJString(apiVersion))
  add(path_571512, "slot", newJString(slot))
  add(path_571512, "gatewayName", newJString(gatewayName))
  add(path_571512, "subscriptionId", newJString(subscriptionId))
  result = call_571511.call(path_571512, query_571513, nil, nil, body_571514)

var sitesUpdateSiteVNETConnectionGatewaySlot* = Call_SitesUpdateSiteVNETConnectionGatewaySlot_571499(
    name: "sitesUpdateSiteVNETConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGatewaySlot_571500, base: "",
    url: url_SitesUpdateSiteVNETConnectionGatewaySlot_571501,
    schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesFromProduction_571515 = ref object of OpenApiRestCall_567650
proc url_SitesGetSlotsDifferencesFromProduction_571517(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesFromProduction_571516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571518 = path.getOrDefault("resourceGroupName")
  valid_571518 = validateParameter(valid_571518, JString, required = true,
                                 default = nil)
  if valid_571518 != nil:
    section.add "resourceGroupName", valid_571518
  var valid_571519 = path.getOrDefault("name")
  valid_571519 = validateParameter(valid_571519, JString, required = true,
                                 default = nil)
  if valid_571519 != nil:
    section.add "name", valid_571519
  var valid_571520 = path.getOrDefault("subscriptionId")
  valid_571520 = validateParameter(valid_571520, JString, required = true,
                                 default = nil)
  if valid_571520 != nil:
    section.add "subscriptionId", valid_571520
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571521 = query.getOrDefault("api-version")
  valid_571521 = validateParameter(valid_571521, JString, required = true,
                                 default = nil)
  if valid_571521 != nil:
    section.add "api-version", valid_571521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571523: Call_SitesGetSlotsDifferencesFromProduction_571515;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571523.validator(path, query, header, formData, body)
  let scheme = call_571523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571523.url(scheme.get, call_571523.host, call_571523.base,
                         call_571523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571523, url, valid)

proc call*(call_571524: Call_SitesGetSlotsDifferencesFromProduction_571515;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesGetSlotsDifferencesFromProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_571525 = newJObject()
  var query_571526 = newJObject()
  var body_571527 = newJObject()
  add(path_571525, "resourceGroupName", newJString(resourceGroupName))
  add(query_571526, "api-version", newJString(apiVersion))
  add(path_571525, "name", newJString(name))
  add(path_571525, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571527 = slotSwapEntity
  result = call_571524.call(path_571525, query_571526, nil, nil, body_571527)

var sitesGetSlotsDifferencesFromProduction* = Call_SitesGetSlotsDifferencesFromProduction_571515(
    name: "sitesGetSlotsDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesFromProduction_571516, base: "",
    url: url_SitesGetSlotsDifferencesFromProduction_571517,
    schemes: {Scheme.Https})
type
  Call_SitesSwapSlotWithProduction_571528 = ref object of OpenApiRestCall_567650
proc url_SitesSwapSlotWithProduction_571530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotWithProduction_571529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571531 = path.getOrDefault("resourceGroupName")
  valid_571531 = validateParameter(valid_571531, JString, required = true,
                                 default = nil)
  if valid_571531 != nil:
    section.add "resourceGroupName", valid_571531
  var valid_571532 = path.getOrDefault("name")
  valid_571532 = validateParameter(valid_571532, JString, required = true,
                                 default = nil)
  if valid_571532 != nil:
    section.add "name", valid_571532
  var valid_571533 = path.getOrDefault("subscriptionId")
  valid_571533 = validateParameter(valid_571533, JString, required = true,
                                 default = nil)
  if valid_571533 != nil:
    section.add "subscriptionId", valid_571533
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571534 = query.getOrDefault("api-version")
  valid_571534 = validateParameter(valid_571534, JString, required = true,
                                 default = nil)
  if valid_571534 != nil:
    section.add "api-version", valid_571534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571536: Call_SitesSwapSlotWithProduction_571528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571536.validator(path, query, header, formData, body)
  let scheme = call_571536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571536.url(scheme.get, call_571536.host, call_571536.base,
                         call_571536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571536, url, valid)

proc call*(call_571537: Call_SitesSwapSlotWithProduction_571528;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## sitesSwapSlotWithProduction
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  var path_571538 = newJObject()
  var query_571539 = newJObject()
  var body_571540 = newJObject()
  add(path_571538, "resourceGroupName", newJString(resourceGroupName))
  add(query_571539, "api-version", newJString(apiVersion))
  add(path_571538, "name", newJString(name))
  add(path_571538, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571540 = slotSwapEntity
  result = call_571537.call(path_571538, query_571539, nil, nil, body_571540)

var sitesSwapSlotWithProduction* = Call_SitesSwapSlotWithProduction_571528(
    name: "sitesSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_SitesSwapSlotWithProduction_571529, base: "",
    url: url_SitesSwapSlotWithProduction_571530, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshots_571541 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSnapshots_571543(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshots_571542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  ##   name: JString (required)
  ##       : Website Name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571544 = path.getOrDefault("resourceGroupName")
  valid_571544 = validateParameter(valid_571544, JString, required = true,
                                 default = nil)
  if valid_571544 != nil:
    section.add "resourceGroupName", valid_571544
  var valid_571545 = path.getOrDefault("name")
  valid_571545 = validateParameter(valid_571545, JString, required = true,
                                 default = nil)
  if valid_571545 != nil:
    section.add "name", valid_571545
  var valid_571546 = path.getOrDefault("subscriptionId")
  valid_571546 = validateParameter(valid_571546, JString, required = true,
                                 default = nil)
  if valid_571546 != nil:
    section.add "subscriptionId", valid_571546
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571547 = query.getOrDefault("api-version")
  valid_571547 = validateParameter(valid_571547, JString, required = true,
                                 default = nil)
  if valid_571547 != nil:
    section.add "api-version", valid_571547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571548: Call_SitesGetSiteSnapshots_571541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571548.validator(path, query, header, formData, body)
  let scheme = call_571548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571548.url(scheme.get, call_571548.host, call_571548.base,
                         call_571548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571548, url, valid)

proc call*(call_571549: Call_SitesGetSiteSnapshots_571541;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSnapshots
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571550 = newJObject()
  var query_571551 = newJObject()
  add(path_571550, "resourceGroupName", newJString(resourceGroupName))
  add(query_571551, "api-version", newJString(apiVersion))
  add(path_571550, "name", newJString(name))
  add(path_571550, "subscriptionId", newJString(subscriptionId))
  result = call_571549.call(path_571550, query_571551, nil, nil, nil)

var sitesGetSiteSnapshots* = Call_SitesGetSiteSnapshots_571541(
    name: "sitesGetSiteSnapshots", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_SitesGetSiteSnapshots_571542, base: "",
    url: url_SitesGetSiteSnapshots_571543, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControl_571563 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteSourceControl_571565(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControl_571564(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571566 = path.getOrDefault("resourceGroupName")
  valid_571566 = validateParameter(valid_571566, JString, required = true,
                                 default = nil)
  if valid_571566 != nil:
    section.add "resourceGroupName", valid_571566
  var valid_571567 = path.getOrDefault("name")
  valid_571567 = validateParameter(valid_571567, JString, required = true,
                                 default = nil)
  if valid_571567 != nil:
    section.add "name", valid_571567
  var valid_571568 = path.getOrDefault("subscriptionId")
  valid_571568 = validateParameter(valid_571568, JString, required = true,
                                 default = nil)
  if valid_571568 != nil:
    section.add "subscriptionId", valid_571568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571569 = query.getOrDefault("api-version")
  valid_571569 = validateParameter(valid_571569, JString, required = true,
                                 default = nil)
  if valid_571569 != nil:
    section.add "api-version", valid_571569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571571: Call_SitesCreateOrUpdateSiteSourceControl_571563;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571571.validator(path, query, header, formData, body)
  let scheme = call_571571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571571.url(scheme.get, call_571571.host, call_571571.base,
                         call_571571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571571, url, valid)

proc call*(call_571572: Call_SitesCreateOrUpdateSiteSourceControl_571563;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesCreateOrUpdateSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_571573 = newJObject()
  var query_571574 = newJObject()
  var body_571575 = newJObject()
  add(path_571573, "resourceGroupName", newJString(resourceGroupName))
  add(query_571574, "api-version", newJString(apiVersion))
  add(path_571573, "name", newJString(name))
  add(path_571573, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571575 = siteSourceControl
  result = call_571572.call(path_571573, query_571574, nil, nil, body_571575)

var sitesCreateOrUpdateSiteSourceControl* = Call_SitesCreateOrUpdateSiteSourceControl_571563(
    name: "sitesCreateOrUpdateSiteSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControl_571564, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControl_571565, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControl_571552 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteSourceControl_571554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControl_571553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571555 = path.getOrDefault("resourceGroupName")
  valid_571555 = validateParameter(valid_571555, JString, required = true,
                                 default = nil)
  if valid_571555 != nil:
    section.add "resourceGroupName", valid_571555
  var valid_571556 = path.getOrDefault("name")
  valid_571556 = validateParameter(valid_571556, JString, required = true,
                                 default = nil)
  if valid_571556 != nil:
    section.add "name", valid_571556
  var valid_571557 = path.getOrDefault("subscriptionId")
  valid_571557 = validateParameter(valid_571557, JString, required = true,
                                 default = nil)
  if valid_571557 != nil:
    section.add "subscriptionId", valid_571557
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571558 = query.getOrDefault("api-version")
  valid_571558 = validateParameter(valid_571558, JString, required = true,
                                 default = nil)
  if valid_571558 != nil:
    section.add "api-version", valid_571558
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571559: Call_SitesGetSiteSourceControl_571552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571559.validator(path, query, header, formData, body)
  let scheme = call_571559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571559.url(scheme.get, call_571559.host, call_571559.base,
                         call_571559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571559, url, valid)

proc call*(call_571560: Call_SitesGetSiteSourceControl_571552;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571561 = newJObject()
  var query_571562 = newJObject()
  add(path_571561, "resourceGroupName", newJString(resourceGroupName))
  add(query_571562, "api-version", newJString(apiVersion))
  add(path_571561, "name", newJString(name))
  add(path_571561, "subscriptionId", newJString(subscriptionId))
  result = call_571560.call(path_571561, query_571562, nil, nil, nil)

var sitesGetSiteSourceControl* = Call_SitesGetSiteSourceControl_571552(
    name: "sitesGetSiteSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControl_571553, base: "",
    url: url_SitesGetSiteSourceControl_571554, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControl_571587 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteSourceControl_571589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControl_571588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571590 = path.getOrDefault("resourceGroupName")
  valid_571590 = validateParameter(valid_571590, JString, required = true,
                                 default = nil)
  if valid_571590 != nil:
    section.add "resourceGroupName", valid_571590
  var valid_571591 = path.getOrDefault("name")
  valid_571591 = validateParameter(valid_571591, JString, required = true,
                                 default = nil)
  if valid_571591 != nil:
    section.add "name", valid_571591
  var valid_571592 = path.getOrDefault("subscriptionId")
  valid_571592 = validateParameter(valid_571592, JString, required = true,
                                 default = nil)
  if valid_571592 != nil:
    section.add "subscriptionId", valid_571592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571593 = query.getOrDefault("api-version")
  valid_571593 = validateParameter(valid_571593, JString, required = true,
                                 default = nil)
  if valid_571593 != nil:
    section.add "api-version", valid_571593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571595: Call_SitesUpdateSiteSourceControl_571587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571595.validator(path, query, header, formData, body)
  let scheme = call_571595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571595.url(scheme.get, call_571595.host, call_571595.base,
                         call_571595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571595, url, valid)

proc call*(call_571596: Call_SitesUpdateSiteSourceControl_571587;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## sitesUpdateSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  var path_571597 = newJObject()
  var query_571598 = newJObject()
  var body_571599 = newJObject()
  add(path_571597, "resourceGroupName", newJString(resourceGroupName))
  add(query_571598, "api-version", newJString(apiVersion))
  add(path_571597, "name", newJString(name))
  add(path_571597, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571599 = siteSourceControl
  result = call_571596.call(path_571597, query_571598, nil, nil, body_571599)

var sitesUpdateSiteSourceControl* = Call_SitesUpdateSiteSourceControl_571587(
    name: "sitesUpdateSiteSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControl_571588, base: "",
    url: url_SitesUpdateSiteSourceControl_571589, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControl_571576 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteSourceControl_571578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControl_571577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571579 = path.getOrDefault("resourceGroupName")
  valid_571579 = validateParameter(valid_571579, JString, required = true,
                                 default = nil)
  if valid_571579 != nil:
    section.add "resourceGroupName", valid_571579
  var valid_571580 = path.getOrDefault("name")
  valid_571580 = validateParameter(valid_571580, JString, required = true,
                                 default = nil)
  if valid_571580 != nil:
    section.add "name", valid_571580
  var valid_571581 = path.getOrDefault("subscriptionId")
  valid_571581 = validateParameter(valid_571581, JString, required = true,
                                 default = nil)
  if valid_571581 != nil:
    section.add "subscriptionId", valid_571581
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571582 = query.getOrDefault("api-version")
  valid_571582 = validateParameter(valid_571582, JString, required = true,
                                 default = nil)
  if valid_571582 != nil:
    section.add "api-version", valid_571582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571583: Call_SitesDeleteSiteSourceControl_571576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571583.validator(path, query, header, formData, body)
  let scheme = call_571583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571583.url(scheme.get, call_571583.host, call_571583.base,
                         call_571583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571583, url, valid)

proc call*(call_571584: Call_SitesDeleteSiteSourceControl_571576;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesDeleteSiteSourceControl
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571585 = newJObject()
  var query_571586 = newJObject()
  add(path_571585, "resourceGroupName", newJString(resourceGroupName))
  add(query_571586, "api-version", newJString(apiVersion))
  add(path_571585, "name", newJString(name))
  add(path_571585, "subscriptionId", newJString(subscriptionId))
  result = call_571584.call(path_571585, query_571586, nil, nil, nil)

var sitesDeleteSiteSourceControl* = Call_SitesDeleteSiteSourceControl_571576(
    name: "sitesDeleteSiteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControl_571577, base: "",
    url: url_SitesDeleteSiteSourceControl_571578, schemes: {Scheme.Https})
type
  Call_SitesStartSite_571600 = ref object of OpenApiRestCall_567650
proc url_SitesStartSite_571602(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSite_571601(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571603 = path.getOrDefault("resourceGroupName")
  valid_571603 = validateParameter(valid_571603, JString, required = true,
                                 default = nil)
  if valid_571603 != nil:
    section.add "resourceGroupName", valid_571603
  var valid_571604 = path.getOrDefault("name")
  valid_571604 = validateParameter(valid_571604, JString, required = true,
                                 default = nil)
  if valid_571604 != nil:
    section.add "name", valid_571604
  var valid_571605 = path.getOrDefault("subscriptionId")
  valid_571605 = validateParameter(valid_571605, JString, required = true,
                                 default = nil)
  if valid_571605 != nil:
    section.add "subscriptionId", valid_571605
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571606 = query.getOrDefault("api-version")
  valid_571606 = validateParameter(valid_571606, JString, required = true,
                                 default = nil)
  if valid_571606 != nil:
    section.add "api-version", valid_571606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571607: Call_SitesStartSite_571600; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571607.validator(path, query, header, formData, body)
  let scheme = call_571607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571607.url(scheme.get, call_571607.host, call_571607.base,
                         call_571607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571607, url, valid)

proc call*(call_571608: Call_SitesStartSite_571600; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesStartSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571609 = newJObject()
  var query_571610 = newJObject()
  add(path_571609, "resourceGroupName", newJString(resourceGroupName))
  add(query_571610, "api-version", newJString(apiVersion))
  add(path_571609, "name", newJString(name))
  add(path_571609, "subscriptionId", newJString(subscriptionId))
  result = call_571608.call(path_571609, query_571610, nil, nil, nil)

var sitesStartSite* = Call_SitesStartSite_571600(name: "sitesStartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_SitesStartSite_571601, base: "", url: url_SitesStartSite_571602,
    schemes: {Scheme.Https})
type
  Call_SitesStopSite_571611 = ref object of OpenApiRestCall_567650
proc url_SitesStopSite_571613(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSite_571612(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571614 = path.getOrDefault("resourceGroupName")
  valid_571614 = validateParameter(valid_571614, JString, required = true,
                                 default = nil)
  if valid_571614 != nil:
    section.add "resourceGroupName", valid_571614
  var valid_571615 = path.getOrDefault("name")
  valid_571615 = validateParameter(valid_571615, JString, required = true,
                                 default = nil)
  if valid_571615 != nil:
    section.add "name", valid_571615
  var valid_571616 = path.getOrDefault("subscriptionId")
  valid_571616 = validateParameter(valid_571616, JString, required = true,
                                 default = nil)
  if valid_571616 != nil:
    section.add "subscriptionId", valid_571616
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571617 = query.getOrDefault("api-version")
  valid_571617 = validateParameter(valid_571617, JString, required = true,
                                 default = nil)
  if valid_571617 != nil:
    section.add "api-version", valid_571617
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571618: Call_SitesStopSite_571611; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571618.validator(path, query, header, formData, body)
  let scheme = call_571618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571618.url(scheme.get, call_571618.host, call_571618.base,
                         call_571618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571618, url, valid)

proc call*(call_571619: Call_SitesStopSite_571611; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## sitesStopSite
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571620 = newJObject()
  var query_571621 = newJObject()
  add(path_571620, "resourceGroupName", newJString(resourceGroupName))
  add(query_571621, "api-version", newJString(apiVersion))
  add(path_571620, "name", newJString(name))
  add(path_571620, "subscriptionId", newJString(subscriptionId))
  result = call_571619.call(path_571620, query_571621, nil, nil, nil)

var sitesStopSite* = Call_SitesStopSite_571611(name: "sitesStopSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
    validator: validate_SitesStopSite_571612, base: "", url: url_SitesStopSite_571613,
    schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepository_571622 = ref object of OpenApiRestCall_567650
proc url_SitesSyncSiteRepository_571624(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepository_571623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571625 = path.getOrDefault("resourceGroupName")
  valid_571625 = validateParameter(valid_571625, JString, required = true,
                                 default = nil)
  if valid_571625 != nil:
    section.add "resourceGroupName", valid_571625
  var valid_571626 = path.getOrDefault("name")
  valid_571626 = validateParameter(valid_571626, JString, required = true,
                                 default = nil)
  if valid_571626 != nil:
    section.add "name", valid_571626
  var valid_571627 = path.getOrDefault("subscriptionId")
  valid_571627 = validateParameter(valid_571627, JString, required = true,
                                 default = nil)
  if valid_571627 != nil:
    section.add "subscriptionId", valid_571627
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571628 = query.getOrDefault("api-version")
  valid_571628 = validateParameter(valid_571628, JString, required = true,
                                 default = nil)
  if valid_571628 != nil:
    section.add "api-version", valid_571628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571629: Call_SitesSyncSiteRepository_571622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571629.validator(path, query, header, formData, body)
  let scheme = call_571629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571629.url(scheme.get, call_571629.host, call_571629.base,
                         call_571629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571629, url, valid)

proc call*(call_571630: Call_SitesSyncSiteRepository_571622;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesSyncSiteRepository
  ##   resourceGroupName: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571631 = newJObject()
  var query_571632 = newJObject()
  add(path_571631, "resourceGroupName", newJString(resourceGroupName))
  add(query_571632, "api-version", newJString(apiVersion))
  add(path_571631, "name", newJString(name))
  add(path_571631, "subscriptionId", newJString(subscriptionId))
  result = call_571630.call(path_571631, query_571632, nil, nil, nil)

var sitesSyncSiteRepository* = Call_SitesSyncSiteRepository_571622(
    name: "sitesSyncSiteRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_SitesSyncSiteRepository_571623, base: "",
    url: url_SitesSyncSiteRepository_571624, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsages_571633 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteUsages_571635(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsages_571634(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571636 = path.getOrDefault("resourceGroupName")
  valid_571636 = validateParameter(valid_571636, JString, required = true,
                                 default = nil)
  if valid_571636 != nil:
    section.add "resourceGroupName", valid_571636
  var valid_571637 = path.getOrDefault("name")
  valid_571637 = validateParameter(valid_571637, JString, required = true,
                                 default = nil)
  if valid_571637 != nil:
    section.add "name", valid_571637
  var valid_571638 = path.getOrDefault("subscriptionId")
  valid_571638 = validateParameter(valid_571638, JString, required = true,
                                 default = nil)
  if valid_571638 != nil:
    section.add "subscriptionId", valid_571638
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571639 = query.getOrDefault("api-version")
  valid_571639 = validateParameter(valid_571639, JString, required = true,
                                 default = nil)
  if valid_571639 != nil:
    section.add "api-version", valid_571639
  var valid_571640 = query.getOrDefault("$filter")
  valid_571640 = validateParameter(valid_571640, JString, required = false,
                                 default = nil)
  if valid_571640 != nil:
    section.add "$filter", valid_571640
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571641: Call_SitesGetSiteUsages_571633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571641.validator(path, query, header, formData, body)
  let scheme = call_571641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571641.url(scheme.get, call_571641.host, call_571641.base,
                         call_571641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571641, url, valid)

proc call*(call_571642: Call_SitesGetSiteUsages_571633; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## sitesGetSiteUsages
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571643 = newJObject()
  var query_571644 = newJObject()
  add(path_571643, "resourceGroupName", newJString(resourceGroupName))
  add(query_571644, "api-version", newJString(apiVersion))
  add(path_571643, "name", newJString(name))
  add(path_571643, "subscriptionId", newJString(subscriptionId))
  add(query_571644, "$filter", newJString(Filter))
  result = call_571642.call(path_571643, query_571644, nil, nil, nil)

var sitesGetSiteUsages* = Call_SitesGetSiteUsages_571633(
    name: "sitesGetSiteUsages", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_SitesGetSiteUsages_571634, base: "",
    url: url_SitesGetSiteUsages_571635, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnections_571645 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVNETConnections_571647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnections_571646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571648 = path.getOrDefault("resourceGroupName")
  valid_571648 = validateParameter(valid_571648, JString, required = true,
                                 default = nil)
  if valid_571648 != nil:
    section.add "resourceGroupName", valid_571648
  var valid_571649 = path.getOrDefault("name")
  valid_571649 = validateParameter(valid_571649, JString, required = true,
                                 default = nil)
  if valid_571649 != nil:
    section.add "name", valid_571649
  var valid_571650 = path.getOrDefault("subscriptionId")
  valid_571650 = validateParameter(valid_571650, JString, required = true,
                                 default = nil)
  if valid_571650 != nil:
    section.add "subscriptionId", valid_571650
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571651 = query.getOrDefault("api-version")
  valid_571651 = validateParameter(valid_571651, JString, required = true,
                                 default = nil)
  if valid_571651 != nil:
    section.add "api-version", valid_571651
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571652: Call_SitesGetSiteVNETConnections_571645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571652.validator(path, query, header, formData, body)
  let scheme = call_571652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571652.url(scheme.get, call_571652.host, call_571652.base,
                         call_571652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571652, url, valid)

proc call*(call_571653: Call_SitesGetSiteVNETConnections_571645;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnections
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571654 = newJObject()
  var query_571655 = newJObject()
  add(path_571654, "resourceGroupName", newJString(resourceGroupName))
  add(query_571655, "api-version", newJString(apiVersion))
  add(path_571654, "name", newJString(name))
  add(path_571654, "subscriptionId", newJString(subscriptionId))
  result = call_571653.call(path_571654, query_571655, nil, nil, nil)

var sitesGetSiteVNETConnections* = Call_SitesGetSiteVNETConnections_571645(
    name: "sitesGetSiteVNETConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnections_571646, base: "",
    url: url_SitesGetSiteVNETConnections_571647, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnection_571668 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteVNETConnection_571670(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnection_571669(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571671 = path.getOrDefault("resourceGroupName")
  valid_571671 = validateParameter(valid_571671, JString, required = true,
                                 default = nil)
  if valid_571671 != nil:
    section.add "resourceGroupName", valid_571671
  var valid_571672 = path.getOrDefault("name")
  valid_571672 = validateParameter(valid_571672, JString, required = true,
                                 default = nil)
  if valid_571672 != nil:
    section.add "name", valid_571672
  var valid_571673 = path.getOrDefault("vnetName")
  valid_571673 = validateParameter(valid_571673, JString, required = true,
                                 default = nil)
  if valid_571673 != nil:
    section.add "vnetName", valid_571673
  var valid_571674 = path.getOrDefault("subscriptionId")
  valid_571674 = validateParameter(valid_571674, JString, required = true,
                                 default = nil)
  if valid_571674 != nil:
    section.add "subscriptionId", valid_571674
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571675 = query.getOrDefault("api-version")
  valid_571675 = validateParameter(valid_571675, JString, required = true,
                                 default = nil)
  if valid_571675 != nil:
    section.add "api-version", valid_571675
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571677: Call_SitesCreateOrUpdateSiteVNETConnection_571668;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571677.validator(path, query, header, formData, body)
  let scheme = call_571677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571677.url(scheme.get, call_571677.host, call_571677.base,
                         call_571677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571677, url, valid)

proc call*(call_571678: Call_SitesCreateOrUpdateSiteVNETConnection_571668;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571679 = newJObject()
  var query_571680 = newJObject()
  var body_571681 = newJObject()
  add(path_571679, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571681 = connectionEnvelope
  add(path_571679, "name", newJString(name))
  add(path_571679, "vnetName", newJString(vnetName))
  add(query_571680, "api-version", newJString(apiVersion))
  add(path_571679, "subscriptionId", newJString(subscriptionId))
  result = call_571678.call(path_571679, query_571680, nil, nil, body_571681)

var sitesCreateOrUpdateSiteVNETConnection* = Call_SitesCreateOrUpdateSiteVNETConnection_571668(
    name: "sitesCreateOrUpdateSiteVNETConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnection_571669, base: "",
    url: url_SitesCreateOrUpdateSiteVNETConnection_571670, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnection_571656 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVNETConnection_571658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnection_571657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571659 = path.getOrDefault("resourceGroupName")
  valid_571659 = validateParameter(valid_571659, JString, required = true,
                                 default = nil)
  if valid_571659 != nil:
    section.add "resourceGroupName", valid_571659
  var valid_571660 = path.getOrDefault("name")
  valid_571660 = validateParameter(valid_571660, JString, required = true,
                                 default = nil)
  if valid_571660 != nil:
    section.add "name", valid_571660
  var valid_571661 = path.getOrDefault("vnetName")
  valid_571661 = validateParameter(valid_571661, JString, required = true,
                                 default = nil)
  if valid_571661 != nil:
    section.add "vnetName", valid_571661
  var valid_571662 = path.getOrDefault("subscriptionId")
  valid_571662 = validateParameter(valid_571662, JString, required = true,
                                 default = nil)
  if valid_571662 != nil:
    section.add "subscriptionId", valid_571662
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571663 = query.getOrDefault("api-version")
  valid_571663 = validateParameter(valid_571663, JString, required = true,
                                 default = nil)
  if valid_571663 != nil:
    section.add "api-version", valid_571663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571664: Call_SitesGetSiteVNETConnection_571656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571664.validator(path, query, header, formData, body)
  let scheme = call_571664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571664.url(scheme.get, call_571664.host, call_571664.base,
                         call_571664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571664, url, valid)

proc call*(call_571665: Call_SitesGetSiteVNETConnection_571656;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571666 = newJObject()
  var query_571667 = newJObject()
  add(path_571666, "resourceGroupName", newJString(resourceGroupName))
  add(query_571667, "api-version", newJString(apiVersion))
  add(path_571666, "name", newJString(name))
  add(path_571666, "vnetName", newJString(vnetName))
  add(path_571666, "subscriptionId", newJString(subscriptionId))
  result = call_571665.call(path_571666, query_571667, nil, nil, nil)

var sitesGetSiteVNETConnection* = Call_SitesGetSiteVNETConnection_571656(
    name: "sitesGetSiteVNETConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnection_571657, base: "",
    url: url_SitesGetSiteVNETConnection_571658, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnection_571694 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteVNETConnection_571696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnection_571695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571697 = path.getOrDefault("resourceGroupName")
  valid_571697 = validateParameter(valid_571697, JString, required = true,
                                 default = nil)
  if valid_571697 != nil:
    section.add "resourceGroupName", valid_571697
  var valid_571698 = path.getOrDefault("name")
  valid_571698 = validateParameter(valid_571698, JString, required = true,
                                 default = nil)
  if valid_571698 != nil:
    section.add "name", valid_571698
  var valid_571699 = path.getOrDefault("vnetName")
  valid_571699 = validateParameter(valid_571699, JString, required = true,
                                 default = nil)
  if valid_571699 != nil:
    section.add "vnetName", valid_571699
  var valid_571700 = path.getOrDefault("subscriptionId")
  valid_571700 = validateParameter(valid_571700, JString, required = true,
                                 default = nil)
  if valid_571700 != nil:
    section.add "subscriptionId", valid_571700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571701 = query.getOrDefault("api-version")
  valid_571701 = validateParameter(valid_571701, JString, required = true,
                                 default = nil)
  if valid_571701 != nil:
    section.add "api-version", valid_571701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571703: Call_SitesUpdateSiteVNETConnection_571694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571703.validator(path, query, header, formData, body)
  let scheme = call_571703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571703.url(scheme.get, call_571703.host, call_571703.base,
                         call_571703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571703, url, valid)

proc call*(call_571704: Call_SitesUpdateSiteVNETConnection_571694;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571705 = newJObject()
  var query_571706 = newJObject()
  var body_571707 = newJObject()
  add(path_571705, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571707 = connectionEnvelope
  add(path_571705, "name", newJString(name))
  add(path_571705, "vnetName", newJString(vnetName))
  add(query_571706, "api-version", newJString(apiVersion))
  add(path_571705, "subscriptionId", newJString(subscriptionId))
  result = call_571704.call(path_571705, query_571706, nil, nil, body_571707)

var sitesUpdateSiteVNETConnection* = Call_SitesUpdateSiteVNETConnection_571694(
    name: "sitesUpdateSiteVNETConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnection_571695, base: "",
    url: url_SitesUpdateSiteVNETConnection_571696, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnection_571682 = ref object of OpenApiRestCall_567650
proc url_SitesDeleteSiteVNETConnection_571684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnection_571683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571685 = path.getOrDefault("resourceGroupName")
  valid_571685 = validateParameter(valid_571685, JString, required = true,
                                 default = nil)
  if valid_571685 != nil:
    section.add "resourceGroupName", valid_571685
  var valid_571686 = path.getOrDefault("name")
  valid_571686 = validateParameter(valid_571686, JString, required = true,
                                 default = nil)
  if valid_571686 != nil:
    section.add "name", valid_571686
  var valid_571687 = path.getOrDefault("vnetName")
  valid_571687 = validateParameter(valid_571687, JString, required = true,
                                 default = nil)
  if valid_571687 != nil:
    section.add "vnetName", valid_571687
  var valid_571688 = path.getOrDefault("subscriptionId")
  valid_571688 = validateParameter(valid_571688, JString, required = true,
                                 default = nil)
  if valid_571688 != nil:
    section.add "subscriptionId", valid_571688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571689 = query.getOrDefault("api-version")
  valid_571689 = validateParameter(valid_571689, JString, required = true,
                                 default = nil)
  if valid_571689 != nil:
    section.add "api-version", valid_571689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571690: Call_SitesDeleteSiteVNETConnection_571682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571690.validator(path, query, header, formData, body)
  let scheme = call_571690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571690.url(scheme.get, call_571690.host, call_571690.base,
                         call_571690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571690, url, valid)

proc call*(call_571691: Call_SitesDeleteSiteVNETConnection_571682;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## sitesDeleteSiteVNETConnection
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571692 = newJObject()
  var query_571693 = newJObject()
  add(path_571692, "resourceGroupName", newJString(resourceGroupName))
  add(query_571693, "api-version", newJString(apiVersion))
  add(path_571692, "name", newJString(name))
  add(path_571692, "vnetName", newJString(vnetName))
  add(path_571692, "subscriptionId", newJString(subscriptionId))
  result = call_571691.call(path_571692, query_571693, nil, nil, nil)

var sitesDeleteSiteVNETConnection* = Call_SitesDeleteSiteVNETConnection_571682(
    name: "sitesDeleteSiteVNETConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnection_571683, base: "",
    url: url_SitesDeleteSiteVNETConnection_571684, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGateway_571721 = ref object of OpenApiRestCall_567650
proc url_SitesCreateOrUpdateSiteVNETConnectionGateway_571723(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGateway_571722(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571724 = path.getOrDefault("resourceGroupName")
  valid_571724 = validateParameter(valid_571724, JString, required = true,
                                 default = nil)
  if valid_571724 != nil:
    section.add "resourceGroupName", valid_571724
  var valid_571725 = path.getOrDefault("name")
  valid_571725 = validateParameter(valid_571725, JString, required = true,
                                 default = nil)
  if valid_571725 != nil:
    section.add "name", valid_571725
  var valid_571726 = path.getOrDefault("vnetName")
  valid_571726 = validateParameter(valid_571726, JString, required = true,
                                 default = nil)
  if valid_571726 != nil:
    section.add "vnetName", valid_571726
  var valid_571727 = path.getOrDefault("gatewayName")
  valid_571727 = validateParameter(valid_571727, JString, required = true,
                                 default = nil)
  if valid_571727 != nil:
    section.add "gatewayName", valid_571727
  var valid_571728 = path.getOrDefault("subscriptionId")
  valid_571728 = validateParameter(valid_571728, JString, required = true,
                                 default = nil)
  if valid_571728 != nil:
    section.add "subscriptionId", valid_571728
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571729 = query.getOrDefault("api-version")
  valid_571729 = validateParameter(valid_571729, JString, required = true,
                                 default = nil)
  if valid_571729 != nil:
    section.add "api-version", valid_571729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571731: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_571721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571731.validator(path, query, header, formData, body)
  let scheme = call_571731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571731.url(scheme.get, call_571731.host, call_571731.base,
                         call_571731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571731, url, valid)

proc call*(call_571732: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_571721;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571733 = newJObject()
  var query_571734 = newJObject()
  var body_571735 = newJObject()
  add(path_571733, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571735 = connectionEnvelope
  add(path_571733, "name", newJString(name))
  add(path_571733, "vnetName", newJString(vnetName))
  add(query_571734, "api-version", newJString(apiVersion))
  add(path_571733, "gatewayName", newJString(gatewayName))
  add(path_571733, "subscriptionId", newJString(subscriptionId))
  result = call_571732.call(path_571733, query_571734, nil, nil, body_571735)

var sitesCreateOrUpdateSiteVNETConnectionGateway* = Call_SitesCreateOrUpdateSiteVNETConnectionGateway_571721(
    name: "sitesCreateOrUpdateSiteVNETConnectionGateway",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGateway_571722,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGateway_571723,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGateway_571708 = ref object of OpenApiRestCall_567650
proc url_SitesGetSiteVnetGateway_571710(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGateway_571709(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571711 = path.getOrDefault("resourceGroupName")
  valid_571711 = validateParameter(valid_571711, JString, required = true,
                                 default = nil)
  if valid_571711 != nil:
    section.add "resourceGroupName", valid_571711
  var valid_571712 = path.getOrDefault("name")
  valid_571712 = validateParameter(valid_571712, JString, required = true,
                                 default = nil)
  if valid_571712 != nil:
    section.add "name", valid_571712
  var valid_571713 = path.getOrDefault("vnetName")
  valid_571713 = validateParameter(valid_571713, JString, required = true,
                                 default = nil)
  if valid_571713 != nil:
    section.add "vnetName", valid_571713
  var valid_571714 = path.getOrDefault("gatewayName")
  valid_571714 = validateParameter(valid_571714, JString, required = true,
                                 default = nil)
  if valid_571714 != nil:
    section.add "gatewayName", valid_571714
  var valid_571715 = path.getOrDefault("subscriptionId")
  valid_571715 = validateParameter(valid_571715, JString, required = true,
                                 default = nil)
  if valid_571715 != nil:
    section.add "subscriptionId", valid_571715
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571716 = query.getOrDefault("api-version")
  valid_571716 = validateParameter(valid_571716, JString, required = true,
                                 default = nil)
  if valid_571716 != nil:
    section.add "api-version", valid_571716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571717: Call_SitesGetSiteVnetGateway_571708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_571717.validator(path, query, header, formData, body)
  let scheme = call_571717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571717.url(scheme.get, call_571717.host, call_571717.base,
                         call_571717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571717, url, valid)

proc call*(call_571718: Call_SitesGetSiteVnetGateway_571708;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## sitesGetSiteVnetGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571719 = newJObject()
  var query_571720 = newJObject()
  add(path_571719, "resourceGroupName", newJString(resourceGroupName))
  add(query_571720, "api-version", newJString(apiVersion))
  add(path_571719, "name", newJString(name))
  add(path_571719, "vnetName", newJString(vnetName))
  add(path_571719, "gatewayName", newJString(gatewayName))
  add(path_571719, "subscriptionId", newJString(subscriptionId))
  result = call_571718.call(path_571719, query_571720, nil, nil, nil)

var sitesGetSiteVnetGateway* = Call_SitesGetSiteVnetGateway_571708(
    name: "sitesGetSiteVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGateway_571709, base: "",
    url: url_SitesGetSiteVnetGateway_571710, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGateway_571736 = ref object of OpenApiRestCall_567650
proc url_SitesUpdateSiteVNETConnectionGateway_571738(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGateway_571737(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571739 = path.getOrDefault("resourceGroupName")
  valid_571739 = validateParameter(valid_571739, JString, required = true,
                                 default = nil)
  if valid_571739 != nil:
    section.add "resourceGroupName", valid_571739
  var valid_571740 = path.getOrDefault("name")
  valid_571740 = validateParameter(valid_571740, JString, required = true,
                                 default = nil)
  if valid_571740 != nil:
    section.add "name", valid_571740
  var valid_571741 = path.getOrDefault("vnetName")
  valid_571741 = validateParameter(valid_571741, JString, required = true,
                                 default = nil)
  if valid_571741 != nil:
    section.add "vnetName", valid_571741
  var valid_571742 = path.getOrDefault("gatewayName")
  valid_571742 = validateParameter(valid_571742, JString, required = true,
                                 default = nil)
  if valid_571742 != nil:
    section.add "gatewayName", valid_571742
  var valid_571743 = path.getOrDefault("subscriptionId")
  valid_571743 = validateParameter(valid_571743, JString, required = true,
                                 default = nil)
  if valid_571743 != nil:
    section.add "subscriptionId", valid_571743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571744 = query.getOrDefault("api-version")
  valid_571744 = validateParameter(valid_571744, JString, required = true,
                                 default = nil)
  if valid_571744 != nil:
    section.add "api-version", valid_571744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571746: Call_SitesUpdateSiteVNETConnectionGateway_571736;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571746.validator(path, query, header, formData, body)
  let scheme = call_571746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571746.url(scheme.get, call_571746.host, call_571746.base,
                         call_571746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571746, url, valid)

proc call*(call_571747: Call_SitesUpdateSiteVNETConnectionGateway_571736;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGateway
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571748 = newJObject()
  var query_571749 = newJObject()
  var body_571750 = newJObject()
  add(path_571748, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571750 = connectionEnvelope
  add(path_571748, "name", newJString(name))
  add(path_571748, "vnetName", newJString(vnetName))
  add(query_571749, "api-version", newJString(apiVersion))
  add(path_571748, "gatewayName", newJString(gatewayName))
  add(path_571748, "subscriptionId", newJString(subscriptionId))
  result = call_571747.call(path_571748, query_571749, nil, nil, body_571750)

var sitesUpdateSiteVNETConnectionGateway* = Call_SitesUpdateSiteVNETConnectionGateway_571736(
    name: "sitesUpdateSiteVNETConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGateway_571737, base: "",
    url: url_SitesUpdateSiteVNETConnectionGateway_571738, schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationHistoryForSite_571751 = ref object of OpenApiRestCall_567650
proc url_RecommendationsGetRecommendationHistoryForSite_571753(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendationHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationHistoryForSite_571752(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571754 = path.getOrDefault("resourceGroupName")
  valid_571754 = validateParameter(valid_571754, JString, required = true,
                                 default = nil)
  if valid_571754 != nil:
    section.add "resourceGroupName", valid_571754
  var valid_571755 = path.getOrDefault("siteName")
  valid_571755 = validateParameter(valid_571755, JString, required = true,
                                 default = nil)
  if valid_571755 != nil:
    section.add "siteName", valid_571755
  var valid_571756 = path.getOrDefault("subscriptionId")
  valid_571756 = validateParameter(valid_571756, JString, required = true,
                                 default = nil)
  if valid_571756 != nil:
    section.add "subscriptionId", valid_571756
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   endTime: JString
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   startTime: JString
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571757 = query.getOrDefault("api-version")
  valid_571757 = validateParameter(valid_571757, JString, required = true,
                                 default = nil)
  if valid_571757 != nil:
    section.add "api-version", valid_571757
  var valid_571758 = query.getOrDefault("endTime")
  valid_571758 = validateParameter(valid_571758, JString, required = false,
                                 default = nil)
  if valid_571758 != nil:
    section.add "endTime", valid_571758
  var valid_571759 = query.getOrDefault("startTime")
  valid_571759 = validateParameter(valid_571759, JString, required = false,
                                 default = nil)
  if valid_571759 != nil:
    section.add "startTime", valid_571759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571760: Call_RecommendationsGetRecommendationHistoryForSite_571751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571760.validator(path, query, header, formData, body)
  let scheme = call_571760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571760.url(scheme.get, call_571760.host, call_571760.base,
                         call_571760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571760, url, valid)

proc call*(call_571761: Call_RecommendationsGetRecommendationHistoryForSite_571751;
          resourceGroupName: string; apiVersion: string; siteName: string;
          subscriptionId: string; endTime: string = ""; startTime: string = ""): Recallable =
  ## recommendationsGetRecommendationHistoryForSite
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   endTime: string
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   startTime: string
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  var path_571762 = newJObject()
  var query_571763 = newJObject()
  add(path_571762, "resourceGroupName", newJString(resourceGroupName))
  add(query_571763, "api-version", newJString(apiVersion))
  add(path_571762, "siteName", newJString(siteName))
  add(path_571762, "subscriptionId", newJString(subscriptionId))
  add(query_571763, "endTime", newJString(endTime))
  add(query_571763, "startTime", newJString(startTime))
  result = call_571761.call(path_571762, query_571763, nil, nil, nil)

var recommendationsGetRecommendationHistoryForSite* = Call_RecommendationsGetRecommendationHistoryForSite_571751(
    name: "recommendationsGetRecommendationHistoryForSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
    validator: validate_RecommendationsGetRecommendationHistoryForSite_571752,
    base: "", url: url_RecommendationsGetRecommendationHistoryForSite_571753,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendedRulesForSite_571764 = ref object of OpenApiRestCall_567650
proc url_RecommendationsGetRecommendedRulesForSite_571766(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendedRulesForSite_571765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571767 = path.getOrDefault("resourceGroupName")
  valid_571767 = validateParameter(valid_571767, JString, required = true,
                                 default = nil)
  if valid_571767 != nil:
    section.add "resourceGroupName", valid_571767
  var valid_571768 = path.getOrDefault("siteName")
  valid_571768 = validateParameter(valid_571768, JString, required = true,
                                 default = nil)
  if valid_571768 != nil:
    section.add "siteName", valid_571768
  var valid_571769 = path.getOrDefault("subscriptionId")
  valid_571769 = validateParameter(valid_571769, JString, required = true,
                                 default = nil)
  if valid_571769 != nil:
    section.add "subscriptionId", valid_571769
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   numSlots: JInt
  ##           : The number of site slots associated to the site
  ##   siteSku: JString
  ##          : The name of site SKU.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571770 = query.getOrDefault("api-version")
  valid_571770 = validateParameter(valid_571770, JString, required = true,
                                 default = nil)
  if valid_571770 != nil:
    section.add "api-version", valid_571770
  var valid_571771 = query.getOrDefault("featured")
  valid_571771 = validateParameter(valid_571771, JBool, required = false, default = nil)
  if valid_571771 != nil:
    section.add "featured", valid_571771
  var valid_571772 = query.getOrDefault("numSlots")
  valid_571772 = validateParameter(valid_571772, JInt, required = false, default = nil)
  if valid_571772 != nil:
    section.add "numSlots", valid_571772
  var valid_571773 = query.getOrDefault("siteSku")
  valid_571773 = validateParameter(valid_571773, JString, required = false,
                                 default = nil)
  if valid_571773 != nil:
    section.add "siteSku", valid_571773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571774: Call_RecommendationsGetRecommendedRulesForSite_571764;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571774.validator(path, query, header, formData, body)
  let scheme = call_571774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571774.url(scheme.get, call_571774.host, call_571774.base,
                         call_571774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571774, url, valid)

proc call*(call_571775: Call_RecommendationsGetRecommendedRulesForSite_571764;
          resourceGroupName: string; apiVersion: string; siteName: string;
          subscriptionId: string; featured: bool = false; numSlots: int = 0;
          siteSku: string = ""): Recallable =
  ## recommendationsGetRecommendedRulesForSite
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   numSlots: int
  ##           : The number of site slots associated to the site
  ##   siteSku: string
  ##          : The name of site SKU.
  var path_571776 = newJObject()
  var query_571777 = newJObject()
  add(path_571776, "resourceGroupName", newJString(resourceGroupName))
  add(query_571777, "api-version", newJString(apiVersion))
  add(query_571777, "featured", newJBool(featured))
  add(path_571776, "siteName", newJString(siteName))
  add(path_571776, "subscriptionId", newJString(subscriptionId))
  add(query_571777, "numSlots", newJInt(numSlots))
  add(query_571777, "siteSku", newJString(siteSku))
  result = call_571775.call(path_571776, query_571777, nil, nil, nil)

var recommendationsGetRecommendedRulesForSite* = Call_RecommendationsGetRecommendedRulesForSite_571764(
    name: "recommendationsGetRecommendedRulesForSite", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
    validator: validate_RecommendationsGetRecommendedRulesForSite_571765,
    base: "", url: url_RecommendationsGetRecommendedRulesForSite_571766,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRuleDetailsBySiteName_571778 = ref object of OpenApiRestCall_567650
proc url_RecommendationsGetRuleDetailsBySiteName_571780(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRuleDetailsBySiteName_571779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  ##   name: JString (required)
  ##       : Recommendation rule name
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571781 = path.getOrDefault("resourceGroupName")
  valid_571781 = validateParameter(valid_571781, JString, required = true,
                                 default = nil)
  if valid_571781 != nil:
    section.add "resourceGroupName", valid_571781
  var valid_571782 = path.getOrDefault("name")
  valid_571782 = validateParameter(valid_571782, JString, required = true,
                                 default = nil)
  if valid_571782 != nil:
    section.add "name", valid_571782
  var valid_571783 = path.getOrDefault("siteName")
  valid_571783 = validateParameter(valid_571783, JString, required = true,
                                 default = nil)
  if valid_571783 != nil:
    section.add "siteName", valid_571783
  var valid_571784 = path.getOrDefault("subscriptionId")
  valid_571784 = validateParameter(valid_571784, JString, required = true,
                                 default = nil)
  if valid_571784 != nil:
    section.add "subscriptionId", valid_571784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571785 = query.getOrDefault("api-version")
  valid_571785 = validateParameter(valid_571785, JString, required = true,
                                 default = nil)
  if valid_571785 != nil:
    section.add "api-version", valid_571785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571786: Call_RecommendationsGetRuleDetailsBySiteName_571778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_571786.validator(path, query, header, formData, body)
  let scheme = call_571786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571786.url(scheme.get, call_571786.host, call_571786.base,
                         call_571786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571786, url, valid)

proc call*(call_571787: Call_RecommendationsGetRuleDetailsBySiteName_571778;
          resourceGroupName: string; apiVersion: string; name: string;
          siteName: string; subscriptionId: string): Recallable =
  ## recommendationsGetRuleDetailsBySiteName
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Recommendation rule name
  ##   siteName: string (required)
  ##           : Site name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_571788 = newJObject()
  var query_571789 = newJObject()
  add(path_571788, "resourceGroupName", newJString(resourceGroupName))
  add(query_571789, "api-version", newJString(apiVersion))
  add(path_571788, "name", newJString(name))
  add(path_571788, "siteName", newJString(siteName))
  add(path_571788, "subscriptionId", newJString(subscriptionId))
  result = call_571787.call(path_571788, query_571789, nil, nil, nil)

var recommendationsGetRuleDetailsBySiteName* = Call_RecommendationsGetRuleDetailsBySiteName_571778(
    name: "recommendationsGetRuleDetailsBySiteName", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
    validator: validate_RecommendationsGetRuleDetailsBySiteName_571779, base: "",
    url: url_RecommendationsGetRuleDetailsBySiteName_571780,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
