
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: WebSite Management Client
## version: 2015-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563548 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563548](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563548): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-service"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ProviderUpdatePublishingUser_564068 = ref object of OpenApiRestCall_563548
proc url_ProviderUpdatePublishingUser_564070(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderUpdatePublishingUser_564069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564071 = query.getOrDefault("api-version")
  valid_564071 = validateParameter(valid_564071, JString, required = true,
                                 default = nil)
  if valid_564071 != nil:
    section.add "api-version", valid_564071
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564073: Call_ProviderUpdatePublishingUser_564068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564073.validator(path, query, header, formData, body)
  let scheme = call_564073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564073.url(scheme.get, call_564073.host, call_564073.base,
                         call_564073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564073, url, valid)

proc call*(call_564074: Call_ProviderUpdatePublishingUser_564068;
          apiVersion: string; requestMessage: JsonNode): Recallable =
  ## providerUpdatePublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  ##   requestMessage: JObject (required)
  ##                 : Details of publishing user
  var query_564075 = newJObject()
  var body_564076 = newJObject()
  add(query_564075, "api-version", newJString(apiVersion))
  if requestMessage != nil:
    body_564076 = requestMessage
  result = call_564074.call(nil, query_564075, nil, nil, body_564076)

var providerUpdatePublishingUser* = Call_ProviderUpdatePublishingUser_564068(
    name: "providerUpdatePublishingUser", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderUpdatePublishingUser_564069, base: "",
    url: url_ProviderUpdatePublishingUser_564070, schemes: {Scheme.Https})
type
  Call_ProviderGetPublishingUser_563770 = ref object of OpenApiRestCall_563548
proc url_ProviderGetPublishingUser_563772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetPublishingUser_563771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563933 = query.getOrDefault("api-version")
  valid_563933 = validateParameter(valid_563933, JString, required = true,
                                 default = nil)
  if valid_563933 != nil:
    section.add "api-version", valid_563933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_563956: Call_ProviderGetPublishingUser_563770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_563956.validator(path, query, header, formData, body)
  let scheme = call_563956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_563956.url(scheme.get, call_563956.host, call_563956.base,
                         call_563956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_563956, url, valid)

proc call*(call_564027: Call_ProviderGetPublishingUser_563770; apiVersion: string): Recallable =
  ## providerGetPublishingUser
  ##   apiVersion: string (required)
  ##             : API Version
  var query_564028 = newJObject()
  add(query_564028, "api-version", newJString(apiVersion))
  result = call_564027.call(nil, query_564028, nil, nil, nil)

var providerGetPublishingUser* = Call_ProviderGetPublishingUser_563770(
    name: "providerGetPublishingUser", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/publishingUsers/web",
    validator: validate_ProviderGetPublishingUser_563771, base: "",
    url: url_ProviderGetPublishingUser_563772, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControls_564077 = ref object of OpenApiRestCall_563548
proc url_ProviderGetSourceControls_564079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProviderGetSourceControls_564078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564080 = query.getOrDefault("api-version")
  valid_564080 = validateParameter(valid_564080, JString, required = true,
                                 default = nil)
  if valid_564080 != nil:
    section.add "api-version", valid_564080
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564081: Call_ProviderGetSourceControls_564077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564081.validator(path, query, header, formData, body)
  let scheme = call_564081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564081.url(scheme.get, call_564081.host, call_564081.base,
                         call_564081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564081, url, valid)

proc call*(call_564082: Call_ProviderGetSourceControls_564077; apiVersion: string): Recallable =
  ## providerGetSourceControls
  ##   apiVersion: string (required)
  ##             : API Version
  var query_564083 = newJObject()
  add(query_564083, "api-version", newJString(apiVersion))
  result = call_564082.call(nil, query_564083, nil, nil, nil)

var providerGetSourceControls* = Call_ProviderGetSourceControls_564077(
    name: "providerGetSourceControls", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols",
    validator: validate_ProviderGetSourceControls_564078, base: "",
    url: url_ProviderGetSourceControls_564079, schemes: {Scheme.Https})
type
  Call_ProviderUpdateSourceControl_564107 = ref object of OpenApiRestCall_563548
proc url_ProviderUpdateSourceControl_564109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderUpdateSourceControl_564108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_564110 = path.getOrDefault("sourceControlType")
  valid_564110 = validateParameter(valid_564110, JString, required = true,
                                 default = nil)
  if valid_564110 != nil:
    section.add "sourceControlType", valid_564110
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564111 = query.getOrDefault("api-version")
  valid_564111 = validateParameter(valid_564111, JString, required = true,
                                 default = nil)
  if valid_564111 != nil:
    section.add "api-version", valid_564111
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564113: Call_ProviderUpdateSourceControl_564107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564113.validator(path, query, header, formData, body)
  let scheme = call_564113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564113.url(scheme.get, call_564113.host, call_564113.base,
                         call_564113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564113, url, valid)

proc call*(call_564114: Call_ProviderUpdateSourceControl_564107;
          sourceControlType: string; apiVersion: string; requestMessage: JsonNode): Recallable =
  ## providerUpdateSourceControl
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  ##   apiVersion: string (required)
  ##             : API Version
  ##   requestMessage: JObject (required)
  ##                 : Source control token information
  var path_564115 = newJObject()
  var query_564116 = newJObject()
  var body_564117 = newJObject()
  add(path_564115, "sourceControlType", newJString(sourceControlType))
  add(query_564116, "api-version", newJString(apiVersion))
  if requestMessage != nil:
    body_564117 = requestMessage
  result = call_564114.call(path_564115, query_564116, nil, nil, body_564117)

var providerUpdateSourceControl* = Call_ProviderUpdateSourceControl_564107(
    name: "providerUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderUpdateSourceControl_564108, base: "",
    url: url_ProviderUpdateSourceControl_564109, schemes: {Scheme.Https})
type
  Call_ProviderGetSourceControl_564084 = ref object of OpenApiRestCall_563548
proc url_ProviderGetSourceControl_564086(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sourceControlType" in path,
        "`sourceControlType` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                value: "/providers/Microsoft.Web/sourcecontrols/"),
               (kind: VariableSegment, value: "sourceControlType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ProviderGetSourceControl_564085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sourceControlType: JString (required)
  ##                    : Type of source control
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `sourceControlType` field"
  var valid_564101 = path.getOrDefault("sourceControlType")
  valid_564101 = validateParameter(valid_564101, JString, required = true,
                                 default = nil)
  if valid_564101 != nil:
    section.add "sourceControlType", valid_564101
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564102 = query.getOrDefault("api-version")
  valid_564102 = validateParameter(valid_564102, JString, required = true,
                                 default = nil)
  if valid_564102 != nil:
    section.add "api-version", valid_564102
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564103: Call_ProviderGetSourceControl_564084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564103.validator(path, query, header, formData, body)
  let scheme = call_564103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564103.url(scheme.get, call_564103.host, call_564103.base,
                         call_564103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564103, url, valid)

proc call*(call_564104: Call_ProviderGetSourceControl_564084;
          sourceControlType: string; apiVersion: string): Recallable =
  ## providerGetSourceControl
  ##   sourceControlType: string (required)
  ##                    : Type of source control
  ##   apiVersion: string (required)
  ##             : API Version
  var path_564105 = newJObject()
  var query_564106 = newJObject()
  add(path_564105, "sourceControlType", newJString(sourceControlType))
  add(query_564106, "api-version", newJString(apiVersion))
  result = call_564104.call(path_564105, query_564106, nil, nil, nil)

var providerGetSourceControl* = Call_ProviderGetSourceControl_564084(
    name: "providerGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com",
    route: "/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    validator: validate_ProviderGetSourceControl_564085, base: "",
    url: url_ProviderGetSourceControl_564086, schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderGetAllCertificateOrders_564118 = ref object of OpenApiRestCall_563548
proc url_GlobalCertificateOrderGetAllCertificateOrders_564120(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderGetAllCertificateOrders_564119(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564121 = path.getOrDefault("subscriptionId")
  valid_564121 = validateParameter(valid_564121, JString, required = true,
                                 default = nil)
  if valid_564121 != nil:
    section.add "subscriptionId", valid_564121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564122 = query.getOrDefault("api-version")
  valid_564122 = validateParameter(valid_564122, JString, required = true,
                                 default = nil)
  if valid_564122 != nil:
    section.add "api-version", valid_564122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564123: Call_GlobalCertificateOrderGetAllCertificateOrders_564118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564123.validator(path, query, header, formData, body)
  let scheme = call_564123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564123.url(scheme.get, call_564123.host, call_564123.base,
                         call_564123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564123, url, valid)

proc call*(call_564124: Call_GlobalCertificateOrderGetAllCertificateOrders_564118;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalCertificateOrderGetAllCertificateOrders
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564125 = newJObject()
  var query_564126 = newJObject()
  add(query_564126, "api-version", newJString(apiVersion))
  add(path_564125, "subscriptionId", newJString(subscriptionId))
  result = call_564124.call(path_564125, query_564126, nil, nil, nil)

var globalCertificateOrderGetAllCertificateOrders* = Call_GlobalCertificateOrderGetAllCertificateOrders_564118(
    name: "globalCertificateOrderGetAllCertificateOrders",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_GlobalCertificateOrderGetAllCertificateOrders_564119,
    base: "", url: url_GlobalCertificateOrderGetAllCertificateOrders_564120,
    schemes: {Scheme.Https})
type
  Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_564127 = ref object of OpenApiRestCall_563548
proc url_GlobalCertificateOrderValidateCertificatePurchaseInformation_564129(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_564128(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564130 = path.getOrDefault("subscriptionId")
  valid_564130 = validateParameter(valid_564130, JString, required = true,
                                 default = nil)
  if valid_564130 != nil:
    section.add "subscriptionId", valid_564130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564131 = query.getOrDefault("api-version")
  valid_564131 = validateParameter(valid_564131, JString, required = true,
                                 default = nil)
  if valid_564131 != nil:
    section.add "api-version", valid_564131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564133: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_564127;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564133.validator(path, query, header, formData, body)
  let scheme = call_564133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564133.url(scheme.get, call_564133.host, call_564133.base,
                         call_564133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564133, url, valid)

proc call*(call_564134: Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_564127;
          apiVersion: string; subscriptionId: string; certificateOrder: JsonNode): Recallable =
  ## globalCertificateOrderValidateCertificatePurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrder: JObject (required)
  ##                   : Certificate order
  var path_564135 = newJObject()
  var query_564136 = newJObject()
  var body_564137 = newJObject()
  add(query_564136, "api-version", newJString(apiVersion))
  add(path_564135, "subscriptionId", newJString(subscriptionId))
  if certificateOrder != nil:
    body_564137 = certificateOrder
  result = call_564134.call(path_564135, query_564136, nil, nil, body_564137)

var globalCertificateOrderValidateCertificatePurchaseInformation* = Call_GlobalCertificateOrderValidateCertificatePurchaseInformation_564127(
    name: "globalCertificateOrderValidateCertificatePurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation", validator: validate_GlobalCertificateOrderValidateCertificatePurchaseInformation_564128,
    base: "",
    url: url_GlobalCertificateOrderValidateCertificatePurchaseInformation_564129,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationCheckDomainAvailability_564138 = ref object of OpenApiRestCall_563548
proc url_GlobalDomainRegistrationCheckDomainAvailability_564140(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/checkDomainAvailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationCheckDomainAvailability_564139(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564141 = path.getOrDefault("subscriptionId")
  valid_564141 = validateParameter(valid_564141, JString, required = true,
                                 default = nil)
  if valid_564141 != nil:
    section.add "subscriptionId", valid_564141
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564142 = query.getOrDefault("api-version")
  valid_564142 = validateParameter(valid_564142, JString, required = true,
                                 default = nil)
  if valid_564142 != nil:
    section.add "api-version", valid_564142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   identifier: JObject (required)
  ##             : Name of the domain
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564144: Call_GlobalDomainRegistrationCheckDomainAvailability_564138;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564144.validator(path, query, header, formData, body)
  let scheme = call_564144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564144.url(scheme.get, call_564144.host, call_564144.base,
                         call_564144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564144, url, valid)

proc call*(call_564145: Call_GlobalDomainRegistrationCheckDomainAvailability_564138;
          identifier: JsonNode; apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationCheckDomainAvailability
  ##   identifier: JObject (required)
  ##             : Name of the domain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564146 = newJObject()
  var query_564147 = newJObject()
  var body_564148 = newJObject()
  if identifier != nil:
    body_564148 = identifier
  add(query_564147, "api-version", newJString(apiVersion))
  add(path_564146, "subscriptionId", newJString(subscriptionId))
  result = call_564145.call(path_564146, query_564147, nil, nil, body_564148)

var globalDomainRegistrationCheckDomainAvailability* = Call_GlobalDomainRegistrationCheckDomainAvailability_564138(
    name: "globalDomainRegistrationCheckDomainAvailability",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
    validator: validate_GlobalDomainRegistrationCheckDomainAvailability_564139,
    base: "", url: url_GlobalDomainRegistrationCheckDomainAvailability_564140,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetAllDomains_564149 = ref object of OpenApiRestCall_563548
proc url_GlobalDomainRegistrationGetAllDomains_564151(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetAllDomains_564150(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564152 = path.getOrDefault("subscriptionId")
  valid_564152 = validateParameter(valid_564152, JString, required = true,
                                 default = nil)
  if valid_564152 != nil:
    section.add "subscriptionId", valid_564152
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564153 = query.getOrDefault("api-version")
  valid_564153 = validateParameter(valid_564153, JString, required = true,
                                 default = nil)
  if valid_564153 != nil:
    section.add "api-version", valid_564153
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564154: Call_GlobalDomainRegistrationGetAllDomains_564149;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564154.validator(path, query, header, formData, body)
  let scheme = call_564154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564154.url(scheme.get, call_564154.host, call_564154.base,
                         call_564154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564154, url, valid)

proc call*(call_564155: Call_GlobalDomainRegistrationGetAllDomains_564149;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetAllDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564156 = newJObject()
  var query_564157 = newJObject()
  add(query_564157, "api-version", newJString(apiVersion))
  add(path_564156, "subscriptionId", newJString(subscriptionId))
  result = call_564155.call(path_564156, query_564157, nil, nil, nil)

var globalDomainRegistrationGetAllDomains* = Call_GlobalDomainRegistrationGetAllDomains_564149(
    name: "globalDomainRegistrationGetAllDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_GlobalDomainRegistrationGetAllDomains_564150, base: "",
    url: url_GlobalDomainRegistrationGetAllDomains_564151, schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564158 = ref object of OpenApiRestCall_563548
proc url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564160(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/generateSsoRequest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564159(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564161 = path.getOrDefault("subscriptionId")
  valid_564161 = validateParameter(valid_564161, JString, required = true,
                                 default = nil)
  if valid_564161 != nil:
    section.add "subscriptionId", valid_564161
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564162 = query.getOrDefault("api-version")
  valid_564162 = validateParameter(valid_564162, JString, required = true,
                                 default = nil)
  if valid_564162 != nil:
    section.add "api-version", valid_564162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564163: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564158;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564163.validator(path, query, header, formData, body)
  let scheme = call_564163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564163.url(scheme.get, call_564163.host, call_564163.base,
                         call_564163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564163, url, valid)

proc call*(call_564164: Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564158;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalDomainRegistrationGetDomainControlCenterSsoRequest
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564165 = newJObject()
  var query_564166 = newJObject()
  add(query_564166, "api-version", newJString(apiVersion))
  add(path_564165, "subscriptionId", newJString(subscriptionId))
  result = call_564164.call(path_564165, query_564166, nil, nil, nil)

var globalDomainRegistrationGetDomainControlCenterSsoRequest* = Call_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564158(
    name: "globalDomainRegistrationGetDomainControlCenterSsoRequest",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest", validator: validate_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564159,
    base: "", url: url_GlobalDomainRegistrationGetDomainControlCenterSsoRequest_564160,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationListDomainRecommendations_564167 = ref object of OpenApiRestCall_563548
proc url_GlobalDomainRegistrationListDomainRecommendations_564169(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/listDomainRecommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationListDomainRecommendations_564168(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564170 = path.getOrDefault("subscriptionId")
  valid_564170 = validateParameter(valid_564170, JString, required = true,
                                 default = nil)
  if valid_564170 != nil:
    section.add "subscriptionId", valid_564170
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564171 = query.getOrDefault("api-version")
  valid_564171 = validateParameter(valid_564171, JString, required = true,
                                 default = nil)
  if valid_564171 != nil:
    section.add "api-version", valid_564171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564173: Call_GlobalDomainRegistrationListDomainRecommendations_564167;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564173.validator(path, query, header, formData, body)
  let scheme = call_564173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564173.url(scheme.get, call_564173.host, call_564173.base,
                         call_564173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564173, url, valid)

proc call*(call_564174: Call_GlobalDomainRegistrationListDomainRecommendations_564167;
          apiVersion: string; subscriptionId: string; parameters: JsonNode): Recallable =
  ## globalDomainRegistrationListDomainRecommendations
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   parameters: JObject (required)
  ##             : Domain recommendation search parameters
  var path_564175 = newJObject()
  var query_564176 = newJObject()
  var body_564177 = newJObject()
  add(query_564176, "api-version", newJString(apiVersion))
  add(path_564175, "subscriptionId", newJString(subscriptionId))
  if parameters != nil:
    body_564177 = parameters
  result = call_564174.call(path_564175, query_564176, nil, nil, body_564177)

var globalDomainRegistrationListDomainRecommendations* = Call_GlobalDomainRegistrationListDomainRecommendations_564167(
    name: "globalDomainRegistrationListDomainRecommendations",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
    validator: validate_GlobalDomainRegistrationListDomainRecommendations_564168,
    base: "", url: url_GlobalDomainRegistrationListDomainRecommendations_564169,
    schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetGetTopLevelDomains_564178 = ref object of OpenApiRestCall_563548
proc url_TopLevelDomainsGetGetTopLevelDomains_564180(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetGetTopLevelDomains_564179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564181 = path.getOrDefault("subscriptionId")
  valid_564181 = validateParameter(valid_564181, JString, required = true,
                                 default = nil)
  if valid_564181 != nil:
    section.add "subscriptionId", valid_564181
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564182 = query.getOrDefault("api-version")
  valid_564182 = validateParameter(valid_564182, JString, required = true,
                                 default = nil)
  if valid_564182 != nil:
    section.add "api-version", valid_564182
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564183: Call_TopLevelDomainsGetGetTopLevelDomains_564178;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564183.validator(path, query, header, formData, body)
  let scheme = call_564183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564183.url(scheme.get, call_564183.host, call_564183.base,
                         call_564183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564183, url, valid)

proc call*(call_564184: Call_TopLevelDomainsGetGetTopLevelDomains_564178;
          apiVersion: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetGetTopLevelDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564185 = newJObject()
  var query_564186 = newJObject()
  add(query_564186, "api-version", newJString(apiVersion))
  add(path_564185, "subscriptionId", newJString(subscriptionId))
  result = call_564184.call(path_564185, query_564186, nil, nil, nil)

var topLevelDomainsGetGetTopLevelDomains* = Call_TopLevelDomainsGetGetTopLevelDomains_564178(
    name: "topLevelDomainsGetGetTopLevelDomains", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
    validator: validate_TopLevelDomainsGetGetTopLevelDomains_564179, base: "",
    url: url_TopLevelDomainsGetGetTopLevelDomains_564180, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsGetTopLevelDomain_564187 = ref object of OpenApiRestCall_563548
proc url_TopLevelDomainsGetTopLevelDomain_564189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsGetTopLevelDomain_564188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564190 = path.getOrDefault("name")
  valid_564190 = validateParameter(valid_564190, JString, required = true,
                                 default = nil)
  if valid_564190 != nil:
    section.add "name", valid_564190
  var valid_564191 = path.getOrDefault("subscriptionId")
  valid_564191 = validateParameter(valid_564191, JString, required = true,
                                 default = nil)
  if valid_564191 != nil:
    section.add "subscriptionId", valid_564191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564192 = query.getOrDefault("api-version")
  valid_564192 = validateParameter(valid_564192, JString, required = true,
                                 default = nil)
  if valid_564192 != nil:
    section.add "api-version", valid_564192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564193: Call_TopLevelDomainsGetTopLevelDomain_564187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564193.validator(path, query, header, formData, body)
  let scheme = call_564193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564193.url(scheme.get, call_564193.host, call_564193.base,
                         call_564193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564193, url, valid)

proc call*(call_564194: Call_TopLevelDomainsGetTopLevelDomain_564187;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## topLevelDomainsGetTopLevelDomain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564195 = newJObject()
  var query_564196 = newJObject()
  add(query_564196, "api-version", newJString(apiVersion))
  add(path_564195, "name", newJString(name))
  add(path_564195, "subscriptionId", newJString(subscriptionId))
  result = call_564194.call(path_564195, query_564196, nil, nil, nil)

var topLevelDomainsGetTopLevelDomain* = Call_TopLevelDomainsGetTopLevelDomain_564187(
    name: "topLevelDomainsGetTopLevelDomain", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
    validator: validate_TopLevelDomainsGetTopLevelDomain_564188, base: "",
    url: url_TopLevelDomainsGetTopLevelDomain_564189, schemes: {Scheme.Https})
type
  Call_TopLevelDomainsListTopLevelDomainAgreements_564197 = ref object of OpenApiRestCall_563548
proc url_TopLevelDomainsListTopLevelDomainAgreements_564199(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/topLevelDomains/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listAgreements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_TopLevelDomainsListTopLevelDomainAgreements_564198(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the top level domain
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564200 = path.getOrDefault("name")
  valid_564200 = validateParameter(valid_564200, JString, required = true,
                                 default = nil)
  if valid_564200 != nil:
    section.add "name", valid_564200
  var valid_564201 = path.getOrDefault("subscriptionId")
  valid_564201 = validateParameter(valid_564201, JString, required = true,
                                 default = nil)
  if valid_564201 != nil:
    section.add "subscriptionId", valid_564201
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564202 = query.getOrDefault("api-version")
  valid_564202 = validateParameter(valid_564202, JString, required = true,
                                 default = nil)
  if valid_564202 != nil:
    section.add "api-version", valid_564202
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564204: Call_TopLevelDomainsListTopLevelDomainAgreements_564197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564204.validator(path, query, header, formData, body)
  let scheme = call_564204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564204.url(scheme.get, call_564204.host, call_564204.base,
                         call_564204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564204, url, valid)

proc call*(call_564205: Call_TopLevelDomainsListTopLevelDomainAgreements_564197;
          apiVersion: string; name: string; subscriptionId: string;
          agreementOption: JsonNode): Recallable =
  ## topLevelDomainsListTopLevelDomainAgreements
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the top level domain
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   agreementOption: JObject (required)
  ##                  : Domain agreement options
  var path_564206 = newJObject()
  var query_564207 = newJObject()
  var body_564208 = newJObject()
  add(query_564207, "api-version", newJString(apiVersion))
  add(path_564206, "name", newJString(name))
  add(path_564206, "subscriptionId", newJString(subscriptionId))
  if agreementOption != nil:
    body_564208 = agreementOption
  result = call_564205.call(path_564206, query_564207, nil, nil, body_564208)

var topLevelDomainsListTopLevelDomainAgreements* = Call_TopLevelDomainsListTopLevelDomainAgreements_564197(
    name: "topLevelDomainsListTopLevelDomainAgreements",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
    validator: validate_TopLevelDomainsListTopLevelDomainAgreements_564198,
    base: "", url: url_TopLevelDomainsListTopLevelDomainAgreements_564199,
    schemes: {Scheme.Https})
type
  Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_564209 = ref object of OpenApiRestCall_563548
proc url_GlobalDomainRegistrationValidateDomainPurchaseInformation_564211(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_564210(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564212 = path.getOrDefault("subscriptionId")
  valid_564212 = validateParameter(valid_564212, JString, required = true,
                                 default = nil)
  if valid_564212 != nil:
    section.add "subscriptionId", valid_564212
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564213 = query.getOrDefault("api-version")
  valid_564213 = validateParameter(valid_564213, JString, required = true,
                                 default = nil)
  if valid_564213 != nil:
    section.add "api-version", valid_564213
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564215: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_564209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564215.validator(path, query, header, formData, body)
  let scheme = call_564215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564215.url(scheme.get, call_564215.host, call_564215.base,
                         call_564215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564215, url, valid)

proc call*(call_564216: Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_564209;
          apiVersion: string; subscriptionId: string;
          domainRegistrationInput: JsonNode): Recallable =
  ## globalDomainRegistrationValidateDomainPurchaseInformation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   domainRegistrationInput: JObject (required)
  ##                          : Domain registration information
  var path_564217 = newJObject()
  var query_564218 = newJObject()
  var body_564219 = newJObject()
  add(query_564218, "api-version", newJString(apiVersion))
  add(path_564217, "subscriptionId", newJString(subscriptionId))
  if domainRegistrationInput != nil:
    body_564219 = domainRegistrationInput
  result = call_564216.call(path_564217, query_564218, nil, nil, body_564219)

var globalDomainRegistrationValidateDomainPurchaseInformation* = Call_GlobalDomainRegistrationValidateDomainPurchaseInformation_564209(
    name: "globalDomainRegistrationValidateDomainPurchaseInformation",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation", validator: validate_GlobalDomainRegistrationValidateDomainPurchaseInformation_564210,
    base: "", url: url_GlobalDomainRegistrationValidateDomainPurchaseInformation_564211,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllCertificates_564220 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllCertificates_564222(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllCertificates_564221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564223 = path.getOrDefault("subscriptionId")
  valid_564223 = validateParameter(valid_564223, JString, required = true,
                                 default = nil)
  if valid_564223 != nil:
    section.add "subscriptionId", valid_564223
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564224 = query.getOrDefault("api-version")
  valid_564224 = validateParameter(valid_564224, JString, required = true,
                                 default = nil)
  if valid_564224 != nil:
    section.add "api-version", valid_564224
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564225: Call_GlobalGetAllCertificates_564220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564225.validator(path, query, header, formData, body)
  let scheme = call_564225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564225.url(scheme.get, call_564225.host, call_564225.base,
                         call_564225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564225, url, valid)

proc call*(call_564226: Call_GlobalGetAllCertificates_564220; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllCertificates
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564227 = newJObject()
  var query_564228 = newJObject()
  add(query_564228, "api-version", newJString(apiVersion))
  add(path_564227, "subscriptionId", newJString(subscriptionId))
  result = call_564226.call(path_564227, query_564228, nil, nil, nil)

var globalGetAllCertificates* = Call_GlobalGetAllCertificates_564220(
    name: "globalGetAllCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
    validator: validate_GlobalGetAllCertificates_564221, base: "",
    url: url_GlobalGetAllCertificates_564222, schemes: {Scheme.Https})
type
  Call_GlobalCheckNameAvailability_564229 = ref object of OpenApiRestCall_563548
proc url_GlobalCheckNameAvailability_564231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/checknameavailability")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalCheckNameAvailability_564230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564232 = path.getOrDefault("subscriptionId")
  valid_564232 = validateParameter(valid_564232, JString, required = true,
                                 default = nil)
  if valid_564232 != nil:
    section.add "subscriptionId", valid_564232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564233 = query.getOrDefault("api-version")
  valid_564233 = validateParameter(valid_564233, JString, required = true,
                                 default = nil)
  if valid_564233 != nil:
    section.add "api-version", valid_564233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Name availability request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564235: Call_GlobalCheckNameAvailability_564229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564235.validator(path, query, header, formData, body)
  let scheme = call_564235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564235.url(scheme.get, call_564235.host, call_564235.base,
                         call_564235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564235, url, valid)

proc call*(call_564236: Call_GlobalCheckNameAvailability_564229;
          apiVersion: string; subscriptionId: string; request: JsonNode): Recallable =
  ## globalCheckNameAvailability
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   request: JObject (required)
  ##          : Name availability request
  var path_564237 = newJObject()
  var query_564238 = newJObject()
  var body_564239 = newJObject()
  add(query_564238, "api-version", newJString(apiVersion))
  add(path_564237, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_564239 = request
  result = call_564236.call(path_564237, query_564238, nil, nil, body_564239)

var globalCheckNameAvailability* = Call_GlobalCheckNameAvailability_564229(
    name: "globalCheckNameAvailability", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
    validator: validate_GlobalCheckNameAvailability_564230, base: "",
    url: url_GlobalCheckNameAvailability_564231, schemes: {Scheme.Https})
type
  Call_GlobalGetAllClassicMobileServices_564240 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllClassicMobileServices_564242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllClassicMobileServices_564241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564243 = path.getOrDefault("subscriptionId")
  valid_564243 = validateParameter(valid_564243, JString, required = true,
                                 default = nil)
  if valid_564243 != nil:
    section.add "subscriptionId", valid_564243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564244 = query.getOrDefault("api-version")
  valid_564244 = validateParameter(valid_564244, JString, required = true,
                                 default = nil)
  if valid_564244 != nil:
    section.add "api-version", valid_564244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564245: Call_GlobalGetAllClassicMobileServices_564240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564245.validator(path, query, header, formData, body)
  let scheme = call_564245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564245.url(scheme.get, call_564245.host, call_564245.base,
                         call_564245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564245, url, valid)

proc call*(call_564246: Call_GlobalGetAllClassicMobileServices_564240;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllClassicMobileServices
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564247 = newJObject()
  var query_564248 = newJObject()
  add(query_564248, "api-version", newJString(apiVersion))
  add(path_564247, "subscriptionId", newJString(subscriptionId))
  result = call_564246.call(path_564247, query_564248, nil, nil, nil)

var globalGetAllClassicMobileServices* = Call_GlobalGetAllClassicMobileServices_564240(
    name: "globalGetAllClassicMobileServices", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_GlobalGetAllClassicMobileServices_564241, base: "",
    url: url_GlobalGetAllClassicMobileServices_564242, schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionGeoRegions_564249 = ref object of OpenApiRestCall_563548
proc url_GlobalGetSubscriptionGeoRegions_564251(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/geoRegions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionGeoRegions_564250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564252 = path.getOrDefault("subscriptionId")
  valid_564252 = validateParameter(valid_564252, JString, required = true,
                                 default = nil)
  if valid_564252 != nil:
    section.add "subscriptionId", valid_564252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sku: JString
  ##      : Filter only to regions that support this sku
  ##   linuxWorkersEnabled: JBool
  ##                      : Filter only to regions that support linux workers
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564253 = query.getOrDefault("api-version")
  valid_564253 = validateParameter(valid_564253, JString, required = true,
                                 default = nil)
  if valid_564253 != nil:
    section.add "api-version", valid_564253
  var valid_564254 = query.getOrDefault("sku")
  valid_564254 = validateParameter(valid_564254, JString, required = false,
                                 default = nil)
  if valid_564254 != nil:
    section.add "sku", valid_564254
  var valid_564255 = query.getOrDefault("linuxWorkersEnabled")
  valid_564255 = validateParameter(valid_564255, JBool, required = false, default = nil)
  if valid_564255 != nil:
    section.add "linuxWorkersEnabled", valid_564255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564256: Call_GlobalGetSubscriptionGeoRegions_564249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564256.validator(path, query, header, formData, body)
  let scheme = call_564256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564256.url(scheme.get, call_564256.host, call_564256.base,
                         call_564256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564256, url, valid)

proc call*(call_564257: Call_GlobalGetSubscriptionGeoRegions_564249;
          apiVersion: string; subscriptionId: string; sku: string = "";
          linuxWorkersEnabled: bool = false): Recallable =
  ## globalGetSubscriptionGeoRegions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   sku: string
  ##      : Filter only to regions that support this sku
  ##   linuxWorkersEnabled: bool
  ##                      : Filter only to regions that support linux workers
  var path_564258 = newJObject()
  var query_564259 = newJObject()
  add(query_564259, "api-version", newJString(apiVersion))
  add(path_564258, "subscriptionId", newJString(subscriptionId))
  add(query_564259, "sku", newJString(sku))
  add(query_564259, "linuxWorkersEnabled", newJBool(linuxWorkersEnabled))
  result = call_564257.call(path_564258, query_564259, nil, nil, nil)

var globalGetSubscriptionGeoRegions* = Call_GlobalGetSubscriptionGeoRegions_564249(
    name: "globalGetSubscriptionGeoRegions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
    validator: validate_GlobalGetSubscriptionGeoRegions_564250, base: "",
    url: url_GlobalGetSubscriptionGeoRegions_564251, schemes: {Scheme.Https})
type
  Call_GlobalGetAllHostingEnvironments_564260 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllHostingEnvironments_564262(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllHostingEnvironments_564261(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564263 = path.getOrDefault("subscriptionId")
  valid_564263 = validateParameter(valid_564263, JString, required = true,
                                 default = nil)
  if valid_564263 != nil:
    section.add "subscriptionId", valid_564263
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564264 = query.getOrDefault("api-version")
  valid_564264 = validateParameter(valid_564264, JString, required = true,
                                 default = nil)
  if valid_564264 != nil:
    section.add "api-version", valid_564264
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564265: Call_GlobalGetAllHostingEnvironments_564260;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564265.validator(path, query, header, formData, body)
  let scheme = call_564265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564265.url(scheme.get, call_564265.host, call_564265.base,
                         call_564265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564265, url, valid)

proc call*(call_564266: Call_GlobalGetAllHostingEnvironments_564260;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564267 = newJObject()
  var query_564268 = newJObject()
  add(query_564268, "api-version", newJString(apiVersion))
  add(path_564267, "subscriptionId", newJString(subscriptionId))
  result = call_564266.call(path_564267, query_564268, nil, nil, nil)

var globalGetAllHostingEnvironments* = Call_GlobalGetAllHostingEnvironments_564260(
    name: "globalGetAllHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_GlobalGetAllHostingEnvironments_564261, base: "",
    url: url_GlobalGetAllHostingEnvironments_564262, schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentNameAvailable_564269 = ref object of OpenApiRestCall_563548
proc url_GlobalIsHostingEnvironmentNameAvailable_564271(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentNameAvailable_564270(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564272 = path.getOrDefault("subscriptionId")
  valid_564272 = validateParameter(valid_564272, JString, required = true,
                                 default = nil)
  if valid_564272 != nil:
    section.add "subscriptionId", valid_564272
  result.add "path", section
  ## parameters in `query` object:
  ##   name: JString (required)
  ##       : Hosting environment name
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `name` field"
  var valid_564273 = query.getOrDefault("name")
  valid_564273 = validateParameter(valid_564273, JString, required = true,
                                 default = nil)
  if valid_564273 != nil:
    section.add "name", valid_564273
  var valid_564274 = query.getOrDefault("api-version")
  valid_564274 = validateParameter(valid_564274, JString, required = true,
                                 default = nil)
  if valid_564274 != nil:
    section.add "api-version", valid_564274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564275: Call_GlobalIsHostingEnvironmentNameAvailable_564269;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564275.validator(path, query, header, formData, body)
  let scheme = call_564275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564275.url(scheme.get, call_564275.host, call_564275.base,
                         call_564275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564275, url, valid)

proc call*(call_564276: Call_GlobalIsHostingEnvironmentNameAvailable_564269;
          name: string; apiVersion: string; subscriptionId: string): Recallable =
  ## globalIsHostingEnvironmentNameAvailable
  ##   name: string (required)
  ##       : Hosting environment name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564277 = newJObject()
  var query_564278 = newJObject()
  add(query_564278, "name", newJString(name))
  add(query_564278, "api-version", newJString(apiVersion))
  add(path_564277, "subscriptionId", newJString(subscriptionId))
  result = call_564276.call(path_564277, query_564278, nil, nil, nil)

var globalIsHostingEnvironmentNameAvailable* = Call_GlobalIsHostingEnvironmentNameAvailable_564269(
    name: "globalIsHostingEnvironmentNameAvailable", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable",
    validator: validate_GlobalIsHostingEnvironmentNameAvailable_564270, base: "",
    url: url_GlobalIsHostingEnvironmentNameAvailable_564271,
    schemes: {Scheme.Https})
type
  Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564279 = ref object of OpenApiRestCall_563548
proc url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564281(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/ishostingenvironmentnameavailable/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564280(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Hosting environment name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564282 = path.getOrDefault("name")
  valid_564282 = validateParameter(valid_564282, JString, required = true,
                                 default = nil)
  if valid_564282 != nil:
    section.add "name", valid_564282
  var valid_564283 = path.getOrDefault("subscriptionId")
  valid_564283 = validateParameter(valid_564283, JString, required = true,
                                 default = nil)
  if valid_564283 != nil:
    section.add "subscriptionId", valid_564283
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564284 = query.getOrDefault("api-version")
  valid_564284 = validateParameter(valid_564284, JString, required = true,
                                 default = nil)
  if valid_564284 != nil:
    section.add "api-version", valid_564284
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564285: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564285.validator(path, query, header, formData, body)
  let scheme = call_564285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564285.url(scheme.get, call_564285.host, call_564285.base,
                         call_564285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564285, url, valid)

proc call*(call_564286: Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564279;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## globalIsHostingEnvironmentWithLegacyNameAvailable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Hosting environment name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564287 = newJObject()
  var query_564288 = newJObject()
  add(query_564288, "api-version", newJString(apiVersion))
  add(path_564287, "name", newJString(name))
  add(path_564287, "subscriptionId", newJString(subscriptionId))
  result = call_564286.call(path_564287, query_564288, nil, nil, nil)

var globalIsHostingEnvironmentWithLegacyNameAvailable* = Call_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564279(
    name: "globalIsHostingEnvironmentWithLegacyNameAvailable",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable/{name}",
    validator: validate_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564280,
    base: "", url: url_GlobalIsHostingEnvironmentWithLegacyNameAvailable_564281,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllManagedHostingEnvironments_564289 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllManagedHostingEnvironments_564291(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllManagedHostingEnvironments_564290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564292 = path.getOrDefault("subscriptionId")
  valid_564292 = validateParameter(valid_564292, JString, required = true,
                                 default = nil)
  if valid_564292 != nil:
    section.add "subscriptionId", valid_564292
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564293 = query.getOrDefault("api-version")
  valid_564293 = validateParameter(valid_564293, JString, required = true,
                                 default = nil)
  if valid_564293 != nil:
    section.add "api-version", valid_564293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564294: Call_GlobalGetAllManagedHostingEnvironments_564289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564294.validator(path, query, header, formData, body)
  let scheme = call_564294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564294.url(scheme.get, call_564294.host, call_564294.base,
                         call_564294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564294, url, valid)

proc call*(call_564295: Call_GlobalGetAllManagedHostingEnvironments_564289;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetAllManagedHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564296 = newJObject()
  var query_564297 = newJObject()
  add(query_564297, "api-version", newJString(apiVersion))
  add(path_564296, "subscriptionId", newJString(subscriptionId))
  result = call_564295.call(path_564296, query_564297, nil, nil, nil)

var globalGetAllManagedHostingEnvironments* = Call_GlobalGetAllManagedHostingEnvironments_564289(
    name: "globalGetAllManagedHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments",
    validator: validate_GlobalGetAllManagedHostingEnvironments_564290, base: "",
    url: url_GlobalGetAllManagedHostingEnvironments_564291,
    schemes: {Scheme.Https})
type
  Call_GlobalListPremierAddOnOffers_564298 = ref object of OpenApiRestCall_563548
proc url_GlobalListPremierAddOnOffers_564300(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/premieraddonoffers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalListPremierAddOnOffers_564299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564301 = path.getOrDefault("subscriptionId")
  valid_564301 = validateParameter(valid_564301, JString, required = true,
                                 default = nil)
  if valid_564301 != nil:
    section.add "subscriptionId", valid_564301
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564302 = query.getOrDefault("api-version")
  valid_564302 = validateParameter(valid_564302, JString, required = true,
                                 default = nil)
  if valid_564302 != nil:
    section.add "api-version", valid_564302
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564303: Call_GlobalListPremierAddOnOffers_564298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564303.validator(path, query, header, formData, body)
  let scheme = call_564303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564303.url(scheme.get, call_564303.host, call_564303.base,
                         call_564303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564303, url, valid)

proc call*(call_564304: Call_GlobalListPremierAddOnOffers_564298;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalListPremierAddOnOffers
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564305 = newJObject()
  var query_564306 = newJObject()
  add(query_564306, "api-version", newJString(apiVersion))
  add(path_564305, "subscriptionId", newJString(subscriptionId))
  result = call_564304.call(path_564305, query_564306, nil, nil, nil)

var globalListPremierAddOnOffers* = Call_GlobalListPremierAddOnOffers_564298(
    name: "globalListPremierAddOnOffers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
    validator: validate_GlobalListPremierAddOnOffers_564299, base: "",
    url: url_GlobalListPremierAddOnOffers_564300, schemes: {Scheme.Https})
type
  Call_GlobalUpdateSubscriptionPublishingCredentials_564316 = ref object of OpenApiRestCall_563548
proc url_GlobalUpdateSubscriptionPublishingCredentials_564318(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalUpdateSubscriptionPublishingCredentials_564317(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564319 = path.getOrDefault("subscriptionId")
  valid_564319 = validateParameter(valid_564319, JString, required = true,
                                 default = nil)
  if valid_564319 != nil:
    section.add "subscriptionId", valid_564319
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564320 = query.getOrDefault("api-version")
  valid_564320 = validateParameter(valid_564320, JString, required = true,
                                 default = nil)
  if valid_564320 != nil:
    section.add "api-version", valid_564320
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564322: Call_GlobalUpdateSubscriptionPublishingCredentials_564316;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564322.validator(path, query, header, formData, body)
  let scheme = call_564322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564322.url(scheme.get, call_564322.host, call_564322.base,
                         call_564322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564322, url, valid)

proc call*(call_564323: Call_GlobalUpdateSubscriptionPublishingCredentials_564316;
          apiVersion: string; requestMessage: JsonNode; subscriptionId: string): Recallable =
  ## globalUpdateSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   requestMessage: JObject (required)
  ##                 : requestMessage with new publishing credentials
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564324 = newJObject()
  var query_564325 = newJObject()
  var body_564326 = newJObject()
  add(query_564325, "api-version", newJString(apiVersion))
  if requestMessage != nil:
    body_564326 = requestMessage
  add(path_564324, "subscriptionId", newJString(subscriptionId))
  result = call_564323.call(path_564324, query_564325, nil, nil, body_564326)

var globalUpdateSubscriptionPublishingCredentials* = Call_GlobalUpdateSubscriptionPublishingCredentials_564316(
    name: "globalUpdateSubscriptionPublishingCredentials",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalUpdateSubscriptionPublishingCredentials_564317,
    base: "", url: url_GlobalUpdateSubscriptionPublishingCredentials_564318,
    schemes: {Scheme.Https})
type
  Call_GlobalGetSubscriptionPublishingCredentials_564307 = ref object of OpenApiRestCall_563548
proc url_GlobalGetSubscriptionPublishingCredentials_564309(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/publishingCredentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetSubscriptionPublishingCredentials_564308(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564310 = path.getOrDefault("subscriptionId")
  valid_564310 = validateParameter(valid_564310, JString, required = true,
                                 default = nil)
  if valid_564310 != nil:
    section.add "subscriptionId", valid_564310
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564311 = query.getOrDefault("api-version")
  valid_564311 = validateParameter(valid_564311, JString, required = true,
                                 default = nil)
  if valid_564311 != nil:
    section.add "api-version", valid_564311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564312: Call_GlobalGetSubscriptionPublishingCredentials_564307;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564312.validator(path, query, header, formData, body)
  let scheme = call_564312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564312.url(scheme.get, call_564312.host, call_564312.base,
                         call_564312.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564312, url, valid)

proc call*(call_564313: Call_GlobalGetSubscriptionPublishingCredentials_564307;
          apiVersion: string; subscriptionId: string): Recallable =
  ## globalGetSubscriptionPublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564314 = newJObject()
  var query_564315 = newJObject()
  add(query_564315, "api-version", newJString(apiVersion))
  add(path_564314, "subscriptionId", newJString(subscriptionId))
  result = call_564313.call(path_564314, query_564315, nil, nil, nil)

var globalGetSubscriptionPublishingCredentials* = Call_GlobalGetSubscriptionPublishingCredentials_564307(
    name: "globalGetSubscriptionPublishingCredentials", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
    validator: validate_GlobalGetSubscriptionPublishingCredentials_564308,
    base: "", url: url_GlobalGetSubscriptionPublishingCredentials_564309,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationBySubscription_564327 = ref object of OpenApiRestCall_563548
proc url_RecommendationsGetRecommendationBySubscription_564329(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationBySubscription_564328(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564331 = path.getOrDefault("subscriptionId")
  valid_564331 = validateParameter(valid_564331, JString, required = true,
                                 default = nil)
  if valid_564331 != nil:
    section.add "subscriptionId", valid_564331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   $filter: JString
  ##          : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564332 = query.getOrDefault("api-version")
  valid_564332 = validateParameter(valid_564332, JString, required = true,
                                 default = nil)
  if valid_564332 != nil:
    section.add "api-version", valid_564332
  var valid_564333 = query.getOrDefault("featured")
  valid_564333 = validateParameter(valid_564333, JBool, required = false, default = nil)
  if valid_564333 != nil:
    section.add "featured", valid_564333
  var valid_564334 = query.getOrDefault("$filter")
  valid_564334 = validateParameter(valid_564334, JString, required = false,
                                 default = nil)
  if valid_564334 != nil:
    section.add "$filter", valid_564334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564335: Call_RecommendationsGetRecommendationBySubscription_564327;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564335.validator(path, query, header, formData, body)
  let scheme = call_564335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564335.url(scheme.get, call_564335.host, call_564335.base,
                         call_564335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564335, url, valid)

proc call*(call_564336: Call_RecommendationsGetRecommendationBySubscription_564327;
          apiVersion: string; subscriptionId: string; featured: bool = false;
          Filter: string = ""): Recallable =
  ## recommendationsGetRecommendationBySubscription
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   Filter: string
  ##         : Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
  var path_564337 = newJObject()
  var query_564338 = newJObject()
  add(query_564338, "api-version", newJString(apiVersion))
  add(path_564337, "subscriptionId", newJString(subscriptionId))
  add(query_564338, "featured", newJBool(featured))
  add(query_564338, "$filter", newJString(Filter))
  result = call_564336.call(path_564337, query_564338, nil, nil, nil)

var recommendationsGetRecommendationBySubscription* = Call_RecommendationsGetRecommendationBySubscription_564327(
    name: "recommendationsGetRecommendationBySubscription",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
    validator: validate_RecommendationsGetRecommendationBySubscription_564328,
    base: "", url: url_RecommendationsGetRecommendationBySubscription_564329,
    schemes: {Scheme.Https})
type
  Call_GlobalGetAllServerFarms_564339 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllServerFarms_564341(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllServerFarms_564340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564342 = path.getOrDefault("subscriptionId")
  valid_564342 = validateParameter(valid_564342, JString, required = true,
                                 default = nil)
  if valid_564342 != nil:
    section.add "subscriptionId", valid_564342
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   detailed: JBool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564343 = query.getOrDefault("api-version")
  valid_564343 = validateParameter(valid_564343, JString, required = true,
                                 default = nil)
  if valid_564343 != nil:
    section.add "api-version", valid_564343
  var valid_564344 = query.getOrDefault("detailed")
  valid_564344 = validateParameter(valid_564344, JBool, required = false, default = nil)
  if valid_564344 != nil:
    section.add "detailed", valid_564344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564345: Call_GlobalGetAllServerFarms_564339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564345.validator(path, query, header, formData, body)
  let scheme = call_564345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564345.url(scheme.get, call_564345.host, call_564345.base,
                         call_564345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564345, url, valid)

proc call*(call_564346: Call_GlobalGetAllServerFarms_564339; apiVersion: string;
          subscriptionId: string; detailed: bool = false): Recallable =
  ## globalGetAllServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   detailed: bool
  ##           : False to return a subset of App Service Plan properties, true to return all of the properties.
  ##             Retrieval of all properties may increase the API latency.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564347 = newJObject()
  var query_564348 = newJObject()
  add(query_564348, "api-version", newJString(apiVersion))
  add(query_564348, "detailed", newJBool(detailed))
  add(path_564347, "subscriptionId", newJString(subscriptionId))
  result = call_564346.call(path_564347, query_564348, nil, nil, nil)

var globalGetAllServerFarms* = Call_GlobalGetAllServerFarms_564339(
    name: "globalGetAllServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
    validator: validate_GlobalGetAllServerFarms_564340, base: "",
    url: url_GlobalGetAllServerFarms_564341, schemes: {Scheme.Https})
type
  Call_GlobalGetAllSites_564349 = ref object of OpenApiRestCall_563548
proc url_GlobalGetAllSites_564351(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalGetAllSites_564350(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564352 = path.getOrDefault("subscriptionId")
  valid_564352 = validateParameter(valid_564352, JString, required = true,
                                 default = nil)
  if valid_564352 != nil:
    section.add "subscriptionId", valid_564352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564353 = query.getOrDefault("api-version")
  valid_564353 = validateParameter(valid_564353, JString, required = true,
                                 default = nil)
  if valid_564353 != nil:
    section.add "api-version", valid_564353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564354: Call_GlobalGetAllSites_564349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564354.validator(path, query, header, formData, body)
  let scheme = call_564354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564354.url(scheme.get, call_564354.host, call_564354.base,
                         call_564354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564354, url, valid)

proc call*(call_564355: Call_GlobalGetAllSites_564349; apiVersion: string;
          subscriptionId: string): Recallable =
  ## globalGetAllSites
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  var path_564356 = newJObject()
  var query_564357 = newJObject()
  add(query_564357, "api-version", newJString(apiVersion))
  add(path_564356, "subscriptionId", newJString(subscriptionId))
  result = call_564355.call(path_564356, query_564357, nil, nil, nil)

var globalGetAllSites* = Call_GlobalGetAllSites_564349(name: "globalGetAllSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com",
    route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
    validator: validate_GlobalGetAllSites_564350, base: "",
    url: url_GlobalGetAllSites_564351, schemes: {Scheme.Https})
type
  Call_GlobalResourceGroupsMoveResources_564358 = ref object of OpenApiRestCall_563548
proc url_GlobalResourceGroupsMoveResources_564360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/moveResources")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GlobalResourceGroupsMoveResources_564359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564361 = path.getOrDefault("subscriptionId")
  valid_564361 = validateParameter(valid_564361, JString, required = true,
                                 default = nil)
  if valid_564361 != nil:
    section.add "subscriptionId", valid_564361
  var valid_564362 = path.getOrDefault("resourceGroupName")
  valid_564362 = validateParameter(valid_564362, JString, required = true,
                                 default = nil)
  if valid_564362 != nil:
    section.add "resourceGroupName", valid_564362
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564363 = query.getOrDefault("api-version")
  valid_564363 = validateParameter(valid_564363, JString, required = true,
                                 default = nil)
  if valid_564363 != nil:
    section.add "api-version", valid_564363
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   moveResourceEnvelope: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564365: Call_GlobalResourceGroupsMoveResources_564358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564365.validator(path, query, header, formData, body)
  let scheme = call_564365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564365.url(scheme.get, call_564365.host, call_564365.base,
                         call_564365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564365, url, valid)

proc call*(call_564366: Call_GlobalResourceGroupsMoveResources_564358;
          apiVersion: string; moveResourceEnvelope: JsonNode;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## globalResourceGroupsMoveResources
  ##   apiVersion: string (required)
  ##             : API Version
  ##   moveResourceEnvelope: JObject (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  var path_564367 = newJObject()
  var query_564368 = newJObject()
  var body_564369 = newJObject()
  add(query_564368, "api-version", newJString(apiVersion))
  if moveResourceEnvelope != nil:
    body_564369 = moveResourceEnvelope
  add(path_564367, "subscriptionId", newJString(subscriptionId))
  add(path_564367, "resourceGroupName", newJString(resourceGroupName))
  result = call_564366.call(path_564367, query_564368, nil, nil, body_564369)

var globalResourceGroupsMoveResources* = Call_GlobalResourceGroupsMoveResources_564358(
    name: "globalResourceGroupsMoveResources", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
    validator: validate_GlobalResourceGroupsMoveResources_564359, base: "",
    url: url_GlobalResourceGroupsMoveResources_564360, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrders_564370 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersGetCertificateOrders_564372(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.CertificateRegistration/certificateOrders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrders_564371(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564373 = path.getOrDefault("subscriptionId")
  valid_564373 = validateParameter(valid_564373, JString, required = true,
                                 default = nil)
  if valid_564373 != nil:
    section.add "subscriptionId", valid_564373
  var valid_564374 = path.getOrDefault("resourceGroupName")
  valid_564374 = validateParameter(valid_564374, JString, required = true,
                                 default = nil)
  if valid_564374 != nil:
    section.add "resourceGroupName", valid_564374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564375 = query.getOrDefault("api-version")
  valid_564375 = validateParameter(valid_564375, JString, required = true,
                                 default = nil)
  if valid_564375 != nil:
    section.add "api-version", valid_564375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564376: Call_CertificateOrdersGetCertificateOrders_564370;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564376.validator(path, query, header, formData, body)
  let scheme = call_564376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564376.url(scheme.get, call_564376.host, call_564376.base,
                         call_564376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564376, url, valid)

proc call*(call_564377: Call_CertificateOrdersGetCertificateOrders_564370;
          apiVersion: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificateOrdersGetCertificateOrders
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564378 = newJObject()
  var query_564379 = newJObject()
  add(query_564379, "api-version", newJString(apiVersion))
  add(path_564378, "subscriptionId", newJString(subscriptionId))
  add(path_564378, "resourceGroupName", newJString(resourceGroupName))
  result = call_564377.call(path_564378, query_564379, nil, nil, nil)

var certificateOrdersGetCertificateOrders* = Call_CertificateOrdersGetCertificateOrders_564370(
    name: "certificateOrdersGetCertificateOrders", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
    validator: validate_CertificateOrdersGetCertificateOrders_564371, base: "",
    url: url_CertificateOrdersGetCertificateOrders_564372, schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificates_564380 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersGetCertificates_564382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificates_564381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564383 = path.getOrDefault("subscriptionId")
  valid_564383 = validateParameter(valid_564383, JString, required = true,
                                 default = nil)
  if valid_564383 != nil:
    section.add "subscriptionId", valid_564383
  var valid_564384 = path.getOrDefault("certificateOrderName")
  valid_564384 = validateParameter(valid_564384, JString, required = true,
                                 default = nil)
  if valid_564384 != nil:
    section.add "certificateOrderName", valid_564384
  var valid_564385 = path.getOrDefault("resourceGroupName")
  valid_564385 = validateParameter(valid_564385, JString, required = true,
                                 default = nil)
  if valid_564385 != nil:
    section.add "resourceGroupName", valid_564385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564386 = query.getOrDefault("api-version")
  valid_564386 = validateParameter(valid_564386, JString, required = true,
                                 default = nil)
  if valid_564386 != nil:
    section.add "api-version", valid_564386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564387: Call_CertificateOrdersGetCertificates_564380;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564387.validator(path, query, header, formData, body)
  let scheme = call_564387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564387.url(scheme.get, call_564387.host, call_564387.base,
                         call_564387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564387, url, valid)

proc call*(call_564388: Call_CertificateOrdersGetCertificates_564380;
          apiVersion: string; subscriptionId: string; certificateOrderName: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersGetCertificates
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564389 = newJObject()
  var query_564390 = newJObject()
  add(query_564390, "api-version", newJString(apiVersion))
  add(path_564389, "subscriptionId", newJString(subscriptionId))
  add(path_564389, "certificateOrderName", newJString(certificateOrderName))
  add(path_564389, "resourceGroupName", newJString(resourceGroupName))
  result = call_564388.call(path_564389, query_564390, nil, nil, nil)

var certificateOrdersGetCertificates* = Call_CertificateOrdersGetCertificates_564380(
    name: "certificateOrdersGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
    validator: validate_CertificateOrdersGetCertificates_564381, base: "",
    url: url_CertificateOrdersGetCertificates_564382, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificate_564403 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersCreateOrUpdateCertificate_564405(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificate_564404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564406 = path.getOrDefault("name")
  valid_564406 = validateParameter(valid_564406, JString, required = true,
                                 default = nil)
  if valid_564406 != nil:
    section.add "name", valid_564406
  var valid_564407 = path.getOrDefault("subscriptionId")
  valid_564407 = validateParameter(valid_564407, JString, required = true,
                                 default = nil)
  if valid_564407 != nil:
    section.add "subscriptionId", valid_564407
  var valid_564408 = path.getOrDefault("certificateOrderName")
  valid_564408 = validateParameter(valid_564408, JString, required = true,
                                 default = nil)
  if valid_564408 != nil:
    section.add "certificateOrderName", valid_564408
  var valid_564409 = path.getOrDefault("resourceGroupName")
  valid_564409 = validateParameter(valid_564409, JString, required = true,
                                 default = nil)
  if valid_564409 != nil:
    section.add "resourceGroupName", valid_564409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564410 = query.getOrDefault("api-version")
  valid_564410 = validateParameter(valid_564410, JString, required = true,
                                 default = nil)
  if valid_564410 != nil:
    section.add "api-version", valid_564410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564412: Call_CertificateOrdersCreateOrUpdateCertificate_564403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564412.validator(path, query, header, formData, body)
  let scheme = call_564412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564412.url(scheme.get, call_564412.host, call_564412.base,
                         call_564412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564412, url, valid)

proc call*(call_564413: Call_CertificateOrdersCreateOrUpdateCertificate_564403;
          apiVersion: string; name: string; subscriptionId: string;
          certificateOrderName: string; resourceGroupName: string;
          keyVaultCertificate: JsonNode): Recallable =
  ## certificateOrdersCreateOrUpdateCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  var path_564414 = newJObject()
  var query_564415 = newJObject()
  var body_564416 = newJObject()
  add(query_564415, "api-version", newJString(apiVersion))
  add(path_564414, "name", newJString(name))
  add(path_564414, "subscriptionId", newJString(subscriptionId))
  add(path_564414, "certificateOrderName", newJString(certificateOrderName))
  add(path_564414, "resourceGroupName", newJString(resourceGroupName))
  if keyVaultCertificate != nil:
    body_564416 = keyVaultCertificate
  result = call_564413.call(path_564414, query_564415, nil, nil, body_564416)

var certificateOrdersCreateOrUpdateCertificate* = Call_CertificateOrdersCreateOrUpdateCertificate_564403(
    name: "certificateOrdersCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificate_564404,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificate_564405,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificate_564391 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersGetCertificate_564393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificate_564392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564394 = path.getOrDefault("name")
  valid_564394 = validateParameter(valid_564394, JString, required = true,
                                 default = nil)
  if valid_564394 != nil:
    section.add "name", valid_564394
  var valid_564395 = path.getOrDefault("subscriptionId")
  valid_564395 = validateParameter(valid_564395, JString, required = true,
                                 default = nil)
  if valid_564395 != nil:
    section.add "subscriptionId", valid_564395
  var valid_564396 = path.getOrDefault("certificateOrderName")
  valid_564396 = validateParameter(valid_564396, JString, required = true,
                                 default = nil)
  if valid_564396 != nil:
    section.add "certificateOrderName", valid_564396
  var valid_564397 = path.getOrDefault("resourceGroupName")
  valid_564397 = validateParameter(valid_564397, JString, required = true,
                                 default = nil)
  if valid_564397 != nil:
    section.add "resourceGroupName", valid_564397
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564398 = query.getOrDefault("api-version")
  valid_564398 = validateParameter(valid_564398, JString, required = true,
                                 default = nil)
  if valid_564398 != nil:
    section.add "api-version", valid_564398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564399: Call_CertificateOrdersGetCertificate_564391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564399.validator(path, query, header, formData, body)
  let scheme = call_564399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564399.url(scheme.get, call_564399.host, call_564399.base,
                         call_564399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564399, url, valid)

proc call*(call_564400: Call_CertificateOrdersGetCertificate_564391;
          apiVersion: string; name: string; subscriptionId: string;
          certificateOrderName: string; resourceGroupName: string): Recallable =
  ## certificateOrdersGetCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564401 = newJObject()
  var query_564402 = newJObject()
  add(query_564402, "api-version", newJString(apiVersion))
  add(path_564401, "name", newJString(name))
  add(path_564401, "subscriptionId", newJString(subscriptionId))
  add(path_564401, "certificateOrderName", newJString(certificateOrderName))
  add(path_564401, "resourceGroupName", newJString(resourceGroupName))
  result = call_564400.call(path_564401, query_564402, nil, nil, nil)

var certificateOrdersGetCertificate* = Call_CertificateOrdersGetCertificate_564391(
    name: "certificateOrdersGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersGetCertificate_564392, base: "",
    url: url_CertificateOrdersGetCertificate_564393, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificate_564429 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersUpdateCertificate_564431(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificate_564430(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564432 = path.getOrDefault("name")
  valid_564432 = validateParameter(valid_564432, JString, required = true,
                                 default = nil)
  if valid_564432 != nil:
    section.add "name", valid_564432
  var valid_564433 = path.getOrDefault("subscriptionId")
  valid_564433 = validateParameter(valid_564433, JString, required = true,
                                 default = nil)
  if valid_564433 != nil:
    section.add "subscriptionId", valid_564433
  var valid_564434 = path.getOrDefault("certificateOrderName")
  valid_564434 = validateParameter(valid_564434, JString, required = true,
                                 default = nil)
  if valid_564434 != nil:
    section.add "certificateOrderName", valid_564434
  var valid_564435 = path.getOrDefault("resourceGroupName")
  valid_564435 = validateParameter(valid_564435, JString, required = true,
                                 default = nil)
  if valid_564435 != nil:
    section.add "resourceGroupName", valid_564435
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564436 = query.getOrDefault("api-version")
  valid_564436 = validateParameter(valid_564436, JString, required = true,
                                 default = nil)
  if valid_564436 != nil:
    section.add "api-version", valid_564436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564438: Call_CertificateOrdersUpdateCertificate_564429;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564438.validator(path, query, header, formData, body)
  let scheme = call_564438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564438.url(scheme.get, call_564438.host, call_564438.base,
                         call_564438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564438, url, valid)

proc call*(call_564439: Call_CertificateOrdersUpdateCertificate_564429;
          apiVersion: string; name: string; subscriptionId: string;
          certificateOrderName: string; resourceGroupName: string;
          keyVaultCertificate: JsonNode): Recallable =
  ## certificateOrdersUpdateCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  ##   keyVaultCertificate: JObject (required)
  ##                      : Key Vault secret csm Id
  var path_564440 = newJObject()
  var query_564441 = newJObject()
  var body_564442 = newJObject()
  add(query_564441, "api-version", newJString(apiVersion))
  add(path_564440, "name", newJString(name))
  add(path_564440, "subscriptionId", newJString(subscriptionId))
  add(path_564440, "certificateOrderName", newJString(certificateOrderName))
  add(path_564440, "resourceGroupName", newJString(resourceGroupName))
  if keyVaultCertificate != nil:
    body_564442 = keyVaultCertificate
  result = call_564439.call(path_564440, query_564441, nil, nil, body_564442)

var certificateOrdersUpdateCertificate* = Call_CertificateOrdersUpdateCertificate_564429(
    name: "certificateOrdersUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersUpdateCertificate_564430, base: "",
    url: url_CertificateOrdersUpdateCertificate_564431, schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificate_564417 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersDeleteCertificate_564419(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "certificateOrderName" in path,
        "`certificateOrderName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "certificateOrderName"),
               (kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificate_564418(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   certificateOrderName: JString (required)
  ##                       : Certificate name
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564420 = path.getOrDefault("name")
  valid_564420 = validateParameter(valid_564420, JString, required = true,
                                 default = nil)
  if valid_564420 != nil:
    section.add "name", valid_564420
  var valid_564421 = path.getOrDefault("subscriptionId")
  valid_564421 = validateParameter(valid_564421, JString, required = true,
                                 default = nil)
  if valid_564421 != nil:
    section.add "subscriptionId", valid_564421
  var valid_564422 = path.getOrDefault("certificateOrderName")
  valid_564422 = validateParameter(valid_564422, JString, required = true,
                                 default = nil)
  if valid_564422 != nil:
    section.add "certificateOrderName", valid_564422
  var valid_564423 = path.getOrDefault("resourceGroupName")
  valid_564423 = validateParameter(valid_564423, JString, required = true,
                                 default = nil)
  if valid_564423 != nil:
    section.add "resourceGroupName", valid_564423
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564424 = query.getOrDefault("api-version")
  valid_564424 = validateParameter(valid_564424, JString, required = true,
                                 default = nil)
  if valid_564424 != nil:
    section.add "api-version", valid_564424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564425: Call_CertificateOrdersDeleteCertificate_564417;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564425.validator(path, query, header, formData, body)
  let scheme = call_564425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564425.url(scheme.get, call_564425.host, call_564425.base,
                         call_564425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564425, url, valid)

proc call*(call_564426: Call_CertificateOrdersDeleteCertificate_564417;
          apiVersion: string; name: string; subscriptionId: string;
          certificateOrderName: string; resourceGroupName: string): Recallable =
  ## certificateOrdersDeleteCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   certificateOrderName: string (required)
  ##                       : Certificate name
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564427 = newJObject()
  var query_564428 = newJObject()
  add(query_564428, "api-version", newJString(apiVersion))
  add(path_564427, "name", newJString(name))
  add(path_564427, "subscriptionId", newJString(subscriptionId))
  add(path_564427, "certificateOrderName", newJString(certificateOrderName))
  add(path_564427, "resourceGroupName", newJString(resourceGroupName))
  result = call_564426.call(path_564427, query_564428, nil, nil, nil)

var certificateOrdersDeleteCertificate* = Call_CertificateOrdersDeleteCertificate_564417(
    name: "certificateOrdersDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    validator: validate_CertificateOrdersDeleteCertificate_564418, base: "",
    url: url_CertificateOrdersDeleteCertificate_564419, schemes: {Scheme.Https})
type
  Call_CertificateOrdersCreateOrUpdateCertificateOrder_564454 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersCreateOrUpdateCertificateOrder_564456(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersCreateOrUpdateCertificateOrder_564455(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564457 = path.getOrDefault("name")
  valid_564457 = validateParameter(valid_564457, JString, required = true,
                                 default = nil)
  if valid_564457 != nil:
    section.add "name", valid_564457
  var valid_564458 = path.getOrDefault("subscriptionId")
  valid_564458 = validateParameter(valid_564458, JString, required = true,
                                 default = nil)
  if valid_564458 != nil:
    section.add "subscriptionId", valid_564458
  var valid_564459 = path.getOrDefault("resourceGroupName")
  valid_564459 = validateParameter(valid_564459, JString, required = true,
                                 default = nil)
  if valid_564459 != nil:
    section.add "resourceGroupName", valid_564459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564460 = query.getOrDefault("api-version")
  valid_564460 = validateParameter(valid_564460, JString, required = true,
                                 default = nil)
  if valid_564460 != nil:
    section.add "api-version", valid_564460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564462: Call_CertificateOrdersCreateOrUpdateCertificateOrder_564454;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564462.validator(path, query, header, formData, body)
  let scheme = call_564462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564462.url(scheme.get, call_564462.host, call_564462.base,
                         call_564462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564462, url, valid)

proc call*(call_564463: Call_CertificateOrdersCreateOrUpdateCertificateOrder_564454;
          apiVersion: string; certificateDistinguishedName: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificateOrdersCreateOrUpdateCertificateOrder
  ##   apiVersion: string (required)
  ##             : API Version
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564464 = newJObject()
  var query_564465 = newJObject()
  var body_564466 = newJObject()
  add(query_564465, "api-version", newJString(apiVersion))
  if certificateDistinguishedName != nil:
    body_564466 = certificateDistinguishedName
  add(path_564464, "name", newJString(name))
  add(path_564464, "subscriptionId", newJString(subscriptionId))
  add(path_564464, "resourceGroupName", newJString(resourceGroupName))
  result = call_564463.call(path_564464, query_564465, nil, nil, body_564466)

var certificateOrdersCreateOrUpdateCertificateOrder* = Call_CertificateOrdersCreateOrUpdateCertificateOrder_564454(
    name: "certificateOrdersCreateOrUpdateCertificateOrder",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersCreateOrUpdateCertificateOrder_564455,
    base: "", url: url_CertificateOrdersCreateOrUpdateCertificateOrder_564456,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersGetCertificateOrder_564443 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersGetCertificateOrder_564445(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersGetCertificateOrder_564444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564446 = path.getOrDefault("name")
  valid_564446 = validateParameter(valid_564446, JString, required = true,
                                 default = nil)
  if valid_564446 != nil:
    section.add "name", valid_564446
  var valid_564447 = path.getOrDefault("subscriptionId")
  valid_564447 = validateParameter(valid_564447, JString, required = true,
                                 default = nil)
  if valid_564447 != nil:
    section.add "subscriptionId", valid_564447
  var valid_564448 = path.getOrDefault("resourceGroupName")
  valid_564448 = validateParameter(valid_564448, JString, required = true,
                                 default = nil)
  if valid_564448 != nil:
    section.add "resourceGroupName", valid_564448
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564449 = query.getOrDefault("api-version")
  valid_564449 = validateParameter(valid_564449, JString, required = true,
                                 default = nil)
  if valid_564449 != nil:
    section.add "api-version", valid_564449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564450: Call_CertificateOrdersGetCertificateOrder_564443;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564450.validator(path, query, header, formData, body)
  let scheme = call_564450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564450.url(scheme.get, call_564450.host, call_564450.base,
                         call_564450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564450, url, valid)

proc call*(call_564451: Call_CertificateOrdersGetCertificateOrder_564443;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersGetCertificateOrder
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564452 = newJObject()
  var query_564453 = newJObject()
  add(query_564453, "api-version", newJString(apiVersion))
  add(path_564452, "name", newJString(name))
  add(path_564452, "subscriptionId", newJString(subscriptionId))
  add(path_564452, "resourceGroupName", newJString(resourceGroupName))
  result = call_564451.call(path_564452, query_564453, nil, nil, nil)

var certificateOrdersGetCertificateOrder* = Call_CertificateOrdersGetCertificateOrder_564443(
    name: "certificateOrdersGetCertificateOrder", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersGetCertificateOrder_564444, base: "",
    url: url_CertificateOrdersGetCertificateOrder_564445, schemes: {Scheme.Https})
type
  Call_CertificateOrdersUpdateCertificateOrder_564478 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersUpdateCertificateOrder_564480(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersUpdateCertificateOrder_564479(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564481 = path.getOrDefault("name")
  valid_564481 = validateParameter(valid_564481, JString, required = true,
                                 default = nil)
  if valid_564481 != nil:
    section.add "name", valid_564481
  var valid_564482 = path.getOrDefault("subscriptionId")
  valid_564482 = validateParameter(valid_564482, JString, required = true,
                                 default = nil)
  if valid_564482 != nil:
    section.add "subscriptionId", valid_564482
  var valid_564483 = path.getOrDefault("resourceGroupName")
  valid_564483 = validateParameter(valid_564483, JString, required = true,
                                 default = nil)
  if valid_564483 != nil:
    section.add "resourceGroupName", valid_564483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564484 = query.getOrDefault("api-version")
  valid_564484 = validateParameter(valid_564484, JString, required = true,
                                 default = nil)
  if valid_564484 != nil:
    section.add "api-version", valid_564484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564486: Call_CertificateOrdersUpdateCertificateOrder_564478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564486.validator(path, query, header, formData, body)
  let scheme = call_564486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564486.url(scheme.get, call_564486.host, call_564486.base,
                         call_564486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564486, url, valid)

proc call*(call_564487: Call_CertificateOrdersUpdateCertificateOrder_564478;
          apiVersion: string; certificateDistinguishedName: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificateOrdersUpdateCertificateOrder
  ##   apiVersion: string (required)
  ##             : API Version
  ##   certificateDistinguishedName: JObject (required)
  ##                               : Distinguished name to be used for purchasing certificate
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564488 = newJObject()
  var query_564489 = newJObject()
  var body_564490 = newJObject()
  add(query_564489, "api-version", newJString(apiVersion))
  if certificateDistinguishedName != nil:
    body_564490 = certificateDistinguishedName
  add(path_564488, "name", newJString(name))
  add(path_564488, "subscriptionId", newJString(subscriptionId))
  add(path_564488, "resourceGroupName", newJString(resourceGroupName))
  result = call_564487.call(path_564488, query_564489, nil, nil, body_564490)

var certificateOrdersUpdateCertificateOrder* = Call_CertificateOrdersUpdateCertificateOrder_564478(
    name: "certificateOrdersUpdateCertificateOrder", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersUpdateCertificateOrder_564479, base: "",
    url: url_CertificateOrdersUpdateCertificateOrder_564480,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersDeleteCertificateOrder_564467 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersDeleteCertificateOrder_564469(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersDeleteCertificateOrder_564468(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564470 = path.getOrDefault("name")
  valid_564470 = validateParameter(valid_564470, JString, required = true,
                                 default = nil)
  if valid_564470 != nil:
    section.add "name", valid_564470
  var valid_564471 = path.getOrDefault("subscriptionId")
  valid_564471 = validateParameter(valid_564471, JString, required = true,
                                 default = nil)
  if valid_564471 != nil:
    section.add "subscriptionId", valid_564471
  var valid_564472 = path.getOrDefault("resourceGroupName")
  valid_564472 = validateParameter(valid_564472, JString, required = true,
                                 default = nil)
  if valid_564472 != nil:
    section.add "resourceGroupName", valid_564472
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564473 = query.getOrDefault("api-version")
  valid_564473 = validateParameter(valid_564473, JString, required = true,
                                 default = nil)
  if valid_564473 != nil:
    section.add "api-version", valid_564473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564474: Call_CertificateOrdersDeleteCertificateOrder_564467;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564474.validator(path, query, header, formData, body)
  let scheme = call_564474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564474.url(scheme.get, call_564474.host, call_564474.base,
                         call_564474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564474, url, valid)

proc call*(call_564475: Call_CertificateOrdersDeleteCertificateOrder_564467;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersDeleteCertificateOrder
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564476 = newJObject()
  var query_564477 = newJObject()
  add(query_564477, "api-version", newJString(apiVersion))
  add(path_564476, "name", newJString(name))
  add(path_564476, "subscriptionId", newJString(subscriptionId))
  add(path_564476, "resourceGroupName", newJString(resourceGroupName))
  result = call_564475.call(path_564476, query_564477, nil, nil, nil)

var certificateOrdersDeleteCertificateOrder* = Call_CertificateOrdersDeleteCertificateOrder_564467(
    name: "certificateOrdersDeleteCertificateOrder", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
    validator: validate_CertificateOrdersDeleteCertificateOrder_564468, base: "",
    url: url_CertificateOrdersDeleteCertificateOrder_564469,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersReissueCertificateOrder_564491 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersReissueCertificateOrder_564493(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reissue")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersReissueCertificateOrder_564492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564494 = path.getOrDefault("name")
  valid_564494 = validateParameter(valid_564494, JString, required = true,
                                 default = nil)
  if valid_564494 != nil:
    section.add "name", valid_564494
  var valid_564495 = path.getOrDefault("subscriptionId")
  valid_564495 = validateParameter(valid_564495, JString, required = true,
                                 default = nil)
  if valid_564495 != nil:
    section.add "subscriptionId", valid_564495
  var valid_564496 = path.getOrDefault("resourceGroupName")
  valid_564496 = validateParameter(valid_564496, JString, required = true,
                                 default = nil)
  if valid_564496 != nil:
    section.add "resourceGroupName", valid_564496
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564497 = query.getOrDefault("api-version")
  valid_564497 = validateParameter(valid_564497, JString, required = true,
                                 default = nil)
  if valid_564497 != nil:
    section.add "api-version", valid_564497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564499: Call_CertificateOrdersReissueCertificateOrder_564491;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564499.validator(path, query, header, formData, body)
  let scheme = call_564499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564499.url(scheme.get, call_564499.host, call_564499.base,
                         call_564499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564499, url, valid)

proc call*(call_564500: Call_CertificateOrdersReissueCertificateOrder_564491;
          reissueCertificateOrderRequest: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificateOrdersReissueCertificateOrder
  ##   reissueCertificateOrderRequest: JObject (required)
  ##                                 : Reissue parameters
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564501 = newJObject()
  var query_564502 = newJObject()
  var body_564503 = newJObject()
  if reissueCertificateOrderRequest != nil:
    body_564503 = reissueCertificateOrderRequest
  add(query_564502, "api-version", newJString(apiVersion))
  add(path_564501, "name", newJString(name))
  add(path_564501, "subscriptionId", newJString(subscriptionId))
  add(path_564501, "resourceGroupName", newJString(resourceGroupName))
  result = call_564500.call(path_564501, query_564502, nil, nil, body_564503)

var certificateOrdersReissueCertificateOrder* = Call_CertificateOrdersReissueCertificateOrder_564491(
    name: "certificateOrdersReissueCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue",
    validator: validate_CertificateOrdersReissueCertificateOrder_564492, base: "",
    url: url_CertificateOrdersReissueCertificateOrder_564493,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRenewCertificateOrder_564504 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersRenewCertificateOrder_564506(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/renew")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRenewCertificateOrder_564505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564507 = path.getOrDefault("name")
  valid_564507 = validateParameter(valid_564507, JString, required = true,
                                 default = nil)
  if valid_564507 != nil:
    section.add "name", valid_564507
  var valid_564508 = path.getOrDefault("subscriptionId")
  valid_564508 = validateParameter(valid_564508, JString, required = true,
                                 default = nil)
  if valid_564508 != nil:
    section.add "subscriptionId", valid_564508
  var valid_564509 = path.getOrDefault("resourceGroupName")
  valid_564509 = validateParameter(valid_564509, JString, required = true,
                                 default = nil)
  if valid_564509 != nil:
    section.add "resourceGroupName", valid_564509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564510 = query.getOrDefault("api-version")
  valid_564510 = validateParameter(valid_564510, JString, required = true,
                                 default = nil)
  if valid_564510 != nil:
    section.add "api-version", valid_564510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564512: Call_CertificateOrdersRenewCertificateOrder_564504;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564512.validator(path, query, header, formData, body)
  let scheme = call_564512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564512.url(scheme.get, call_564512.host, call_564512.base,
                         call_564512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564512, url, valid)

proc call*(call_564513: Call_CertificateOrdersRenewCertificateOrder_564504;
          apiVersion: string; name: string; subscriptionId: string;
          renewCertificateOrderRequest: JsonNode; resourceGroupName: string): Recallable =
  ## certificateOrdersRenewCertificateOrder
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   renewCertificateOrderRequest: JObject (required)
  ##                               : Renew parameters
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564514 = newJObject()
  var query_564515 = newJObject()
  var body_564516 = newJObject()
  add(query_564515, "api-version", newJString(apiVersion))
  add(path_564514, "name", newJString(name))
  add(path_564514, "subscriptionId", newJString(subscriptionId))
  if renewCertificateOrderRequest != nil:
    body_564516 = renewCertificateOrderRequest
  add(path_564514, "resourceGroupName", newJString(resourceGroupName))
  result = call_564513.call(path_564514, query_564515, nil, nil, body_564516)

var certificateOrdersRenewCertificateOrder* = Call_CertificateOrdersRenewCertificateOrder_564504(
    name: "certificateOrdersRenewCertificateOrder", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew",
    validator: validate_CertificateOrdersRenewCertificateOrder_564505, base: "",
    url: url_CertificateOrdersRenewCertificateOrder_564506,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersResendCertificateEmail_564517 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersResendCertificateEmail_564519(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resendEmail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersResendCertificateEmail_564518(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564520 = path.getOrDefault("name")
  valid_564520 = validateParameter(valid_564520, JString, required = true,
                                 default = nil)
  if valid_564520 != nil:
    section.add "name", valid_564520
  var valid_564521 = path.getOrDefault("subscriptionId")
  valid_564521 = validateParameter(valid_564521, JString, required = true,
                                 default = nil)
  if valid_564521 != nil:
    section.add "subscriptionId", valid_564521
  var valid_564522 = path.getOrDefault("resourceGroupName")
  valid_564522 = validateParameter(valid_564522, JString, required = true,
                                 default = nil)
  if valid_564522 != nil:
    section.add "resourceGroupName", valid_564522
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564523 = query.getOrDefault("api-version")
  valid_564523 = validateParameter(valid_564523, JString, required = true,
                                 default = nil)
  if valid_564523 != nil:
    section.add "api-version", valid_564523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564524: Call_CertificateOrdersResendCertificateEmail_564517;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564524.validator(path, query, header, formData, body)
  let scheme = call_564524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564524.url(scheme.get, call_564524.host, call_564524.base,
                         call_564524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564524, url, valid)

proc call*(call_564525: Call_CertificateOrdersResendCertificateEmail_564517;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersResendCertificateEmail
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564526 = newJObject()
  var query_564527 = newJObject()
  add(query_564527, "api-version", newJString(apiVersion))
  add(path_564526, "name", newJString(name))
  add(path_564526, "subscriptionId", newJString(subscriptionId))
  add(path_564526, "resourceGroupName", newJString(resourceGroupName))
  result = call_564525.call(path_564526, query_564527, nil, nil, nil)

var certificateOrdersResendCertificateEmail* = Call_CertificateOrdersResendCertificateEmail_564517(
    name: "certificateOrdersResendCertificateEmail", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail",
    validator: validate_CertificateOrdersResendCertificateEmail_564518, base: "",
    url: url_CertificateOrdersResendCertificateEmail_564519,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateActions_564528 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersRetrieveCertificateActions_564530(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveCertificateActions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateActions_564529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564531 = path.getOrDefault("name")
  valid_564531 = validateParameter(valid_564531, JString, required = true,
                                 default = nil)
  if valid_564531 != nil:
    section.add "name", valid_564531
  var valid_564532 = path.getOrDefault("subscriptionId")
  valid_564532 = validateParameter(valid_564532, JString, required = true,
                                 default = nil)
  if valid_564532 != nil:
    section.add "subscriptionId", valid_564532
  var valid_564533 = path.getOrDefault("resourceGroupName")
  valid_564533 = validateParameter(valid_564533, JString, required = true,
                                 default = nil)
  if valid_564533 != nil:
    section.add "resourceGroupName", valid_564533
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564534 = query.getOrDefault("api-version")
  valid_564534 = validateParameter(valid_564534, JString, required = true,
                                 default = nil)
  if valid_564534 != nil:
    section.add "api-version", valid_564534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564535: Call_CertificateOrdersRetrieveCertificateActions_564528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564535.validator(path, query, header, formData, body)
  let scheme = call_564535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564535.url(scheme.get, call_564535.host, call_564535.base,
                         call_564535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564535, url, valid)

proc call*(call_564536: Call_CertificateOrdersRetrieveCertificateActions_564528;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersRetrieveCertificateActions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564537 = newJObject()
  var query_564538 = newJObject()
  add(query_564538, "api-version", newJString(apiVersion))
  add(path_564537, "name", newJString(name))
  add(path_564537, "subscriptionId", newJString(subscriptionId))
  add(path_564537, "resourceGroupName", newJString(resourceGroupName))
  result = call_564536.call(path_564537, query_564538, nil, nil, nil)

var certificateOrdersRetrieveCertificateActions* = Call_CertificateOrdersRetrieveCertificateActions_564528(
    name: "certificateOrdersRetrieveCertificateActions",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
    validator: validate_CertificateOrdersRetrieveCertificateActions_564529,
    base: "", url: url_CertificateOrdersRetrieveCertificateActions_564530,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersRetrieveCertificateEmailHistory_564539 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersRetrieveCertificateEmailHistory_564541(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/retrieveEmailHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersRetrieveCertificateEmailHistory_564540(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564542 = path.getOrDefault("name")
  valid_564542 = validateParameter(valid_564542, JString, required = true,
                                 default = nil)
  if valid_564542 != nil:
    section.add "name", valid_564542
  var valid_564543 = path.getOrDefault("subscriptionId")
  valid_564543 = validateParameter(valid_564543, JString, required = true,
                                 default = nil)
  if valid_564543 != nil:
    section.add "subscriptionId", valid_564543
  var valid_564544 = path.getOrDefault("resourceGroupName")
  valid_564544 = validateParameter(valid_564544, JString, required = true,
                                 default = nil)
  if valid_564544 != nil:
    section.add "resourceGroupName", valid_564544
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564545 = query.getOrDefault("api-version")
  valid_564545 = validateParameter(valid_564545, JString, required = true,
                                 default = nil)
  if valid_564545 != nil:
    section.add "api-version", valid_564545
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564546: Call_CertificateOrdersRetrieveCertificateEmailHistory_564539;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564546.validator(path, query, header, formData, body)
  let scheme = call_564546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564546.url(scheme.get, call_564546.host, call_564546.base,
                         call_564546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564546, url, valid)

proc call*(call_564547: Call_CertificateOrdersRetrieveCertificateEmailHistory_564539;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersRetrieveCertificateEmailHistory
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564548 = newJObject()
  var query_564549 = newJObject()
  add(query_564549, "api-version", newJString(apiVersion))
  add(path_564548, "name", newJString(name))
  add(path_564548, "subscriptionId", newJString(subscriptionId))
  add(path_564548, "resourceGroupName", newJString(resourceGroupName))
  result = call_564547.call(path_564548, query_564549, nil, nil, nil)

var certificateOrdersRetrieveCertificateEmailHistory* = Call_CertificateOrdersRetrieveCertificateEmailHistory_564539(
    name: "certificateOrdersRetrieveCertificateEmailHistory",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
    validator: validate_CertificateOrdersRetrieveCertificateEmailHistory_564540,
    base: "", url: url_CertificateOrdersRetrieveCertificateEmailHistory_564541,
    schemes: {Scheme.Https})
type
  Call_CertificateOrdersVerifyDomainOwnership_564550 = ref object of OpenApiRestCall_563548
proc url_CertificateOrdersVerifyDomainOwnership_564552(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.CertificateRegistration/certificateOrders/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/verifyDomainOwnership")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificateOrdersVerifyDomainOwnership_564551(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Certificate order name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Azure resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564553 = path.getOrDefault("name")
  valid_564553 = validateParameter(valid_564553, JString, required = true,
                                 default = nil)
  if valid_564553 != nil:
    section.add "name", valid_564553
  var valid_564554 = path.getOrDefault("subscriptionId")
  valid_564554 = validateParameter(valid_564554, JString, required = true,
                                 default = nil)
  if valid_564554 != nil:
    section.add "subscriptionId", valid_564554
  var valid_564555 = path.getOrDefault("resourceGroupName")
  valid_564555 = validateParameter(valid_564555, JString, required = true,
                                 default = nil)
  if valid_564555 != nil:
    section.add "resourceGroupName", valid_564555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564556 = query.getOrDefault("api-version")
  valid_564556 = validateParameter(valid_564556, JString, required = true,
                                 default = nil)
  if valid_564556 != nil:
    section.add "api-version", valid_564556
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564557: Call_CertificateOrdersVerifyDomainOwnership_564550;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564557.validator(path, query, header, formData, body)
  let scheme = call_564557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564557.url(scheme.get, call_564557.host, call_564557.base,
                         call_564557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564557, url, valid)

proc call*(call_564558: Call_CertificateOrdersVerifyDomainOwnership_564550;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificateOrdersVerifyDomainOwnership
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Certificate order name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Azure resource group name
  var path_564559 = newJObject()
  var query_564560 = newJObject()
  add(query_564560, "api-version", newJString(apiVersion))
  add(path_564559, "name", newJString(name))
  add(path_564559, "subscriptionId", newJString(subscriptionId))
  add(path_564559, "resourceGroupName", newJString(resourceGroupName))
  result = call_564558.call(path_564559, query_564560, nil, nil, nil)

var certificateOrdersVerifyDomainOwnership* = Call_CertificateOrdersVerifyDomainOwnership_564550(
    name: "certificateOrdersVerifyDomainOwnership", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership",
    validator: validate_CertificateOrdersVerifyDomainOwnership_564551, base: "",
    url: url_CertificateOrdersVerifyDomainOwnership_564552,
    schemes: {Scheme.Https})
type
  Call_DomainsGetDomains_564561 = ref object of OpenApiRestCall_563548
proc url_DomainsGetDomains_564563(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomains_564562(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564564 = path.getOrDefault("subscriptionId")
  valid_564564 = validateParameter(valid_564564, JString, required = true,
                                 default = nil)
  if valid_564564 != nil:
    section.add "subscriptionId", valid_564564
  var valid_564565 = path.getOrDefault("resourceGroupName")
  valid_564565 = validateParameter(valid_564565, JString, required = true,
                                 default = nil)
  if valid_564565 != nil:
    section.add "resourceGroupName", valid_564565
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564566 = query.getOrDefault("api-version")
  valid_564566 = validateParameter(valid_564566, JString, required = true,
                                 default = nil)
  if valid_564566 != nil:
    section.add "api-version", valid_564566
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564567: Call_DomainsGetDomains_564561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564567.validator(path, query, header, formData, body)
  let scheme = call_564567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564567.url(scheme.get, call_564567.host, call_564567.base,
                         call_564567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564567, url, valid)

proc call*(call_564568: Call_DomainsGetDomains_564561; apiVersion: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## domainsGetDomains
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564569 = newJObject()
  var query_564570 = newJObject()
  add(query_564570, "api-version", newJString(apiVersion))
  add(path_564569, "subscriptionId", newJString(subscriptionId))
  add(path_564569, "resourceGroupName", newJString(resourceGroupName))
  result = call_564568.call(path_564569, query_564570, nil, nil, nil)

var domainsGetDomains* = Call_DomainsGetDomains_564561(name: "domainsGetDomains",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
    validator: validate_DomainsGetDomains_564562, base: "",
    url: url_DomainsGetDomains_564563, schemes: {Scheme.Https})
type
  Call_DomainsCreateOrUpdateDomain_564582 = ref object of OpenApiRestCall_563548
proc url_DomainsCreateOrUpdateDomain_564584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsCreateOrUpdateDomain_564583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564585 = path.getOrDefault("subscriptionId")
  valid_564585 = validateParameter(valid_564585, JString, required = true,
                                 default = nil)
  if valid_564585 != nil:
    section.add "subscriptionId", valid_564585
  var valid_564586 = path.getOrDefault("resourceGroupName")
  valid_564586 = validateParameter(valid_564586, JString, required = true,
                                 default = nil)
  if valid_564586 != nil:
    section.add "resourceGroupName", valid_564586
  var valid_564587 = path.getOrDefault("domainName")
  valid_564587 = validateParameter(valid_564587, JString, required = true,
                                 default = nil)
  if valid_564587 != nil:
    section.add "domainName", valid_564587
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564588 = query.getOrDefault("api-version")
  valid_564588 = validateParameter(valid_564588, JString, required = true,
                                 default = nil)
  if valid_564588 != nil:
    section.add "api-version", valid_564588
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564590: Call_DomainsCreateOrUpdateDomain_564582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564590.validator(path, query, header, formData, body)
  let scheme = call_564590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564590.url(scheme.get, call_564590.host, call_564590.base,
                         call_564590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564590, url, valid)

proc call*(call_564591: Call_DomainsCreateOrUpdateDomain_564582; domain: JsonNode;
          apiVersion: string; subscriptionId: string; resourceGroupName: string;
          domainName: string): Recallable =
  ## domainsCreateOrUpdateDomain
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_564592 = newJObject()
  var query_564593 = newJObject()
  var body_564594 = newJObject()
  if domain != nil:
    body_564594 = domain
  add(query_564593, "api-version", newJString(apiVersion))
  add(path_564592, "subscriptionId", newJString(subscriptionId))
  add(path_564592, "resourceGroupName", newJString(resourceGroupName))
  add(path_564592, "domainName", newJString(domainName))
  result = call_564591.call(path_564592, query_564593, nil, nil, body_564594)

var domainsCreateOrUpdateDomain* = Call_DomainsCreateOrUpdateDomain_564582(
    name: "domainsCreateOrUpdateDomain", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsCreateOrUpdateDomain_564583, base: "",
    url: url_DomainsCreateOrUpdateDomain_564584, schemes: {Scheme.Https})
type
  Call_DomainsGetDomain_564571 = ref object of OpenApiRestCall_563548
proc url_DomainsGetDomain_564573(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomain_564572(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564574 = path.getOrDefault("subscriptionId")
  valid_564574 = validateParameter(valid_564574, JString, required = true,
                                 default = nil)
  if valid_564574 != nil:
    section.add "subscriptionId", valid_564574
  var valid_564575 = path.getOrDefault("resourceGroupName")
  valid_564575 = validateParameter(valid_564575, JString, required = true,
                                 default = nil)
  if valid_564575 != nil:
    section.add "resourceGroupName", valid_564575
  var valid_564576 = path.getOrDefault("domainName")
  valid_564576 = validateParameter(valid_564576, JString, required = true,
                                 default = nil)
  if valid_564576 != nil:
    section.add "domainName", valid_564576
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564577 = query.getOrDefault("api-version")
  valid_564577 = validateParameter(valid_564577, JString, required = true,
                                 default = nil)
  if valid_564577 != nil:
    section.add "api-version", valid_564577
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564578: Call_DomainsGetDomain_564571; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564578.validator(path, query, header, formData, body)
  let scheme = call_564578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564578.url(scheme.get, call_564578.host, call_564578.base,
                         call_564578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564578, url, valid)

proc call*(call_564579: Call_DomainsGetDomain_564571; apiVersion: string;
          subscriptionId: string; resourceGroupName: string; domainName: string): Recallable =
  ## domainsGetDomain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_564580 = newJObject()
  var query_564581 = newJObject()
  add(query_564581, "api-version", newJString(apiVersion))
  add(path_564580, "subscriptionId", newJString(subscriptionId))
  add(path_564580, "resourceGroupName", newJString(resourceGroupName))
  add(path_564580, "domainName", newJString(domainName))
  result = call_564579.call(path_564580, query_564581, nil, nil, nil)

var domainsGetDomain* = Call_DomainsGetDomain_564571(name: "domainsGetDomain",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsGetDomain_564572, base: "",
    url: url_DomainsGetDomain_564573, schemes: {Scheme.Https})
type
  Call_DomainsUpdateDomain_564607 = ref object of OpenApiRestCall_563548
proc url_DomainsUpdateDomain_564609(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsUpdateDomain_564608(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : &gt;Name of the resource group
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564610 = path.getOrDefault("subscriptionId")
  valid_564610 = validateParameter(valid_564610, JString, required = true,
                                 default = nil)
  if valid_564610 != nil:
    section.add "subscriptionId", valid_564610
  var valid_564611 = path.getOrDefault("resourceGroupName")
  valid_564611 = validateParameter(valid_564611, JString, required = true,
                                 default = nil)
  if valid_564611 != nil:
    section.add "resourceGroupName", valid_564611
  var valid_564612 = path.getOrDefault("domainName")
  valid_564612 = validateParameter(valid_564612, JString, required = true,
                                 default = nil)
  if valid_564612 != nil:
    section.add "domainName", valid_564612
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564613 = query.getOrDefault("api-version")
  valid_564613 = validateParameter(valid_564613, JString, required = true,
                                 default = nil)
  if valid_564613 != nil:
    section.add "api-version", valid_564613
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domain: JObject (required)
  ##         : Domain registration information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564615: Call_DomainsUpdateDomain_564607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564615.validator(path, query, header, formData, body)
  let scheme = call_564615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564615.url(scheme.get, call_564615.host, call_564615.base,
                         call_564615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564615, url, valid)

proc call*(call_564616: Call_DomainsUpdateDomain_564607; domain: JsonNode;
          apiVersion: string; subscriptionId: string; resourceGroupName: string;
          domainName: string): Recallable =
  ## domainsUpdateDomain
  ##   domain: JObject (required)
  ##         : Domain registration information
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : &gt;Name of the resource group
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_564617 = newJObject()
  var query_564618 = newJObject()
  var body_564619 = newJObject()
  if domain != nil:
    body_564619 = domain
  add(query_564618, "api-version", newJString(apiVersion))
  add(path_564617, "subscriptionId", newJString(subscriptionId))
  add(path_564617, "resourceGroupName", newJString(resourceGroupName))
  add(path_564617, "domainName", newJString(domainName))
  result = call_564616.call(path_564617, query_564618, nil, nil, body_564619)

var domainsUpdateDomain* = Call_DomainsUpdateDomain_564607(
    name: "domainsUpdateDomain", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsUpdateDomain_564608, base: "",
    url: url_DomainsUpdateDomain_564609, schemes: {Scheme.Https})
type
  Call_DomainsDeleteDomain_564595 = ref object of OpenApiRestCall_563548
proc url_DomainsDeleteDomain_564597(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsDeleteDomain_564596(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564598 = path.getOrDefault("subscriptionId")
  valid_564598 = validateParameter(valid_564598, JString, required = true,
                                 default = nil)
  if valid_564598 != nil:
    section.add "subscriptionId", valid_564598
  var valid_564599 = path.getOrDefault("resourceGroupName")
  valid_564599 = validateParameter(valid_564599, JString, required = true,
                                 default = nil)
  if valid_564599 != nil:
    section.add "resourceGroupName", valid_564599
  var valid_564600 = path.getOrDefault("domainName")
  valid_564600 = validateParameter(valid_564600, JString, required = true,
                                 default = nil)
  if valid_564600 != nil:
    section.add "domainName", valid_564600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceHardDeleteDomain: JBool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564601 = query.getOrDefault("api-version")
  valid_564601 = validateParameter(valid_564601, JString, required = true,
                                 default = nil)
  if valid_564601 != nil:
    section.add "api-version", valid_564601
  var valid_564602 = query.getOrDefault("forceHardDeleteDomain")
  valid_564602 = validateParameter(valid_564602, JBool, required = false, default = nil)
  if valid_564602 != nil:
    section.add "forceHardDeleteDomain", valid_564602
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564603: Call_DomainsDeleteDomain_564595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564603.validator(path, query, header, formData, body)
  let scheme = call_564603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564603.url(scheme.get, call_564603.host, call_564603.base,
                         call_564603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564603, url, valid)

proc call*(call_564604: Call_DomainsDeleteDomain_564595; apiVersion: string;
          subscriptionId: string; resourceGroupName: string; domainName: string;
          forceHardDeleteDomain: bool = false): Recallable =
  ## domainsDeleteDomain
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   domainName: string (required)
  ##             : Name of the domain
  ##   forceHardDeleteDomain: bool
  ##                        : If true then the domain will be deleted immediately instead of after 24 hours
  var path_564605 = newJObject()
  var query_564606 = newJObject()
  add(query_564606, "api-version", newJString(apiVersion))
  add(path_564605, "subscriptionId", newJString(subscriptionId))
  add(path_564605, "resourceGroupName", newJString(resourceGroupName))
  add(path_564605, "domainName", newJString(domainName))
  add(query_564606, "forceHardDeleteDomain", newJBool(forceHardDeleteDomain))
  result = call_564604.call(path_564605, query_564606, nil, nil, nil)

var domainsDeleteDomain* = Call_DomainsDeleteDomain_564595(
    name: "domainsDeleteDomain", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    validator: validate_DomainsDeleteDomain_564596, base: "",
    url: url_DomainsDeleteDomain_564597, schemes: {Scheme.Https})
type
  Call_DomainsGetDomainOperation_564620 = ref object of OpenApiRestCall_563548
proc url_DomainsGetDomainOperation_564622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "domainName" in path, "`domainName` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.DomainRegistration/domains/"),
               (kind: VariableSegment, value: "domainName"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DomainsGetDomainOperation_564621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : Domain purchase operation Id
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  ##   domainName: JString (required)
  ##             : Name of the domain
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_564623 = path.getOrDefault("operationId")
  valid_564623 = validateParameter(valid_564623, JString, required = true,
                                 default = nil)
  if valid_564623 != nil:
    section.add "operationId", valid_564623
  var valid_564624 = path.getOrDefault("subscriptionId")
  valid_564624 = validateParameter(valid_564624, JString, required = true,
                                 default = nil)
  if valid_564624 != nil:
    section.add "subscriptionId", valid_564624
  var valid_564625 = path.getOrDefault("resourceGroupName")
  valid_564625 = validateParameter(valid_564625, JString, required = true,
                                 default = nil)
  if valid_564625 != nil:
    section.add "resourceGroupName", valid_564625
  var valid_564626 = path.getOrDefault("domainName")
  valid_564626 = validateParameter(valid_564626, JString, required = true,
                                 default = nil)
  if valid_564626 != nil:
    section.add "domainName", valid_564626
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564627 = query.getOrDefault("api-version")
  valid_564627 = validateParameter(valid_564627, JString, required = true,
                                 default = nil)
  if valid_564627 != nil:
    section.add "api-version", valid_564627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564628: Call_DomainsGetDomainOperation_564620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564628.validator(path, query, header, formData, body)
  let scheme = call_564628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564628.url(scheme.get, call_564628.host, call_564628.base,
                         call_564628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564628, url, valid)

proc call*(call_564629: Call_DomainsGetDomainOperation_564620; apiVersion: string;
          operationId: string; subscriptionId: string; resourceGroupName: string;
          domainName: string): Recallable =
  ## domainsGetDomainOperation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : Domain purchase operation Id
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   domainName: string (required)
  ##             : Name of the domain
  var path_564630 = newJObject()
  var query_564631 = newJObject()
  add(query_564631, "api-version", newJString(apiVersion))
  add(path_564630, "operationId", newJString(operationId))
  add(path_564630, "subscriptionId", newJString(subscriptionId))
  add(path_564630, "resourceGroupName", newJString(resourceGroupName))
  add(path_564630, "domainName", newJString(domainName))
  result = call_564629.call(path_564630, query_564631, nil, nil, nil)

var domainsGetDomainOperation* = Call_DomainsGetDomainOperation_564620(
    name: "domainsGetDomainOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}",
    validator: validate_DomainsGetDomainOperation_564621, base: "",
    url: url_DomainsGetDomainOperation_564622, schemes: {Scheme.Https})
type
  Call_UsageGetUsage_564632 = ref object of OpenApiRestCall_563548
proc url_UsageGetUsage_564634(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "environmentName" in path, "`environmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web.Admin/environments/"),
               (kind: VariableSegment, value: "environmentName"),
               (kind: ConstantSegment, value: "/usage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UsageGetUsage_564633(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   environmentName: JString (required)
  ##                  : Environment name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `environmentName` field"
  var valid_564635 = path.getOrDefault("environmentName")
  valid_564635 = validateParameter(valid_564635, JString, required = true,
                                 default = nil)
  if valid_564635 != nil:
    section.add "environmentName", valid_564635
  var valid_564636 = path.getOrDefault("subscriptionId")
  valid_564636 = validateParameter(valid_564636, JString, required = true,
                                 default = nil)
  if valid_564636 != nil:
    section.add "subscriptionId", valid_564636
  var valid_564637 = path.getOrDefault("resourceGroupName")
  valid_564637 = validateParameter(valid_564637, JString, required = true,
                                 default = nil)
  if valid_564637 != nil:
    section.add "resourceGroupName", valid_564637
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   batchSize: JInt (required)
  ##            : size of the batch to be returned.
  ##   lastId: JString (required)
  ##         : Last marker that was returned from the batch
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564638 = query.getOrDefault("api-version")
  valid_564638 = validateParameter(valid_564638, JString, required = true,
                                 default = nil)
  if valid_564638 != nil:
    section.add "api-version", valid_564638
  var valid_564639 = query.getOrDefault("batchSize")
  valid_564639 = validateParameter(valid_564639, JInt, required = true, default = nil)
  if valid_564639 != nil:
    section.add "batchSize", valid_564639
  var valid_564640 = query.getOrDefault("lastId")
  valid_564640 = validateParameter(valid_564640, JString, required = true,
                                 default = nil)
  if valid_564640 != nil:
    section.add "lastId", valid_564640
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564641: Call_UsageGetUsage_564632; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564641.validator(path, query, header, formData, body)
  let scheme = call_564641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564641.url(scheme.get, call_564641.host, call_564641.base,
                         call_564641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564641, url, valid)

proc call*(call_564642: Call_UsageGetUsage_564632; apiVersion: string;
          batchSize: int; environmentName: string; lastId: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## usageGetUsage
  ##   apiVersion: string (required)
  ##             : API Version
  ##   batchSize: int (required)
  ##            : size of the batch to be returned.
  ##   environmentName: string (required)
  ##                  : Environment name
  ##   lastId: string (required)
  ##         : Last marker that was returned from the batch
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564643 = newJObject()
  var query_564644 = newJObject()
  add(query_564644, "api-version", newJString(apiVersion))
  add(query_564644, "batchSize", newJInt(batchSize))
  add(path_564643, "environmentName", newJString(environmentName))
  add(query_564644, "lastId", newJString(lastId))
  add(path_564643, "subscriptionId", newJString(subscriptionId))
  add(path_564643, "resourceGroupName", newJString(resourceGroupName))
  result = call_564642.call(path_564643, query_564644, nil, nil, nil)

var usageGetUsage* = Call_UsageGetUsage_564632(name: "usageGetUsage",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environments/{environmentName}/usage",
    validator: validate_UsageGetUsage_564633, base: "", url: url_UsageGetUsage_564634,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificates_564645 = ref object of OpenApiRestCall_563548
proc url_CertificatesGetCertificates_564647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificates_564646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564648 = path.getOrDefault("subscriptionId")
  valid_564648 = validateParameter(valid_564648, JString, required = true,
                                 default = nil)
  if valid_564648 != nil:
    section.add "subscriptionId", valid_564648
  var valid_564649 = path.getOrDefault("resourceGroupName")
  valid_564649 = validateParameter(valid_564649, JString, required = true,
                                 default = nil)
  if valid_564649 != nil:
    section.add "resourceGroupName", valid_564649
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564650 = query.getOrDefault("api-version")
  valid_564650 = validateParameter(valid_564650, JString, required = true,
                                 default = nil)
  if valid_564650 != nil:
    section.add "api-version", valid_564650
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564651: Call_CertificatesGetCertificates_564645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564651.validator(path, query, header, formData, body)
  let scheme = call_564651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564651.url(scheme.get, call_564651.host, call_564651.base,
                         call_564651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564651, url, valid)

proc call*(call_564652: Call_CertificatesGetCertificates_564645;
          apiVersion: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificatesGetCertificates
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564653 = newJObject()
  var query_564654 = newJObject()
  add(query_564654, "api-version", newJString(apiVersion))
  add(path_564653, "subscriptionId", newJString(subscriptionId))
  add(path_564653, "resourceGroupName", newJString(resourceGroupName))
  result = call_564652.call(path_564653, query_564654, nil, nil, nil)

var certificatesGetCertificates* = Call_CertificatesGetCertificates_564645(
    name: "certificatesGetCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
    validator: validate_CertificatesGetCertificates_564646, base: "",
    url: url_CertificatesGetCertificates_564647, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCertificate_564666 = ref object of OpenApiRestCall_563548
proc url_CertificatesCreateOrUpdateCertificate_564668(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCertificate_564667(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564669 = path.getOrDefault("name")
  valid_564669 = validateParameter(valid_564669, JString, required = true,
                                 default = nil)
  if valid_564669 != nil:
    section.add "name", valid_564669
  var valid_564670 = path.getOrDefault("subscriptionId")
  valid_564670 = validateParameter(valid_564670, JString, required = true,
                                 default = nil)
  if valid_564670 != nil:
    section.add "subscriptionId", valid_564670
  var valid_564671 = path.getOrDefault("resourceGroupName")
  valid_564671 = validateParameter(valid_564671, JString, required = true,
                                 default = nil)
  if valid_564671 != nil:
    section.add "resourceGroupName", valid_564671
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564672 = query.getOrDefault("api-version")
  valid_564672 = validateParameter(valid_564672, JString, required = true,
                                 default = nil)
  if valid_564672 != nil:
    section.add "api-version", valid_564672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564674: Call_CertificatesCreateOrUpdateCertificate_564666;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564674.validator(path, query, header, formData, body)
  let scheme = call_564674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564674.url(scheme.get, call_564674.host, call_564674.base,
                         call_564674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564674, url, valid)

proc call*(call_564675: Call_CertificatesCreateOrUpdateCertificate_564666;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_564676 = newJObject()
  var query_564677 = newJObject()
  var body_564678 = newJObject()
  add(query_564677, "api-version", newJString(apiVersion))
  add(path_564676, "name", newJString(name))
  add(path_564676, "subscriptionId", newJString(subscriptionId))
  add(path_564676, "resourceGroupName", newJString(resourceGroupName))
  if certificateEnvelope != nil:
    body_564678 = certificateEnvelope
  result = call_564675.call(path_564676, query_564677, nil, nil, body_564678)

var certificatesCreateOrUpdateCertificate* = Call_CertificatesCreateOrUpdateCertificate_564666(
    name: "certificatesCreateOrUpdateCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesCreateOrUpdateCertificate_564667, base: "",
    url: url_CertificatesCreateOrUpdateCertificate_564668, schemes: {Scheme.Https})
type
  Call_CertificatesGetCertificate_564655 = ref object of OpenApiRestCall_563548
proc url_CertificatesGetCertificate_564657(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCertificate_564656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564658 = path.getOrDefault("name")
  valid_564658 = validateParameter(valid_564658, JString, required = true,
                                 default = nil)
  if valid_564658 != nil:
    section.add "name", valid_564658
  var valid_564659 = path.getOrDefault("subscriptionId")
  valid_564659 = validateParameter(valid_564659, JString, required = true,
                                 default = nil)
  if valid_564659 != nil:
    section.add "subscriptionId", valid_564659
  var valid_564660 = path.getOrDefault("resourceGroupName")
  valid_564660 = validateParameter(valid_564660, JString, required = true,
                                 default = nil)
  if valid_564660 != nil:
    section.add "resourceGroupName", valid_564660
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564661 = query.getOrDefault("api-version")
  valid_564661 = validateParameter(valid_564661, JString, required = true,
                                 default = nil)
  if valid_564661 != nil:
    section.add "api-version", valid_564661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564662: Call_CertificatesGetCertificate_564655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564662.validator(path, query, header, formData, body)
  let scheme = call_564662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564662.url(scheme.get, call_564662.host, call_564662.base,
                         call_564662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564662, url, valid)

proc call*(call_564663: Call_CertificatesGetCertificate_564655; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificatesGetCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564664 = newJObject()
  var query_564665 = newJObject()
  add(query_564665, "api-version", newJString(apiVersion))
  add(path_564664, "name", newJString(name))
  add(path_564664, "subscriptionId", newJString(subscriptionId))
  add(path_564664, "resourceGroupName", newJString(resourceGroupName))
  result = call_564663.call(path_564664, query_564665, nil, nil, nil)

var certificatesGetCertificate* = Call_CertificatesGetCertificate_564655(
    name: "certificatesGetCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesGetCertificate_564656, base: "",
    url: url_CertificatesGetCertificate_564657, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCertificate_564690 = ref object of OpenApiRestCall_563548
proc url_CertificatesUpdateCertificate_564692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCertificate_564691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564693 = path.getOrDefault("name")
  valid_564693 = validateParameter(valid_564693, JString, required = true,
                                 default = nil)
  if valid_564693 != nil:
    section.add "name", valid_564693
  var valid_564694 = path.getOrDefault("subscriptionId")
  valid_564694 = validateParameter(valid_564694, JString, required = true,
                                 default = nil)
  if valid_564694 != nil:
    section.add "subscriptionId", valid_564694
  var valid_564695 = path.getOrDefault("resourceGroupName")
  valid_564695 = validateParameter(valid_564695, JString, required = true,
                                 default = nil)
  if valid_564695 != nil:
    section.add "resourceGroupName", valid_564695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564696 = query.getOrDefault("api-version")
  valid_564696 = validateParameter(valid_564696, JString, required = true,
                                 default = nil)
  if valid_564696 != nil:
    section.add "api-version", valid_564696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564698: Call_CertificatesUpdateCertificate_564690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564698.validator(path, query, header, formData, body)
  let scheme = call_564698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564698.url(scheme.get, call_564698.host, call_564698.base,
                         call_564698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564698, url, valid)

proc call*(call_564699: Call_CertificatesUpdateCertificate_564690;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; certificateEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   certificateEnvelope: JObject (required)
  ##                      : Details of certificate if it exists already.
  var path_564700 = newJObject()
  var query_564701 = newJObject()
  var body_564702 = newJObject()
  add(query_564701, "api-version", newJString(apiVersion))
  add(path_564700, "name", newJString(name))
  add(path_564700, "subscriptionId", newJString(subscriptionId))
  add(path_564700, "resourceGroupName", newJString(resourceGroupName))
  if certificateEnvelope != nil:
    body_564702 = certificateEnvelope
  result = call_564699.call(path_564700, query_564701, nil, nil, body_564702)

var certificatesUpdateCertificate* = Call_CertificatesUpdateCertificate_564690(
    name: "certificatesUpdateCertificate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesUpdateCertificate_564691, base: "",
    url: url_CertificatesUpdateCertificate_564692, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCertificate_564679 = ref object of OpenApiRestCall_563548
proc url_CertificatesDeleteCertificate_564681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/certificates/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCertificate_564680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564682 = path.getOrDefault("name")
  valid_564682 = validateParameter(valid_564682, JString, required = true,
                                 default = nil)
  if valid_564682 != nil:
    section.add "name", valid_564682
  var valid_564683 = path.getOrDefault("subscriptionId")
  valid_564683 = validateParameter(valid_564683, JString, required = true,
                                 default = nil)
  if valid_564683 != nil:
    section.add "subscriptionId", valid_564683
  var valid_564684 = path.getOrDefault("resourceGroupName")
  valid_564684 = validateParameter(valid_564684, JString, required = true,
                                 default = nil)
  if valid_564684 != nil:
    section.add "resourceGroupName", valid_564684
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564685 = query.getOrDefault("api-version")
  valid_564685 = validateParameter(valid_564685, JString, required = true,
                                 default = nil)
  if valid_564685 != nil:
    section.add "api-version", valid_564685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564686: Call_CertificatesDeleteCertificate_564679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564686.validator(path, query, header, formData, body)
  let scheme = call_564686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564686.url(scheme.get, call_564686.host, call_564686.base,
                         call_564686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564686, url, valid)

proc call*(call_564687: Call_CertificatesDeleteCertificate_564679;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## certificatesDeleteCertificate
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate to be deleted.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564688 = newJObject()
  var query_564689 = newJObject()
  add(query_564689, "api-version", newJString(apiVersion))
  add(path_564688, "name", newJString(name))
  add(path_564688, "subscriptionId", newJString(subscriptionId))
  add(path_564688, "resourceGroupName", newJString(resourceGroupName))
  result = call_564687.call(path_564688, query_564689, nil, nil, nil)

var certificatesDeleteCertificate* = Call_CertificatesDeleteCertificate_564679(
    name: "certificatesDeleteCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    validator: validate_CertificatesDeleteCertificate_564680, base: "",
    url: url_CertificatesDeleteCertificate_564681, schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileServices_564703 = ref object of OpenApiRestCall_563548
proc url_ClassicMobileServicesGetClassicMobileServices_564705(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileServices_564704(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564706 = path.getOrDefault("subscriptionId")
  valid_564706 = validateParameter(valid_564706, JString, required = true,
                                 default = nil)
  if valid_564706 != nil:
    section.add "subscriptionId", valid_564706
  var valid_564707 = path.getOrDefault("resourceGroupName")
  valid_564707 = validateParameter(valid_564707, JString, required = true,
                                 default = nil)
  if valid_564707 != nil:
    section.add "resourceGroupName", valid_564707
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564708 = query.getOrDefault("api-version")
  valid_564708 = validateParameter(valid_564708, JString, required = true,
                                 default = nil)
  if valid_564708 != nil:
    section.add "api-version", valid_564708
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564709: Call_ClassicMobileServicesGetClassicMobileServices_564703;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564709.validator(path, query, header, formData, body)
  let scheme = call_564709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564709.url(scheme.get, call_564709.host, call_564709.base,
                         call_564709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564709, url, valid)

proc call*(call_564710: Call_ClassicMobileServicesGetClassicMobileServices_564703;
          apiVersion: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## classicMobileServicesGetClassicMobileServices
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564711 = newJObject()
  var query_564712 = newJObject()
  add(query_564712, "api-version", newJString(apiVersion))
  add(path_564711, "subscriptionId", newJString(subscriptionId))
  add(path_564711, "resourceGroupName", newJString(resourceGroupName))
  result = call_564710.call(path_564711, query_564712, nil, nil, nil)

var classicMobileServicesGetClassicMobileServices* = Call_ClassicMobileServicesGetClassicMobileServices_564703(
    name: "classicMobileServicesGetClassicMobileServices",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
    validator: validate_ClassicMobileServicesGetClassicMobileServices_564704,
    base: "", url: url_ClassicMobileServicesGetClassicMobileServices_564705,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesGetClassicMobileService_564713 = ref object of OpenApiRestCall_563548
proc url_ClassicMobileServicesGetClassicMobileService_564715(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesGetClassicMobileService_564714(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564716 = path.getOrDefault("name")
  valid_564716 = validateParameter(valid_564716, JString, required = true,
                                 default = nil)
  if valid_564716 != nil:
    section.add "name", valid_564716
  var valid_564717 = path.getOrDefault("subscriptionId")
  valid_564717 = validateParameter(valid_564717, JString, required = true,
                                 default = nil)
  if valid_564717 != nil:
    section.add "subscriptionId", valid_564717
  var valid_564718 = path.getOrDefault("resourceGroupName")
  valid_564718 = validateParameter(valid_564718, JString, required = true,
                                 default = nil)
  if valid_564718 != nil:
    section.add "resourceGroupName", valid_564718
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564719 = query.getOrDefault("api-version")
  valid_564719 = validateParameter(valid_564719, JString, required = true,
                                 default = nil)
  if valid_564719 != nil:
    section.add "api-version", valid_564719
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564720: Call_ClassicMobileServicesGetClassicMobileService_564713;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564720.validator(path, query, header, formData, body)
  let scheme = call_564720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564720.url(scheme.get, call_564720.host, call_564720.base,
                         call_564720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564720, url, valid)

proc call*(call_564721: Call_ClassicMobileServicesGetClassicMobileService_564713;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## classicMobileServicesGetClassicMobileService
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564722 = newJObject()
  var query_564723 = newJObject()
  add(query_564723, "api-version", newJString(apiVersion))
  add(path_564722, "name", newJString(name))
  add(path_564722, "subscriptionId", newJString(subscriptionId))
  add(path_564722, "resourceGroupName", newJString(resourceGroupName))
  result = call_564721.call(path_564722, query_564723, nil, nil, nil)

var classicMobileServicesGetClassicMobileService* = Call_ClassicMobileServicesGetClassicMobileService_564713(
    name: "classicMobileServicesGetClassicMobileService",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesGetClassicMobileService_564714,
    base: "", url: url_ClassicMobileServicesGetClassicMobileService_564715,
    schemes: {Scheme.Https})
type
  Call_ClassicMobileServicesDeleteClassicMobileService_564724 = ref object of OpenApiRestCall_563548
proc url_ClassicMobileServicesDeleteClassicMobileService_564726(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/classicMobileServices/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ClassicMobileServicesDeleteClassicMobileService_564725(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of mobile service
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564727 = path.getOrDefault("name")
  valid_564727 = validateParameter(valid_564727, JString, required = true,
                                 default = nil)
  if valid_564727 != nil:
    section.add "name", valid_564727
  var valid_564728 = path.getOrDefault("subscriptionId")
  valid_564728 = validateParameter(valid_564728, JString, required = true,
                                 default = nil)
  if valid_564728 != nil:
    section.add "subscriptionId", valid_564728
  var valid_564729 = path.getOrDefault("resourceGroupName")
  valid_564729 = validateParameter(valid_564729, JString, required = true,
                                 default = nil)
  if valid_564729 != nil:
    section.add "resourceGroupName", valid_564729
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564730 = query.getOrDefault("api-version")
  valid_564730 = validateParameter(valid_564730, JString, required = true,
                                 default = nil)
  if valid_564730 != nil:
    section.add "api-version", valid_564730
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564731: Call_ClassicMobileServicesDeleteClassicMobileService_564724;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564731.validator(path, query, header, formData, body)
  let scheme = call_564731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564731.url(scheme.get, call_564731.host, call_564731.base,
                         call_564731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564731, url, valid)

proc call*(call_564732: Call_ClassicMobileServicesDeleteClassicMobileService_564724;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## classicMobileServicesDeleteClassicMobileService
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of mobile service
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564733 = newJObject()
  var query_564734 = newJObject()
  add(query_564734, "api-version", newJString(apiVersion))
  add(path_564733, "name", newJString(name))
  add(path_564733, "subscriptionId", newJString(subscriptionId))
  add(path_564733, "resourceGroupName", newJString(resourceGroupName))
  result = call_564732.call(path_564733, query_564734, nil, nil, nil)

var classicMobileServicesDeleteClassicMobileService* = Call_ClassicMobileServicesDeleteClassicMobileService_564724(
    name: "classicMobileServicesDeleteClassicMobileService",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
    validator: validate_ClassicMobileServicesDeleteClassicMobileService_564725,
    base: "", url: url_ClassicMobileServicesDeleteClassicMobileService_564726,
    schemes: {Scheme.Https})
type
  Call_CertificatesGetCsrs_564735 = ref object of OpenApiRestCall_563548
proc url_CertificatesGetCsrs_564737(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsrs_564736(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564738 = path.getOrDefault("subscriptionId")
  valid_564738 = validateParameter(valid_564738, JString, required = true,
                                 default = nil)
  if valid_564738 != nil:
    section.add "subscriptionId", valid_564738
  var valid_564739 = path.getOrDefault("resourceGroupName")
  valid_564739 = validateParameter(valid_564739, JString, required = true,
                                 default = nil)
  if valid_564739 != nil:
    section.add "resourceGroupName", valid_564739
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564740 = query.getOrDefault("api-version")
  valid_564740 = validateParameter(valid_564740, JString, required = true,
                                 default = nil)
  if valid_564740 != nil:
    section.add "api-version", valid_564740
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564741: Call_CertificatesGetCsrs_564735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564741.validator(path, query, header, formData, body)
  let scheme = call_564741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564741.url(scheme.get, call_564741.host, call_564741.base,
                         call_564741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564741, url, valid)

proc call*(call_564742: Call_CertificatesGetCsrs_564735; apiVersion: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificatesGetCsrs
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564743 = newJObject()
  var query_564744 = newJObject()
  add(query_564744, "api-version", newJString(apiVersion))
  add(path_564743, "subscriptionId", newJString(subscriptionId))
  add(path_564743, "resourceGroupName", newJString(resourceGroupName))
  result = call_564742.call(path_564743, query_564744, nil, nil, nil)

var certificatesGetCsrs* = Call_CertificatesGetCsrs_564735(
    name: "certificatesGetCsrs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs",
    validator: validate_CertificatesGetCsrs_564736, base: "",
    url: url_CertificatesGetCsrs_564737, schemes: {Scheme.Https})
type
  Call_CertificatesCreateOrUpdateCsr_564756 = ref object of OpenApiRestCall_563548
proc url_CertificatesCreateOrUpdateCsr_564758(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesCreateOrUpdateCsr_564757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564759 = path.getOrDefault("name")
  valid_564759 = validateParameter(valid_564759, JString, required = true,
                                 default = nil)
  if valid_564759 != nil:
    section.add "name", valid_564759
  var valid_564760 = path.getOrDefault("subscriptionId")
  valid_564760 = validateParameter(valid_564760, JString, required = true,
                                 default = nil)
  if valid_564760 != nil:
    section.add "subscriptionId", valid_564760
  var valid_564761 = path.getOrDefault("resourceGroupName")
  valid_564761 = validateParameter(valid_564761, JString, required = true,
                                 default = nil)
  if valid_564761 != nil:
    section.add "resourceGroupName", valid_564761
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564762 = query.getOrDefault("api-version")
  valid_564762 = validateParameter(valid_564762, JString, required = true,
                                 default = nil)
  if valid_564762 != nil:
    section.add "api-version", valid_564762
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564764: Call_CertificatesCreateOrUpdateCsr_564756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564764.validator(path, query, header, formData, body)
  let scheme = call_564764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564764.url(scheme.get, call_564764.host, call_564764.base,
                         call_564764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564764, url, valid)

proc call*(call_564765: Call_CertificatesCreateOrUpdateCsr_564756;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; csrEnvelope: JsonNode): Recallable =
  ## certificatesCreateOrUpdateCsr
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_564766 = newJObject()
  var query_564767 = newJObject()
  var body_564768 = newJObject()
  add(query_564767, "api-version", newJString(apiVersion))
  add(path_564766, "name", newJString(name))
  add(path_564766, "subscriptionId", newJString(subscriptionId))
  add(path_564766, "resourceGroupName", newJString(resourceGroupName))
  if csrEnvelope != nil:
    body_564768 = csrEnvelope
  result = call_564765.call(path_564766, query_564767, nil, nil, body_564768)

var certificatesCreateOrUpdateCsr* = Call_CertificatesCreateOrUpdateCsr_564756(
    name: "certificatesCreateOrUpdateCsr", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesCreateOrUpdateCsr_564757, base: "",
    url: url_CertificatesCreateOrUpdateCsr_564758, schemes: {Scheme.Https})
type
  Call_CertificatesGetCsr_564745 = ref object of OpenApiRestCall_563548
proc url_CertificatesGetCsr_564747(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesGetCsr_564746(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564748 = path.getOrDefault("name")
  valid_564748 = validateParameter(valid_564748, JString, required = true,
                                 default = nil)
  if valid_564748 != nil:
    section.add "name", valid_564748
  var valid_564749 = path.getOrDefault("subscriptionId")
  valid_564749 = validateParameter(valid_564749, JString, required = true,
                                 default = nil)
  if valid_564749 != nil:
    section.add "subscriptionId", valid_564749
  var valid_564750 = path.getOrDefault("resourceGroupName")
  valid_564750 = validateParameter(valid_564750, JString, required = true,
                                 default = nil)
  if valid_564750 != nil:
    section.add "resourceGroupName", valid_564750
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564751 = query.getOrDefault("api-version")
  valid_564751 = validateParameter(valid_564751, JString, required = true,
                                 default = nil)
  if valid_564751 != nil:
    section.add "api-version", valid_564751
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564752: Call_CertificatesGetCsr_564745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564752.validator(path, query, header, formData, body)
  let scheme = call_564752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564752.url(scheme.get, call_564752.host, call_564752.base,
                         call_564752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564752, url, valid)

proc call*(call_564753: Call_CertificatesGetCsr_564745; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificatesGetCsr
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564754 = newJObject()
  var query_564755 = newJObject()
  add(query_564755, "api-version", newJString(apiVersion))
  add(path_564754, "name", newJString(name))
  add(path_564754, "subscriptionId", newJString(subscriptionId))
  add(path_564754, "resourceGroupName", newJString(resourceGroupName))
  result = call_564753.call(path_564754, query_564755, nil, nil, nil)

var certificatesGetCsr* = Call_CertificatesGetCsr_564745(
    name: "certificatesGetCsr", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesGetCsr_564746, base: "",
    url: url_CertificatesGetCsr_564747, schemes: {Scheme.Https})
type
  Call_CertificatesUpdateCsr_564780 = ref object of OpenApiRestCall_563548
proc url_CertificatesUpdateCsr_564782(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesUpdateCsr_564781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564783 = path.getOrDefault("name")
  valid_564783 = validateParameter(valid_564783, JString, required = true,
                                 default = nil)
  if valid_564783 != nil:
    section.add "name", valid_564783
  var valid_564784 = path.getOrDefault("subscriptionId")
  valid_564784 = validateParameter(valid_564784, JString, required = true,
                                 default = nil)
  if valid_564784 != nil:
    section.add "subscriptionId", valid_564784
  var valid_564785 = path.getOrDefault("resourceGroupName")
  valid_564785 = validateParameter(valid_564785, JString, required = true,
                                 default = nil)
  if valid_564785 != nil:
    section.add "resourceGroupName", valid_564785
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564786 = query.getOrDefault("api-version")
  valid_564786 = validateParameter(valid_564786, JString, required = true,
                                 default = nil)
  if valid_564786 != nil:
    section.add "api-version", valid_564786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564788: Call_CertificatesUpdateCsr_564780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564788.validator(path, query, header, formData, body)
  let scheme = call_564788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564788.url(scheme.get, call_564788.host, call_564788.base,
                         call_564788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564788, url, valid)

proc call*(call_564789: Call_CertificatesUpdateCsr_564780; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          csrEnvelope: JsonNode): Recallable =
  ## certificatesUpdateCsr
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   csrEnvelope: JObject (required)
  ##              : Details of certificate signing request if it exists already.
  var path_564790 = newJObject()
  var query_564791 = newJObject()
  var body_564792 = newJObject()
  add(query_564791, "api-version", newJString(apiVersion))
  add(path_564790, "name", newJString(name))
  add(path_564790, "subscriptionId", newJString(subscriptionId))
  add(path_564790, "resourceGroupName", newJString(resourceGroupName))
  if csrEnvelope != nil:
    body_564792 = csrEnvelope
  result = call_564789.call(path_564790, query_564791, nil, nil, body_564792)

var certificatesUpdateCsr* = Call_CertificatesUpdateCsr_564780(
    name: "certificatesUpdateCsr", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesUpdateCsr_564781, base: "",
    url: url_CertificatesUpdateCsr_564782, schemes: {Scheme.Https})
type
  Call_CertificatesDeleteCsr_564769 = ref object of OpenApiRestCall_563548
proc url_CertificatesDeleteCsr_564771(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/csrs/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CertificatesDeleteCsr_564770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564772 = path.getOrDefault("name")
  valid_564772 = validateParameter(valid_564772, JString, required = true,
                                 default = nil)
  if valid_564772 != nil:
    section.add "name", valid_564772
  var valid_564773 = path.getOrDefault("subscriptionId")
  valid_564773 = validateParameter(valid_564773, JString, required = true,
                                 default = nil)
  if valid_564773 != nil:
    section.add "subscriptionId", valid_564773
  var valid_564774 = path.getOrDefault("resourceGroupName")
  valid_564774 = validateParameter(valid_564774, JString, required = true,
                                 default = nil)
  if valid_564774 != nil:
    section.add "resourceGroupName", valid_564774
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564775 = query.getOrDefault("api-version")
  valid_564775 = validateParameter(valid_564775, JString, required = true,
                                 default = nil)
  if valid_564775 != nil:
    section.add "api-version", valid_564775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564776: Call_CertificatesDeleteCsr_564769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564776.validator(path, query, header, formData, body)
  let scheme = call_564776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564776.url(scheme.get, call_564776.host, call_564776.base,
                         call_564776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564776, url, valid)

proc call*(call_564777: Call_CertificatesDeleteCsr_564769; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## certificatesDeleteCsr
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the certificate signing request.
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_564778 = newJObject()
  var query_564779 = newJObject()
  add(query_564779, "api-version", newJString(apiVersion))
  add(path_564778, "name", newJString(name))
  add(path_564778, "subscriptionId", newJString(subscriptionId))
  add(path_564778, "resourceGroupName", newJString(resourceGroupName))
  result = call_564777.call(path_564778, query_564779, nil, nil, nil)

var certificatesDeleteCsr* = Call_CertificatesDeleteCsr_564769(
    name: "certificatesDeleteCsr", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
    validator: validate_CertificatesDeleteCsr_564770, base: "",
    url: url_CertificatesDeleteCsr_564771, schemes: {Scheme.Https})
type
  Call_SitesGetDeletedSites_564793 = ref object of OpenApiRestCall_563548
proc url_SitesGetDeletedSites_564795(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/deletedSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeletedSites_564794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564796 = path.getOrDefault("subscriptionId")
  valid_564796 = validateParameter(valid_564796, JString, required = true,
                                 default = nil)
  if valid_564796 != nil:
    section.add "subscriptionId", valid_564796
  var valid_564797 = path.getOrDefault("resourceGroupName")
  valid_564797 = validateParameter(valid_564797, JString, required = true,
                                 default = nil)
  if valid_564797 != nil:
    section.add "resourceGroupName", valid_564797
  result.add "path", section
  ## parameters in `query` object:
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  section = newJObject()
  var valid_564798 = query.getOrDefault("includeSiteTypes")
  valid_564798 = validateParameter(valid_564798, JString, required = false,
                                 default = nil)
  if valid_564798 != nil:
    section.add "includeSiteTypes", valid_564798
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564799 = query.getOrDefault("api-version")
  valid_564799 = validateParameter(valid_564799, JString, required = true,
                                 default = nil)
  if valid_564799 != nil:
    section.add "api-version", valid_564799
  var valid_564800 = query.getOrDefault("propertiesToInclude")
  valid_564800 = validateParameter(valid_564800, JString, required = false,
                                 default = nil)
  if valid_564800 != nil:
    section.add "propertiesToInclude", valid_564800
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564801: Call_SitesGetDeletedSites_564793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_564801.validator(path, query, header, formData, body)
  let scheme = call_564801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564801.url(scheme.get, call_564801.host, call_564801.base,
                         call_564801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564801, url, valid)

proc call*(call_564802: Call_SitesGetDeletedSites_564793; apiVersion: string;
          subscriptionId: string; resourceGroupName: string;
          includeSiteTypes: string = ""; propertiesToInclude: string = ""): Recallable =
  ## sitesGetDeletedSites
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564803 = newJObject()
  var query_564804 = newJObject()
  add(query_564804, "includeSiteTypes", newJString(includeSiteTypes))
  add(query_564804, "api-version", newJString(apiVersion))
  add(path_564803, "subscriptionId", newJString(subscriptionId))
  add(query_564804, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_564803, "resourceGroupName", newJString(resourceGroupName))
  result = call_564802.call(path_564803, query_564804, nil, nil, nil)

var sitesGetDeletedSites* = Call_SitesGetDeletedSites_564793(
    name: "sitesGetDeletedSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites",
    validator: validate_SitesGetDeletedSites_564794, base: "",
    url: url_SitesGetDeletedSites_564795, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironments_564805 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironments_564807(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironments_564806(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564808 = path.getOrDefault("subscriptionId")
  valid_564808 = validateParameter(valid_564808, JString, required = true,
                                 default = nil)
  if valid_564808 != nil:
    section.add "subscriptionId", valid_564808
  var valid_564809 = path.getOrDefault("resourceGroupName")
  valid_564809 = validateParameter(valid_564809, JString, required = true,
                                 default = nil)
  if valid_564809 != nil:
    section.add "resourceGroupName", valid_564809
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564810 = query.getOrDefault("api-version")
  valid_564810 = validateParameter(valid_564810, JString, required = true,
                                 default = nil)
  if valid_564810 != nil:
    section.add "api-version", valid_564810
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564811: Call_HostingEnvironmentsGetHostingEnvironments_564805;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564811.validator(path, query, header, formData, body)
  let scheme = call_564811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564811.url(scheme.get, call_564811.host, call_564811.base,
                         call_564811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564811, url, valid)

proc call*(call_564812: Call_HostingEnvironmentsGetHostingEnvironments_564805;
          apiVersion: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564813 = newJObject()
  var query_564814 = newJObject()
  add(query_564814, "api-version", newJString(apiVersion))
  add(path_564813, "subscriptionId", newJString(subscriptionId))
  add(path_564813, "resourceGroupName", newJString(resourceGroupName))
  result = call_564812.call(path_564813, query_564814, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironments* = Call_HostingEnvironmentsGetHostingEnvironments_564805(
    name: "hostingEnvironmentsGetHostingEnvironments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
    validator: validate_HostingEnvironmentsGetHostingEnvironments_564806,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironments_564807,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564826 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564828(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564827(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564829 = path.getOrDefault("name")
  valid_564829 = validateParameter(valid_564829, JString, required = true,
                                 default = nil)
  if valid_564829 != nil:
    section.add "name", valid_564829
  var valid_564830 = path.getOrDefault("subscriptionId")
  valid_564830 = validateParameter(valid_564830, JString, required = true,
                                 default = nil)
  if valid_564830 != nil:
    section.add "subscriptionId", valid_564830
  var valid_564831 = path.getOrDefault("resourceGroupName")
  valid_564831 = validateParameter(valid_564831, JString, required = true,
                                 default = nil)
  if valid_564831 != nil:
    section.add "resourceGroupName", valid_564831
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564832 = query.getOrDefault("api-version")
  valid_564832 = validateParameter(valid_564832, JString, required = true,
                                 default = nil)
  if valid_564832 != nil:
    section.add "api-version", valid_564832
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564834: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564834.validator(path, query, header, formData, body)
  let scheme = call_564834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564834.url(scheme.get, call_564834.host, call_564834.base,
                         call_564834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564834, url, valid)

proc call*(call_564835: Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564826;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostingEnvironmentEnvelope: JsonNode): Recallable =
  ## hostingEnvironmentsCreateOrUpdateHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostingEnvironmentEnvelope: JObject (required)
  ##                             : Properties of hostingEnvironment (App Service Environment)
  var path_564836 = newJObject()
  var query_564837 = newJObject()
  var body_564838 = newJObject()
  add(query_564837, "api-version", newJString(apiVersion))
  add(path_564836, "name", newJString(name))
  add(path_564836, "subscriptionId", newJString(subscriptionId))
  add(path_564836, "resourceGroupName", newJString(resourceGroupName))
  if hostingEnvironmentEnvelope != nil:
    body_564838 = hostingEnvironmentEnvelope
  result = call_564835.call(path_564836, query_564837, nil, nil, body_564838)

var hostingEnvironmentsCreateOrUpdateHostingEnvironment* = Call_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564826(
    name: "hostingEnvironmentsCreateOrUpdateHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564827,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateHostingEnvironment_564828,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironment_564815 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironment_564817(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironment_564816(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564818 = path.getOrDefault("name")
  valid_564818 = validateParameter(valid_564818, JString, required = true,
                                 default = nil)
  if valid_564818 != nil:
    section.add "name", valid_564818
  var valid_564819 = path.getOrDefault("subscriptionId")
  valid_564819 = validateParameter(valid_564819, JString, required = true,
                                 default = nil)
  if valid_564819 != nil:
    section.add "subscriptionId", valid_564819
  var valid_564820 = path.getOrDefault("resourceGroupName")
  valid_564820 = validateParameter(valid_564820, JString, required = true,
                                 default = nil)
  if valid_564820 != nil:
    section.add "resourceGroupName", valid_564820
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564821 = query.getOrDefault("api-version")
  valid_564821 = validateParameter(valid_564821, JString, required = true,
                                 default = nil)
  if valid_564821 != nil:
    section.add "api-version", valid_564821
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564822: Call_HostingEnvironmentsGetHostingEnvironment_564815;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564822.validator(path, query, header, formData, body)
  let scheme = call_564822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564822.url(scheme.get, call_564822.host, call_564822.base,
                         call_564822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564822, url, valid)

proc call*(call_564823: Call_HostingEnvironmentsGetHostingEnvironment_564815;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564824 = newJObject()
  var query_564825 = newJObject()
  add(query_564825, "api-version", newJString(apiVersion))
  add(path_564824, "name", newJString(name))
  add(path_564824, "subscriptionId", newJString(subscriptionId))
  add(path_564824, "resourceGroupName", newJString(resourceGroupName))
  result = call_564823.call(path_564824, query_564825, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironment* = Call_HostingEnvironmentsGetHostingEnvironment_564815(
    name: "hostingEnvironmentsGetHostingEnvironment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsGetHostingEnvironment_564816, base: "",
    url: url_HostingEnvironmentsGetHostingEnvironment_564817,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsDeleteHostingEnvironment_564839 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsDeleteHostingEnvironment_564841(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsDeleteHostingEnvironment_564840(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564842 = path.getOrDefault("name")
  valid_564842 = validateParameter(valid_564842, JString, required = true,
                                 default = nil)
  if valid_564842 != nil:
    section.add "name", valid_564842
  var valid_564843 = path.getOrDefault("subscriptionId")
  valid_564843 = validateParameter(valid_564843, JString, required = true,
                                 default = nil)
  if valid_564843 != nil:
    section.add "subscriptionId", valid_564843
  var valid_564844 = path.getOrDefault("resourceGroupName")
  valid_564844 = validateParameter(valid_564844, JString, required = true,
                                 default = nil)
  if valid_564844 != nil:
    section.add "resourceGroupName", valid_564844
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564845 = query.getOrDefault("api-version")
  valid_564845 = validateParameter(valid_564845, JString, required = true,
                                 default = nil)
  if valid_564845 != nil:
    section.add "api-version", valid_564845
  var valid_564846 = query.getOrDefault("forceDelete")
  valid_564846 = validateParameter(valid_564846, JBool, required = false, default = nil)
  if valid_564846 != nil:
    section.add "forceDelete", valid_564846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564847: Call_HostingEnvironmentsDeleteHostingEnvironment_564839;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564847.validator(path, query, header, formData, body)
  let scheme = call_564847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564847.url(scheme.get, call_564847.host, call_564847.base,
                         call_564847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564847, url, valid)

proc call*(call_564848: Call_HostingEnvironmentsDeleteHostingEnvironment_564839;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; forceDelete: bool = false): Recallable =
  ## hostingEnvironmentsDeleteHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   forceDelete: bool
  ##              : Delete even if the hostingEnvironment (App Service Environment) contains resources
  var path_564849 = newJObject()
  var query_564850 = newJObject()
  add(query_564850, "api-version", newJString(apiVersion))
  add(path_564849, "name", newJString(name))
  add(path_564849, "subscriptionId", newJString(subscriptionId))
  add(path_564849, "resourceGroupName", newJString(resourceGroupName))
  add(query_564850, "forceDelete", newJBool(forceDelete))
  result = call_564848.call(path_564849, query_564850, nil, nil, nil)

var hostingEnvironmentsDeleteHostingEnvironment* = Call_HostingEnvironmentsDeleteHostingEnvironment_564839(
    name: "hostingEnvironmentsDeleteHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    validator: validate_HostingEnvironmentsDeleteHostingEnvironment_564840,
    base: "", url: url_HostingEnvironmentsDeleteHostingEnvironment_564841,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentCapacities_564851 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentCapacities_564853(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/compute")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentCapacities_564852(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564854 = path.getOrDefault("name")
  valid_564854 = validateParameter(valid_564854, JString, required = true,
                                 default = nil)
  if valid_564854 != nil:
    section.add "name", valid_564854
  var valid_564855 = path.getOrDefault("subscriptionId")
  valid_564855 = validateParameter(valid_564855, JString, required = true,
                                 default = nil)
  if valid_564855 != nil:
    section.add "subscriptionId", valid_564855
  var valid_564856 = path.getOrDefault("resourceGroupName")
  valid_564856 = validateParameter(valid_564856, JString, required = true,
                                 default = nil)
  if valid_564856 != nil:
    section.add "resourceGroupName", valid_564856
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564857 = query.getOrDefault("api-version")
  valid_564857 = validateParameter(valid_564857, JString, required = true,
                                 default = nil)
  if valid_564857 != nil:
    section.add "api-version", valid_564857
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564858: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_564851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564858.validator(path, query, header, formData, body)
  let scheme = call_564858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564858.url(scheme.get, call_564858.host, call_564858.base,
                         call_564858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564858, url, valid)

proc call*(call_564859: Call_HostingEnvironmentsGetHostingEnvironmentCapacities_564851;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentCapacities
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564860 = newJObject()
  var query_564861 = newJObject()
  add(query_564861, "api-version", newJString(apiVersion))
  add(path_564860, "name", newJString(name))
  add(path_564860, "subscriptionId", newJString(subscriptionId))
  add(path_564860, "resourceGroupName", newJString(resourceGroupName))
  result = call_564859.call(path_564860, query_564861, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentCapacities* = Call_HostingEnvironmentsGetHostingEnvironmentCapacities_564851(
    name: "hostingEnvironmentsGetHostingEnvironmentCapacities",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentCapacities_564852,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentCapacities_564853,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentVips_564862 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentVips_564864(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentVips_564863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564865 = path.getOrDefault("name")
  valid_564865 = validateParameter(valid_564865, JString, required = true,
                                 default = nil)
  if valid_564865 != nil:
    section.add "name", valid_564865
  var valid_564866 = path.getOrDefault("subscriptionId")
  valid_564866 = validateParameter(valid_564866, JString, required = true,
                                 default = nil)
  if valid_564866 != nil:
    section.add "subscriptionId", valid_564866
  var valid_564867 = path.getOrDefault("resourceGroupName")
  valid_564867 = validateParameter(valid_564867, JString, required = true,
                                 default = nil)
  if valid_564867 != nil:
    section.add "resourceGroupName", valid_564867
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564868 = query.getOrDefault("api-version")
  valid_564868 = validateParameter(valid_564868, JString, required = true,
                                 default = nil)
  if valid_564868 != nil:
    section.add "api-version", valid_564868
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564869: Call_HostingEnvironmentsGetHostingEnvironmentVips_564862;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564869.validator(path, query, header, formData, body)
  let scheme = call_564869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564869.url(scheme.get, call_564869.host, call_564869.base,
                         call_564869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564869, url, valid)

proc call*(call_564870: Call_HostingEnvironmentsGetHostingEnvironmentVips_564862;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentVips
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564871 = newJObject()
  var query_564872 = newJObject()
  add(query_564872, "api-version", newJString(apiVersion))
  add(path_564871, "name", newJString(name))
  add(path_564871, "subscriptionId", newJString(subscriptionId))
  add(path_564871, "resourceGroupName", newJString(resourceGroupName))
  result = call_564870.call(path_564871, query_564872, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentVips* = Call_HostingEnvironmentsGetHostingEnvironmentVips_564862(
    name: "hostingEnvironmentsGetHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentVips_564863,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentVips_564864,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564873 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564875(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564874(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564876 = path.getOrDefault("name")
  valid_564876 = validateParameter(valid_564876, JString, required = true,
                                 default = nil)
  if valid_564876 != nil:
    section.add "name", valid_564876
  var valid_564877 = path.getOrDefault("subscriptionId")
  valid_564877 = validateParameter(valid_564877, JString, required = true,
                                 default = nil)
  if valid_564877 != nil:
    section.add "subscriptionId", valid_564877
  var valid_564878 = path.getOrDefault("resourceGroupName")
  valid_564878 = validateParameter(valid_564878, JString, required = true,
                                 default = nil)
  if valid_564878 != nil:
    section.add "resourceGroupName", valid_564878
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564879 = query.getOrDefault("api-version")
  valid_564879 = validateParameter(valid_564879, JString, required = true,
                                 default = nil)
  if valid_564879 != nil:
    section.add "api-version", valid_564879
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564880: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564873;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564880.validator(path, query, header, formData, body)
  let scheme = call_564880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564880.url(scheme.get, call_564880.host, call_564880.base,
                         call_564880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564880, url, valid)

proc call*(call_564881: Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564873;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnostics
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564882 = newJObject()
  var query_564883 = newJObject()
  add(query_564883, "api-version", newJString(apiVersion))
  add(path_564882, "name", newJString(name))
  add(path_564882, "subscriptionId", newJString(subscriptionId))
  add(path_564882, "resourceGroupName", newJString(resourceGroupName))
  result = call_564881.call(path_564882, query_564883, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnostics* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564873(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnostics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564874,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnostics_564875,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564884 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564886(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "diagnosticsName" in path, "`diagnosticsName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/diagnostics/"),
               (kind: VariableSegment, value: "diagnosticsName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564885(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   diagnosticsName: JString (required)
  ##                  : Name of the diagnostics
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564887 = path.getOrDefault("name")
  valid_564887 = validateParameter(valid_564887, JString, required = true,
                                 default = nil)
  if valid_564887 != nil:
    section.add "name", valid_564887
  var valid_564888 = path.getOrDefault("subscriptionId")
  valid_564888 = validateParameter(valid_564888, JString, required = true,
                                 default = nil)
  if valid_564888 != nil:
    section.add "subscriptionId", valid_564888
  var valid_564889 = path.getOrDefault("diagnosticsName")
  valid_564889 = validateParameter(valid_564889, JString, required = true,
                                 default = nil)
  if valid_564889 != nil:
    section.add "diagnosticsName", valid_564889
  var valid_564890 = path.getOrDefault("resourceGroupName")
  valid_564890 = validateParameter(valid_564890, JString, required = true,
                                 default = nil)
  if valid_564890 != nil:
    section.add "resourceGroupName", valid_564890
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564891 = query.getOrDefault("api-version")
  valid_564891 = validateParameter(valid_564891, JString, required = true,
                                 default = nil)
  if valid_564891 != nil:
    section.add "api-version", valid_564891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564892: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564892.validator(path, query, header, formData, body)
  let scheme = call_564892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564892.url(scheme.get, call_564892.host, call_564892.base,
                         call_564892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564892, url, valid)

proc call*(call_564893: Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564884;
          apiVersion: string; name: string; subscriptionId: string;
          diagnosticsName: string; resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   diagnosticsName: string (required)
  ##                  : Name of the diagnostics
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564894 = newJObject()
  var query_564895 = newJObject()
  add(query_564895, "api-version", newJString(apiVersion))
  add(path_564894, "name", newJString(name))
  add(path_564894, "subscriptionId", newJString(subscriptionId))
  add(path_564894, "diagnosticsName", newJString(diagnosticsName))
  add(path_564894, "resourceGroupName", newJString(resourceGroupName))
  result = call_564893.call(path_564894, query_564895, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem* = Call_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564884(
    name: "hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}", validator: validate_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564885,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentDiagnosticsItem_564886,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564896 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564898(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564897(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564899 = path.getOrDefault("name")
  valid_564899 = validateParameter(valid_564899, JString, required = true,
                                 default = nil)
  if valid_564899 != nil:
    section.add "name", valid_564899
  var valid_564900 = path.getOrDefault("subscriptionId")
  valid_564900 = validateParameter(valid_564900, JString, required = true,
                                 default = nil)
  if valid_564900 != nil:
    section.add "subscriptionId", valid_564900
  var valid_564901 = path.getOrDefault("resourceGroupName")
  valid_564901 = validateParameter(valid_564901, JString, required = true,
                                 default = nil)
  if valid_564901 != nil:
    section.add "resourceGroupName", valid_564901
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564902 = query.getOrDefault("api-version")
  valid_564902 = validateParameter(valid_564902, JString, required = true,
                                 default = nil)
  if valid_564902 != nil:
    section.add "api-version", valid_564902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564903: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564896;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564903.validator(path, query, header, formData, body)
  let scheme = call_564903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564903.url(scheme.get, call_564903.host, call_564903.base,
                         call_564903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564903, url, valid)

proc call*(call_564904: Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564896;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564905 = newJObject()
  var query_564906 = newJObject()
  add(query_564906, "api-version", newJString(apiVersion))
  add(path_564905, "name", newJString(name))
  add(path_564905, "subscriptionId", newJString(subscriptionId))
  add(path_564905, "resourceGroupName", newJString(resourceGroupName))
  result = call_564904.call(path_564905, query_564906, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564896(
    name: "hostingEnvironmentsGetHostingEnvironmentMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564897,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetricDefinitions_564898,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMetrics_564907 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentMetrics_564909(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMetrics_564908(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564910 = path.getOrDefault("name")
  valid_564910 = validateParameter(valid_564910, JString, required = true,
                                 default = nil)
  if valid_564910 != nil:
    section.add "name", valid_564910
  var valid_564911 = path.getOrDefault("subscriptionId")
  valid_564911 = validateParameter(valid_564911, JString, required = true,
                                 default = nil)
  if valid_564911 != nil:
    section.add "subscriptionId", valid_564911
  var valid_564912 = path.getOrDefault("resourceGroupName")
  valid_564912 = validateParameter(valid_564912, JString, required = true,
                                 default = nil)
  if valid_564912 != nil:
    section.add "resourceGroupName", valid_564912
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Include instance details
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_564913 = query.getOrDefault("details")
  valid_564913 = validateParameter(valid_564913, JBool, required = false, default = nil)
  if valid_564913 != nil:
    section.add "details", valid_564913
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564914 = query.getOrDefault("api-version")
  valid_564914 = validateParameter(valid_564914, JString, required = true,
                                 default = nil)
  if valid_564914 != nil:
    section.add "api-version", valid_564914
  var valid_564915 = query.getOrDefault("$filter")
  valid_564915 = validateParameter(valid_564915, JString, required = false,
                                 default = nil)
  if valid_564915 != nil:
    section.add "$filter", valid_564915
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564916: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_564907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564916.validator(path, query, header, formData, body)
  let scheme = call_564916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564916.url(scheme.get, call_564916.host, call_564916.base,
                         call_564916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564916, url, valid)

proc call*(call_564917: Call_HostingEnvironmentsGetHostingEnvironmentMetrics_564907;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMetrics
  ##   details: bool
  ##          : Include instance details
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_564918 = newJObject()
  var query_564919 = newJObject()
  add(query_564919, "details", newJBool(details))
  add(query_564919, "api-version", newJString(apiVersion))
  add(path_564918, "name", newJString(name))
  add(path_564918, "subscriptionId", newJString(subscriptionId))
  add(path_564918, "resourceGroupName", newJString(resourceGroupName))
  add(query_564919, "$filter", newJString(Filter))
  result = call_564917.call(path_564918, query_564919, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMetrics_564907(
    name: "hostingEnvironmentsGetHostingEnvironmentMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentMetrics_564908,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMetrics_564909,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePools_564920 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetMultiRolePools_564922(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePools_564921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564923 = path.getOrDefault("name")
  valid_564923 = validateParameter(valid_564923, JString, required = true,
                                 default = nil)
  if valid_564923 != nil:
    section.add "name", valid_564923
  var valid_564924 = path.getOrDefault("subscriptionId")
  valid_564924 = validateParameter(valid_564924, JString, required = true,
                                 default = nil)
  if valid_564924 != nil:
    section.add "subscriptionId", valid_564924
  var valid_564925 = path.getOrDefault("resourceGroupName")
  valid_564925 = validateParameter(valid_564925, JString, required = true,
                                 default = nil)
  if valid_564925 != nil:
    section.add "resourceGroupName", valid_564925
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564926 = query.getOrDefault("api-version")
  valid_564926 = validateParameter(valid_564926, JString, required = true,
                                 default = nil)
  if valid_564926 != nil:
    section.add "api-version", valid_564926
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564927: Call_HostingEnvironmentsGetMultiRolePools_564920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564927.validator(path, query, header, formData, body)
  let scheme = call_564927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564927.url(scheme.get, call_564927.host, call_564927.base,
                         call_564927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564927, url, valid)

proc call*(call_564928: Call_HostingEnvironmentsGetMultiRolePools_564920;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePools
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564929 = newJObject()
  var query_564930 = newJObject()
  add(query_564930, "api-version", newJString(apiVersion))
  add(path_564929, "name", newJString(name))
  add(path_564929, "subscriptionId", newJString(subscriptionId))
  add(path_564929, "resourceGroupName", newJString(resourceGroupName))
  result = call_564928.call(path_564929, query_564930, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePools* = Call_HostingEnvironmentsGetMultiRolePools_564920(
    name: "hostingEnvironmentsGetMultiRolePools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
    validator: validate_HostingEnvironmentsGetMultiRolePools_564921, base: "",
    url: url_HostingEnvironmentsGetMultiRolePools_564922, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_564942 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsCreateOrUpdateMultiRolePool_564944(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_564943(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564945 = path.getOrDefault("name")
  valid_564945 = validateParameter(valid_564945, JString, required = true,
                                 default = nil)
  if valid_564945 != nil:
    section.add "name", valid_564945
  var valid_564946 = path.getOrDefault("subscriptionId")
  valid_564946 = validateParameter(valid_564946, JString, required = true,
                                 default = nil)
  if valid_564946 != nil:
    section.add "subscriptionId", valid_564946
  var valid_564947 = path.getOrDefault("resourceGroupName")
  valid_564947 = validateParameter(valid_564947, JString, required = true,
                                 default = nil)
  if valid_564947 != nil:
    section.add "resourceGroupName", valid_564947
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564948 = query.getOrDefault("api-version")
  valid_564948 = validateParameter(valid_564948, JString, required = true,
                                 default = nil)
  if valid_564948 != nil:
    section.add "api-version", valid_564948
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564950: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_564942;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564950.validator(path, query, header, formData, body)
  let scheme = call_564950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564950.url(scheme.get, call_564950.host, call_564950.base,
                         call_564950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564950, url, valid)

proc call*(call_564951: Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_564942;
          apiVersion: string; multiRolePoolEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## hostingEnvironmentsCreateOrUpdateMultiRolePool
  ##   apiVersion: string (required)
  ##             : API Version
  ##   multiRolePoolEnvelope: JObject (required)
  ##                        : Properties of multiRole pool
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564952 = newJObject()
  var query_564953 = newJObject()
  var body_564954 = newJObject()
  add(query_564953, "api-version", newJString(apiVersion))
  if multiRolePoolEnvelope != nil:
    body_564954 = multiRolePoolEnvelope
  add(path_564952, "name", newJString(name))
  add(path_564952, "subscriptionId", newJString(subscriptionId))
  add(path_564952, "resourceGroupName", newJString(resourceGroupName))
  result = call_564951.call(path_564952, query_564953, nil, nil, body_564954)

var hostingEnvironmentsCreateOrUpdateMultiRolePool* = Call_HostingEnvironmentsCreateOrUpdateMultiRolePool_564942(
    name: "hostingEnvironmentsCreateOrUpdateMultiRolePool",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsCreateOrUpdateMultiRolePool_564943,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateMultiRolePool_564944,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePool_564931 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetMultiRolePool_564933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePool_564932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564934 = path.getOrDefault("name")
  valid_564934 = validateParameter(valid_564934, JString, required = true,
                                 default = nil)
  if valid_564934 != nil:
    section.add "name", valid_564934
  var valid_564935 = path.getOrDefault("subscriptionId")
  valid_564935 = validateParameter(valid_564935, JString, required = true,
                                 default = nil)
  if valid_564935 != nil:
    section.add "subscriptionId", valid_564935
  var valid_564936 = path.getOrDefault("resourceGroupName")
  valid_564936 = validateParameter(valid_564936, JString, required = true,
                                 default = nil)
  if valid_564936 != nil:
    section.add "resourceGroupName", valid_564936
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564937 = query.getOrDefault("api-version")
  valid_564937 = validateParameter(valid_564937, JString, required = true,
                                 default = nil)
  if valid_564937 != nil:
    section.add "api-version", valid_564937
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564938: Call_HostingEnvironmentsGetMultiRolePool_564931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564938.validator(path, query, header, formData, body)
  let scheme = call_564938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564938.url(scheme.get, call_564938.host, call_564938.base,
                         call_564938.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564938, url, valid)

proc call*(call_564939: Call_HostingEnvironmentsGetMultiRolePool_564931;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePool
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564940 = newJObject()
  var query_564941 = newJObject()
  add(query_564941, "api-version", newJString(apiVersion))
  add(path_564940, "name", newJString(name))
  add(path_564940, "subscriptionId", newJString(subscriptionId))
  add(path_564940, "resourceGroupName", newJString(resourceGroupName))
  result = call_564939.call(path_564940, query_564941, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePool* = Call_HostingEnvironmentsGetMultiRolePool_564931(
    name: "hostingEnvironmentsGetMultiRolePool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    validator: validate_HostingEnvironmentsGetMultiRolePool_564932, base: "",
    url: url_HostingEnvironmentsGetMultiRolePool_564933, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564955 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564957(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564956(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool&gt;
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564958 = path.getOrDefault("name")
  valid_564958 = validateParameter(valid_564958, JString, required = true,
                                 default = nil)
  if valid_564958 != nil:
    section.add "name", valid_564958
  var valid_564959 = path.getOrDefault("subscriptionId")
  valid_564959 = validateParameter(valid_564959, JString, required = true,
                                 default = nil)
  if valid_564959 != nil:
    section.add "subscriptionId", valid_564959
  var valid_564960 = path.getOrDefault("instance")
  valid_564960 = validateParameter(valid_564960, JString, required = true,
                                 default = nil)
  if valid_564960 != nil:
    section.add "instance", valid_564960
  var valid_564961 = path.getOrDefault("resourceGroupName")
  valid_564961 = validateParameter(valid_564961, JString, required = true,
                                 default = nil)
  if valid_564961 != nil:
    section.add "resourceGroupName", valid_564961
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564962 = query.getOrDefault("api-version")
  valid_564962 = validateParameter(valid_564962, JString, required = true,
                                 default = nil)
  if valid_564962 != nil:
    section.add "api-version", valid_564962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564963: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564963.validator(path, query, header, formData, body)
  let scheme = call_564963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564963.url(scheme.get, call_564963.host, call_564963.base,
                         call_564963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564963, url, valid)

proc call*(call_564964: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564955;
          apiVersion: string; name: string; subscriptionId: string; instance: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool&gt;
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564965 = newJObject()
  var query_564966 = newJObject()
  add(query_564966, "api-version", newJString(apiVersion))
  add(path_564965, "name", newJString(name))
  add(path_564965, "subscriptionId", newJString(subscriptionId))
  add(path_564965, "instance", newJString(instance))
  add(path_564965, "resourceGroupName", newJString(resourceGroupName))
  result = call_564964.call(path_564965, query_564966, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564955(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564956,
    base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions_564957,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564967 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564969(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564968(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the multiRole pool
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564970 = path.getOrDefault("name")
  valid_564970 = validateParameter(valid_564970, JString, required = true,
                                 default = nil)
  if valid_564970 != nil:
    section.add "name", valid_564970
  var valid_564971 = path.getOrDefault("subscriptionId")
  valid_564971 = validateParameter(valid_564971, JString, required = true,
                                 default = nil)
  if valid_564971 != nil:
    section.add "subscriptionId", valid_564971
  var valid_564972 = path.getOrDefault("instance")
  valid_564972 = validateParameter(valid_564972, JString, required = true,
                                 default = nil)
  if valid_564972 != nil:
    section.add "instance", valid_564972
  var valid_564973 = path.getOrDefault("resourceGroupName")
  valid_564973 = validateParameter(valid_564973, JString, required = true,
                                 default = nil)
  if valid_564973 != nil:
    section.add "resourceGroupName", valid_564973
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Include instance details
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_564974 = query.getOrDefault("details")
  valid_564974 = validateParameter(valid_564974, JBool, required = false, default = nil)
  if valid_564974 != nil:
    section.add "details", valid_564974
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564975 = query.getOrDefault("api-version")
  valid_564975 = validateParameter(valid_564975, JString, required = true,
                                 default = nil)
  if valid_564975 != nil:
    section.add "api-version", valid_564975
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564976: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564976.validator(path, query, header, formData, body)
  let scheme = call_564976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564976.url(scheme.get, call_564976.host, call_564976.base,
                         call_564976.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564976, url, valid)

proc call*(call_564977: Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564967;
          apiVersion: string; name: string; subscriptionId: string; instance: string;
          resourceGroupName: string; details: bool = false): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolInstanceMetrics
  ##   details: bool
  ##          : Include instance details
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the multiRole pool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564978 = newJObject()
  var query_564979 = newJObject()
  add(query_564979, "details", newJBool(details))
  add(query_564979, "api-version", newJString(apiVersion))
  add(path_564978, "name", newJString(name))
  add(path_564978, "subscriptionId", newJString(subscriptionId))
  add(path_564978, "instance", newJString(instance))
  add(path_564978, "resourceGroupName", newJString(resourceGroupName))
  result = call_564977.call(path_564978, query_564979, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolInstanceMetrics* = Call_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564967(
    name: "hostingEnvironmentsGetMultiRolePoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564968,
    base: "", url: url_HostingEnvironmentsGetMultiRolePoolInstanceMetrics_564969,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564980 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564982(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564981(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564983 = path.getOrDefault("name")
  valid_564983 = validateParameter(valid_564983, JString, required = true,
                                 default = nil)
  if valid_564983 != nil:
    section.add "name", valid_564983
  var valid_564984 = path.getOrDefault("subscriptionId")
  valid_564984 = validateParameter(valid_564984, JString, required = true,
                                 default = nil)
  if valid_564984 != nil:
    section.add "subscriptionId", valid_564984
  var valid_564985 = path.getOrDefault("resourceGroupName")
  valid_564985 = validateParameter(valid_564985, JString, required = true,
                                 default = nil)
  if valid_564985 != nil:
    section.add "resourceGroupName", valid_564985
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564986 = query.getOrDefault("api-version")
  valid_564986 = validateParameter(valid_564986, JString, required = true,
                                 default = nil)
  if valid_564986 != nil:
    section.add "api-version", valid_564986
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564987: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564980;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_564987.validator(path, query, header, formData, body)
  let scheme = call_564987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564987.url(scheme.get, call_564987.host, call_564987.base,
                         call_564987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564987, url, valid)

proc call*(call_564988: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564980;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_564989 = newJObject()
  var query_564990 = newJObject()
  add(query_564990, "api-version", newJString(apiVersion))
  add(path_564989, "name", newJString(name))
  add(path_564989, "subscriptionId", newJString(subscriptionId))
  add(path_564989, "resourceGroupName", newJString(resourceGroupName))
  result = call_564988.call(path_564989, query_564990, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564980(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564981,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions_564982,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564991 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564993(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/multiRolePools/default/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564992(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564994 = path.getOrDefault("name")
  valid_564994 = validateParameter(valid_564994, JString, required = true,
                                 default = nil)
  if valid_564994 != nil:
    section.add "name", valid_564994
  var valid_564995 = path.getOrDefault("subscriptionId")
  valid_564995 = validateParameter(valid_564995, JString, required = true,
                                 default = nil)
  if valid_564995 != nil:
    section.add "subscriptionId", valid_564995
  var valid_564996 = path.getOrDefault("resourceGroupName")
  valid_564996 = validateParameter(valid_564996, JString, required = true,
                                 default = nil)
  if valid_564996 != nil:
    section.add "resourceGroupName", valid_564996
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Include instance details
  ##   api-version: JString (required)
  ##              : API Version
  ##   startTime: JString
  ##            : Beginning time of metrics query
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  ##   timeGrain: JString
  ##            : Time granularity of metrics query
  ##   endTime: JString
  ##          : End time of metrics query
  section = newJObject()
  var valid_564997 = query.getOrDefault("details")
  valid_564997 = validateParameter(valid_564997, JBool, required = false, default = nil)
  if valid_564997 != nil:
    section.add "details", valid_564997
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564998 = query.getOrDefault("api-version")
  valid_564998 = validateParameter(valid_564998, JString, required = true,
                                 default = nil)
  if valid_564998 != nil:
    section.add "api-version", valid_564998
  var valid_564999 = query.getOrDefault("startTime")
  valid_564999 = validateParameter(valid_564999, JString, required = false,
                                 default = nil)
  if valid_564999 != nil:
    section.add "startTime", valid_564999
  var valid_565000 = query.getOrDefault("$filter")
  valid_565000 = validateParameter(valid_565000, JString, required = false,
                                 default = nil)
  if valid_565000 != nil:
    section.add "$filter", valid_565000
  var valid_565001 = query.getOrDefault("timeGrain")
  valid_565001 = validateParameter(valid_565001, JString, required = false,
                                 default = nil)
  if valid_565001 != nil:
    section.add "timeGrain", valid_565001
  var valid_565002 = query.getOrDefault("endTime")
  valid_565002 = validateParameter(valid_565002, JString, required = false,
                                 default = nil)
  if valid_565002 != nil:
    section.add "endTime", valid_565002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565003: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565003.validator(path, query, header, formData, body)
  let scheme = call_565003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565003.url(scheme.get, call_565003.host, call_565003.base,
                         call_565003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565003, url, valid)

proc call*(call_565004: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564991;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; startTime: string = "";
          Filter: string = ""; timeGrain: string = ""; endTime: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics
  ##   details: bool
  ##          : Include instance details
  ##   apiVersion: string (required)
  ##             : API Version
  ##   startTime: string
  ##            : Beginning time of metrics query
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  ##   timeGrain: string
  ##            : Time granularity of metrics query
  ##   endTime: string
  ##          : End time of metrics query
  var path_565005 = newJObject()
  var query_565006 = newJObject()
  add(query_565006, "details", newJBool(details))
  add(query_565006, "api-version", newJString(apiVersion))
  add(query_565006, "startTime", newJString(startTime))
  add(path_565005, "name", newJString(name))
  add(path_565005, "subscriptionId", newJString(subscriptionId))
  add(path_565005, "resourceGroupName", newJString(resourceGroupName))
  add(query_565006, "$filter", newJString(Filter))
  add(query_565006, "timeGrain", newJString(timeGrain))
  add(query_565006, "endTime", newJString(endTime))
  result = call_565004.call(path_565005, query_565006, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564991(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564992,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics_564993,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetMultiRolePoolSkus_565007 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetMultiRolePoolSkus_565009(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetMultiRolePoolSkus_565008(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565010 = path.getOrDefault("name")
  valid_565010 = validateParameter(valid_565010, JString, required = true,
                                 default = nil)
  if valid_565010 != nil:
    section.add "name", valid_565010
  var valid_565011 = path.getOrDefault("subscriptionId")
  valid_565011 = validateParameter(valid_565011, JString, required = true,
                                 default = nil)
  if valid_565011 != nil:
    section.add "subscriptionId", valid_565011
  var valid_565012 = path.getOrDefault("resourceGroupName")
  valid_565012 = validateParameter(valid_565012, JString, required = true,
                                 default = nil)
  if valid_565012 != nil:
    section.add "resourceGroupName", valid_565012
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565013 = query.getOrDefault("api-version")
  valid_565013 = validateParameter(valid_565013, JString, required = true,
                                 default = nil)
  if valid_565013 != nil:
    section.add "api-version", valid_565013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565014: Call_HostingEnvironmentsGetMultiRolePoolSkus_565007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565014.validator(path, query, header, formData, body)
  let scheme = call_565014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565014.url(scheme.get, call_565014.host, call_565014.base,
                         call_565014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565014, url, valid)

proc call*(call_565015: Call_HostingEnvironmentsGetMultiRolePoolSkus_565007;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetMultiRolePoolSkus
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565016 = newJObject()
  var query_565017 = newJObject()
  add(query_565017, "api-version", newJString(apiVersion))
  add(path_565016, "name", newJString(name))
  add(path_565016, "subscriptionId", newJString(subscriptionId))
  add(path_565016, "resourceGroupName", newJString(resourceGroupName))
  result = call_565015.call(path_565016, query_565017, nil, nil, nil)

var hostingEnvironmentsGetMultiRolePoolSkus* = Call_HostingEnvironmentsGetMultiRolePoolSkus_565007(
    name: "hostingEnvironmentsGetMultiRolePoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
    validator: validate_HostingEnvironmentsGetMultiRolePoolSkus_565008, base: "",
    url: url_HostingEnvironmentsGetMultiRolePoolSkus_565009,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565018 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565020(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/multiRolePools/default/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565019(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565021 = path.getOrDefault("name")
  valid_565021 = validateParameter(valid_565021, JString, required = true,
                                 default = nil)
  if valid_565021 != nil:
    section.add "name", valid_565021
  var valid_565022 = path.getOrDefault("subscriptionId")
  valid_565022 = validateParameter(valid_565022, JString, required = true,
                                 default = nil)
  if valid_565022 != nil:
    section.add "subscriptionId", valid_565022
  var valid_565023 = path.getOrDefault("resourceGroupName")
  valid_565023 = validateParameter(valid_565023, JString, required = true,
                                 default = nil)
  if valid_565023 != nil:
    section.add "resourceGroupName", valid_565023
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565024 = query.getOrDefault("api-version")
  valid_565024 = validateParameter(valid_565024, JString, required = true,
                                 default = nil)
  if valid_565024 != nil:
    section.add "api-version", valid_565024
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565025: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565018;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565025.validator(path, query, header, formData, body)
  let scheme = call_565025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565025.url(scheme.get, call_565025.host, call_565025.base,
                         call_565025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565025, url, valid)

proc call*(call_565026: Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565018;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565027 = newJObject()
  var query_565028 = newJObject()
  add(query_565028, "api-version", newJString(apiVersion))
  add(path_565027, "name", newJString(name))
  add(path_565027, "subscriptionId", newJString(subscriptionId))
  add(path_565027, "resourceGroupName", newJString(resourceGroupName))
  result = call_565026.call(path_565027, query_565028, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages* = Call_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565018(
    name: "hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565019,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentMultiRoleUsages_565020,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperations_565029 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentOperations_565031(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperations_565030(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565032 = path.getOrDefault("name")
  valid_565032 = validateParameter(valid_565032, JString, required = true,
                                 default = nil)
  if valid_565032 != nil:
    section.add "name", valid_565032
  var valid_565033 = path.getOrDefault("subscriptionId")
  valid_565033 = validateParameter(valid_565033, JString, required = true,
                                 default = nil)
  if valid_565033 != nil:
    section.add "subscriptionId", valid_565033
  var valid_565034 = path.getOrDefault("resourceGroupName")
  valid_565034 = validateParameter(valid_565034, JString, required = true,
                                 default = nil)
  if valid_565034 != nil:
    section.add "resourceGroupName", valid_565034
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565035 = query.getOrDefault("api-version")
  valid_565035 = validateParameter(valid_565035, JString, required = true,
                                 default = nil)
  if valid_565035 != nil:
    section.add "api-version", valid_565035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565036: Call_HostingEnvironmentsGetHostingEnvironmentOperations_565029;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565036.validator(path, query, header, formData, body)
  let scheme = call_565036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565036.url(scheme.get, call_565036.host, call_565036.base,
                         call_565036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565036, url, valid)

proc call*(call_565037: Call_HostingEnvironmentsGetHostingEnvironmentOperations_565029;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperations
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565038 = newJObject()
  var query_565039 = newJObject()
  add(query_565039, "api-version", newJString(apiVersion))
  add(path_565038, "name", newJString(name))
  add(path_565038, "subscriptionId", newJString(subscriptionId))
  add(path_565038, "resourceGroupName", newJString(resourceGroupName))
  result = call_565037.call(path_565038, query_565039, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperations* = Call_HostingEnvironmentsGetHostingEnvironmentOperations_565029(
    name: "hostingEnvironmentsGetHostingEnvironmentOperations",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperations_565030,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperations_565031,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentOperation_565040 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentOperation_565042(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentOperation_565041(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565043 = path.getOrDefault("operationId")
  valid_565043 = validateParameter(valid_565043, JString, required = true,
                                 default = nil)
  if valid_565043 != nil:
    section.add "operationId", valid_565043
  var valid_565044 = path.getOrDefault("name")
  valid_565044 = validateParameter(valid_565044, JString, required = true,
                                 default = nil)
  if valid_565044 != nil:
    section.add "name", valid_565044
  var valid_565045 = path.getOrDefault("subscriptionId")
  valid_565045 = validateParameter(valid_565045, JString, required = true,
                                 default = nil)
  if valid_565045 != nil:
    section.add "subscriptionId", valid_565045
  var valid_565046 = path.getOrDefault("resourceGroupName")
  valid_565046 = validateParameter(valid_565046, JString, required = true,
                                 default = nil)
  if valid_565046 != nil:
    section.add "resourceGroupName", valid_565046
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565047 = query.getOrDefault("api-version")
  valid_565047 = validateParameter(valid_565047, JString, required = true,
                                 default = nil)
  if valid_565047 != nil:
    section.add "api-version", valid_565047
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565048: Call_HostingEnvironmentsGetHostingEnvironmentOperation_565040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565048.validator(path, query, header, formData, body)
  let scheme = call_565048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565048.url(scheme.get, call_565048.host, call_565048.base,
                         call_565048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565048, url, valid)

proc call*(call_565049: Call_HostingEnvironmentsGetHostingEnvironmentOperation_565040;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentOperation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : operation identifier GUID
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565050 = newJObject()
  var query_565051 = newJObject()
  add(query_565051, "api-version", newJString(apiVersion))
  add(path_565050, "operationId", newJString(operationId))
  add(path_565050, "name", newJString(name))
  add(path_565050, "subscriptionId", newJString(subscriptionId))
  add(path_565050, "resourceGroupName", newJString(resourceGroupName))
  result = call_565049.call(path_565050, query_565051, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentOperation* = Call_HostingEnvironmentsGetHostingEnvironmentOperation_565040(
    name: "hostingEnvironmentsGetHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentOperation_565041,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentOperation_565042,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsRebootHostingEnvironment_565052 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsRebootHostingEnvironment_565054(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsRebootHostingEnvironment_565053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565055 = path.getOrDefault("name")
  valid_565055 = validateParameter(valid_565055, JString, required = true,
                                 default = nil)
  if valid_565055 != nil:
    section.add "name", valid_565055
  var valid_565056 = path.getOrDefault("subscriptionId")
  valid_565056 = validateParameter(valid_565056, JString, required = true,
                                 default = nil)
  if valid_565056 != nil:
    section.add "subscriptionId", valid_565056
  var valid_565057 = path.getOrDefault("resourceGroupName")
  valid_565057 = validateParameter(valid_565057, JString, required = true,
                                 default = nil)
  if valid_565057 != nil:
    section.add "resourceGroupName", valid_565057
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565058 = query.getOrDefault("api-version")
  valid_565058 = validateParameter(valid_565058, JString, required = true,
                                 default = nil)
  if valid_565058 != nil:
    section.add "api-version", valid_565058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565059: Call_HostingEnvironmentsRebootHostingEnvironment_565052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565059.validator(path, query, header, formData, body)
  let scheme = call_565059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565059.url(scheme.get, call_565059.host, call_565059.base,
                         call_565059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565059, url, valid)

proc call*(call_565060: Call_HostingEnvironmentsRebootHostingEnvironment_565052;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsRebootHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565061 = newJObject()
  var query_565062 = newJObject()
  add(query_565062, "api-version", newJString(apiVersion))
  add(path_565061, "name", newJString(name))
  add(path_565061, "subscriptionId", newJString(subscriptionId))
  add(path_565061, "resourceGroupName", newJString(resourceGroupName))
  result = call_565060.call(path_565061, query_565062, nil, nil, nil)

var hostingEnvironmentsRebootHostingEnvironment* = Call_HostingEnvironmentsRebootHostingEnvironment_565052(
    name: "hostingEnvironmentsRebootHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
    validator: validate_HostingEnvironmentsRebootHostingEnvironment_565053,
    base: "", url: url_HostingEnvironmentsRebootHostingEnvironment_565054,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsResumeHostingEnvironment_565063 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsResumeHostingEnvironment_565065(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resume")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsResumeHostingEnvironment_565064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565066 = path.getOrDefault("name")
  valid_565066 = validateParameter(valid_565066, JString, required = true,
                                 default = nil)
  if valid_565066 != nil:
    section.add "name", valid_565066
  var valid_565067 = path.getOrDefault("subscriptionId")
  valid_565067 = validateParameter(valid_565067, JString, required = true,
                                 default = nil)
  if valid_565067 != nil:
    section.add "subscriptionId", valid_565067
  var valid_565068 = path.getOrDefault("resourceGroupName")
  valid_565068 = validateParameter(valid_565068, JString, required = true,
                                 default = nil)
  if valid_565068 != nil:
    section.add "resourceGroupName", valid_565068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565069 = query.getOrDefault("api-version")
  valid_565069 = validateParameter(valid_565069, JString, required = true,
                                 default = nil)
  if valid_565069 != nil:
    section.add "api-version", valid_565069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565070: Call_HostingEnvironmentsResumeHostingEnvironment_565063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565070.validator(path, query, header, formData, body)
  let scheme = call_565070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565070.url(scheme.get, call_565070.host, call_565070.base,
                         call_565070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565070, url, valid)

proc call*(call_565071: Call_HostingEnvironmentsResumeHostingEnvironment_565063;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsResumeHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565072 = newJObject()
  var query_565073 = newJObject()
  add(query_565073, "api-version", newJString(apiVersion))
  add(path_565072, "name", newJString(name))
  add(path_565072, "subscriptionId", newJString(subscriptionId))
  add(path_565072, "resourceGroupName", newJString(resourceGroupName))
  result = call_565071.call(path_565072, query_565073, nil, nil, nil)

var hostingEnvironmentsResumeHostingEnvironment* = Call_HostingEnvironmentsResumeHostingEnvironment_565063(
    name: "hostingEnvironmentsResumeHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
    validator: validate_HostingEnvironmentsResumeHostingEnvironment_565064,
    base: "", url: url_HostingEnvironmentsResumeHostingEnvironment_565065,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_565074 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentServerFarms_565076(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_565075(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565077 = path.getOrDefault("name")
  valid_565077 = validateParameter(valid_565077, JString, required = true,
                                 default = nil)
  if valid_565077 != nil:
    section.add "name", valid_565077
  var valid_565078 = path.getOrDefault("subscriptionId")
  valid_565078 = validateParameter(valid_565078, JString, required = true,
                                 default = nil)
  if valid_565078 != nil:
    section.add "subscriptionId", valid_565078
  var valid_565079 = path.getOrDefault("resourceGroupName")
  valid_565079 = validateParameter(valid_565079, JString, required = true,
                                 default = nil)
  if valid_565079 != nil:
    section.add "resourceGroupName", valid_565079
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565080 = query.getOrDefault("api-version")
  valid_565080 = validateParameter(valid_565080, JString, required = true,
                                 default = nil)
  if valid_565080 != nil:
    section.add "api-version", valid_565080
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565081: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_565074;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565081.validator(path, query, header, formData, body)
  let scheme = call_565081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565081.url(scheme.get, call_565081.host, call_565081.base,
                         call_565081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565081, url, valid)

proc call*(call_565082: Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_565074;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565083 = newJObject()
  var query_565084 = newJObject()
  add(query_565084, "api-version", newJString(apiVersion))
  add(path_565083, "name", newJString(name))
  add(path_565083, "subscriptionId", newJString(subscriptionId))
  add(path_565083, "resourceGroupName", newJString(resourceGroupName))
  result = call_565082.call(path_565083, query_565084, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentServerFarms* = Call_HostingEnvironmentsGetHostingEnvironmentServerFarms_565074(
    name: "hostingEnvironmentsGetHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentServerFarms_565075,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentServerFarms_565076,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentSites_565085 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentSites_565087(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentSites_565086(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565088 = path.getOrDefault("name")
  valid_565088 = validateParameter(valid_565088, JString, required = true,
                                 default = nil)
  if valid_565088 != nil:
    section.add "name", valid_565088
  var valid_565089 = path.getOrDefault("subscriptionId")
  valid_565089 = validateParameter(valid_565089, JString, required = true,
                                 default = nil)
  if valid_565089 != nil:
    section.add "subscriptionId", valid_565089
  var valid_565090 = path.getOrDefault("resourceGroupName")
  valid_565090 = validateParameter(valid_565090, JString, required = true,
                                 default = nil)
  if valid_565090 != nil:
    section.add "resourceGroupName", valid_565090
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565091 = query.getOrDefault("api-version")
  valid_565091 = validateParameter(valid_565091, JString, required = true,
                                 default = nil)
  if valid_565091 != nil:
    section.add "api-version", valid_565091
  var valid_565092 = query.getOrDefault("propertiesToInclude")
  valid_565092 = validateParameter(valid_565092, JString, required = false,
                                 default = nil)
  if valid_565092 != nil:
    section.add "propertiesToInclude", valid_565092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565093: Call_HostingEnvironmentsGetHostingEnvironmentSites_565085;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565093.validator(path, query, header, formData, body)
  let scheme = call_565093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565093.url(scheme.get, call_565093.host, call_565093.base,
                         call_565093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565093, url, valid)

proc call*(call_565094: Call_HostingEnvironmentsGetHostingEnvironmentSites_565085;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; propertiesToInclude: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentSites
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565095 = newJObject()
  var query_565096 = newJObject()
  add(query_565096, "api-version", newJString(apiVersion))
  add(path_565095, "name", newJString(name))
  add(path_565095, "subscriptionId", newJString(subscriptionId))
  add(query_565096, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_565095, "resourceGroupName", newJString(resourceGroupName))
  result = call_565094.call(path_565095, query_565096, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentSites* = Call_HostingEnvironmentsGetHostingEnvironmentSites_565085(
    name: "hostingEnvironmentsGetHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentSites_565086,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentSites_565087,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsSuspendHostingEnvironment_565097 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsSuspendHostingEnvironment_565099(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/suspend")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsSuspendHostingEnvironment_565098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565100 = path.getOrDefault("name")
  valid_565100 = validateParameter(valid_565100, JString, required = true,
                                 default = nil)
  if valid_565100 != nil:
    section.add "name", valid_565100
  var valid_565101 = path.getOrDefault("subscriptionId")
  valid_565101 = validateParameter(valid_565101, JString, required = true,
                                 default = nil)
  if valid_565101 != nil:
    section.add "subscriptionId", valid_565101
  var valid_565102 = path.getOrDefault("resourceGroupName")
  valid_565102 = validateParameter(valid_565102, JString, required = true,
                                 default = nil)
  if valid_565102 != nil:
    section.add "resourceGroupName", valid_565102
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565103 = query.getOrDefault("api-version")
  valid_565103 = validateParameter(valid_565103, JString, required = true,
                                 default = nil)
  if valid_565103 != nil:
    section.add "api-version", valid_565103
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565104: Call_HostingEnvironmentsSuspendHostingEnvironment_565097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565104.validator(path, query, header, formData, body)
  let scheme = call_565104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565104.url(scheme.get, call_565104.host, call_565104.base,
                         call_565104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565104, url, valid)

proc call*(call_565105: Call_HostingEnvironmentsSuspendHostingEnvironment_565097;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsSuspendHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565106 = newJObject()
  var query_565107 = newJObject()
  add(query_565107, "api-version", newJString(apiVersion))
  add(path_565106, "name", newJString(name))
  add(path_565106, "subscriptionId", newJString(subscriptionId))
  add(path_565106, "resourceGroupName", newJString(resourceGroupName))
  result = call_565105.call(path_565106, query_565107, nil, nil, nil)

var hostingEnvironmentsSuspendHostingEnvironment* = Call_HostingEnvironmentsSuspendHostingEnvironment_565097(
    name: "hostingEnvironmentsSuspendHostingEnvironment",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
    validator: validate_HostingEnvironmentsSuspendHostingEnvironment_565098,
    base: "", url: url_HostingEnvironmentsSuspendHostingEnvironment_565099,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentUsages_565108 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentUsages_565110(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentUsages_565109(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565111 = path.getOrDefault("name")
  valid_565111 = validateParameter(valid_565111, JString, required = true,
                                 default = nil)
  if valid_565111 != nil:
    section.add "name", valid_565111
  var valid_565112 = path.getOrDefault("subscriptionId")
  valid_565112 = validateParameter(valid_565112, JString, required = true,
                                 default = nil)
  if valid_565112 != nil:
    section.add "subscriptionId", valid_565112
  var valid_565113 = path.getOrDefault("resourceGroupName")
  valid_565113 = validateParameter(valid_565113, JString, required = true,
                                 default = nil)
  if valid_565113 != nil:
    section.add "resourceGroupName", valid_565113
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565114 = query.getOrDefault("api-version")
  valid_565114 = validateParameter(valid_565114, JString, required = true,
                                 default = nil)
  if valid_565114 != nil:
    section.add "api-version", valid_565114
  var valid_565115 = query.getOrDefault("$filter")
  valid_565115 = validateParameter(valid_565115, JString, required = false,
                                 default = nil)
  if valid_565115 != nil:
    section.add "$filter", valid_565115
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565116: Call_HostingEnvironmentsGetHostingEnvironmentUsages_565108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565116.validator(path, query, header, formData, body)
  let scheme = call_565116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565116.url(scheme.get, call_565116.host, call_565116.base,
                         call_565116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565116, url, valid)

proc call*(call_565117: Call_HostingEnvironmentsGetHostingEnvironmentUsages_565108;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentUsages
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565118 = newJObject()
  var query_565119 = newJObject()
  add(query_565119, "api-version", newJString(apiVersion))
  add(path_565118, "name", newJString(name))
  add(path_565118, "subscriptionId", newJString(subscriptionId))
  add(path_565118, "resourceGroupName", newJString(resourceGroupName))
  add(query_565119, "$filter", newJString(Filter))
  result = call_565117.call(path_565118, query_565119, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentUsages* = Call_HostingEnvironmentsGetHostingEnvironmentUsages_565108(
    name: "hostingEnvironmentsGetHostingEnvironmentUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
    validator: validate_HostingEnvironmentsGetHostingEnvironmentUsages_565109,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentUsages_565110,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565120 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565122(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565121(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565123 = path.getOrDefault("name")
  valid_565123 = validateParameter(valid_565123, JString, required = true,
                                 default = nil)
  if valid_565123 != nil:
    section.add "name", valid_565123
  var valid_565124 = path.getOrDefault("subscriptionId")
  valid_565124 = validateParameter(valid_565124, JString, required = true,
                                 default = nil)
  if valid_565124 != nil:
    section.add "subscriptionId", valid_565124
  var valid_565125 = path.getOrDefault("resourceGroupName")
  valid_565125 = validateParameter(valid_565125, JString, required = true,
                                 default = nil)
  if valid_565125 != nil:
    section.add "resourceGroupName", valid_565125
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565126 = query.getOrDefault("api-version")
  valid_565126 = validateParameter(valid_565126, JString, required = true,
                                 default = nil)
  if valid_565126 != nil:
    section.add "api-version", valid_565126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565127: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565120;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565127.validator(path, query, header, formData, body)
  let scheme = call_565127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565127.url(scheme.get, call_565127.host, call_565127.base,
                         call_565127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565127, url, valid)

proc call*(call_565128: Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565120;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebHostingPlans
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565129 = newJObject()
  var query_565130 = newJObject()
  add(query_565130, "api-version", newJString(apiVersion))
  add(path_565129, "name", newJString(name))
  add(path_565129, "subscriptionId", newJString(subscriptionId))
  add(path_565129, "resourceGroupName", newJString(resourceGroupName))
  result = call_565128.call(path_565129, query_565130, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebHostingPlans* = Call_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565120(
    name: "hostingEnvironmentsGetHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565121,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebHostingPlans_565122,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPools_565131 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetWorkerPools_565133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPools_565132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565134 = path.getOrDefault("name")
  valid_565134 = validateParameter(valid_565134, JString, required = true,
                                 default = nil)
  if valid_565134 != nil:
    section.add "name", valid_565134
  var valid_565135 = path.getOrDefault("subscriptionId")
  valid_565135 = validateParameter(valid_565135, JString, required = true,
                                 default = nil)
  if valid_565135 != nil:
    section.add "subscriptionId", valid_565135
  var valid_565136 = path.getOrDefault("resourceGroupName")
  valid_565136 = validateParameter(valid_565136, JString, required = true,
                                 default = nil)
  if valid_565136 != nil:
    section.add "resourceGroupName", valid_565136
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565137 = query.getOrDefault("api-version")
  valid_565137 = validateParameter(valid_565137, JString, required = true,
                                 default = nil)
  if valid_565137 != nil:
    section.add "api-version", valid_565137
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565138: Call_HostingEnvironmentsGetWorkerPools_565131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565138.validator(path, query, header, formData, body)
  let scheme = call_565138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565138.url(scheme.get, call_565138.host, call_565138.base,
                         call_565138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565138, url, valid)

proc call*(call_565139: Call_HostingEnvironmentsGetWorkerPools_565131;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## hostingEnvironmentsGetWorkerPools
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565140 = newJObject()
  var query_565141 = newJObject()
  add(query_565141, "api-version", newJString(apiVersion))
  add(path_565140, "name", newJString(name))
  add(path_565140, "subscriptionId", newJString(subscriptionId))
  add(path_565140, "resourceGroupName", newJString(resourceGroupName))
  result = call_565139.call(path_565140, query_565141, nil, nil, nil)

var hostingEnvironmentsGetWorkerPools* = Call_HostingEnvironmentsGetWorkerPools_565131(
    name: "hostingEnvironmentsGetWorkerPools", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
    validator: validate_HostingEnvironmentsGetWorkerPools_565132, base: "",
    url: url_HostingEnvironmentsGetWorkerPools_565133, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsCreateOrUpdateWorkerPool_565154 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsCreateOrUpdateWorkerPool_565156(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsCreateOrUpdateWorkerPool_565155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565157 = path.getOrDefault("name")
  valid_565157 = validateParameter(valid_565157, JString, required = true,
                                 default = nil)
  if valid_565157 != nil:
    section.add "name", valid_565157
  var valid_565158 = path.getOrDefault("subscriptionId")
  valid_565158 = validateParameter(valid_565158, JString, required = true,
                                 default = nil)
  if valid_565158 != nil:
    section.add "subscriptionId", valid_565158
  var valid_565159 = path.getOrDefault("resourceGroupName")
  valid_565159 = validateParameter(valid_565159, JString, required = true,
                                 default = nil)
  if valid_565159 != nil:
    section.add "resourceGroupName", valid_565159
  var valid_565160 = path.getOrDefault("workerPoolName")
  valid_565160 = validateParameter(valid_565160, JString, required = true,
                                 default = nil)
  if valid_565160 != nil:
    section.add "workerPoolName", valid_565160
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565161 = query.getOrDefault("api-version")
  valid_565161 = validateParameter(valid_565161, JString, required = true,
                                 default = nil)
  if valid_565161 != nil:
    section.add "api-version", valid_565161
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565163: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_565154;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565163.validator(path, query, header, formData, body)
  let scheme = call_565163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565163.url(scheme.get, call_565163.host, call_565163.base,
                         call_565163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565163, url, valid)

proc call*(call_565164: Call_HostingEnvironmentsCreateOrUpdateWorkerPool_565154;
          apiVersion: string; name: string; workerPoolEnvelope: JsonNode;
          subscriptionId: string; resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsCreateOrUpdateWorkerPool
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   workerPoolEnvelope: JObject (required)
  ##                     : Properties of worker pool
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565165 = newJObject()
  var query_565166 = newJObject()
  var body_565167 = newJObject()
  add(query_565166, "api-version", newJString(apiVersion))
  add(path_565165, "name", newJString(name))
  if workerPoolEnvelope != nil:
    body_565167 = workerPoolEnvelope
  add(path_565165, "subscriptionId", newJString(subscriptionId))
  add(path_565165, "resourceGroupName", newJString(resourceGroupName))
  add(path_565165, "workerPoolName", newJString(workerPoolName))
  result = call_565164.call(path_565165, query_565166, nil, nil, body_565167)

var hostingEnvironmentsCreateOrUpdateWorkerPool* = Call_HostingEnvironmentsCreateOrUpdateWorkerPool_565154(
    name: "hostingEnvironmentsCreateOrUpdateWorkerPool", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsCreateOrUpdateWorkerPool_565155,
    base: "", url: url_HostingEnvironmentsCreateOrUpdateWorkerPool_565156,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPool_565142 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetWorkerPool_565144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPool_565143(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565145 = path.getOrDefault("name")
  valid_565145 = validateParameter(valid_565145, JString, required = true,
                                 default = nil)
  if valid_565145 != nil:
    section.add "name", valid_565145
  var valid_565146 = path.getOrDefault("subscriptionId")
  valid_565146 = validateParameter(valid_565146, JString, required = true,
                                 default = nil)
  if valid_565146 != nil:
    section.add "subscriptionId", valid_565146
  var valid_565147 = path.getOrDefault("resourceGroupName")
  valid_565147 = validateParameter(valid_565147, JString, required = true,
                                 default = nil)
  if valid_565147 != nil:
    section.add "resourceGroupName", valid_565147
  var valid_565148 = path.getOrDefault("workerPoolName")
  valid_565148 = validateParameter(valid_565148, JString, required = true,
                                 default = nil)
  if valid_565148 != nil:
    section.add "workerPoolName", valid_565148
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565149 = query.getOrDefault("api-version")
  valid_565149 = validateParameter(valid_565149, JString, required = true,
                                 default = nil)
  if valid_565149 != nil:
    section.add "api-version", valid_565149
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565150: Call_HostingEnvironmentsGetWorkerPool_565142;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565150.validator(path, query, header, formData, body)
  let scheme = call_565150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565150.url(scheme.get, call_565150.host, call_565150.base,
                         call_565150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565150, url, valid)

proc call*(call_565151: Call_HostingEnvironmentsGetWorkerPool_565142;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsGetWorkerPool
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565152 = newJObject()
  var query_565153 = newJObject()
  add(query_565153, "api-version", newJString(apiVersion))
  add(path_565152, "name", newJString(name))
  add(path_565152, "subscriptionId", newJString(subscriptionId))
  add(path_565152, "resourceGroupName", newJString(resourceGroupName))
  add(path_565152, "workerPoolName", newJString(workerPoolName))
  result = call_565151.call(path_565152, query_565153, nil, nil, nil)

var hostingEnvironmentsGetWorkerPool* = Call_HostingEnvironmentsGetWorkerPool_565142(
    name: "hostingEnvironmentsGetWorkerPool", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    validator: validate_HostingEnvironmentsGetWorkerPool_565143, base: "",
    url: url_HostingEnvironmentsGetWorkerPool_565144, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565168 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565170(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565169(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565171 = path.getOrDefault("name")
  valid_565171 = validateParameter(valid_565171, JString, required = true,
                                 default = nil)
  if valid_565171 != nil:
    section.add "name", valid_565171
  var valid_565172 = path.getOrDefault("subscriptionId")
  valid_565172 = validateParameter(valid_565172, JString, required = true,
                                 default = nil)
  if valid_565172 != nil:
    section.add "subscriptionId", valid_565172
  var valid_565173 = path.getOrDefault("instance")
  valid_565173 = validateParameter(valid_565173, JString, required = true,
                                 default = nil)
  if valid_565173 != nil:
    section.add "instance", valid_565173
  var valid_565174 = path.getOrDefault("resourceGroupName")
  valid_565174 = validateParameter(valid_565174, JString, required = true,
                                 default = nil)
  if valid_565174 != nil:
    section.add "resourceGroupName", valid_565174
  var valid_565175 = path.getOrDefault("workerPoolName")
  valid_565175 = validateParameter(valid_565175, JString, required = true,
                                 default = nil)
  if valid_565175 != nil:
    section.add "workerPoolName", valid_565175
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565176 = query.getOrDefault("api-version")
  valid_565176 = validateParameter(valid_565176, JString, required = true,
                                 default = nil)
  if valid_565176 != nil:
    section.add "api-version", valid_565176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565177: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565177.validator(path, query, header, formData, body)
  let scheme = call_565177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565177.url(scheme.get, call_565177.host, call_565177.base,
                         call_565177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565177, url, valid)

proc call*(call_565178: Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565168;
          apiVersion: string; name: string; subscriptionId: string; instance: string;
          resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565179 = newJObject()
  var query_565180 = newJObject()
  add(query_565180, "api-version", newJString(apiVersion))
  add(path_565179, "name", newJString(name))
  add(path_565179, "subscriptionId", newJString(subscriptionId))
  add(path_565179, "instance", newJString(instance))
  add(path_565179, "resourceGroupName", newJString(resourceGroupName))
  add(path_565179, "workerPoolName", newJString(workerPoolName))
  result = call_565178.call(path_565179, query_565180, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565168(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions", validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565169,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions_565170,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565181 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565183(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  assert "instance" in path, "`instance` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instance"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565182(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   instance: JString (required)
  ##           : Name of instance in the worker pool
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565184 = path.getOrDefault("name")
  valid_565184 = validateParameter(valid_565184, JString, required = true,
                                 default = nil)
  if valid_565184 != nil:
    section.add "name", valid_565184
  var valid_565185 = path.getOrDefault("subscriptionId")
  valid_565185 = validateParameter(valid_565185, JString, required = true,
                                 default = nil)
  if valid_565185 != nil:
    section.add "subscriptionId", valid_565185
  var valid_565186 = path.getOrDefault("instance")
  valid_565186 = validateParameter(valid_565186, JString, required = true,
                                 default = nil)
  if valid_565186 != nil:
    section.add "instance", valid_565186
  var valid_565187 = path.getOrDefault("resourceGroupName")
  valid_565187 = validateParameter(valid_565187, JString, required = true,
                                 default = nil)
  if valid_565187 != nil:
    section.add "resourceGroupName", valid_565187
  var valid_565188 = path.getOrDefault("workerPoolName")
  valid_565188 = validateParameter(valid_565188, JString, required = true,
                                 default = nil)
  if valid_565188 != nil:
    section.add "workerPoolName", valid_565188
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Include instance details
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_565189 = query.getOrDefault("details")
  valid_565189 = validateParameter(valid_565189, JBool, required = false, default = nil)
  if valid_565189 != nil:
    section.add "details", valid_565189
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565190 = query.getOrDefault("api-version")
  valid_565190 = validateParameter(valid_565190, JString, required = true,
                                 default = nil)
  if valid_565190 != nil:
    section.add "api-version", valid_565190
  var valid_565191 = query.getOrDefault("$filter")
  valid_565191 = validateParameter(valid_565191, JString, required = false,
                                 default = nil)
  if valid_565191 != nil:
    section.add "$filter", valid_565191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565192: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565192.validator(path, query, header, formData, body)
  let scheme = call_565192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565192.url(scheme.get, call_565192.host, call_565192.base,
                         call_565192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565192, url, valid)

proc call*(call_565193: Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565181;
          apiVersion: string; name: string; subscriptionId: string; instance: string;
          resourceGroupName: string; workerPoolName: string; details: bool = false;
          Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetWorkerPoolInstanceMetrics
  ##   details: bool
  ##          : Include instance details
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   instance: string (required)
  ##           : Name of instance in the worker pool
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565194 = newJObject()
  var query_565195 = newJObject()
  add(query_565195, "details", newJBool(details))
  add(query_565195, "api-version", newJString(apiVersion))
  add(path_565194, "name", newJString(name))
  add(path_565194, "subscriptionId", newJString(subscriptionId))
  add(path_565194, "instance", newJString(instance))
  add(path_565194, "resourceGroupName", newJString(resourceGroupName))
  add(query_565195, "$filter", newJString(Filter))
  add(path_565194, "workerPoolName", newJString(workerPoolName))
  result = call_565193.call(path_565194, query_565195, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolInstanceMetrics* = Call_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565181(
    name: "hostingEnvironmentsGetWorkerPoolInstanceMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics",
    validator: validate_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565182,
    base: "", url: url_HostingEnvironmentsGetWorkerPoolInstanceMetrics_565183,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565196 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565198(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565197(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565199 = path.getOrDefault("name")
  valid_565199 = validateParameter(valid_565199, JString, required = true,
                                 default = nil)
  if valid_565199 != nil:
    section.add "name", valid_565199
  var valid_565200 = path.getOrDefault("subscriptionId")
  valid_565200 = validateParameter(valid_565200, JString, required = true,
                                 default = nil)
  if valid_565200 != nil:
    section.add "subscriptionId", valid_565200
  var valid_565201 = path.getOrDefault("resourceGroupName")
  valid_565201 = validateParameter(valid_565201, JString, required = true,
                                 default = nil)
  if valid_565201 != nil:
    section.add "resourceGroupName", valid_565201
  var valid_565202 = path.getOrDefault("workerPoolName")
  valid_565202 = validateParameter(valid_565202, JString, required = true,
                                 default = nil)
  if valid_565202 != nil:
    section.add "workerPoolName", valid_565202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565203 = query.getOrDefault("api-version")
  valid_565203 = validateParameter(valid_565203, JString, required = true,
                                 default = nil)
  if valid_565203 != nil:
    section.add "api-version", valid_565203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565204: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565196;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565204.validator(path, query, header, formData, body)
  let scheme = call_565204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565204.url(scheme.get, call_565204.host, call_565204.base,
                         call_565204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565204, url, valid)

proc call*(call_565205: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565196;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565206 = newJObject()
  var query_565207 = newJObject()
  add(query_565207, "api-version", newJString(apiVersion))
  add(path_565206, "name", newJString(name))
  add(path_565206, "subscriptionId", newJString(subscriptionId))
  add(path_565206, "resourceGroupName", newJString(resourceGroupName))
  add(path_565206, "workerPoolName", newJString(workerPoolName))
  result = call_565205.call(path_565206, query_565207, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565196(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565197,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions_565198,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565208 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565210(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565209(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565211 = path.getOrDefault("name")
  valid_565211 = validateParameter(valid_565211, JString, required = true,
                                 default = nil)
  if valid_565211 != nil:
    section.add "name", valid_565211
  var valid_565212 = path.getOrDefault("subscriptionId")
  valid_565212 = validateParameter(valid_565212, JString, required = true,
                                 default = nil)
  if valid_565212 != nil:
    section.add "subscriptionId", valid_565212
  var valid_565213 = path.getOrDefault("resourceGroupName")
  valid_565213 = validateParameter(valid_565213, JString, required = true,
                                 default = nil)
  if valid_565213 != nil:
    section.add "resourceGroupName", valid_565213
  var valid_565214 = path.getOrDefault("workerPoolName")
  valid_565214 = validateParameter(valid_565214, JString, required = true,
                                 default = nil)
  if valid_565214 != nil:
    section.add "workerPoolName", valid_565214
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Include instance details
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_565215 = query.getOrDefault("details")
  valid_565215 = validateParameter(valid_565215, JBool, required = false, default = nil)
  if valid_565215 != nil:
    section.add "details", valid_565215
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565216 = query.getOrDefault("api-version")
  valid_565216 = validateParameter(valid_565216, JString, required = true,
                                 default = nil)
  if valid_565216 != nil:
    section.add "api-version", valid_565216
  var valid_565217 = query.getOrDefault("$filter")
  valid_565217 = validateParameter(valid_565217, JString, required = false,
                                 default = nil)
  if valid_565217 != nil:
    section.add "$filter", valid_565217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565218: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565218.validator(path, query, header, formData, body)
  let scheme = call_565218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565218.url(scheme.get, call_565218.host, call_565218.base,
                         call_565218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565218, url, valid)

proc call*(call_565219: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565208;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerPoolName: string; details: bool = false;
          Filter: string = ""): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics
  ##   details: bool
  ##          : Include instance details
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565220 = newJObject()
  var query_565221 = newJObject()
  add(query_565221, "details", newJBool(details))
  add(query_565221, "api-version", newJString(apiVersion))
  add(path_565220, "name", newJString(name))
  add(path_565220, "subscriptionId", newJString(subscriptionId))
  add(path_565220, "resourceGroupName", newJString(resourceGroupName))
  add(query_565221, "$filter", newJString(Filter))
  add(path_565220, "workerPoolName", newJString(workerPoolName))
  result = call_565219.call(path_565220, query_565221, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565208(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565209,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics_565210,
    schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetWorkerPoolSkus_565222 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetWorkerPoolSkus_565224(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/skus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetWorkerPoolSkus_565223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565225 = path.getOrDefault("name")
  valid_565225 = validateParameter(valid_565225, JString, required = true,
                                 default = nil)
  if valid_565225 != nil:
    section.add "name", valid_565225
  var valid_565226 = path.getOrDefault("subscriptionId")
  valid_565226 = validateParameter(valid_565226, JString, required = true,
                                 default = nil)
  if valid_565226 != nil:
    section.add "subscriptionId", valid_565226
  var valid_565227 = path.getOrDefault("resourceGroupName")
  valid_565227 = validateParameter(valid_565227, JString, required = true,
                                 default = nil)
  if valid_565227 != nil:
    section.add "resourceGroupName", valid_565227
  var valid_565228 = path.getOrDefault("workerPoolName")
  valid_565228 = validateParameter(valid_565228, JString, required = true,
                                 default = nil)
  if valid_565228 != nil:
    section.add "workerPoolName", valid_565228
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565229 = query.getOrDefault("api-version")
  valid_565229 = validateParameter(valid_565229, JString, required = true,
                                 default = nil)
  if valid_565229 != nil:
    section.add "api-version", valid_565229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565230: Call_HostingEnvironmentsGetWorkerPoolSkus_565222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565230.validator(path, query, header, formData, body)
  let scheme = call_565230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565230.url(scheme.get, call_565230.host, call_565230.base,
                         call_565230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565230, url, valid)

proc call*(call_565231: Call_HostingEnvironmentsGetWorkerPoolSkus_565222;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsGetWorkerPoolSkus
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565232 = newJObject()
  var query_565233 = newJObject()
  add(query_565233, "api-version", newJString(apiVersion))
  add(path_565232, "name", newJString(name))
  add(path_565232, "subscriptionId", newJString(subscriptionId))
  add(path_565232, "resourceGroupName", newJString(resourceGroupName))
  add(path_565232, "workerPoolName", newJString(workerPoolName))
  result = call_565231.call(path_565232, query_565233, nil, nil, nil)

var hostingEnvironmentsGetWorkerPoolSkus* = Call_HostingEnvironmentsGetWorkerPoolSkus_565222(
    name: "hostingEnvironmentsGetWorkerPoolSkus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
    validator: validate_HostingEnvironmentsGetWorkerPoolSkus_565223, base: "",
    url: url_HostingEnvironmentsGetWorkerPoolSkus_565224, schemes: {Scheme.Https})
type
  Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565234 = ref object of OpenApiRestCall_563548
proc url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565236(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerPoolName" in path, "`workerPoolName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/hostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workerPools/"),
               (kind: VariableSegment, value: "workerPoolName"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565235(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerPoolName: JString (required)
  ##                 : Name of worker pool
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565237 = path.getOrDefault("name")
  valid_565237 = validateParameter(valid_565237, JString, required = true,
                                 default = nil)
  if valid_565237 != nil:
    section.add "name", valid_565237
  var valid_565238 = path.getOrDefault("subscriptionId")
  valid_565238 = validateParameter(valid_565238, JString, required = true,
                                 default = nil)
  if valid_565238 != nil:
    section.add "subscriptionId", valid_565238
  var valid_565239 = path.getOrDefault("resourceGroupName")
  valid_565239 = validateParameter(valid_565239, JString, required = true,
                                 default = nil)
  if valid_565239 != nil:
    section.add "resourceGroupName", valid_565239
  var valid_565240 = path.getOrDefault("workerPoolName")
  valid_565240 = validateParameter(valid_565240, JString, required = true,
                                 default = nil)
  if valid_565240 != nil:
    section.add "workerPoolName", valid_565240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565241 = query.getOrDefault("api-version")
  valid_565241 = validateParameter(valid_565241, JString, required = true,
                                 default = nil)
  if valid_565241 != nil:
    section.add "api-version", valid_565241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565242: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565242.validator(path, query, header, formData, body)
  let scheme = call_565242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565242.url(scheme.get, call_565242.host, call_565242.base,
                         call_565242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565242, url, valid)

proc call*(call_565243: Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565234;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerPoolName: string): Recallable =
  ## hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of hostingEnvironment (App Service Environment)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerPoolName: string (required)
  ##                 : Name of worker pool
  var path_565244 = newJObject()
  var query_565245 = newJObject()
  add(query_565245, "api-version", newJString(apiVersion))
  add(path_565244, "name", newJString(name))
  add(path_565244, "subscriptionId", newJString(subscriptionId))
  add(path_565244, "resourceGroupName", newJString(resourceGroupName))
  add(path_565244, "workerPoolName", newJString(workerPoolName))
  result = call_565243.call(path_565244, query_565245, nil, nil, nil)

var hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages* = Call_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565234(
    name: "hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages", validator: validate_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565235,
    base: "", url: url_HostingEnvironmentsGetHostingEnvironmentWebWorkerUsages_565236,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565246 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565248(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565247(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_565249 = path.getOrDefault("subscriptionId")
  valid_565249 = validateParameter(valid_565249, JString, required = true,
                                 default = nil)
  if valid_565249 != nil:
    section.add "subscriptionId", valid_565249
  var valid_565250 = path.getOrDefault("resourceGroupName")
  valid_565250 = validateParameter(valid_565250, JString, required = true,
                                 default = nil)
  if valid_565250 != nil:
    section.add "resourceGroupName", valid_565250
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565251 = query.getOrDefault("api-version")
  valid_565251 = validateParameter(valid_565251, JString, required = true,
                                 default = nil)
  if valid_565251 != nil:
    section.add "api-version", valid_565251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565252: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565252.validator(path, query, header, formData, body)
  let scheme = call_565252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565252.url(scheme.get, call_565252.host, call_565252.base,
                         call_565252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565252, url, valid)

proc call*(call_565253: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565246;
          apiVersion: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565254 = newJObject()
  var query_565255 = newJObject()
  add(query_565255, "api-version", newJString(apiVersion))
  add(path_565254, "subscriptionId", newJString(subscriptionId))
  add(path_565254, "resourceGroupName", newJString(resourceGroupName))
  result = call_565253.call(path_565254, query_565255, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironments* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565246(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironments",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565247,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironments_565248,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565267 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565269(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565268(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565270 = path.getOrDefault("name")
  valid_565270 = validateParameter(valid_565270, JString, required = true,
                                 default = nil)
  if valid_565270 != nil:
    section.add "name", valid_565270
  var valid_565271 = path.getOrDefault("subscriptionId")
  valid_565271 = validateParameter(valid_565271, JString, required = true,
                                 default = nil)
  if valid_565271 != nil:
    section.add "subscriptionId", valid_565271
  var valid_565272 = path.getOrDefault("resourceGroupName")
  valid_565272 = validateParameter(valid_565272, JString, required = true,
                                 default = nil)
  if valid_565272 != nil:
    section.add "resourceGroupName", valid_565272
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565273 = query.getOrDefault("api-version")
  valid_565273 = validateParameter(valid_565273, JString, required = true,
                                 default = nil)
  if valid_565273 != nil:
    section.add "api-version", valid_565273
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565275: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565267;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565275.validator(path, query, header, formData, body)
  let scheme = call_565275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565275.url(scheme.get, call_565275.host, call_565275.base,
                         call_565275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565275, url, valid)

proc call*(call_565276: Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565267;
          apiVersion: string; ManagedHostingEnvironmentEnvelope: JsonNode;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   ManagedHostingEnvironmentEnvelope: JObject (required)
  ##                                    : Properties of managed hosting environment
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565277 = newJObject()
  var query_565278 = newJObject()
  var body_565279 = newJObject()
  add(query_565278, "api-version", newJString(apiVersion))
  if ManagedHostingEnvironmentEnvelope != nil:
    body_565279 = ManagedHostingEnvironmentEnvelope
  add(path_565277, "name", newJString(name))
  add(path_565277, "subscriptionId", newJString(subscriptionId))
  add(path_565277, "resourceGroupName", newJString(resourceGroupName))
  result = call_565276.call(path_565277, query_565278, nil, nil, body_565279)

var managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565267(
    name: "managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565268,
    base: "",
    url: url_ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment_565269,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565256 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565258(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565257(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565259 = path.getOrDefault("name")
  valid_565259 = validateParameter(valid_565259, JString, required = true,
                                 default = nil)
  if valid_565259 != nil:
    section.add "name", valid_565259
  var valid_565260 = path.getOrDefault("subscriptionId")
  valid_565260 = validateParameter(valid_565260, JString, required = true,
                                 default = nil)
  if valid_565260 != nil:
    section.add "subscriptionId", valid_565260
  var valid_565261 = path.getOrDefault("resourceGroupName")
  valid_565261 = validateParameter(valid_565261, JString, required = true,
                                 default = nil)
  if valid_565261 != nil:
    section.add "resourceGroupName", valid_565261
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565262 = query.getOrDefault("api-version")
  valid_565262 = validateParameter(valid_565262, JString, required = true,
                                 default = nil)
  if valid_565262 != nil:
    section.add "api-version", valid_565262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565263: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565256;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565263.validator(path, query, header, formData, body)
  let scheme = call_565263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565263.url(scheme.get, call_565263.host, call_565263.base,
                         call_565263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565263, url, valid)

proc call*(call_565264: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565256;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565265 = newJObject()
  var query_565266 = newJObject()
  add(query_565266, "api-version", newJString(apiVersion))
  add(path_565265, "name", newJString(name))
  add(path_565265, "subscriptionId", newJString(subscriptionId))
  add(path_565265, "resourceGroupName", newJString(resourceGroupName))
  result = call_565264.call(path_565265, query_565266, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565256(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironment",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
    validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565257,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironment_565258,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565280 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565282(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565281(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565283 = path.getOrDefault("name")
  valid_565283 = validateParameter(valid_565283, JString, required = true,
                                 default = nil)
  if valid_565283 != nil:
    section.add "name", valid_565283
  var valid_565284 = path.getOrDefault("subscriptionId")
  valid_565284 = validateParameter(valid_565284, JString, required = true,
                                 default = nil)
  if valid_565284 != nil:
    section.add "subscriptionId", valid_565284
  var valid_565285 = path.getOrDefault("resourceGroupName")
  valid_565285 = validateParameter(valid_565285, JString, required = true,
                                 default = nil)
  if valid_565285 != nil:
    section.add "resourceGroupName", valid_565285
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   forceDelete: JBool
  ##              : Delete even if the managed hosting environment contains resources
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565286 = query.getOrDefault("api-version")
  valid_565286 = validateParameter(valid_565286, JString, required = true,
                                 default = nil)
  if valid_565286 != nil:
    section.add "api-version", valid_565286
  var valid_565287 = query.getOrDefault("forceDelete")
  valid_565287 = validateParameter(valid_565287, JBool, required = false, default = nil)
  if valid_565287 != nil:
    section.add "forceDelete", valid_565287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565288: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565280;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565288.validator(path, query, header, formData, body)
  let scheme = call_565288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565288.url(scheme.get, call_565288.host, call_565288.base,
                         call_565288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565288, url, valid)

proc call*(call_565289: Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565280;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; forceDelete: bool = false): Recallable =
  ## managedHostingEnvironmentsDeleteManagedHostingEnvironment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   forceDelete: bool
  ##              : Delete even if the managed hosting environment contains resources
  var path_565290 = newJObject()
  var query_565291 = newJObject()
  add(query_565291, "api-version", newJString(apiVersion))
  add(path_565290, "name", newJString(name))
  add(path_565290, "subscriptionId", newJString(subscriptionId))
  add(path_565290, "resourceGroupName", newJString(resourceGroupName))
  add(query_565291, "forceDelete", newJBool(forceDelete))
  result = call_565289.call(path_565290, query_565291, nil, nil, nil)

var managedHostingEnvironmentsDeleteManagedHostingEnvironment* = Call_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565280(
    name: "managedHostingEnvironmentsDeleteManagedHostingEnvironment",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}", validator: validate_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565281,
    base: "", url: url_ManagedHostingEnvironmentsDeleteManagedHostingEnvironment_565282,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565292 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565294(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/capacities/virtualip")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565293(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565295 = path.getOrDefault("name")
  valid_565295 = validateParameter(valid_565295, JString, required = true,
                                 default = nil)
  if valid_565295 != nil:
    section.add "name", valid_565295
  var valid_565296 = path.getOrDefault("subscriptionId")
  valid_565296 = validateParameter(valid_565296, JString, required = true,
                                 default = nil)
  if valid_565296 != nil:
    section.add "subscriptionId", valid_565296
  var valid_565297 = path.getOrDefault("resourceGroupName")
  valid_565297 = validateParameter(valid_565297, JString, required = true,
                                 default = nil)
  if valid_565297 != nil:
    section.add "resourceGroupName", valid_565297
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565298 = query.getOrDefault("api-version")
  valid_565298 = validateParameter(valid_565298, JString, required = true,
                                 default = nil)
  if valid_565298 != nil:
    section.add "api-version", valid_565298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565299: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565299.validator(path, query, header, formData, body)
  let scheme = call_565299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565299.url(scheme.get, call_565299.host, call_565299.base,
                         call_565299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565299, url, valid)

proc call*(call_565300: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565292;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentVips
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565301 = newJObject()
  var query_565302 = newJObject()
  add(query_565302, "api-version", newJString(apiVersion))
  add(path_565301, "name", newJString(name))
  add(path_565301, "subscriptionId", newJString(subscriptionId))
  add(path_565301, "resourceGroupName", newJString(resourceGroupName))
  result = call_565300.call(path_565301, query_565302, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentVips* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565292(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentVips",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565293,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentVips_565294,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565303 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565305(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operations/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565304(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : operation identifier GUID
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565306 = path.getOrDefault("operationId")
  valid_565306 = validateParameter(valid_565306, JString, required = true,
                                 default = nil)
  if valid_565306 != nil:
    section.add "operationId", valid_565306
  var valid_565307 = path.getOrDefault("name")
  valid_565307 = validateParameter(valid_565307, JString, required = true,
                                 default = nil)
  if valid_565307 != nil:
    section.add "name", valid_565307
  var valid_565308 = path.getOrDefault("subscriptionId")
  valid_565308 = validateParameter(valid_565308, JString, required = true,
                                 default = nil)
  if valid_565308 != nil:
    section.add "subscriptionId", valid_565308
  var valid_565309 = path.getOrDefault("resourceGroupName")
  valid_565309 = validateParameter(valid_565309, JString, required = true,
                                 default = nil)
  if valid_565309 != nil:
    section.add "resourceGroupName", valid_565309
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565310 = query.getOrDefault("api-version")
  valid_565310 = validateParameter(valid_565310, JString, required = true,
                                 default = nil)
  if valid_565310 != nil:
    section.add "api-version", valid_565310
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565311: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565303;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565311.validator(path, query, header, formData, body)
  let scheme = call_565311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565311.url(scheme.get, call_565311.host, call_565311.base,
                         call_565311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565311, url, valid)

proc call*(call_565312: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565303;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentOperation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : operation identifier GUID
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565313 = newJObject()
  var query_565314 = newJObject()
  add(query_565314, "api-version", newJString(apiVersion))
  add(path_565313, "operationId", newJString(operationId))
  add(path_565313, "name", newJString(name))
  add(path_565313, "subscriptionId", newJString(subscriptionId))
  add(path_565313, "resourceGroupName", newJString(resourceGroupName))
  result = call_565312.call(path_565313, query_565314, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentOperation* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565303(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentOperation",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565304,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperation_565305,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565315 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565317(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565316(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565318 = path.getOrDefault("name")
  valid_565318 = validateParameter(valid_565318, JString, required = true,
                                 default = nil)
  if valid_565318 != nil:
    section.add "name", valid_565318
  var valid_565319 = path.getOrDefault("subscriptionId")
  valid_565319 = validateParameter(valid_565319, JString, required = true,
                                 default = nil)
  if valid_565319 != nil:
    section.add "subscriptionId", valid_565319
  var valid_565320 = path.getOrDefault("resourceGroupName")
  valid_565320 = validateParameter(valid_565320, JString, required = true,
                                 default = nil)
  if valid_565320 != nil:
    section.add "resourceGroupName", valid_565320
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565321 = query.getOrDefault("api-version")
  valid_565321 = validateParameter(valid_565321, JString, required = true,
                                 default = nil)
  if valid_565321 != nil:
    section.add "api-version", valid_565321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565322: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565322.validator(path, query, header, formData, body)
  let scheme = call_565322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565322.url(scheme.get, call_565322.host, call_565322.base,
                         call_565322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565322, url, valid)

proc call*(call_565323: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565315;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565324 = newJObject()
  var query_565325 = newJObject()
  add(query_565325, "api-version", newJString(apiVersion))
  add(path_565324, "name", newJString(name))
  add(path_565324, "subscriptionId", newJString(subscriptionId))
  add(path_565324, "resourceGroupName", newJString(resourceGroupName))
  result = call_565323.call(path_565324, query_565325, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565315(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565316,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms_565317,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565326 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565328(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565327(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565329 = path.getOrDefault("name")
  valid_565329 = validateParameter(valid_565329, JString, required = true,
                                 default = nil)
  if valid_565329 != nil:
    section.add "name", valid_565329
  var valid_565330 = path.getOrDefault("subscriptionId")
  valid_565330 = validateParameter(valid_565330, JString, required = true,
                                 default = nil)
  if valid_565330 != nil:
    section.add "subscriptionId", valid_565330
  var valid_565331 = path.getOrDefault("resourceGroupName")
  valid_565331 = validateParameter(valid_565331, JString, required = true,
                                 default = nil)
  if valid_565331 != nil:
    section.add "resourceGroupName", valid_565331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : Comma separated list of site properties to include
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565332 = query.getOrDefault("api-version")
  valid_565332 = validateParameter(valid_565332, JString, required = true,
                                 default = nil)
  if valid_565332 != nil:
    section.add "api-version", valid_565332
  var valid_565333 = query.getOrDefault("propertiesToInclude")
  valid_565333 = validateParameter(valid_565333, JString, required = false,
                                 default = nil)
  if valid_565333 != nil:
    section.add "propertiesToInclude", valid_565333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565334: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565334.validator(path, query, header, formData, body)
  let scheme = call_565334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565334.url(scheme.get, call_565334.host, call_565334.base,
                         call_565334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565334, url, valid)

proc call*(call_565335: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565326;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; propertiesToInclude: string = ""): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentSites
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Comma separated list of site properties to include
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565336 = newJObject()
  var query_565337 = newJObject()
  add(query_565337, "api-version", newJString(apiVersion))
  add(path_565336, "name", newJString(name))
  add(path_565336, "subscriptionId", newJString(subscriptionId))
  add(query_565337, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_565336, "resourceGroupName", newJString(resourceGroupName))
  result = call_565335.call(path_565336, query_565337, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentSites* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565326(
    name: "managedHostingEnvironmentsGetManagedHostingEnvironmentSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565327,
    base: "",
    url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentSites_565328,
    schemes: {Scheme.Https})
type
  Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565338 = ref object of OpenApiRestCall_563548
proc url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565340(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Web/managedHostingEnvironments/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webhostingplans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565339(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565341 = path.getOrDefault("name")
  valid_565341 = validateParameter(valid_565341, JString, required = true,
                                 default = nil)
  if valid_565341 != nil:
    section.add "name", valid_565341
  var valid_565342 = path.getOrDefault("subscriptionId")
  valid_565342 = validateParameter(valid_565342, JString, required = true,
                                 default = nil)
  if valid_565342 != nil:
    section.add "subscriptionId", valid_565342
  var valid_565343 = path.getOrDefault("resourceGroupName")
  valid_565343 = validateParameter(valid_565343, JString, required = true,
                                 default = nil)
  if valid_565343 != nil:
    section.add "resourceGroupName", valid_565343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565344 = query.getOrDefault("api-version")
  valid_565344 = validateParameter(valid_565344, JString, required = true,
                                 default = nil)
  if valid_565344 != nil:
    section.add "api-version", valid_565344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565345: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565338;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565345.validator(path, query, header, formData, body)
  let scheme = call_565345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565345.url(scheme.get, call_565345.host, call_565345.base,
                         call_565345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565345, url, valid)

proc call*(call_565346: Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565338;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of managed hosting environment
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565347 = newJObject()
  var query_565348 = newJObject()
  add(query_565348, "api-version", newJString(apiVersion))
  add(path_565347, "name", newJString(name))
  add(path_565347, "subscriptionId", newJString(subscriptionId))
  add(path_565347, "resourceGroupName", newJString(resourceGroupName))
  result = call_565346.call(path_565347, query_565348, nil, nil, nil)

var managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans* = Call_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565338(name: "managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans", validator: validate_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565339,
    base: "", url: url_ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans_565340,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarms_565349 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarms_565351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarms_565350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_565352 = path.getOrDefault("subscriptionId")
  valid_565352 = validateParameter(valid_565352, JString, required = true,
                                 default = nil)
  if valid_565352 != nil:
    section.add "subscriptionId", valid_565352
  var valid_565353 = path.getOrDefault("resourceGroupName")
  valid_565353 = validateParameter(valid_565353, JString, required = true,
                                 default = nil)
  if valid_565353 != nil:
    section.add "resourceGroupName", valid_565353
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565354 = query.getOrDefault("api-version")
  valid_565354 = validateParameter(valid_565354, JString, required = true,
                                 default = nil)
  if valid_565354 != nil:
    section.add "api-version", valid_565354
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565355: Call_ServerFarmsGetServerFarms_565349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565355.validator(path, query, header, formData, body)
  let scheme = call_565355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565355.url(scheme.get, call_565355.host, call_565355.base,
                         call_565355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565355, url, valid)

proc call*(call_565356: Call_ServerFarmsGetServerFarms_565349; apiVersion: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## serverFarmsGetServerFarms
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565357 = newJObject()
  var query_565358 = newJObject()
  add(query_565358, "api-version", newJString(apiVersion))
  add(path_565357, "subscriptionId", newJString(subscriptionId))
  add(path_565357, "resourceGroupName", newJString(resourceGroupName))
  result = call_565356.call(path_565357, query_565358, nil, nil, nil)

var serverFarmsGetServerFarms* = Call_ServerFarmsGetServerFarms_565349(
    name: "serverFarmsGetServerFarms", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
    validator: validate_ServerFarmsGetServerFarms_565350, base: "",
    url: url_ServerFarmsGetServerFarms_565351, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateServerFarm_565370 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsCreateOrUpdateServerFarm_565372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateServerFarm_565371(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565373 = path.getOrDefault("name")
  valid_565373 = validateParameter(valid_565373, JString, required = true,
                                 default = nil)
  if valid_565373 != nil:
    section.add "name", valid_565373
  var valid_565374 = path.getOrDefault("subscriptionId")
  valid_565374 = validateParameter(valid_565374, JString, required = true,
                                 default = nil)
  if valid_565374 != nil:
    section.add "subscriptionId", valid_565374
  var valid_565375 = path.getOrDefault("resourceGroupName")
  valid_565375 = validateParameter(valid_565375, JString, required = true,
                                 default = nil)
  if valid_565375 != nil:
    section.add "resourceGroupName", valid_565375
  result.add "path", section
  ## parameters in `query` object:
  ##   allowPendingState: JBool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  var valid_565376 = query.getOrDefault("allowPendingState")
  valid_565376 = validateParameter(valid_565376, JBool, required = false, default = nil)
  if valid_565376 != nil:
    section.add "allowPendingState", valid_565376
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565377 = query.getOrDefault("api-version")
  valid_565377 = validateParameter(valid_565377, JString, required = true,
                                 default = nil)
  if valid_565377 != nil:
    section.add "api-version", valid_565377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565379: Call_ServerFarmsCreateOrUpdateServerFarm_565370;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565379.validator(path, query, header, formData, body)
  let scheme = call_565379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565379.url(scheme.get, call_565379.host, call_565379.base,
                         call_565379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565379, url, valid)

proc call*(call_565380: Call_ServerFarmsCreateOrUpdateServerFarm_565370;
          apiVersion: string; name: string; subscriptionId: string;
          serverFarmEnvelope: JsonNode; resourceGroupName: string;
          allowPendingState: bool = false): Recallable =
  ## serverFarmsCreateOrUpdateServerFarm
  ##   allowPendingState: bool
  ##                    : OBSOLETE: If true, allow pending state for App Service Plan
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   serverFarmEnvelope: JObject (required)
  ##                     : Details of App Service Plan
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565381 = newJObject()
  var query_565382 = newJObject()
  var body_565383 = newJObject()
  add(query_565382, "allowPendingState", newJBool(allowPendingState))
  add(query_565382, "api-version", newJString(apiVersion))
  add(path_565381, "name", newJString(name))
  add(path_565381, "subscriptionId", newJString(subscriptionId))
  if serverFarmEnvelope != nil:
    body_565383 = serverFarmEnvelope
  add(path_565381, "resourceGroupName", newJString(resourceGroupName))
  result = call_565380.call(path_565381, query_565382, nil, nil, body_565383)

var serverFarmsCreateOrUpdateServerFarm* = Call_ServerFarmsCreateOrUpdateServerFarm_565370(
    name: "serverFarmsCreateOrUpdateServerFarm", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsCreateOrUpdateServerFarm_565371, base: "",
    url: url_ServerFarmsCreateOrUpdateServerFarm_565372, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarm_565359 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarm_565361(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarm_565360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565362 = path.getOrDefault("name")
  valid_565362 = validateParameter(valid_565362, JString, required = true,
                                 default = nil)
  if valid_565362 != nil:
    section.add "name", valid_565362
  var valid_565363 = path.getOrDefault("subscriptionId")
  valid_565363 = validateParameter(valid_565363, JString, required = true,
                                 default = nil)
  if valid_565363 != nil:
    section.add "subscriptionId", valid_565363
  var valid_565364 = path.getOrDefault("resourceGroupName")
  valid_565364 = validateParameter(valid_565364, JString, required = true,
                                 default = nil)
  if valid_565364 != nil:
    section.add "resourceGroupName", valid_565364
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565365 = query.getOrDefault("api-version")
  valid_565365 = validateParameter(valid_565365, JString, required = true,
                                 default = nil)
  if valid_565365 != nil:
    section.add "api-version", valid_565365
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565366: Call_ServerFarmsGetServerFarm_565359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565366.validator(path, query, header, formData, body)
  let scheme = call_565366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565366.url(scheme.get, call_565366.host, call_565366.base,
                         call_565366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565366, url, valid)

proc call*(call_565367: Call_ServerFarmsGetServerFarm_565359; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## serverFarmsGetServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565368 = newJObject()
  var query_565369 = newJObject()
  add(query_565369, "api-version", newJString(apiVersion))
  add(path_565368, "name", newJString(name))
  add(path_565368, "subscriptionId", newJString(subscriptionId))
  add(path_565368, "resourceGroupName", newJString(resourceGroupName))
  result = call_565367.call(path_565368, query_565369, nil, nil, nil)

var serverFarmsGetServerFarm* = Call_ServerFarmsGetServerFarm_565359(
    name: "serverFarmsGetServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsGetServerFarm_565360, base: "",
    url: url_ServerFarmsGetServerFarm_565361, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteServerFarm_565384 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsDeleteServerFarm_565386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteServerFarm_565385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565387 = path.getOrDefault("name")
  valid_565387 = validateParameter(valid_565387, JString, required = true,
                                 default = nil)
  if valid_565387 != nil:
    section.add "name", valid_565387
  var valid_565388 = path.getOrDefault("subscriptionId")
  valid_565388 = validateParameter(valid_565388, JString, required = true,
                                 default = nil)
  if valid_565388 != nil:
    section.add "subscriptionId", valid_565388
  var valid_565389 = path.getOrDefault("resourceGroupName")
  valid_565389 = validateParameter(valid_565389, JString, required = true,
                                 default = nil)
  if valid_565389 != nil:
    section.add "resourceGroupName", valid_565389
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565390 = query.getOrDefault("api-version")
  valid_565390 = validateParameter(valid_565390, JString, required = true,
                                 default = nil)
  if valid_565390 != nil:
    section.add "api-version", valid_565390
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565391: Call_ServerFarmsDeleteServerFarm_565384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565391.validator(path, query, header, formData, body)
  let scheme = call_565391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565391.url(scheme.get, call_565391.host, call_565391.base,
                         call_565391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565391, url, valid)

proc call*(call_565392: Call_ServerFarmsDeleteServerFarm_565384;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsDeleteServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565393 = newJObject()
  var query_565394 = newJObject()
  add(query_565394, "api-version", newJString(apiVersion))
  add(path_565393, "name", newJString(name))
  add(path_565393, "subscriptionId", newJString(subscriptionId))
  add(path_565393, "resourceGroupName", newJString(resourceGroupName))
  result = call_565392.call(path_565393, query_565394, nil, nil, nil)

var serverFarmsDeleteServerFarm* = Call_ServerFarmsDeleteServerFarm_565384(
    name: "serverFarmsDeleteServerFarm", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
    validator: validate_ServerFarmsDeleteServerFarm_565385, base: "",
    url: url_ServerFarmsDeleteServerFarm_565386, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetricDefintions_565395 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarmMetricDefintions_565397(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetricDefintions_565396(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565398 = path.getOrDefault("name")
  valid_565398 = validateParameter(valid_565398, JString, required = true,
                                 default = nil)
  if valid_565398 != nil:
    section.add "name", valid_565398
  var valid_565399 = path.getOrDefault("subscriptionId")
  valid_565399 = validateParameter(valid_565399, JString, required = true,
                                 default = nil)
  if valid_565399 != nil:
    section.add "subscriptionId", valid_565399
  var valid_565400 = path.getOrDefault("resourceGroupName")
  valid_565400 = validateParameter(valid_565400, JString, required = true,
                                 default = nil)
  if valid_565400 != nil:
    section.add "resourceGroupName", valid_565400
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565401 = query.getOrDefault("api-version")
  valid_565401 = validateParameter(valid_565401, JString, required = true,
                                 default = nil)
  if valid_565401 != nil:
    section.add "api-version", valid_565401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565402: Call_ServerFarmsGetServerFarmMetricDefintions_565395;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565402.validator(path, query, header, formData, body)
  let scheme = call_565402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565402.url(scheme.get, call_565402.host, call_565402.base,
                         call_565402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565402, url, valid)

proc call*(call_565403: Call_ServerFarmsGetServerFarmMetricDefintions_565395;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsGetServerFarmMetricDefintions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565404 = newJObject()
  var query_565405 = newJObject()
  add(query_565405, "api-version", newJString(apiVersion))
  add(path_565404, "name", newJString(name))
  add(path_565404, "subscriptionId", newJString(subscriptionId))
  add(path_565404, "resourceGroupName", newJString(resourceGroupName))
  result = call_565403.call(path_565404, query_565405, nil, nil, nil)

var serverFarmsGetServerFarmMetricDefintions* = Call_ServerFarmsGetServerFarmMetricDefintions_565395(
    name: "serverFarmsGetServerFarmMetricDefintions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
    validator: validate_ServerFarmsGetServerFarmMetricDefintions_565396, base: "",
    url: url_ServerFarmsGetServerFarmMetricDefintions_565397,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmMetrics_565406 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarmMetrics_565408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmMetrics_565407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565409 = path.getOrDefault("name")
  valid_565409 = validateParameter(valid_565409, JString, required = true,
                                 default = nil)
  if valid_565409 != nil:
    section.add "name", valid_565409
  var valid_565410 = path.getOrDefault("subscriptionId")
  valid_565410 = validateParameter(valid_565410, JString, required = true,
                                 default = nil)
  if valid_565410 != nil:
    section.add "subscriptionId", valid_565410
  var valid_565411 = path.getOrDefault("resourceGroupName")
  valid_565411 = validateParameter(valid_565411, JString, required = true,
                                 default = nil)
  if valid_565411 != nil:
    section.add "resourceGroupName", valid_565411
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_565412 = query.getOrDefault("details")
  valid_565412 = validateParameter(valid_565412, JBool, required = false, default = nil)
  if valid_565412 != nil:
    section.add "details", valid_565412
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565413 = query.getOrDefault("api-version")
  valid_565413 = validateParameter(valid_565413, JString, required = true,
                                 default = nil)
  if valid_565413 != nil:
    section.add "api-version", valid_565413
  var valid_565414 = query.getOrDefault("$filter")
  valid_565414 = validateParameter(valid_565414, JString, required = false,
                                 default = nil)
  if valid_565414 != nil:
    section.add "$filter", valid_565414
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565415: Call_ServerFarmsGetServerFarmMetrics_565406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565415.validator(path, query, header, formData, body)
  let scheme = call_565415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565415.url(scheme.get, call_565415.host, call_565415.base,
                         call_565415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565415, url, valid)

proc call*(call_565416: Call_ServerFarmsGetServerFarmMetrics_565406;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmMetrics
  ##   details: bool
  ##          : If true, metrics are broken down per App Service Plan instance
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565417 = newJObject()
  var query_565418 = newJObject()
  add(query_565418, "details", newJBool(details))
  add(query_565418, "api-version", newJString(apiVersion))
  add(path_565417, "name", newJString(name))
  add(path_565417, "subscriptionId", newJString(subscriptionId))
  add(path_565417, "resourceGroupName", newJString(resourceGroupName))
  add(query_565418, "$filter", newJString(Filter))
  result = call_565416.call(path_565417, query_565418, nil, nil, nil)

var serverFarmsGetServerFarmMetrics* = Call_ServerFarmsGetServerFarmMetrics_565406(
    name: "serverFarmsGetServerFarmMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics",
    validator: validate_ServerFarmsGetServerFarmMetrics_565407, base: "",
    url: url_ServerFarmsGetServerFarmMetrics_565408, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmOperation_565419 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarmOperation_565421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmOperation_565420(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : Id of Server farm operation"&gt;
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565422 = path.getOrDefault("operationId")
  valid_565422 = validateParameter(valid_565422, JString, required = true,
                                 default = nil)
  if valid_565422 != nil:
    section.add "operationId", valid_565422
  var valid_565423 = path.getOrDefault("name")
  valid_565423 = validateParameter(valid_565423, JString, required = true,
                                 default = nil)
  if valid_565423 != nil:
    section.add "name", valid_565423
  var valid_565424 = path.getOrDefault("subscriptionId")
  valid_565424 = validateParameter(valid_565424, JString, required = true,
                                 default = nil)
  if valid_565424 != nil:
    section.add "subscriptionId", valid_565424
  var valid_565425 = path.getOrDefault("resourceGroupName")
  valid_565425 = validateParameter(valid_565425, JString, required = true,
                                 default = nil)
  if valid_565425 != nil:
    section.add "resourceGroupName", valid_565425
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565426 = query.getOrDefault("api-version")
  valid_565426 = validateParameter(valid_565426, JString, required = true,
                                 default = nil)
  if valid_565426 != nil:
    section.add "api-version", valid_565426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565427: Call_ServerFarmsGetServerFarmOperation_565419;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565427.validator(path, query, header, formData, body)
  let scheme = call_565427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565427.url(scheme.get, call_565427.host, call_565427.base,
                         call_565427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565427, url, valid)

proc call*(call_565428: Call_ServerFarmsGetServerFarmOperation_565419;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## serverFarmsGetServerFarmOperation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : Id of Server farm operation"&gt;
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565429 = newJObject()
  var query_565430 = newJObject()
  add(query_565430, "api-version", newJString(apiVersion))
  add(path_565429, "operationId", newJString(operationId))
  add(path_565429, "name", newJString(name))
  add(path_565429, "subscriptionId", newJString(subscriptionId))
  add(path_565429, "resourceGroupName", newJString(resourceGroupName))
  result = call_565428.call(path_565429, query_565430, nil, nil, nil)

var serverFarmsGetServerFarmOperation* = Call_ServerFarmsGetServerFarmOperation_565419(
    name: "serverFarmsGetServerFarmOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}",
    validator: validate_ServerFarmsGetServerFarmOperation_565420, base: "",
    url: url_ServerFarmsGetServerFarmOperation_565421, schemes: {Scheme.Https})
type
  Call_ServerFarmsRestartSitesForServerFarm_565431 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsRestartSitesForServerFarm_565433(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restartSites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRestartSitesForServerFarm_565432(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565434 = path.getOrDefault("name")
  valid_565434 = validateParameter(valid_565434, JString, required = true,
                                 default = nil)
  if valid_565434 != nil:
    section.add "name", valid_565434
  var valid_565435 = path.getOrDefault("subscriptionId")
  valid_565435 = validateParameter(valid_565435, JString, required = true,
                                 default = nil)
  if valid_565435 != nil:
    section.add "subscriptionId", valid_565435
  var valid_565436 = path.getOrDefault("resourceGroupName")
  valid_565436 = validateParameter(valid_565436, JString, required = true,
                                 default = nil)
  if valid_565436 != nil:
    section.add "resourceGroupName", valid_565436
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565437 = query.getOrDefault("api-version")
  valid_565437 = validateParameter(valid_565437, JString, required = true,
                                 default = nil)
  if valid_565437 != nil:
    section.add "api-version", valid_565437
  var valid_565438 = query.getOrDefault("softRestart")
  valid_565438 = validateParameter(valid_565438, JBool, required = false, default = nil)
  if valid_565438 != nil:
    section.add "softRestart", valid_565438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565439: Call_ServerFarmsRestartSitesForServerFarm_565431;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565439.validator(path, query, header, formData, body)
  let scheme = call_565439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565439.url(scheme.get, call_565439.host, call_565439.base,
                         call_565439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565439, url, valid)

proc call*(call_565440: Call_ServerFarmsRestartSitesForServerFarm_565431;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; softRestart: bool = false): Recallable =
  ## serverFarmsRestartSitesForServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
  var path_565441 = newJObject()
  var query_565442 = newJObject()
  add(query_565442, "api-version", newJString(apiVersion))
  add(path_565441, "name", newJString(name))
  add(path_565441, "subscriptionId", newJString(subscriptionId))
  add(path_565441, "resourceGroupName", newJString(resourceGroupName))
  add(query_565442, "softRestart", newJBool(softRestart))
  result = call_565440.call(path_565441, query_565442, nil, nil, nil)

var serverFarmsRestartSitesForServerFarm* = Call_ServerFarmsRestartSitesForServerFarm_565431(
    name: "serverFarmsRestartSitesForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
    validator: validate_ServerFarmsRestartSitesForServerFarm_565432, base: "",
    url: url_ServerFarmsRestartSitesForServerFarm_565433, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmSites_565443 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarmSites_565445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmSites_565444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565446 = path.getOrDefault("name")
  valid_565446 = validateParameter(valid_565446, JString, required = true,
                                 default = nil)
  if valid_565446 != nil:
    section.add "name", valid_565446
  var valid_565447 = path.getOrDefault("subscriptionId")
  valid_565447 = validateParameter(valid_565447, JString, required = true,
                                 default = nil)
  if valid_565447 != nil:
    section.add "subscriptionId", valid_565447
  var valid_565448 = path.getOrDefault("resourceGroupName")
  valid_565448 = validateParameter(valid_565448, JString, required = true,
                                 default = nil)
  if valid_565448 != nil:
    section.add "resourceGroupName", valid_565448
  result.add "path", section
  ## parameters in `query` object:
  ##   $skipToken: JString
  ##             : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   $top: JString
  ##       : List page size. If specified, results are paged.
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  section = newJObject()
  var valid_565449 = query.getOrDefault("$skipToken")
  valid_565449 = validateParameter(valid_565449, JString, required = false,
                                 default = nil)
  if valid_565449 != nil:
    section.add "$skipToken", valid_565449
  var valid_565450 = query.getOrDefault("$top")
  valid_565450 = validateParameter(valid_565450, JString, required = false,
                                 default = nil)
  if valid_565450 != nil:
    section.add "$top", valid_565450
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565451 = query.getOrDefault("api-version")
  valid_565451 = validateParameter(valid_565451, JString, required = true,
                                 default = nil)
  if valid_565451 != nil:
    section.add "api-version", valid_565451
  var valid_565452 = query.getOrDefault("$filter")
  valid_565452 = validateParameter(valid_565452, JString, required = false,
                                 default = nil)
  if valid_565452 != nil:
    section.add "$filter", valid_565452
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565453: Call_ServerFarmsGetServerFarmSites_565443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565453.validator(path, query, header, formData, body)
  let scheme = call_565453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565453.url(scheme.get, call_565453.host, call_565453.base,
                         call_565453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565453, url, valid)

proc call*(call_565454: Call_ServerFarmsGetServerFarmSites_565443;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; SkipToken: string = ""; Top: string = "";
          Filter: string = ""): Recallable =
  ## serverFarmsGetServerFarmSites
  ##   SkipToken: string
  ##            : Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
  ##   Top: string
  ##      : List page size. If specified, results are paged.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Supported filter: $filter=state eq running. Returns only web apps that are currently running
  var path_565455 = newJObject()
  var query_565456 = newJObject()
  add(query_565456, "$skipToken", newJString(SkipToken))
  add(query_565456, "$top", newJString(Top))
  add(query_565456, "api-version", newJString(apiVersion))
  add(path_565455, "name", newJString(name))
  add(path_565455, "subscriptionId", newJString(subscriptionId))
  add(path_565455, "resourceGroupName", newJString(resourceGroupName))
  add(query_565456, "$filter", newJString(Filter))
  result = call_565454.call(path_565455, query_565456, nil, nil, nil)

var serverFarmsGetServerFarmSites* = Call_ServerFarmsGetServerFarmSites_565443(
    name: "serverFarmsGetServerFarmSites", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
    validator: validate_ServerFarmsGetServerFarmSites_565444, base: "",
    url: url_ServerFarmsGetServerFarmSites_565445, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetsForServerFarm_565457 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetVnetsForServerFarm_565459(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetsForServerFarm_565458(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565460 = path.getOrDefault("name")
  valid_565460 = validateParameter(valid_565460, JString, required = true,
                                 default = nil)
  if valid_565460 != nil:
    section.add "name", valid_565460
  var valid_565461 = path.getOrDefault("subscriptionId")
  valid_565461 = validateParameter(valid_565461, JString, required = true,
                                 default = nil)
  if valid_565461 != nil:
    section.add "subscriptionId", valid_565461
  var valid_565462 = path.getOrDefault("resourceGroupName")
  valid_565462 = validateParameter(valid_565462, JString, required = true,
                                 default = nil)
  if valid_565462 != nil:
    section.add "resourceGroupName", valid_565462
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565463 = query.getOrDefault("api-version")
  valid_565463 = validateParameter(valid_565463, JString, required = true,
                                 default = nil)
  if valid_565463 != nil:
    section.add "api-version", valid_565463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565464: Call_ServerFarmsGetVnetsForServerFarm_565457;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565464.validator(path, query, header, formData, body)
  let scheme = call_565464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565464.url(scheme.get, call_565464.host, call_565464.base,
                         call_565464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565464, url, valid)

proc call*(call_565465: Call_ServerFarmsGetVnetsForServerFarm_565457;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsGetVnetsForServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565466 = newJObject()
  var query_565467 = newJObject()
  add(query_565467, "api-version", newJString(apiVersion))
  add(path_565466, "name", newJString(name))
  add(path_565466, "subscriptionId", newJString(subscriptionId))
  add(path_565466, "resourceGroupName", newJString(resourceGroupName))
  result = call_565465.call(path_565466, query_565467, nil, nil, nil)

var serverFarmsGetVnetsForServerFarm* = Call_ServerFarmsGetVnetsForServerFarm_565457(
    name: "serverFarmsGetVnetsForServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
    validator: validate_ServerFarmsGetVnetsForServerFarm_565458, base: "",
    url: url_ServerFarmsGetVnetsForServerFarm_565459, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetVnetFromServerFarm_565468 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetVnetFromServerFarm_565470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetVnetFromServerFarm_565469(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565471 = path.getOrDefault("name")
  valid_565471 = validateParameter(valid_565471, JString, required = true,
                                 default = nil)
  if valid_565471 != nil:
    section.add "name", valid_565471
  var valid_565472 = path.getOrDefault("vnetName")
  valid_565472 = validateParameter(valid_565472, JString, required = true,
                                 default = nil)
  if valid_565472 != nil:
    section.add "vnetName", valid_565472
  var valid_565473 = path.getOrDefault("subscriptionId")
  valid_565473 = validateParameter(valid_565473, JString, required = true,
                                 default = nil)
  if valid_565473 != nil:
    section.add "subscriptionId", valid_565473
  var valid_565474 = path.getOrDefault("resourceGroupName")
  valid_565474 = validateParameter(valid_565474, JString, required = true,
                                 default = nil)
  if valid_565474 != nil:
    section.add "resourceGroupName", valid_565474
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565475 = query.getOrDefault("api-version")
  valid_565475 = validateParameter(valid_565475, JString, required = true,
                                 default = nil)
  if valid_565475 != nil:
    section.add "api-version", valid_565475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565476: Call_ServerFarmsGetVnetFromServerFarm_565468;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565476.validator(path, query, header, formData, body)
  let scheme = call_565476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565476.url(scheme.get, call_565476.host, call_565476.base,
                         call_565476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565476, url, valid)

proc call*(call_565477: Call_ServerFarmsGetVnetFromServerFarm_565468;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsGetVnetFromServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565478 = newJObject()
  var query_565479 = newJObject()
  add(query_565479, "api-version", newJString(apiVersion))
  add(path_565478, "name", newJString(name))
  add(path_565478, "vnetName", newJString(vnetName))
  add(path_565478, "subscriptionId", newJString(subscriptionId))
  add(path_565478, "resourceGroupName", newJString(resourceGroupName))
  result = call_565477.call(path_565478, query_565479, nil, nil, nil)

var serverFarmsGetVnetFromServerFarm* = Call_ServerFarmsGetVnetFromServerFarm_565468(
    name: "serverFarmsGetVnetFromServerFarm", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_ServerFarmsGetVnetFromServerFarm_565469, base: "",
    url: url_ServerFarmsGetVnetFromServerFarm_565470, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateServerFarmVnetGateway_565493 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsUpdateServerFarmVnetGateway_565495(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateServerFarmVnetGateway_565494(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   name: JString (required)
  ##       : The name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : The name of the virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_565496 = path.getOrDefault("gatewayName")
  valid_565496 = validateParameter(valid_565496, JString, required = true,
                                 default = nil)
  if valid_565496 != nil:
    section.add "gatewayName", valid_565496
  var valid_565497 = path.getOrDefault("name")
  valid_565497 = validateParameter(valid_565497, JString, required = true,
                                 default = nil)
  if valid_565497 != nil:
    section.add "name", valid_565497
  var valid_565498 = path.getOrDefault("vnetName")
  valid_565498 = validateParameter(valid_565498, JString, required = true,
                                 default = nil)
  if valid_565498 != nil:
    section.add "vnetName", valid_565498
  var valid_565499 = path.getOrDefault("subscriptionId")
  valid_565499 = validateParameter(valid_565499, JString, required = true,
                                 default = nil)
  if valid_565499 != nil:
    section.add "subscriptionId", valid_565499
  var valid_565500 = path.getOrDefault("resourceGroupName")
  valid_565500 = validateParameter(valid_565500, JString, required = true,
                                 default = nil)
  if valid_565500 != nil:
    section.add "resourceGroupName", valid_565500
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565501 = query.getOrDefault("api-version")
  valid_565501 = validateParameter(valid_565501, JString, required = true,
                                 default = nil)
  if valid_565501 != nil:
    section.add "api-version", valid_565501
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565503: Call_ServerFarmsUpdateServerFarmVnetGateway_565493;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565503.validator(path, query, header, formData, body)
  let scheme = call_565503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565503.url(scheme.get, call_565503.host, call_565503.base,
                         call_565503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565503, url, valid)

proc call*(call_565504: Call_ServerFarmsUpdateServerFarmVnetGateway_565493;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsUpdateServerFarmVnetGateway
  ##   connectionEnvelope: JObject (required)
  ##                     : The gateway entity.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. Only 'primary' is supported.
  ##   name: string (required)
  ##       : The name of the App Service Plan
  ##   vnetName: string (required)
  ##           : The name of the virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group
  var path_565505 = newJObject()
  var query_565506 = newJObject()
  var body_565507 = newJObject()
  if connectionEnvelope != nil:
    body_565507 = connectionEnvelope
  add(query_565506, "api-version", newJString(apiVersion))
  add(path_565505, "gatewayName", newJString(gatewayName))
  add(path_565505, "name", newJString(name))
  add(path_565505, "vnetName", newJString(vnetName))
  add(path_565505, "subscriptionId", newJString(subscriptionId))
  add(path_565505, "resourceGroupName", newJString(resourceGroupName))
  result = call_565504.call(path_565505, query_565506, nil, nil, body_565507)

var serverFarmsUpdateServerFarmVnetGateway* = Call_ServerFarmsUpdateServerFarmVnetGateway_565493(
    name: "serverFarmsUpdateServerFarmVnetGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsUpdateServerFarmVnetGateway_565494, base: "",
    url: url_ServerFarmsUpdateServerFarmVnetGateway_565495,
    schemes: {Scheme.Https})
type
  Call_ServerFarmsGetServerFarmVnetGateway_565480 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetServerFarmVnetGateway_565482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetServerFarmVnetGateway_565481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   name: JString (required)
  ##       : Name of the App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of the virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_565483 = path.getOrDefault("gatewayName")
  valid_565483 = validateParameter(valid_565483, JString, required = true,
                                 default = nil)
  if valid_565483 != nil:
    section.add "gatewayName", valid_565483
  var valid_565484 = path.getOrDefault("name")
  valid_565484 = validateParameter(valid_565484, JString, required = true,
                                 default = nil)
  if valid_565484 != nil:
    section.add "name", valid_565484
  var valid_565485 = path.getOrDefault("vnetName")
  valid_565485 = validateParameter(valid_565485, JString, required = true,
                                 default = nil)
  if valid_565485 != nil:
    section.add "vnetName", valid_565485
  var valid_565486 = path.getOrDefault("subscriptionId")
  valid_565486 = validateParameter(valid_565486, JString, required = true,
                                 default = nil)
  if valid_565486 != nil:
    section.add "subscriptionId", valid_565486
  var valid_565487 = path.getOrDefault("resourceGroupName")
  valid_565487 = validateParameter(valid_565487, JString, required = true,
                                 default = nil)
  if valid_565487 != nil:
    section.add "resourceGroupName", valid_565487
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565488 = query.getOrDefault("api-version")
  valid_565488 = validateParameter(valid_565488, JString, required = true,
                                 default = nil)
  if valid_565488 != nil:
    section.add "api-version", valid_565488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565489: Call_ServerFarmsGetServerFarmVnetGateway_565480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565489.validator(path, query, header, formData, body)
  let scheme = call_565489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565489.url(scheme.get, call_565489.host, call_565489.base,
                         call_565489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565489, url, valid)

proc call*(call_565490: Call_ServerFarmsGetServerFarmVnetGateway_565480;
          apiVersion: string; gatewayName: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## serverFarmsGetServerFarmVnetGateway
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Only the 'primary' gateway is supported.
  ##   name: string (required)
  ##       : Name of the App Service Plan
  ##   vnetName: string (required)
  ##           : Name of the virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565491 = newJObject()
  var query_565492 = newJObject()
  add(query_565492, "api-version", newJString(apiVersion))
  add(path_565491, "gatewayName", newJString(gatewayName))
  add(path_565491, "name", newJString(name))
  add(path_565491, "vnetName", newJString(vnetName))
  add(path_565491, "subscriptionId", newJString(subscriptionId))
  add(path_565491, "resourceGroupName", newJString(resourceGroupName))
  result = call_565490.call(path_565491, query_565492, nil, nil, nil)

var serverFarmsGetServerFarmVnetGateway* = Call_ServerFarmsGetServerFarmVnetGateway_565480(
    name: "serverFarmsGetServerFarmVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_ServerFarmsGetServerFarmVnetGateway_565481, base: "",
    url: url_ServerFarmsGetServerFarmVnetGateway_565482, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRoutesForVnet_565508 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetRoutesForVnet_565510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRoutesForVnet_565509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565511 = path.getOrDefault("name")
  valid_565511 = validateParameter(valid_565511, JString, required = true,
                                 default = nil)
  if valid_565511 != nil:
    section.add "name", valid_565511
  var valid_565512 = path.getOrDefault("vnetName")
  valid_565512 = validateParameter(valid_565512, JString, required = true,
                                 default = nil)
  if valid_565512 != nil:
    section.add "vnetName", valid_565512
  var valid_565513 = path.getOrDefault("subscriptionId")
  valid_565513 = validateParameter(valid_565513, JString, required = true,
                                 default = nil)
  if valid_565513 != nil:
    section.add "subscriptionId", valid_565513
  var valid_565514 = path.getOrDefault("resourceGroupName")
  valid_565514 = validateParameter(valid_565514, JString, required = true,
                                 default = nil)
  if valid_565514 != nil:
    section.add "resourceGroupName", valid_565514
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565515 = query.getOrDefault("api-version")
  valid_565515 = validateParameter(valid_565515, JString, required = true,
                                 default = nil)
  if valid_565515 != nil:
    section.add "api-version", valid_565515
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565516: Call_ServerFarmsGetRoutesForVnet_565508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565516.validator(path, query, header, formData, body)
  let scheme = call_565516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565516.url(scheme.get, call_565516.host, call_565516.base,
                         call_565516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565516, url, valid)

proc call*(call_565517: Call_ServerFarmsGetRoutesForVnet_565508;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsGetRoutesForVnet
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565518 = newJObject()
  var query_565519 = newJObject()
  add(query_565519, "api-version", newJString(apiVersion))
  add(path_565518, "name", newJString(name))
  add(path_565518, "vnetName", newJString(vnetName))
  add(path_565518, "subscriptionId", newJString(subscriptionId))
  add(path_565518, "resourceGroupName", newJString(resourceGroupName))
  result = call_565517.call(path_565518, query_565519, nil, nil, nil)

var serverFarmsGetRoutesForVnet* = Call_ServerFarmsGetRoutesForVnet_565508(
    name: "serverFarmsGetRoutesForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
    validator: validate_ServerFarmsGetRoutesForVnet_565509, base: "",
    url: url_ServerFarmsGetRoutesForVnet_565510, schemes: {Scheme.Https})
type
  Call_ServerFarmsCreateOrUpdateVnetRoute_565533 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsCreateOrUpdateVnetRoute_565535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsCreateOrUpdateVnetRoute_565534(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `routeName` field"
  var valid_565536 = path.getOrDefault("routeName")
  valid_565536 = validateParameter(valid_565536, JString, required = true,
                                 default = nil)
  if valid_565536 != nil:
    section.add "routeName", valid_565536
  var valid_565537 = path.getOrDefault("name")
  valid_565537 = validateParameter(valid_565537, JString, required = true,
                                 default = nil)
  if valid_565537 != nil:
    section.add "name", valid_565537
  var valid_565538 = path.getOrDefault("vnetName")
  valid_565538 = validateParameter(valid_565538, JString, required = true,
                                 default = nil)
  if valid_565538 != nil:
    section.add "vnetName", valid_565538
  var valid_565539 = path.getOrDefault("subscriptionId")
  valid_565539 = validateParameter(valid_565539, JString, required = true,
                                 default = nil)
  if valid_565539 != nil:
    section.add "subscriptionId", valid_565539
  var valid_565540 = path.getOrDefault("resourceGroupName")
  valid_565540 = validateParameter(valid_565540, JString, required = true,
                                 default = nil)
  if valid_565540 != nil:
    section.add "resourceGroupName", valid_565540
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565541 = query.getOrDefault("api-version")
  valid_565541 = validateParameter(valid_565541, JString, required = true,
                                 default = nil)
  if valid_565541 != nil:
    section.add "api-version", valid_565541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565543: Call_ServerFarmsCreateOrUpdateVnetRoute_565533;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565543.validator(path, query, header, formData, body)
  let scheme = call_565543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565543.url(scheme.get, call_565543.host, call_565543.base,
                         call_565543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565543, url, valid)

proc call*(call_565544: Call_ServerFarmsCreateOrUpdateVnetRoute_565533;
          routeName: string; apiVersion: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string; route: JsonNode): Recallable =
  ## serverFarmsCreateOrUpdateVnetRoute
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   route: JObject (required)
  ##        : The route object
  var path_565545 = newJObject()
  var query_565546 = newJObject()
  var body_565547 = newJObject()
  add(path_565545, "routeName", newJString(routeName))
  add(query_565546, "api-version", newJString(apiVersion))
  add(path_565545, "name", newJString(name))
  add(path_565545, "vnetName", newJString(vnetName))
  add(path_565545, "subscriptionId", newJString(subscriptionId))
  add(path_565545, "resourceGroupName", newJString(resourceGroupName))
  if route != nil:
    body_565547 = route
  result = call_565544.call(path_565545, query_565546, nil, nil, body_565547)

var serverFarmsCreateOrUpdateVnetRoute* = Call_ServerFarmsCreateOrUpdateVnetRoute_565533(
    name: "serverFarmsCreateOrUpdateVnetRoute", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsCreateOrUpdateVnetRoute_565534, base: "",
    url: url_ServerFarmsCreateOrUpdateVnetRoute_565535, schemes: {Scheme.Https})
type
  Call_ServerFarmsGetRouteForVnet_565520 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsGetRouteForVnet_565522(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsGetRouteForVnet_565521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `routeName` field"
  var valid_565523 = path.getOrDefault("routeName")
  valid_565523 = validateParameter(valid_565523, JString, required = true,
                                 default = nil)
  if valid_565523 != nil:
    section.add "routeName", valid_565523
  var valid_565524 = path.getOrDefault("name")
  valid_565524 = validateParameter(valid_565524, JString, required = true,
                                 default = nil)
  if valid_565524 != nil:
    section.add "name", valid_565524
  var valid_565525 = path.getOrDefault("vnetName")
  valid_565525 = validateParameter(valid_565525, JString, required = true,
                                 default = nil)
  if valid_565525 != nil:
    section.add "vnetName", valid_565525
  var valid_565526 = path.getOrDefault("subscriptionId")
  valid_565526 = validateParameter(valid_565526, JString, required = true,
                                 default = nil)
  if valid_565526 != nil:
    section.add "subscriptionId", valid_565526
  var valid_565527 = path.getOrDefault("resourceGroupName")
  valid_565527 = validateParameter(valid_565527, JString, required = true,
                                 default = nil)
  if valid_565527 != nil:
    section.add "resourceGroupName", valid_565527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565528 = query.getOrDefault("api-version")
  valid_565528 = validateParameter(valid_565528, JString, required = true,
                                 default = nil)
  if valid_565528 != nil:
    section.add "api-version", valid_565528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565529: Call_ServerFarmsGetRouteForVnet_565520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565529.validator(path, query, header, formData, body)
  let scheme = call_565529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565529.url(scheme.get, call_565529.host, call_565529.base,
                         call_565529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565529, url, valid)

proc call*(call_565530: Call_ServerFarmsGetRouteForVnet_565520; routeName: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsGetRouteForVnet
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565531 = newJObject()
  var query_565532 = newJObject()
  add(path_565531, "routeName", newJString(routeName))
  add(query_565532, "api-version", newJString(apiVersion))
  add(path_565531, "name", newJString(name))
  add(path_565531, "vnetName", newJString(vnetName))
  add(path_565531, "subscriptionId", newJString(subscriptionId))
  add(path_565531, "resourceGroupName", newJString(resourceGroupName))
  result = call_565530.call(path_565531, query_565532, nil, nil, nil)

var serverFarmsGetRouteForVnet* = Call_ServerFarmsGetRouteForVnet_565520(
    name: "serverFarmsGetRouteForVnet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsGetRouteForVnet_565521, base: "",
    url: url_ServerFarmsGetRouteForVnet_565522, schemes: {Scheme.Https})
type
  Call_ServerFarmsUpdateVnetRoute_565561 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsUpdateVnetRoute_565563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsUpdateVnetRoute_565562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `routeName` field"
  var valid_565564 = path.getOrDefault("routeName")
  valid_565564 = validateParameter(valid_565564, JString, required = true,
                                 default = nil)
  if valid_565564 != nil:
    section.add "routeName", valid_565564
  var valid_565565 = path.getOrDefault("name")
  valid_565565 = validateParameter(valid_565565, JString, required = true,
                                 default = nil)
  if valid_565565 != nil:
    section.add "name", valid_565565
  var valid_565566 = path.getOrDefault("vnetName")
  valid_565566 = validateParameter(valid_565566, JString, required = true,
                                 default = nil)
  if valid_565566 != nil:
    section.add "vnetName", valid_565566
  var valid_565567 = path.getOrDefault("subscriptionId")
  valid_565567 = validateParameter(valid_565567, JString, required = true,
                                 default = nil)
  if valid_565567 != nil:
    section.add "subscriptionId", valid_565567
  var valid_565568 = path.getOrDefault("resourceGroupName")
  valid_565568 = validateParameter(valid_565568, JString, required = true,
                                 default = nil)
  if valid_565568 != nil:
    section.add "resourceGroupName", valid_565568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565569 = query.getOrDefault("api-version")
  valid_565569 = validateParameter(valid_565569, JString, required = true,
                                 default = nil)
  if valid_565569 != nil:
    section.add "api-version", valid_565569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   route: JObject (required)
  ##        : The route object
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565571: Call_ServerFarmsUpdateVnetRoute_565561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565571.validator(path, query, header, formData, body)
  let scheme = call_565571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565571.url(scheme.get, call_565571.host, call_565571.base,
                         call_565571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565571, url, valid)

proc call*(call_565572: Call_ServerFarmsUpdateVnetRoute_565561; routeName: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string; route: JsonNode): Recallable =
  ## serverFarmsUpdateVnetRoute
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   route: JObject (required)
  ##        : The route object
  var path_565573 = newJObject()
  var query_565574 = newJObject()
  var body_565575 = newJObject()
  add(path_565573, "routeName", newJString(routeName))
  add(query_565574, "api-version", newJString(apiVersion))
  add(path_565573, "name", newJString(name))
  add(path_565573, "vnetName", newJString(vnetName))
  add(path_565573, "subscriptionId", newJString(subscriptionId))
  add(path_565573, "resourceGroupName", newJString(resourceGroupName))
  if route != nil:
    body_565575 = route
  result = call_565572.call(path_565573, query_565574, nil, nil, body_565575)

var serverFarmsUpdateVnetRoute* = Call_ServerFarmsUpdateVnetRoute_565561(
    name: "serverFarmsUpdateVnetRoute", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsUpdateVnetRoute_565562, base: "",
    url: url_ServerFarmsUpdateVnetRoute_565563, schemes: {Scheme.Https})
type
  Call_ServerFarmsDeleteVnetRoute_565548 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsDeleteVnetRoute_565550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "routeName" in path, "`routeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/routes/"),
               (kind: VariableSegment, value: "routeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsDeleteVnetRoute_565549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   routeName: JString (required)
  ##            : Name of the virtual network route
  ##   name: JString (required)
  ##       : Name of App Service Plan
  ##   vnetName: JString (required)
  ##           : Name of virtual network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `routeName` field"
  var valid_565551 = path.getOrDefault("routeName")
  valid_565551 = validateParameter(valid_565551, JString, required = true,
                                 default = nil)
  if valid_565551 != nil:
    section.add "routeName", valid_565551
  var valid_565552 = path.getOrDefault("name")
  valid_565552 = validateParameter(valid_565552, JString, required = true,
                                 default = nil)
  if valid_565552 != nil:
    section.add "name", valid_565552
  var valid_565553 = path.getOrDefault("vnetName")
  valid_565553 = validateParameter(valid_565553, JString, required = true,
                                 default = nil)
  if valid_565553 != nil:
    section.add "vnetName", valid_565553
  var valid_565554 = path.getOrDefault("subscriptionId")
  valid_565554 = validateParameter(valid_565554, JString, required = true,
                                 default = nil)
  if valid_565554 != nil:
    section.add "subscriptionId", valid_565554
  var valid_565555 = path.getOrDefault("resourceGroupName")
  valid_565555 = validateParameter(valid_565555, JString, required = true,
                                 default = nil)
  if valid_565555 != nil:
    section.add "resourceGroupName", valid_565555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565556 = query.getOrDefault("api-version")
  valid_565556 = validateParameter(valid_565556, JString, required = true,
                                 default = nil)
  if valid_565556 != nil:
    section.add "api-version", valid_565556
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565557: Call_ServerFarmsDeleteVnetRoute_565548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565557.validator(path, query, header, formData, body)
  let scheme = call_565557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565557.url(scheme.get, call_565557.host, call_565557.base,
                         call_565557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565557, url, valid)

proc call*(call_565558: Call_ServerFarmsDeleteVnetRoute_565548; routeName: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## serverFarmsDeleteVnetRoute
  ##   routeName: string (required)
  ##            : Name of the virtual network route
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of App Service Plan
  ##   vnetName: string (required)
  ##           : Name of virtual network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565559 = newJObject()
  var query_565560 = newJObject()
  add(path_565559, "routeName", newJString(routeName))
  add(query_565560, "api-version", newJString(apiVersion))
  add(path_565559, "name", newJString(name))
  add(path_565559, "vnetName", newJString(vnetName))
  add(path_565559, "subscriptionId", newJString(subscriptionId))
  add(path_565559, "resourceGroupName", newJString(resourceGroupName))
  result = call_565558.call(path_565559, query_565560, nil, nil, nil)

var serverFarmsDeleteVnetRoute* = Call_ServerFarmsDeleteVnetRoute_565548(
    name: "serverFarmsDeleteVnetRoute", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
    validator: validate_ServerFarmsDeleteVnetRoute_565549, base: "",
    url: url_ServerFarmsDeleteVnetRoute_565550, schemes: {Scheme.Https})
type
  Call_ServerFarmsRebootWorkerForServerFarm_565576 = ref object of OpenApiRestCall_563548
proc url_ServerFarmsRebootWorkerForServerFarm_565578(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "workerName" in path, "`workerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/serverfarms/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/workers/"),
               (kind: VariableSegment, value: "workerName"),
               (kind: ConstantSegment, value: "/reboot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerFarmsRebootWorkerForServerFarm_565577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of server farm
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   workerName: JString (required)
  ##             : Name of worker machine, typically starts with RD
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565579 = path.getOrDefault("name")
  valid_565579 = validateParameter(valid_565579, JString, required = true,
                                 default = nil)
  if valid_565579 != nil:
    section.add "name", valid_565579
  var valid_565580 = path.getOrDefault("subscriptionId")
  valid_565580 = validateParameter(valid_565580, JString, required = true,
                                 default = nil)
  if valid_565580 != nil:
    section.add "subscriptionId", valid_565580
  var valid_565581 = path.getOrDefault("resourceGroupName")
  valid_565581 = validateParameter(valid_565581, JString, required = true,
                                 default = nil)
  if valid_565581 != nil:
    section.add "resourceGroupName", valid_565581
  var valid_565582 = path.getOrDefault("workerName")
  valid_565582 = validateParameter(valid_565582, JString, required = true,
                                 default = nil)
  if valid_565582 != nil:
    section.add "workerName", valid_565582
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565583 = query.getOrDefault("api-version")
  valid_565583 = validateParameter(valid_565583, JString, required = true,
                                 default = nil)
  if valid_565583 != nil:
    section.add "api-version", valid_565583
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565584: Call_ServerFarmsRebootWorkerForServerFarm_565576;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565584.validator(path, query, header, formData, body)
  let scheme = call_565584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565584.url(scheme.get, call_565584.host, call_565584.base,
                         call_565584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565584, url, valid)

proc call*(call_565585: Call_ServerFarmsRebootWorkerForServerFarm_565576;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; workerName: string): Recallable =
  ## serverFarmsRebootWorkerForServerFarm
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of server farm
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   workerName: string (required)
  ##             : Name of worker machine, typically starts with RD
  var path_565586 = newJObject()
  var query_565587 = newJObject()
  add(query_565587, "api-version", newJString(apiVersion))
  add(path_565586, "name", newJString(name))
  add(path_565586, "subscriptionId", newJString(subscriptionId))
  add(path_565586, "resourceGroupName", newJString(resourceGroupName))
  add(path_565586, "workerName", newJString(workerName))
  result = call_565585.call(path_565586, query_565587, nil, nil, nil)

var serverFarmsRebootWorkerForServerFarm* = Call_ServerFarmsRebootWorkerForServerFarm_565576(
    name: "serverFarmsRebootWorkerForServerFarm", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
    validator: validate_ServerFarmsRebootWorkerForServerFarm_565577, base: "",
    url: url_ServerFarmsRebootWorkerForServerFarm_565578, schemes: {Scheme.Https})
type
  Call_SitesGetSites_565588 = ref object of OpenApiRestCall_563548
proc url_SitesGetSites_565590(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSites_565589(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_565591 = path.getOrDefault("subscriptionId")
  valid_565591 = validateParameter(valid_565591, JString, required = true,
                                 default = nil)
  if valid_565591 != nil:
    section.add "subscriptionId", valid_565591
  var valid_565592 = path.getOrDefault("resourceGroupName")
  valid_565592 = validateParameter(valid_565592, JString, required = true,
                                 default = nil)
  if valid_565592 != nil:
    section.add "resourceGroupName", valid_565592
  result.add "path", section
  ## parameters in `query` object:
  ##   includeSiteTypes: JString
  ##                   : Types of apps included in the response
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Whether or not to include deployments slots in results
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  section = newJObject()
  var valid_565593 = query.getOrDefault("includeSiteTypes")
  valid_565593 = validateParameter(valid_565593, JString, required = false,
                                 default = nil)
  if valid_565593 != nil:
    section.add "includeSiteTypes", valid_565593
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565594 = query.getOrDefault("api-version")
  valid_565594 = validateParameter(valid_565594, JString, required = true,
                                 default = nil)
  if valid_565594 != nil:
    section.add "api-version", valid_565594
  var valid_565595 = query.getOrDefault("includeSlots")
  valid_565595 = validateParameter(valid_565595, JBool, required = false, default = nil)
  if valid_565595 != nil:
    section.add "includeSlots", valid_565595
  var valid_565596 = query.getOrDefault("propertiesToInclude")
  valid_565596 = validateParameter(valid_565596, JString, required = false,
                                 default = nil)
  if valid_565596 != nil:
    section.add "propertiesToInclude", valid_565596
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565597: Call_SitesGetSites_565588; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565597.validator(path, query, header, formData, body)
  let scheme = call_565597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565597.url(scheme.get, call_565597.host, call_565597.base,
                         call_565597.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565597, url, valid)

proc call*(call_565598: Call_SitesGetSites_565588; apiVersion: string;
          subscriptionId: string; resourceGroupName: string;
          includeSiteTypes: string = ""; includeSlots: bool = false;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSites
  ##   includeSiteTypes: string
  ##                   : Types of apps included in the response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   includeSlots: bool
  ##               : Whether or not to include deployments slots in results
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565599 = newJObject()
  var query_565600 = newJObject()
  add(query_565600, "includeSiteTypes", newJString(includeSiteTypes))
  add(query_565600, "api-version", newJString(apiVersion))
  add(query_565600, "includeSlots", newJBool(includeSlots))
  add(path_565599, "subscriptionId", newJString(subscriptionId))
  add(query_565600, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_565599, "resourceGroupName", newJString(resourceGroupName))
  result = call_565598.call(path_565599, query_565600, nil, nil, nil)

var sitesGetSites* = Call_SitesGetSites_565588(name: "sitesGetSites",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_SitesGetSites_565589, base: "", url: url_SitesGetSites_565590,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSite_565613 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSite_565615(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSite_565614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565616 = path.getOrDefault("name")
  valid_565616 = validateParameter(valid_565616, JString, required = true,
                                 default = nil)
  if valid_565616 != nil:
    section.add "name", valid_565616
  var valid_565617 = path.getOrDefault("subscriptionId")
  valid_565617 = validateParameter(valid_565617, JString, required = true,
                                 default = nil)
  if valid_565617 != nil:
    section.add "subscriptionId", valid_565617
  var valid_565618 = path.getOrDefault("resourceGroupName")
  valid_565618 = validateParameter(valid_565618, JString, required = true,
                                 default = nil)
  if valid_565618 != nil:
    section.add "resourceGroupName", valid_565618
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565619 = query.getOrDefault("api-version")
  valid_565619 = validateParameter(valid_565619, JString, required = true,
                                 default = nil)
  if valid_565619 != nil:
    section.add "api-version", valid_565619
  var valid_565620 = query.getOrDefault("ttlInSeconds")
  valid_565620 = validateParameter(valid_565620, JString, required = false,
                                 default = nil)
  if valid_565620 != nil:
    section.add "ttlInSeconds", valid_565620
  var valid_565621 = query.getOrDefault("skipCustomDomainVerification")
  valid_565621 = validateParameter(valid_565621, JString, required = false,
                                 default = nil)
  if valid_565621 != nil:
    section.add "skipCustomDomainVerification", valid_565621
  var valid_565622 = query.getOrDefault("forceDnsRegistration")
  valid_565622 = validateParameter(valid_565622, JString, required = false,
                                 default = nil)
  if valid_565622 != nil:
    section.add "forceDnsRegistration", valid_565622
  var valid_565623 = query.getOrDefault("skipDnsRegistration")
  valid_565623 = validateParameter(valid_565623, JString, required = false,
                                 default = nil)
  if valid_565623 != nil:
    section.add "skipDnsRegistration", valid_565623
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565625: Call_SitesCreateOrUpdateSite_565613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565625.validator(path, query, header, formData, body)
  let scheme = call_565625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565625.url(scheme.get, call_565625.host, call_565625.base,
                         call_565625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565625, url, valid)

proc call*(call_565626: Call_SitesCreateOrUpdateSite_565613; apiVersion: string;
          siteEnvelope: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string; ttlInSeconds: string = "";
          skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; skipDnsRegistration: string = ""): Recallable =
  ## sitesCreateOrUpdateSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  var path_565627 = newJObject()
  var query_565628 = newJObject()
  var body_565629 = newJObject()
  add(query_565628, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_565629 = siteEnvelope
  add(query_565628, "ttlInSeconds", newJString(ttlInSeconds))
  add(path_565627, "name", newJString(name))
  add(path_565627, "subscriptionId", newJString(subscriptionId))
  add(query_565628, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(query_565628, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(path_565627, "resourceGroupName", newJString(resourceGroupName))
  add(query_565628, "skipDnsRegistration", newJString(skipDnsRegistration))
  result = call_565626.call(path_565627, query_565628, nil, nil, body_565629)

var sitesCreateOrUpdateSite* = Call_SitesCreateOrUpdateSite_565613(
    name: "sitesCreateOrUpdateSite", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesCreateOrUpdateSite_565614, base: "",
    url: url_SitesCreateOrUpdateSite_565615, schemes: {Scheme.Https})
type
  Call_SitesGetSite_565601 = ref object of OpenApiRestCall_563548
proc url_SitesGetSite_565603(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSite_565602(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565604 = path.getOrDefault("name")
  valid_565604 = validateParameter(valid_565604, JString, required = true,
                                 default = nil)
  if valid_565604 != nil:
    section.add "name", valid_565604
  var valid_565605 = path.getOrDefault("subscriptionId")
  valid_565605 = validateParameter(valid_565605, JString, required = true,
                                 default = nil)
  if valid_565605 != nil:
    section.add "subscriptionId", valid_565605
  var valid_565606 = path.getOrDefault("resourceGroupName")
  valid_565606 = validateParameter(valid_565606, JString, required = true,
                                 default = nil)
  if valid_565606 != nil:
    section.add "resourceGroupName", valid_565606
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565607 = query.getOrDefault("api-version")
  valid_565607 = validateParameter(valid_565607, JString, required = true,
                                 default = nil)
  if valid_565607 != nil:
    section.add "api-version", valid_565607
  var valid_565608 = query.getOrDefault("propertiesToInclude")
  valid_565608 = validateParameter(valid_565608, JString, required = false,
                                 default = nil)
  if valid_565608 != nil:
    section.add "propertiesToInclude", valid_565608
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565609: Call_SitesGetSite_565601; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565609.validator(path, query, header, formData, body)
  let scheme = call_565609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565609.url(scheme.get, call_565609.host, call_565609.base,
                         call_565609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565609, url, valid)

proc call*(call_565610: Call_SitesGetSite_565601; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565611 = newJObject()
  var query_565612 = newJObject()
  add(query_565612, "api-version", newJString(apiVersion))
  add(path_565611, "name", newJString(name))
  add(path_565611, "subscriptionId", newJString(subscriptionId))
  add(query_565612, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_565611, "resourceGroupName", newJString(resourceGroupName))
  result = call_565610.call(path_565611, query_565612, nil, nil, nil)

var sitesGetSite* = Call_SitesGetSite_565601(name: "sitesGetSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesGetSite_565602, base: "", url: url_SitesGetSite_565603,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSite_565630 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSite_565632(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSite_565631(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565633 = path.getOrDefault("name")
  valid_565633 = validateParameter(valid_565633, JString, required = true,
                                 default = nil)
  if valid_565633 != nil:
    section.add "name", valid_565633
  var valid_565634 = path.getOrDefault("subscriptionId")
  valid_565634 = validateParameter(valid_565634, JString, required = true,
                                 default = nil)
  if valid_565634 != nil:
    section.add "subscriptionId", valid_565634
  var valid_565635 = path.getOrDefault("resourceGroupName")
  valid_565635 = validateParameter(valid_565635, JString, required = true,
                                 default = nil)
  if valid_565635 != nil:
    section.add "resourceGroupName", valid_565635
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565636 = query.getOrDefault("api-version")
  valid_565636 = validateParameter(valid_565636, JString, required = true,
                                 default = nil)
  if valid_565636 != nil:
    section.add "api-version", valid_565636
  var valid_565637 = query.getOrDefault("deleteEmptyServerFarm")
  valid_565637 = validateParameter(valid_565637, JString, required = false,
                                 default = nil)
  if valid_565637 != nil:
    section.add "deleteEmptyServerFarm", valid_565637
  var valid_565638 = query.getOrDefault("deleteMetrics")
  valid_565638 = validateParameter(valid_565638, JString, required = false,
                                 default = nil)
  if valid_565638 != nil:
    section.add "deleteMetrics", valid_565638
  var valid_565639 = query.getOrDefault("skipDnsRegistration")
  valid_565639 = validateParameter(valid_565639, JString, required = false,
                                 default = nil)
  if valid_565639 != nil:
    section.add "skipDnsRegistration", valid_565639
  var valid_565640 = query.getOrDefault("deleteAllSlots")
  valid_565640 = validateParameter(valid_565640, JString, required = false,
                                 default = nil)
  if valid_565640 != nil:
    section.add "deleteAllSlots", valid_565640
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565641: Call_SitesDeleteSite_565630; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565641.validator(path, query, header, formData, body)
  let scheme = call_565641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565641.url(scheme.get, call_565641.host, call_565641.base,
                         call_565641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565641, url, valid)

proc call*(call_565642: Call_SitesDeleteSite_565630; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          deleteEmptyServerFarm: string = ""; deleteMetrics: string = "";
          skipDnsRegistration: string = ""; deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_565643 = newJObject()
  var query_565644 = newJObject()
  add(query_565644, "api-version", newJString(apiVersion))
  add(query_565644, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(path_565643, "name", newJString(name))
  add(path_565643, "subscriptionId", newJString(subscriptionId))
  add(query_565644, "deleteMetrics", newJString(deleteMetrics))
  add(path_565643, "resourceGroupName", newJString(resourceGroupName))
  add(query_565644, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_565644, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_565642.call(path_565643, query_565644, nil, nil, nil)

var sitesDeleteSite* = Call_SitesDeleteSite_565630(name: "sitesDeleteSite",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_SitesDeleteSite_565631, base: "", url: url_SitesDeleteSite_565632,
    schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigToProduction_565645 = ref object of OpenApiRestCall_563548
proc url_SitesApplySlotConfigToProduction_565647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigToProduction_565646(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565648 = path.getOrDefault("name")
  valid_565648 = validateParameter(valid_565648, JString, required = true,
                                 default = nil)
  if valid_565648 != nil:
    section.add "name", valid_565648
  var valid_565649 = path.getOrDefault("subscriptionId")
  valid_565649 = validateParameter(valid_565649, JString, required = true,
                                 default = nil)
  if valid_565649 != nil:
    section.add "subscriptionId", valid_565649
  var valid_565650 = path.getOrDefault("resourceGroupName")
  valid_565650 = validateParameter(valid_565650, JString, required = true,
                                 default = nil)
  if valid_565650 != nil:
    section.add "resourceGroupName", valid_565650
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565651 = query.getOrDefault("api-version")
  valid_565651 = validateParameter(valid_565651, JString, required = true,
                                 default = nil)
  if valid_565651 != nil:
    section.add "api-version", valid_565651
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565653: Call_SitesApplySlotConfigToProduction_565645;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565653.validator(path, query, header, formData, body)
  let scheme = call_565653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565653.url(scheme.get, call_565653.host, call_565653.base,
                         call_565653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565653, url, valid)

proc call*(call_565654: Call_SitesApplySlotConfigToProduction_565645;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesApplySlotConfigToProduction
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565655 = newJObject()
  var query_565656 = newJObject()
  var body_565657 = newJObject()
  add(query_565656, "api-version", newJString(apiVersion))
  add(path_565655, "name", newJString(name))
  add(path_565655, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_565657 = slotSwapEntity
  add(path_565655, "resourceGroupName", newJString(resourceGroupName))
  result = call_565654.call(path_565655, query_565656, nil, nil, body_565657)

var sitesApplySlotConfigToProduction* = Call_SitesApplySlotConfigToProduction_565645(
    name: "sitesApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_SitesApplySlotConfigToProduction_565646, base: "",
    url: url_SitesApplySlotConfigToProduction_565647, schemes: {Scheme.Https})
type
  Call_SitesBackupSite_565658 = ref object of OpenApiRestCall_563548
proc url_SitesBackupSite_565660(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSite_565659(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565661 = path.getOrDefault("name")
  valid_565661 = validateParameter(valid_565661, JString, required = true,
                                 default = nil)
  if valid_565661 != nil:
    section.add "name", valid_565661
  var valid_565662 = path.getOrDefault("subscriptionId")
  valid_565662 = validateParameter(valid_565662, JString, required = true,
                                 default = nil)
  if valid_565662 != nil:
    section.add "subscriptionId", valid_565662
  var valid_565663 = path.getOrDefault("resourceGroupName")
  valid_565663 = validateParameter(valid_565663, JString, required = true,
                                 default = nil)
  if valid_565663 != nil:
    section.add "resourceGroupName", valid_565663
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565664 = query.getOrDefault("api-version")
  valid_565664 = validateParameter(valid_565664, JString, required = true,
                                 default = nil)
  if valid_565664 != nil:
    section.add "api-version", valid_565664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565666: Call_SitesBackupSite_565658; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565666.validator(path, query, header, formData, body)
  let scheme = call_565666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565666.url(scheme.get, call_565666.host, call_565666.base,
                         call_565666.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565666, url, valid)

proc call*(call_565667: Call_SitesBackupSite_565658; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## sitesBackupSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_565668 = newJObject()
  var query_565669 = newJObject()
  var body_565670 = newJObject()
  add(query_565669, "api-version", newJString(apiVersion))
  add(path_565668, "name", newJString(name))
  add(path_565668, "subscriptionId", newJString(subscriptionId))
  add(path_565668, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565670 = request
  result = call_565667.call(path_565668, query_565669, nil, nil, body_565670)

var sitesBackupSite* = Call_SitesBackupSite_565658(name: "sitesBackupSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_SitesBackupSite_565659, base: "", url: url_SitesBackupSite_565660,
    schemes: {Scheme.Https})
type
  Call_SitesListSiteBackups_565671 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteBackups_565673(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackups_565672(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565674 = path.getOrDefault("name")
  valid_565674 = validateParameter(valid_565674, JString, required = true,
                                 default = nil)
  if valid_565674 != nil:
    section.add "name", valid_565674
  var valid_565675 = path.getOrDefault("subscriptionId")
  valid_565675 = validateParameter(valid_565675, JString, required = true,
                                 default = nil)
  if valid_565675 != nil:
    section.add "subscriptionId", valid_565675
  var valid_565676 = path.getOrDefault("resourceGroupName")
  valid_565676 = validateParameter(valid_565676, JString, required = true,
                                 default = nil)
  if valid_565676 != nil:
    section.add "resourceGroupName", valid_565676
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565677 = query.getOrDefault("api-version")
  valid_565677 = validateParameter(valid_565677, JString, required = true,
                                 default = nil)
  if valid_565677 != nil:
    section.add "api-version", valid_565677
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565678: Call_SitesListSiteBackups_565671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565678.validator(path, query, header, formData, body)
  let scheme = call_565678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565678.url(scheme.get, call_565678.host, call_565678.base,
                         call_565678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565678, url, valid)

proc call*(call_565679: Call_SitesListSiteBackups_565671; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSiteBackups
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565680 = newJObject()
  var query_565681 = newJObject()
  add(query_565681, "api-version", newJString(apiVersion))
  add(path_565680, "name", newJString(name))
  add(path_565680, "subscriptionId", newJString(subscriptionId))
  add(path_565680, "resourceGroupName", newJString(resourceGroupName))
  result = call_565679.call(path_565680, query_565681, nil, nil, nil)

var sitesListSiteBackups* = Call_SitesListSiteBackups_565671(
    name: "sitesListSiteBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_SitesListSiteBackups_565672, base: "",
    url: url_SitesListSiteBackups_565673, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestore_565682 = ref object of OpenApiRestCall_563548
proc url_SitesDiscoverSiteRestore_565684(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestore_565683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565685 = path.getOrDefault("name")
  valid_565685 = validateParameter(valid_565685, JString, required = true,
                                 default = nil)
  if valid_565685 != nil:
    section.add "name", valid_565685
  var valid_565686 = path.getOrDefault("subscriptionId")
  valid_565686 = validateParameter(valid_565686, JString, required = true,
                                 default = nil)
  if valid_565686 != nil:
    section.add "subscriptionId", valid_565686
  var valid_565687 = path.getOrDefault("resourceGroupName")
  valid_565687 = validateParameter(valid_565687, JString, required = true,
                                 default = nil)
  if valid_565687 != nil:
    section.add "resourceGroupName", valid_565687
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565688 = query.getOrDefault("api-version")
  valid_565688 = validateParameter(valid_565688, JString, required = true,
                                 default = nil)
  if valid_565688 != nil:
    section.add "api-version", valid_565688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565690: Call_SitesDiscoverSiteRestore_565682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565690.validator(path, query, header, formData, body)
  let scheme = call_565690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565690.url(scheme.get, call_565690.host, call_565690.base,
                         call_565690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565690, url, valid)

proc call*(call_565691: Call_SitesDiscoverSiteRestore_565682; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestore
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_565692 = newJObject()
  var query_565693 = newJObject()
  var body_565694 = newJObject()
  add(query_565693, "api-version", newJString(apiVersion))
  add(path_565692, "name", newJString(name))
  add(path_565692, "subscriptionId", newJString(subscriptionId))
  add(path_565692, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565694 = request
  result = call_565691.call(path_565692, query_565693, nil, nil, body_565694)

var sitesDiscoverSiteRestore* = Call_SitesDiscoverSiteRestore_565682(
    name: "sitesDiscoverSiteRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_SitesDiscoverSiteRestore_565683, base: "",
    url: url_SitesDiscoverSiteRestore_565684, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatus_565695 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupStatus_565697(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatus_565696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565698 = path.getOrDefault("name")
  valid_565698 = validateParameter(valid_565698, JString, required = true,
                                 default = nil)
  if valid_565698 != nil:
    section.add "name", valid_565698
  var valid_565699 = path.getOrDefault("subscriptionId")
  valid_565699 = validateParameter(valid_565699, JString, required = true,
                                 default = nil)
  if valid_565699 != nil:
    section.add "subscriptionId", valid_565699
  var valid_565700 = path.getOrDefault("backupId")
  valid_565700 = validateParameter(valid_565700, JString, required = true,
                                 default = nil)
  if valid_565700 != nil:
    section.add "backupId", valid_565700
  var valid_565701 = path.getOrDefault("resourceGroupName")
  valid_565701 = validateParameter(valid_565701, JString, required = true,
                                 default = nil)
  if valid_565701 != nil:
    section.add "resourceGroupName", valid_565701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565702 = query.getOrDefault("api-version")
  valid_565702 = validateParameter(valid_565702, JString, required = true,
                                 default = nil)
  if valid_565702 != nil:
    section.add "api-version", valid_565702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565703: Call_SitesGetSiteBackupStatus_565695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565703.validator(path, query, header, formData, body)
  let scheme = call_565703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565703.url(scheme.get, call_565703.host, call_565703.base,
                         call_565703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565703, url, valid)

proc call*(call_565704: Call_SitesGetSiteBackupStatus_565695; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteBackupStatus
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565705 = newJObject()
  var query_565706 = newJObject()
  add(query_565706, "api-version", newJString(apiVersion))
  add(path_565705, "name", newJString(name))
  add(path_565705, "subscriptionId", newJString(subscriptionId))
  add(path_565705, "backupId", newJString(backupId))
  add(path_565705, "resourceGroupName", newJString(resourceGroupName))
  result = call_565704.call(path_565705, query_565706, nil, nil, nil)

var sitesGetSiteBackupStatus* = Call_SitesGetSiteBackupStatus_565695(
    name: "sitesGetSiteBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatus_565696, base: "",
    url: url_SitesGetSiteBackupStatus_565697, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackup_565707 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteBackup_565709(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackup_565708(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565710 = path.getOrDefault("name")
  valid_565710 = validateParameter(valid_565710, JString, required = true,
                                 default = nil)
  if valid_565710 != nil:
    section.add "name", valid_565710
  var valid_565711 = path.getOrDefault("subscriptionId")
  valid_565711 = validateParameter(valid_565711, JString, required = true,
                                 default = nil)
  if valid_565711 != nil:
    section.add "subscriptionId", valid_565711
  var valid_565712 = path.getOrDefault("backupId")
  valid_565712 = validateParameter(valid_565712, JString, required = true,
                                 default = nil)
  if valid_565712 != nil:
    section.add "backupId", valid_565712
  var valid_565713 = path.getOrDefault("resourceGroupName")
  valid_565713 = validateParameter(valid_565713, JString, required = true,
                                 default = nil)
  if valid_565713 != nil:
    section.add "resourceGroupName", valid_565713
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565714 = query.getOrDefault("api-version")
  valid_565714 = validateParameter(valid_565714, JString, required = true,
                                 default = nil)
  if valid_565714 != nil:
    section.add "api-version", valid_565714
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565715: Call_SitesDeleteBackup_565707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565715.validator(path, query, header, formData, body)
  let scheme = call_565715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565715.url(scheme.get, call_565715.host, call_565715.base,
                         call_565715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565715, url, valid)

proc call*(call_565716: Call_SitesDeleteBackup_565707; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteBackup
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565717 = newJObject()
  var query_565718 = newJObject()
  add(query_565718, "api-version", newJString(apiVersion))
  add(path_565717, "name", newJString(name))
  add(path_565717, "subscriptionId", newJString(subscriptionId))
  add(path_565717, "backupId", newJString(backupId))
  add(path_565717, "resourceGroupName", newJString(resourceGroupName))
  result = call_565716.call(path_565717, query_565718, nil, nil, nil)

var sitesDeleteBackup* = Call_SitesDeleteBackup_565707(name: "sitesDeleteBackup",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_SitesDeleteBackup_565708, base: "",
    url: url_SitesDeleteBackup_565709, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecrets_565719 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupStatusSecrets_565721(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecrets_565720(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565722 = path.getOrDefault("name")
  valid_565722 = validateParameter(valid_565722, JString, required = true,
                                 default = nil)
  if valid_565722 != nil:
    section.add "name", valid_565722
  var valid_565723 = path.getOrDefault("subscriptionId")
  valid_565723 = validateParameter(valid_565723, JString, required = true,
                                 default = nil)
  if valid_565723 != nil:
    section.add "subscriptionId", valid_565723
  var valid_565724 = path.getOrDefault("backupId")
  valid_565724 = validateParameter(valid_565724, JString, required = true,
                                 default = nil)
  if valid_565724 != nil:
    section.add "backupId", valid_565724
  var valid_565725 = path.getOrDefault("resourceGroupName")
  valid_565725 = validateParameter(valid_565725, JString, required = true,
                                 default = nil)
  if valid_565725 != nil:
    section.add "resourceGroupName", valid_565725
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565726 = query.getOrDefault("api-version")
  valid_565726 = validateParameter(valid_565726, JString, required = true,
                                 default = nil)
  if valid_565726 != nil:
    section.add "api-version", valid_565726
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565728: Call_SitesGetSiteBackupStatusSecrets_565719;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565728.validator(path, query, header, formData, body)
  let scheme = call_565728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565728.url(scheme.get, call_565728.host, call_565728.base,
                         call_565728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565728, url, valid)

proc call*(call_565729: Call_SitesGetSiteBackupStatusSecrets_565719;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesGetSiteBackupStatusSecrets
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_565730 = newJObject()
  var query_565731 = newJObject()
  var body_565732 = newJObject()
  add(query_565731, "api-version", newJString(apiVersion))
  add(path_565730, "name", newJString(name))
  add(path_565730, "subscriptionId", newJString(subscriptionId))
  add(path_565730, "backupId", newJString(backupId))
  add(path_565730, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565732 = request
  result = call_565729.call(path_565730, query_565731, nil, nil, body_565732)

var sitesGetSiteBackupStatusSecrets* = Call_SitesGetSiteBackupStatusSecrets_565719(
    name: "sitesGetSiteBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecrets_565720, base: "",
    url: url_SitesGetSiteBackupStatusSecrets_565721, schemes: {Scheme.Https})
type
  Call_SitesRestoreSite_565733 = ref object of OpenApiRestCall_563548
proc url_SitesRestoreSite_565735(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSite_565734(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565736 = path.getOrDefault("name")
  valid_565736 = validateParameter(valid_565736, JString, required = true,
                                 default = nil)
  if valid_565736 != nil:
    section.add "name", valid_565736
  var valid_565737 = path.getOrDefault("subscriptionId")
  valid_565737 = validateParameter(valid_565737, JString, required = true,
                                 default = nil)
  if valid_565737 != nil:
    section.add "subscriptionId", valid_565737
  var valid_565738 = path.getOrDefault("backupId")
  valid_565738 = validateParameter(valid_565738, JString, required = true,
                                 default = nil)
  if valid_565738 != nil:
    section.add "backupId", valid_565738
  var valid_565739 = path.getOrDefault("resourceGroupName")
  valid_565739 = validateParameter(valid_565739, JString, required = true,
                                 default = nil)
  if valid_565739 != nil:
    section.add "resourceGroupName", valid_565739
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565740 = query.getOrDefault("api-version")
  valid_565740 = validateParameter(valid_565740, JString, required = true,
                                 default = nil)
  if valid_565740 != nil:
    section.add "api-version", valid_565740
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565742: Call_SitesRestoreSite_565733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565742.validator(path, query, header, formData, body)
  let scheme = call_565742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565742.url(scheme.get, call_565742.host, call_565742.base,
                         call_565742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565742, url, valid)

proc call*(call_565743: Call_SitesRestoreSite_565733; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesRestoreSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup to restore
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_565744 = newJObject()
  var query_565745 = newJObject()
  var body_565746 = newJObject()
  add(query_565745, "api-version", newJString(apiVersion))
  add(path_565744, "name", newJString(name))
  add(path_565744, "subscriptionId", newJString(subscriptionId))
  add(path_565744, "backupId", newJString(backupId))
  add(path_565744, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565746 = request
  result = call_565743.call(path_565744, query_565745, nil, nil, body_565746)

var sitesRestoreSite* = Call_SitesRestoreSite_565733(name: "sitesRestoreSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSite_565734, base: "",
    url: url_SitesRestoreSite_565735, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettings_565747 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteAppSettings_565749(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettings_565748(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565750 = path.getOrDefault("name")
  valid_565750 = validateParameter(valid_565750, JString, required = true,
                                 default = nil)
  if valid_565750 != nil:
    section.add "name", valid_565750
  var valid_565751 = path.getOrDefault("subscriptionId")
  valid_565751 = validateParameter(valid_565751, JString, required = true,
                                 default = nil)
  if valid_565751 != nil:
    section.add "subscriptionId", valid_565751
  var valid_565752 = path.getOrDefault("resourceGroupName")
  valid_565752 = validateParameter(valid_565752, JString, required = true,
                                 default = nil)
  if valid_565752 != nil:
    section.add "resourceGroupName", valid_565752
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565753 = query.getOrDefault("api-version")
  valid_565753 = validateParameter(valid_565753, JString, required = true,
                                 default = nil)
  if valid_565753 != nil:
    section.add "api-version", valid_565753
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565755: Call_SitesUpdateSiteAppSettings_565747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565755.validator(path, query, header, formData, body)
  let scheme = call_565755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565755.url(scheme.get, call_565755.host, call_565755.base,
                         call_565755.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565755, url, valid)

proc call*(call_565756: Call_SitesUpdateSiteAppSettings_565747;
          appSettings: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteAppSettings
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565757 = newJObject()
  var query_565758 = newJObject()
  var body_565759 = newJObject()
  if appSettings != nil:
    body_565759 = appSettings
  add(query_565758, "api-version", newJString(apiVersion))
  add(path_565757, "name", newJString(name))
  add(path_565757, "subscriptionId", newJString(subscriptionId))
  add(path_565757, "resourceGroupName", newJString(resourceGroupName))
  result = call_565756.call(path_565757, query_565758, nil, nil, body_565759)

var sitesUpdateSiteAppSettings* = Call_SitesUpdateSiteAppSettings_565747(
    name: "sitesUpdateSiteAppSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettings_565748, base: "",
    url: url_SitesUpdateSiteAppSettings_565749, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettings_565760 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteAppSettings_565762(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettings_565761(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565763 = path.getOrDefault("name")
  valid_565763 = validateParameter(valid_565763, JString, required = true,
                                 default = nil)
  if valid_565763 != nil:
    section.add "name", valid_565763
  var valid_565764 = path.getOrDefault("subscriptionId")
  valid_565764 = validateParameter(valid_565764, JString, required = true,
                                 default = nil)
  if valid_565764 != nil:
    section.add "subscriptionId", valid_565764
  var valid_565765 = path.getOrDefault("resourceGroupName")
  valid_565765 = validateParameter(valid_565765, JString, required = true,
                                 default = nil)
  if valid_565765 != nil:
    section.add "resourceGroupName", valid_565765
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565766 = query.getOrDefault("api-version")
  valid_565766 = validateParameter(valid_565766, JString, required = true,
                                 default = nil)
  if valid_565766 != nil:
    section.add "api-version", valid_565766
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565767: Call_SitesListSiteAppSettings_565760; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565767.validator(path, query, header, formData, body)
  let scheme = call_565767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565767.url(scheme.get, call_565767.host, call_565767.base,
                         call_565767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565767, url, valid)

proc call*(call_565768: Call_SitesListSiteAppSettings_565760; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSiteAppSettings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565769 = newJObject()
  var query_565770 = newJObject()
  add(query_565770, "api-version", newJString(apiVersion))
  add(path_565769, "name", newJString(name))
  add(path_565769, "subscriptionId", newJString(subscriptionId))
  add(path_565769, "resourceGroupName", newJString(resourceGroupName))
  result = call_565768.call(path_565769, query_565770, nil, nil, nil)

var sitesListSiteAppSettings* = Call_SitesListSiteAppSettings_565760(
    name: "sitesListSiteAppSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettings_565761, base: "",
    url: url_SitesListSiteAppSettings_565762, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettings_565771 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteAuthSettings_565773(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettings_565772(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565774 = path.getOrDefault("name")
  valid_565774 = validateParameter(valid_565774, JString, required = true,
                                 default = nil)
  if valid_565774 != nil:
    section.add "name", valid_565774
  var valid_565775 = path.getOrDefault("subscriptionId")
  valid_565775 = validateParameter(valid_565775, JString, required = true,
                                 default = nil)
  if valid_565775 != nil:
    section.add "subscriptionId", valid_565775
  var valid_565776 = path.getOrDefault("resourceGroupName")
  valid_565776 = validateParameter(valid_565776, JString, required = true,
                                 default = nil)
  if valid_565776 != nil:
    section.add "resourceGroupName", valid_565776
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565777 = query.getOrDefault("api-version")
  valid_565777 = validateParameter(valid_565777, JString, required = true,
                                 default = nil)
  if valid_565777 != nil:
    section.add "api-version", valid_565777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565779: Call_SitesUpdateSiteAuthSettings_565771; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565779.validator(path, query, header, formData, body)
  let scheme = call_565779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565779.url(scheme.get, call_565779.host, call_565779.base,
                         call_565779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565779, url, valid)

proc call*(call_565780: Call_SitesUpdateSiteAuthSettings_565771;
          apiVersion: string; siteAuthSettings: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteAuthSettings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565781 = newJObject()
  var query_565782 = newJObject()
  var body_565783 = newJObject()
  add(query_565782, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_565783 = siteAuthSettings
  add(path_565781, "name", newJString(name))
  add(path_565781, "subscriptionId", newJString(subscriptionId))
  add(path_565781, "resourceGroupName", newJString(resourceGroupName))
  result = call_565780.call(path_565781, query_565782, nil, nil, body_565783)

var sitesUpdateSiteAuthSettings* = Call_SitesUpdateSiteAuthSettings_565771(
    name: "sitesUpdateSiteAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettings_565772, base: "",
    url: url_SitesUpdateSiteAuthSettings_565773, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettings_565784 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteAuthSettings_565786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettings_565785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565787 = path.getOrDefault("name")
  valid_565787 = validateParameter(valid_565787, JString, required = true,
                                 default = nil)
  if valid_565787 != nil:
    section.add "name", valid_565787
  var valid_565788 = path.getOrDefault("subscriptionId")
  valid_565788 = validateParameter(valid_565788, JString, required = true,
                                 default = nil)
  if valid_565788 != nil:
    section.add "subscriptionId", valid_565788
  var valid_565789 = path.getOrDefault("resourceGroupName")
  valid_565789 = validateParameter(valid_565789, JString, required = true,
                                 default = nil)
  if valid_565789 != nil:
    section.add "resourceGroupName", valid_565789
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565790 = query.getOrDefault("api-version")
  valid_565790 = validateParameter(valid_565790, JString, required = true,
                                 default = nil)
  if valid_565790 != nil:
    section.add "api-version", valid_565790
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565791: Call_SitesListSiteAuthSettings_565784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565791.validator(path, query, header, formData, body)
  let scheme = call_565791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565791.url(scheme.get, call_565791.host, call_565791.base,
                         call_565791.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565791, url, valid)

proc call*(call_565792: Call_SitesListSiteAuthSettings_565784; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSiteAuthSettings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565793 = newJObject()
  var query_565794 = newJObject()
  add(query_565794, "api-version", newJString(apiVersion))
  add(path_565793, "name", newJString(name))
  add(path_565793, "subscriptionId", newJString(subscriptionId))
  add(path_565793, "resourceGroupName", newJString(resourceGroupName))
  result = call_565792.call(path_565793, query_565794, nil, nil, nil)

var sitesListSiteAuthSettings* = Call_SitesListSiteAuthSettings_565784(
    name: "sitesListSiteAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettings_565785, base: "",
    url: url_SitesListSiteAuthSettings_565786, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfiguration_565795 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteBackupConfiguration_565797(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfiguration_565796(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565798 = path.getOrDefault("name")
  valid_565798 = validateParameter(valid_565798, JString, required = true,
                                 default = nil)
  if valid_565798 != nil:
    section.add "name", valid_565798
  var valid_565799 = path.getOrDefault("subscriptionId")
  valid_565799 = validateParameter(valid_565799, JString, required = true,
                                 default = nil)
  if valid_565799 != nil:
    section.add "subscriptionId", valid_565799
  var valid_565800 = path.getOrDefault("resourceGroupName")
  valid_565800 = validateParameter(valid_565800, JString, required = true,
                                 default = nil)
  if valid_565800 != nil:
    section.add "resourceGroupName", valid_565800
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565801 = query.getOrDefault("api-version")
  valid_565801 = validateParameter(valid_565801, JString, required = true,
                                 default = nil)
  if valid_565801 != nil:
    section.add "api-version", valid_565801
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565803: Call_SitesUpdateSiteBackupConfiguration_565795;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565803.validator(path, query, header, formData, body)
  let scheme = call_565803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565803.url(scheme.get, call_565803.host, call_565803.base,
                         call_565803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565803, url, valid)

proc call*(call_565804: Call_SitesUpdateSiteBackupConfiguration_565795;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfiguration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_565805 = newJObject()
  var query_565806 = newJObject()
  var body_565807 = newJObject()
  add(query_565806, "api-version", newJString(apiVersion))
  add(path_565805, "name", newJString(name))
  add(path_565805, "subscriptionId", newJString(subscriptionId))
  add(path_565805, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565807 = request
  result = call_565804.call(path_565805, query_565806, nil, nil, body_565807)

var sitesUpdateSiteBackupConfiguration* = Call_SitesUpdateSiteBackupConfiguration_565795(
    name: "sitesUpdateSiteBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfiguration_565796, base: "",
    url: url_SitesUpdateSiteBackupConfiguration_565797, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfiguration_565808 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupConfiguration_565810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfiguration_565809(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565811 = path.getOrDefault("name")
  valid_565811 = validateParameter(valid_565811, JString, required = true,
                                 default = nil)
  if valid_565811 != nil:
    section.add "name", valid_565811
  var valid_565812 = path.getOrDefault("subscriptionId")
  valid_565812 = validateParameter(valid_565812, JString, required = true,
                                 default = nil)
  if valid_565812 != nil:
    section.add "subscriptionId", valid_565812
  var valid_565813 = path.getOrDefault("resourceGroupName")
  valid_565813 = validateParameter(valid_565813, JString, required = true,
                                 default = nil)
  if valid_565813 != nil:
    section.add "resourceGroupName", valid_565813
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565814 = query.getOrDefault("api-version")
  valid_565814 = validateParameter(valid_565814, JString, required = true,
                                 default = nil)
  if valid_565814 != nil:
    section.add "api-version", valid_565814
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565815: Call_SitesGetSiteBackupConfiguration_565808;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565815.validator(path, query, header, formData, body)
  let scheme = call_565815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565815.url(scheme.get, call_565815.host, call_565815.base,
                         call_565815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565815, url, valid)

proc call*(call_565816: Call_SitesGetSiteBackupConfiguration_565808;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteBackupConfiguration
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565817 = newJObject()
  var query_565818 = newJObject()
  add(query_565818, "api-version", newJString(apiVersion))
  add(path_565817, "name", newJString(name))
  add(path_565817, "subscriptionId", newJString(subscriptionId))
  add(path_565817, "resourceGroupName", newJString(resourceGroupName))
  result = call_565816.call(path_565817, query_565818, nil, nil, nil)

var sitesGetSiteBackupConfiguration* = Call_SitesGetSiteBackupConfiguration_565808(
    name: "sitesGetSiteBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfiguration_565809, base: "",
    url: url_SitesGetSiteBackupConfiguration_565810, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStrings_565819 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteConnectionStrings_565821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStrings_565820(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565822 = path.getOrDefault("name")
  valid_565822 = validateParameter(valid_565822, JString, required = true,
                                 default = nil)
  if valid_565822 != nil:
    section.add "name", valid_565822
  var valid_565823 = path.getOrDefault("subscriptionId")
  valid_565823 = validateParameter(valid_565823, JString, required = true,
                                 default = nil)
  if valid_565823 != nil:
    section.add "subscriptionId", valid_565823
  var valid_565824 = path.getOrDefault("resourceGroupName")
  valid_565824 = validateParameter(valid_565824, JString, required = true,
                                 default = nil)
  if valid_565824 != nil:
    section.add "resourceGroupName", valid_565824
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565825 = query.getOrDefault("api-version")
  valid_565825 = validateParameter(valid_565825, JString, required = true,
                                 default = nil)
  if valid_565825 != nil:
    section.add "api-version", valid_565825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565827: Call_SitesUpdateSiteConnectionStrings_565819;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565827.validator(path, query, header, formData, body)
  let scheme = call_565827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565827.url(scheme.get, call_565827.host, call_565827.base,
                         call_565827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565827, url, valid)

proc call*(call_565828: Call_SitesUpdateSiteConnectionStrings_565819;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## sitesUpdateSiteConnectionStrings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  var path_565829 = newJObject()
  var query_565830 = newJObject()
  var body_565831 = newJObject()
  add(query_565830, "api-version", newJString(apiVersion))
  add(path_565829, "name", newJString(name))
  add(path_565829, "subscriptionId", newJString(subscriptionId))
  add(path_565829, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_565831 = connectionStrings
  result = call_565828.call(path_565829, query_565830, nil, nil, body_565831)

var sitesUpdateSiteConnectionStrings* = Call_SitesUpdateSiteConnectionStrings_565819(
    name: "sitesUpdateSiteConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStrings_565820, base: "",
    url: url_SitesUpdateSiteConnectionStrings_565821, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStrings_565832 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteConnectionStrings_565834(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStrings_565833(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565835 = path.getOrDefault("name")
  valid_565835 = validateParameter(valid_565835, JString, required = true,
                                 default = nil)
  if valid_565835 != nil:
    section.add "name", valid_565835
  var valid_565836 = path.getOrDefault("subscriptionId")
  valid_565836 = validateParameter(valid_565836, JString, required = true,
                                 default = nil)
  if valid_565836 != nil:
    section.add "subscriptionId", valid_565836
  var valid_565837 = path.getOrDefault("resourceGroupName")
  valid_565837 = validateParameter(valid_565837, JString, required = true,
                                 default = nil)
  if valid_565837 != nil:
    section.add "resourceGroupName", valid_565837
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565838 = query.getOrDefault("api-version")
  valid_565838 = validateParameter(valid_565838, JString, required = true,
                                 default = nil)
  if valid_565838 != nil:
    section.add "api-version", valid_565838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565839: Call_SitesListSiteConnectionStrings_565832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565839.validator(path, query, header, formData, body)
  let scheme = call_565839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565839.url(scheme.get, call_565839.host, call_565839.base,
                         call_565839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565839, url, valid)

proc call*(call_565840: Call_SitesListSiteConnectionStrings_565832;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteConnectionStrings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565841 = newJObject()
  var query_565842 = newJObject()
  add(query_565842, "api-version", newJString(apiVersion))
  add(path_565841, "name", newJString(name))
  add(path_565841, "subscriptionId", newJString(subscriptionId))
  add(path_565841, "resourceGroupName", newJString(resourceGroupName))
  result = call_565840.call(path_565841, query_565842, nil, nil, nil)

var sitesListSiteConnectionStrings* = Call_SitesListSiteConnectionStrings_565832(
    name: "sitesListSiteConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStrings_565833, base: "",
    url: url_SitesListSiteConnectionStrings_565834, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfig_565854 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteLogsConfig_565856(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfig_565855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565857 = path.getOrDefault("name")
  valid_565857 = validateParameter(valid_565857, JString, required = true,
                                 default = nil)
  if valid_565857 != nil:
    section.add "name", valid_565857
  var valid_565858 = path.getOrDefault("subscriptionId")
  valid_565858 = validateParameter(valid_565858, JString, required = true,
                                 default = nil)
  if valid_565858 != nil:
    section.add "subscriptionId", valid_565858
  var valid_565859 = path.getOrDefault("resourceGroupName")
  valid_565859 = validateParameter(valid_565859, JString, required = true,
                                 default = nil)
  if valid_565859 != nil:
    section.add "resourceGroupName", valid_565859
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565860 = query.getOrDefault("api-version")
  valid_565860 = validateParameter(valid_565860, JString, required = true,
                                 default = nil)
  if valid_565860 != nil:
    section.add "api-version", valid_565860
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565862: Call_SitesUpdateSiteLogsConfig_565854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565862.validator(path, query, header, formData, body)
  let scheme = call_565862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565862.url(scheme.get, call_565862.host, call_565862.base,
                         call_565862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565862, url, valid)

proc call*(call_565863: Call_SitesUpdateSiteLogsConfig_565854; apiVersion: string;
          siteLogsConfig: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteLogsConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565864 = newJObject()
  var query_565865 = newJObject()
  var body_565866 = newJObject()
  add(query_565865, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_565866 = siteLogsConfig
  add(path_565864, "name", newJString(name))
  add(path_565864, "subscriptionId", newJString(subscriptionId))
  add(path_565864, "resourceGroupName", newJString(resourceGroupName))
  result = call_565863.call(path_565864, query_565865, nil, nil, body_565866)

var sitesUpdateSiteLogsConfig* = Call_SitesUpdateSiteLogsConfig_565854(
    name: "sitesUpdateSiteLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfig_565855, base: "",
    url: url_SitesUpdateSiteLogsConfig_565856, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfig_565843 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteLogsConfig_565845(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfig_565844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565846 = path.getOrDefault("name")
  valid_565846 = validateParameter(valid_565846, JString, required = true,
                                 default = nil)
  if valid_565846 != nil:
    section.add "name", valid_565846
  var valid_565847 = path.getOrDefault("subscriptionId")
  valid_565847 = validateParameter(valid_565847, JString, required = true,
                                 default = nil)
  if valid_565847 != nil:
    section.add "subscriptionId", valid_565847
  var valid_565848 = path.getOrDefault("resourceGroupName")
  valid_565848 = validateParameter(valid_565848, JString, required = true,
                                 default = nil)
  if valid_565848 != nil:
    section.add "resourceGroupName", valid_565848
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565849 = query.getOrDefault("api-version")
  valid_565849 = validateParameter(valid_565849, JString, required = true,
                                 default = nil)
  if valid_565849 != nil:
    section.add "api-version", valid_565849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565850: Call_SitesGetSiteLogsConfig_565843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565850.validator(path, query, header, formData, body)
  let scheme = call_565850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565850.url(scheme.get, call_565850.host, call_565850.base,
                         call_565850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565850, url, valid)

proc call*(call_565851: Call_SitesGetSiteLogsConfig_565843; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteLogsConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565852 = newJObject()
  var query_565853 = newJObject()
  add(query_565853, "api-version", newJString(apiVersion))
  add(path_565852, "name", newJString(name))
  add(path_565852, "subscriptionId", newJString(subscriptionId))
  add(path_565852, "resourceGroupName", newJString(resourceGroupName))
  result = call_565851.call(path_565852, query_565853, nil, nil, nil)

var sitesGetSiteLogsConfig* = Call_SitesGetSiteLogsConfig_565843(
    name: "sitesGetSiteLogsConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_SitesGetSiteLogsConfig_565844, base: "",
    url: url_SitesGetSiteLogsConfig_565845, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadata_565867 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteMetadata_565869(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadata_565868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565870 = path.getOrDefault("name")
  valid_565870 = validateParameter(valid_565870, JString, required = true,
                                 default = nil)
  if valid_565870 != nil:
    section.add "name", valid_565870
  var valid_565871 = path.getOrDefault("subscriptionId")
  valid_565871 = validateParameter(valid_565871, JString, required = true,
                                 default = nil)
  if valid_565871 != nil:
    section.add "subscriptionId", valid_565871
  var valid_565872 = path.getOrDefault("resourceGroupName")
  valid_565872 = validateParameter(valid_565872, JString, required = true,
                                 default = nil)
  if valid_565872 != nil:
    section.add "resourceGroupName", valid_565872
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565873 = query.getOrDefault("api-version")
  valid_565873 = validateParameter(valid_565873, JString, required = true,
                                 default = nil)
  if valid_565873 != nil:
    section.add "api-version", valid_565873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565875: Call_SitesUpdateSiteMetadata_565867; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565875.validator(path, query, header, formData, body)
  let scheme = call_565875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565875.url(scheme.get, call_565875.host, call_565875.base,
                         call_565875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565875, url, valid)

proc call*(call_565876: Call_SitesUpdateSiteMetadata_565867; metadata: JsonNode;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteMetadata
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565877 = newJObject()
  var query_565878 = newJObject()
  var body_565879 = newJObject()
  if metadata != nil:
    body_565879 = metadata
  add(query_565878, "api-version", newJString(apiVersion))
  add(path_565877, "name", newJString(name))
  add(path_565877, "subscriptionId", newJString(subscriptionId))
  add(path_565877, "resourceGroupName", newJString(resourceGroupName))
  result = call_565876.call(path_565877, query_565878, nil, nil, body_565879)

var sitesUpdateSiteMetadata* = Call_SitesUpdateSiteMetadata_565867(
    name: "sitesUpdateSiteMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_SitesUpdateSiteMetadata_565868, base: "",
    url: url_SitesUpdateSiteMetadata_565869, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadata_565880 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteMetadata_565882(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadata_565881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565883 = path.getOrDefault("name")
  valid_565883 = validateParameter(valid_565883, JString, required = true,
                                 default = nil)
  if valid_565883 != nil:
    section.add "name", valid_565883
  var valid_565884 = path.getOrDefault("subscriptionId")
  valid_565884 = validateParameter(valid_565884, JString, required = true,
                                 default = nil)
  if valid_565884 != nil:
    section.add "subscriptionId", valid_565884
  var valid_565885 = path.getOrDefault("resourceGroupName")
  valid_565885 = validateParameter(valid_565885, JString, required = true,
                                 default = nil)
  if valid_565885 != nil:
    section.add "resourceGroupName", valid_565885
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565886 = query.getOrDefault("api-version")
  valid_565886 = validateParameter(valid_565886, JString, required = true,
                                 default = nil)
  if valid_565886 != nil:
    section.add "api-version", valid_565886
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565887: Call_SitesListSiteMetadata_565880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565887.validator(path, query, header, formData, body)
  let scheme = call_565887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565887.url(scheme.get, call_565887.host, call_565887.base,
                         call_565887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565887, url, valid)

proc call*(call_565888: Call_SitesListSiteMetadata_565880; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSiteMetadata
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565889 = newJObject()
  var query_565890 = newJObject()
  add(query_565890, "api-version", newJString(apiVersion))
  add(path_565889, "name", newJString(name))
  add(path_565889, "subscriptionId", newJString(subscriptionId))
  add(path_565889, "resourceGroupName", newJString(resourceGroupName))
  result = call_565888.call(path_565889, query_565890, nil, nil, nil)

var sitesListSiteMetadata* = Call_SitesListSiteMetadata_565880(
    name: "sitesListSiteMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_SitesListSiteMetadata_565881, base: "",
    url: url_SitesListSiteMetadata_565882, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentials_565891 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePublishingCredentials_565893(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentials_565892(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565894 = path.getOrDefault("name")
  valid_565894 = validateParameter(valid_565894, JString, required = true,
                                 default = nil)
  if valid_565894 != nil:
    section.add "name", valid_565894
  var valid_565895 = path.getOrDefault("subscriptionId")
  valid_565895 = validateParameter(valid_565895, JString, required = true,
                                 default = nil)
  if valid_565895 != nil:
    section.add "subscriptionId", valid_565895
  var valid_565896 = path.getOrDefault("resourceGroupName")
  valid_565896 = validateParameter(valid_565896, JString, required = true,
                                 default = nil)
  if valid_565896 != nil:
    section.add "resourceGroupName", valid_565896
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565897 = query.getOrDefault("api-version")
  valid_565897 = validateParameter(valid_565897, JString, required = true,
                                 default = nil)
  if valid_565897 != nil:
    section.add "api-version", valid_565897
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565898: Call_SitesListSitePublishingCredentials_565891;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_565898.validator(path, query, header, formData, body)
  let scheme = call_565898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565898.url(scheme.get, call_565898.host, call_565898.base,
                         call_565898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565898, url, valid)

proc call*(call_565899: Call_SitesListSitePublishingCredentials_565891;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSitePublishingCredentials
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565900 = newJObject()
  var query_565901 = newJObject()
  add(query_565901, "api-version", newJString(apiVersion))
  add(path_565900, "name", newJString(name))
  add(path_565900, "subscriptionId", newJString(subscriptionId))
  add(path_565900, "resourceGroupName", newJString(resourceGroupName))
  result = call_565899.call(path_565900, query_565901, nil, nil, nil)

var sitesListSitePublishingCredentials* = Call_SitesListSitePublishingCredentials_565891(
    name: "sitesListSitePublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentials_565892, base: "",
    url: url_SitesListSitePublishingCredentials_565893, schemes: {Scheme.Https})
type
  Call_SitesUpdateSlotConfigNames_565913 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSlotConfigNames_565915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSlotConfigNames_565914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565916 = path.getOrDefault("name")
  valid_565916 = validateParameter(valid_565916, JString, required = true,
                                 default = nil)
  if valid_565916 != nil:
    section.add "name", valid_565916
  var valid_565917 = path.getOrDefault("subscriptionId")
  valid_565917 = validateParameter(valid_565917, JString, required = true,
                                 default = nil)
  if valid_565917 != nil:
    section.add "subscriptionId", valid_565917
  var valid_565918 = path.getOrDefault("resourceGroupName")
  valid_565918 = validateParameter(valid_565918, JString, required = true,
                                 default = nil)
  if valid_565918 != nil:
    section.add "resourceGroupName", valid_565918
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565919 = query.getOrDefault("api-version")
  valid_565919 = validateParameter(valid_565919, JString, required = true,
                                 default = nil)
  if valid_565919 != nil:
    section.add "api-version", valid_565919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565921: Call_SitesUpdateSlotConfigNames_565913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565921.validator(path, query, header, formData, body)
  let scheme = call_565921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565921.url(scheme.get, call_565921.host, call_565921.base,
                         call_565921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565921, url, valid)

proc call*(call_565922: Call_SitesUpdateSlotConfigNames_565913; apiVersion: string;
          slotConfigNames: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSlotConfigNames
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slotConfigNames: JObject (required)
  ##                  : Request body containing the names of application settings and connection strings
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565923 = newJObject()
  var query_565924 = newJObject()
  var body_565925 = newJObject()
  add(query_565924, "api-version", newJString(apiVersion))
  if slotConfigNames != nil:
    body_565925 = slotConfigNames
  add(path_565923, "name", newJString(name))
  add(path_565923, "subscriptionId", newJString(subscriptionId))
  add(path_565923, "resourceGroupName", newJString(resourceGroupName))
  result = call_565922.call(path_565923, query_565924, nil, nil, body_565925)

var sitesUpdateSlotConfigNames* = Call_SitesUpdateSlotConfigNames_565913(
    name: "sitesUpdateSlotConfigNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesUpdateSlotConfigNames_565914, base: "",
    url: url_SitesUpdateSlotConfigNames_565915, schemes: {Scheme.Https})
type
  Call_SitesGetSlotConfigNames_565902 = ref object of OpenApiRestCall_563548
proc url_SitesGetSlotConfigNames_565904(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotConfigNames_565903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565905 = path.getOrDefault("name")
  valid_565905 = validateParameter(valid_565905, JString, required = true,
                                 default = nil)
  if valid_565905 != nil:
    section.add "name", valid_565905
  var valid_565906 = path.getOrDefault("subscriptionId")
  valid_565906 = validateParameter(valid_565906, JString, required = true,
                                 default = nil)
  if valid_565906 != nil:
    section.add "subscriptionId", valid_565906
  var valid_565907 = path.getOrDefault("resourceGroupName")
  valid_565907 = validateParameter(valid_565907, JString, required = true,
                                 default = nil)
  if valid_565907 != nil:
    section.add "resourceGroupName", valid_565907
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565908 = query.getOrDefault("api-version")
  valid_565908 = validateParameter(valid_565908, JString, required = true,
                                 default = nil)
  if valid_565908 != nil:
    section.add "api-version", valid_565908
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565909: Call_SitesGetSlotConfigNames_565902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565909.validator(path, query, header, formData, body)
  let scheme = call_565909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565909.url(scheme.get, call_565909.host, call_565909.base,
                         call_565909.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565909, url, valid)

proc call*(call_565910: Call_SitesGetSlotConfigNames_565902; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSlotConfigNames
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565911 = newJObject()
  var query_565912 = newJObject()
  add(query_565912, "api-version", newJString(apiVersion))
  add(path_565911, "name", newJString(name))
  add(path_565911, "subscriptionId", newJString(subscriptionId))
  add(path_565911, "resourceGroupName", newJString(resourceGroupName))
  result = call_565910.call(path_565911, query_565912, nil, nil, nil)

var sitesGetSlotConfigNames* = Call_SitesGetSlotConfigNames_565902(
    name: "sitesGetSlotConfigNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_SitesGetSlotConfigNames_565903, base: "",
    url: url_SitesGetSlotConfigNames_565904, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfig_565937 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteConfig_565939(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfig_565938(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565940 = path.getOrDefault("name")
  valid_565940 = validateParameter(valid_565940, JString, required = true,
                                 default = nil)
  if valid_565940 != nil:
    section.add "name", valid_565940
  var valid_565941 = path.getOrDefault("subscriptionId")
  valid_565941 = validateParameter(valid_565941, JString, required = true,
                                 default = nil)
  if valid_565941 != nil:
    section.add "subscriptionId", valid_565941
  var valid_565942 = path.getOrDefault("resourceGroupName")
  valid_565942 = validateParameter(valid_565942, JString, required = true,
                                 default = nil)
  if valid_565942 != nil:
    section.add "resourceGroupName", valid_565942
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565943 = query.getOrDefault("api-version")
  valid_565943 = validateParameter(valid_565943, JString, required = true,
                                 default = nil)
  if valid_565943 != nil:
    section.add "api-version", valid_565943
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565945: Call_SitesCreateOrUpdateSiteConfig_565937; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565945.validator(path, query, header, formData, body)
  let scheme = call_565945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565945.url(scheme.get, call_565945.host, call_565945.base,
                         call_565945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565945, url, valid)

proc call*(call_565946: Call_SitesCreateOrUpdateSiteConfig_565937;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565947 = newJObject()
  var query_565948 = newJObject()
  var body_565949 = newJObject()
  add(query_565948, "api-version", newJString(apiVersion))
  add(path_565947, "name", newJString(name))
  add(path_565947, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_565949 = siteConfig
  add(path_565947, "resourceGroupName", newJString(resourceGroupName))
  result = call_565946.call(path_565947, query_565948, nil, nil, body_565949)

var sitesCreateOrUpdateSiteConfig* = Call_SitesCreateOrUpdateSiteConfig_565937(
    name: "sitesCreateOrUpdateSiteConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfig_565938, base: "",
    url: url_SitesCreateOrUpdateSiteConfig_565939, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfig_565926 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteConfig_565928(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfig_565927(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565929 = path.getOrDefault("name")
  valid_565929 = validateParameter(valid_565929, JString, required = true,
                                 default = nil)
  if valid_565929 != nil:
    section.add "name", valid_565929
  var valid_565930 = path.getOrDefault("subscriptionId")
  valid_565930 = validateParameter(valid_565930, JString, required = true,
                                 default = nil)
  if valid_565930 != nil:
    section.add "subscriptionId", valid_565930
  var valid_565931 = path.getOrDefault("resourceGroupName")
  valid_565931 = validateParameter(valid_565931, JString, required = true,
                                 default = nil)
  if valid_565931 != nil:
    section.add "resourceGroupName", valid_565931
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565932 = query.getOrDefault("api-version")
  valid_565932 = validateParameter(valid_565932, JString, required = true,
                                 default = nil)
  if valid_565932 != nil:
    section.add "api-version", valid_565932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565933: Call_SitesGetSiteConfig_565926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565933.validator(path, query, header, formData, body)
  let scheme = call_565933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565933.url(scheme.get, call_565933.host, call_565933.base,
                         call_565933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565933, url, valid)

proc call*(call_565934: Call_SitesGetSiteConfig_565926; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565935 = newJObject()
  var query_565936 = newJObject()
  add(query_565936, "api-version", newJString(apiVersion))
  add(path_565935, "name", newJString(name))
  add(path_565935, "subscriptionId", newJString(subscriptionId))
  add(path_565935, "resourceGroupName", newJString(resourceGroupName))
  result = call_565934.call(path_565935, query_565936, nil, nil, nil)

var sitesGetSiteConfig* = Call_SitesGetSiteConfig_565926(
    name: "sitesGetSiteConfig", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesGetSiteConfig_565927, base: "",
    url: url_SitesGetSiteConfig_565928, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfig_565950 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteConfig_565952(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfig_565951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565953 = path.getOrDefault("name")
  valid_565953 = validateParameter(valid_565953, JString, required = true,
                                 default = nil)
  if valid_565953 != nil:
    section.add "name", valid_565953
  var valid_565954 = path.getOrDefault("subscriptionId")
  valid_565954 = validateParameter(valid_565954, JString, required = true,
                                 default = nil)
  if valid_565954 != nil:
    section.add "subscriptionId", valid_565954
  var valid_565955 = path.getOrDefault("resourceGroupName")
  valid_565955 = validateParameter(valid_565955, JString, required = true,
                                 default = nil)
  if valid_565955 != nil:
    section.add "resourceGroupName", valid_565955
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565956 = query.getOrDefault("api-version")
  valid_565956 = validateParameter(valid_565956, JString, required = true,
                                 default = nil)
  if valid_565956 != nil:
    section.add "api-version", valid_565956
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565958: Call_SitesUpdateSiteConfig_565950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565958.validator(path, query, header, formData, body)
  let scheme = call_565958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565958.url(scheme.get, call_565958.host, call_565958.base,
                         call_565958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565958, url, valid)

proc call*(call_565959: Call_SitesUpdateSiteConfig_565950; apiVersion: string;
          name: string; subscriptionId: string; siteConfig: JsonNode;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565960 = newJObject()
  var query_565961 = newJObject()
  var body_565962 = newJObject()
  add(query_565961, "api-version", newJString(apiVersion))
  add(path_565960, "name", newJString(name))
  add(path_565960, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_565962 = siteConfig
  add(path_565960, "resourceGroupName", newJString(resourceGroupName))
  result = call_565959.call(path_565960, query_565961, nil, nil, body_565962)

var sitesUpdateSiteConfig* = Call_SitesUpdateSiteConfig_565950(
    name: "sitesUpdateSiteConfig", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_SitesUpdateSiteConfig_565951, base: "",
    url: url_SitesUpdateSiteConfig_565952, schemes: {Scheme.Https})
type
  Call_SitesGetDeployments_565963 = ref object of OpenApiRestCall_563548
proc url_SitesGetDeployments_565965(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployments_565964(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565966 = path.getOrDefault("name")
  valid_565966 = validateParameter(valid_565966, JString, required = true,
                                 default = nil)
  if valid_565966 != nil:
    section.add "name", valid_565966
  var valid_565967 = path.getOrDefault("subscriptionId")
  valid_565967 = validateParameter(valid_565967, JString, required = true,
                                 default = nil)
  if valid_565967 != nil:
    section.add "subscriptionId", valid_565967
  var valid_565968 = path.getOrDefault("resourceGroupName")
  valid_565968 = validateParameter(valid_565968, JString, required = true,
                                 default = nil)
  if valid_565968 != nil:
    section.add "resourceGroupName", valid_565968
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565969 = query.getOrDefault("api-version")
  valid_565969 = validateParameter(valid_565969, JString, required = true,
                                 default = nil)
  if valid_565969 != nil:
    section.add "api-version", valid_565969
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565970: Call_SitesGetDeployments_565963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565970.validator(path, query, header, formData, body)
  let scheme = call_565970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565970.url(scheme.get, call_565970.host, call_565970.base,
                         call_565970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565970, url, valid)

proc call*(call_565971: Call_SitesGetDeployments_565963; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetDeployments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565972 = newJObject()
  var query_565973 = newJObject()
  add(query_565973, "api-version", newJString(apiVersion))
  add(path_565972, "name", newJString(name))
  add(path_565972, "subscriptionId", newJString(subscriptionId))
  add(path_565972, "resourceGroupName", newJString(resourceGroupName))
  result = call_565971.call(path_565972, query_565973, nil, nil, nil)

var sitesGetDeployments* = Call_SitesGetDeployments_565963(
    name: "sitesGetDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_SitesGetDeployments_565964, base: "",
    url: url_SitesGetDeployments_565965, schemes: {Scheme.Https})
type
  Call_SitesCreateDeployment_565986 = ref object of OpenApiRestCall_563548
proc url_SitesCreateDeployment_565988(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeployment_565987(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_565989 = path.getOrDefault("id")
  valid_565989 = validateParameter(valid_565989, JString, required = true,
                                 default = nil)
  if valid_565989 != nil:
    section.add "id", valid_565989
  var valid_565990 = path.getOrDefault("name")
  valid_565990 = validateParameter(valid_565990, JString, required = true,
                                 default = nil)
  if valid_565990 != nil:
    section.add "name", valid_565990
  var valid_565991 = path.getOrDefault("subscriptionId")
  valid_565991 = validateParameter(valid_565991, JString, required = true,
                                 default = nil)
  if valid_565991 != nil:
    section.add "subscriptionId", valid_565991
  var valid_565992 = path.getOrDefault("resourceGroupName")
  valid_565992 = validateParameter(valid_565992, JString, required = true,
                                 default = nil)
  if valid_565992 != nil:
    section.add "resourceGroupName", valid_565992
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565993 = query.getOrDefault("api-version")
  valid_565993 = validateParameter(valid_565993, JString, required = true,
                                 default = nil)
  if valid_565993 != nil:
    section.add "api-version", valid_565993
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565995: Call_SitesCreateDeployment_565986; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565995.validator(path, query, header, formData, body)
  let scheme = call_565995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565995.url(scheme.get, call_565995.host, call_565995.base,
                         call_565995.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565995, url, valid)

proc call*(call_565996: Call_SitesCreateDeployment_565986; apiVersion: string;
          id: string; name: string; subscriptionId: string; deployment: JsonNode;
          resourceGroupName: string): Recallable =
  ## sitesCreateDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deployment: JObject (required)
  ##             : Details of deployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565997 = newJObject()
  var query_565998 = newJObject()
  var body_565999 = newJObject()
  add(query_565998, "api-version", newJString(apiVersion))
  add(path_565997, "id", newJString(id))
  add(path_565997, "name", newJString(name))
  add(path_565997, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_565999 = deployment
  add(path_565997, "resourceGroupName", newJString(resourceGroupName))
  result = call_565996.call(path_565997, query_565998, nil, nil, body_565999)

var sitesCreateDeployment* = Call_SitesCreateDeployment_565986(
    name: "sitesCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesCreateDeployment_565987, base: "",
    url: url_SitesCreateDeployment_565988, schemes: {Scheme.Https})
type
  Call_SitesGetDeployment_565974 = ref object of OpenApiRestCall_563548
proc url_SitesGetDeployment_565976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeployment_565975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_565977 = path.getOrDefault("id")
  valid_565977 = validateParameter(valid_565977, JString, required = true,
                                 default = nil)
  if valid_565977 != nil:
    section.add "id", valid_565977
  var valid_565978 = path.getOrDefault("name")
  valid_565978 = validateParameter(valid_565978, JString, required = true,
                                 default = nil)
  if valid_565978 != nil:
    section.add "name", valid_565978
  var valid_565979 = path.getOrDefault("subscriptionId")
  valid_565979 = validateParameter(valid_565979, JString, required = true,
                                 default = nil)
  if valid_565979 != nil:
    section.add "subscriptionId", valid_565979
  var valid_565980 = path.getOrDefault("resourceGroupName")
  valid_565980 = validateParameter(valid_565980, JString, required = true,
                                 default = nil)
  if valid_565980 != nil:
    section.add "resourceGroupName", valid_565980
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565981 = query.getOrDefault("api-version")
  valid_565981 = validateParameter(valid_565981, JString, required = true,
                                 default = nil)
  if valid_565981 != nil:
    section.add "api-version", valid_565981
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565982: Call_SitesGetDeployment_565974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_565982.validator(path, query, header, formData, body)
  let scheme = call_565982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565982.url(scheme.get, call_565982.host, call_565982.base,
                         call_565982.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565982, url, valid)

proc call*(call_565983: Call_SitesGetDeployment_565974; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_565984 = newJObject()
  var query_565985 = newJObject()
  add(query_565985, "api-version", newJString(apiVersion))
  add(path_565984, "id", newJString(id))
  add(path_565984, "name", newJString(name))
  add(path_565984, "subscriptionId", newJString(subscriptionId))
  add(path_565984, "resourceGroupName", newJString(resourceGroupName))
  result = call_565983.call(path_565984, query_565985, nil, nil, nil)

var sitesGetDeployment* = Call_SitesGetDeployment_565974(
    name: "sitesGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesGetDeployment_565975, base: "",
    url: url_SitesGetDeployment_565976, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeployment_566000 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteDeployment_566002(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeployment_566001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_566003 = path.getOrDefault("id")
  valid_566003 = validateParameter(valid_566003, JString, required = true,
                                 default = nil)
  if valid_566003 != nil:
    section.add "id", valid_566003
  var valid_566004 = path.getOrDefault("name")
  valid_566004 = validateParameter(valid_566004, JString, required = true,
                                 default = nil)
  if valid_566004 != nil:
    section.add "name", valid_566004
  var valid_566005 = path.getOrDefault("subscriptionId")
  valid_566005 = validateParameter(valid_566005, JString, required = true,
                                 default = nil)
  if valid_566005 != nil:
    section.add "subscriptionId", valid_566005
  var valid_566006 = path.getOrDefault("resourceGroupName")
  valid_566006 = validateParameter(valid_566006, JString, required = true,
                                 default = nil)
  if valid_566006 != nil:
    section.add "resourceGroupName", valid_566006
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566007 = query.getOrDefault("api-version")
  valid_566007 = validateParameter(valid_566007, JString, required = true,
                                 default = nil)
  if valid_566007 != nil:
    section.add "api-version", valid_566007
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566008: Call_SitesDeleteDeployment_566000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566008.validator(path, query, header, formData, body)
  let scheme = call_566008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566008.url(scheme.get, call_566008.host, call_566008.base,
                         call_566008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566008, url, valid)

proc call*(call_566009: Call_SitesDeleteDeployment_566000; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesDeleteDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566010 = newJObject()
  var query_566011 = newJObject()
  add(query_566011, "api-version", newJString(apiVersion))
  add(path_566010, "id", newJString(id))
  add(path_566010, "name", newJString(name))
  add(path_566010, "subscriptionId", newJString(subscriptionId))
  add(path_566010, "resourceGroupName", newJString(resourceGroupName))
  result = call_566009.call(path_566010, query_566011, nil, nil, nil)

var sitesDeleteDeployment* = Call_SitesDeleteDeployment_566000(
    name: "sitesDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_SitesDeleteDeployment_566001, base: "",
    url: url_SitesDeleteDeployment_566002, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindings_566012 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteHostNameBindings_566014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindings_566013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566015 = path.getOrDefault("name")
  valid_566015 = validateParameter(valid_566015, JString, required = true,
                                 default = nil)
  if valid_566015 != nil:
    section.add "name", valid_566015
  var valid_566016 = path.getOrDefault("subscriptionId")
  valid_566016 = validateParameter(valid_566016, JString, required = true,
                                 default = nil)
  if valid_566016 != nil:
    section.add "subscriptionId", valid_566016
  var valid_566017 = path.getOrDefault("resourceGroupName")
  valid_566017 = validateParameter(valid_566017, JString, required = true,
                                 default = nil)
  if valid_566017 != nil:
    section.add "resourceGroupName", valid_566017
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566018 = query.getOrDefault("api-version")
  valid_566018 = validateParameter(valid_566018, JString, required = true,
                                 default = nil)
  if valid_566018 != nil:
    section.add "api-version", valid_566018
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566019: Call_SitesGetSiteHostNameBindings_566012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566019.validator(path, query, header, formData, body)
  let scheme = call_566019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566019.url(scheme.get, call_566019.host, call_566019.base,
                         call_566019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566019, url, valid)

proc call*(call_566020: Call_SitesGetSiteHostNameBindings_566012;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteHostNameBindings
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566021 = newJObject()
  var query_566022 = newJObject()
  add(query_566022, "api-version", newJString(apiVersion))
  add(path_566021, "name", newJString(name))
  add(path_566021, "subscriptionId", newJString(subscriptionId))
  add(path_566021, "resourceGroupName", newJString(resourceGroupName))
  result = call_566020.call(path_566021, query_566022, nil, nil, nil)

var sitesGetSiteHostNameBindings* = Call_SitesGetSiteHostNameBindings_566012(
    name: "sitesGetSiteHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindings_566013, base: "",
    url: url_SitesGetSiteHostNameBindings_566014, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBinding_566035 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteHostNameBinding_566037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBinding_566036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566038 = path.getOrDefault("name")
  valid_566038 = validateParameter(valid_566038, JString, required = true,
                                 default = nil)
  if valid_566038 != nil:
    section.add "name", valid_566038
  var valid_566039 = path.getOrDefault("subscriptionId")
  valid_566039 = validateParameter(valid_566039, JString, required = true,
                                 default = nil)
  if valid_566039 != nil:
    section.add "subscriptionId", valid_566039
  var valid_566040 = path.getOrDefault("resourceGroupName")
  valid_566040 = validateParameter(valid_566040, JString, required = true,
                                 default = nil)
  if valid_566040 != nil:
    section.add "resourceGroupName", valid_566040
  var valid_566041 = path.getOrDefault("hostName")
  valid_566041 = validateParameter(valid_566041, JString, required = true,
                                 default = nil)
  if valid_566041 != nil:
    section.add "hostName", valid_566041
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566042 = query.getOrDefault("api-version")
  valid_566042 = validateParameter(valid_566042, JString, required = true,
                                 default = nil)
  if valid_566042 != nil:
    section.add "api-version", valid_566042
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566044: Call_SitesCreateOrUpdateSiteHostNameBinding_566035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566044.validator(path, query, header, formData, body)
  let scheme = call_566044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566044.url(scheme.get, call_566044.host, call_566044.base,
                         call_566044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566044, url, valid)

proc call*(call_566045: Call_SitesCreateOrUpdateSiteHostNameBinding_566035;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBinding
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  ##   hostName: string (required)
  ##           : Name of host
  var path_566046 = newJObject()
  var query_566047 = newJObject()
  var body_566048 = newJObject()
  add(query_566047, "api-version", newJString(apiVersion))
  add(path_566046, "name", newJString(name))
  add(path_566046, "subscriptionId", newJString(subscriptionId))
  add(path_566046, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_566048 = hostNameBinding
  add(path_566046, "hostName", newJString(hostName))
  result = call_566045.call(path_566046, query_566047, nil, nil, body_566048)

var sitesCreateOrUpdateSiteHostNameBinding* = Call_SitesCreateOrUpdateSiteHostNameBinding_566035(
    name: "sitesCreateOrUpdateSiteHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBinding_566036, base: "",
    url: url_SitesCreateOrUpdateSiteHostNameBinding_566037,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBinding_566023 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteHostNameBinding_566025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBinding_566024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566026 = path.getOrDefault("name")
  valid_566026 = validateParameter(valid_566026, JString, required = true,
                                 default = nil)
  if valid_566026 != nil:
    section.add "name", valid_566026
  var valid_566027 = path.getOrDefault("subscriptionId")
  valid_566027 = validateParameter(valid_566027, JString, required = true,
                                 default = nil)
  if valid_566027 != nil:
    section.add "subscriptionId", valid_566027
  var valid_566028 = path.getOrDefault("resourceGroupName")
  valid_566028 = validateParameter(valid_566028, JString, required = true,
                                 default = nil)
  if valid_566028 != nil:
    section.add "resourceGroupName", valid_566028
  var valid_566029 = path.getOrDefault("hostName")
  valid_566029 = validateParameter(valid_566029, JString, required = true,
                                 default = nil)
  if valid_566029 != nil:
    section.add "hostName", valid_566029
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566030 = query.getOrDefault("api-version")
  valid_566030 = validateParameter(valid_566030, JString, required = true,
                                 default = nil)
  if valid_566030 != nil:
    section.add "api-version", valid_566030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566031: Call_SitesGetSiteHostNameBinding_566023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566031.validator(path, query, header, formData, body)
  let scheme = call_566031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566031.url(scheme.get, call_566031.host, call_566031.base,
                         call_566031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566031, url, valid)

proc call*(call_566032: Call_SitesGetSiteHostNameBinding_566023;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBinding
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostName: string (required)
  ##           : Name of host
  var path_566033 = newJObject()
  var query_566034 = newJObject()
  add(query_566034, "api-version", newJString(apiVersion))
  add(path_566033, "name", newJString(name))
  add(path_566033, "subscriptionId", newJString(subscriptionId))
  add(path_566033, "resourceGroupName", newJString(resourceGroupName))
  add(path_566033, "hostName", newJString(hostName))
  result = call_566032.call(path_566033, query_566034, nil, nil, nil)

var sitesGetSiteHostNameBinding* = Call_SitesGetSiteHostNameBinding_566023(
    name: "sitesGetSiteHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBinding_566024, base: "",
    url: url_SitesGetSiteHostNameBinding_566025, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBinding_566049 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteHostNameBinding_566051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBinding_566050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566052 = path.getOrDefault("name")
  valid_566052 = validateParameter(valid_566052, JString, required = true,
                                 default = nil)
  if valid_566052 != nil:
    section.add "name", valid_566052
  var valid_566053 = path.getOrDefault("subscriptionId")
  valid_566053 = validateParameter(valid_566053, JString, required = true,
                                 default = nil)
  if valid_566053 != nil:
    section.add "subscriptionId", valid_566053
  var valid_566054 = path.getOrDefault("resourceGroupName")
  valid_566054 = validateParameter(valid_566054, JString, required = true,
                                 default = nil)
  if valid_566054 != nil:
    section.add "resourceGroupName", valid_566054
  var valid_566055 = path.getOrDefault("hostName")
  valid_566055 = validateParameter(valid_566055, JString, required = true,
                                 default = nil)
  if valid_566055 != nil:
    section.add "hostName", valid_566055
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566056 = query.getOrDefault("api-version")
  valid_566056 = validateParameter(valid_566056, JString, required = true,
                                 default = nil)
  if valid_566056 != nil:
    section.add "api-version", valid_566056
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566057: Call_SitesDeleteSiteHostNameBinding_566049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566057.validator(path, query, header, formData, body)
  let scheme = call_566057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566057.url(scheme.get, call_566057.host, call_566057.base,
                         call_566057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566057, url, valid)

proc call*(call_566058: Call_SitesDeleteSiteHostNameBinding_566049;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBinding
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostName: string (required)
  ##           : Name of host
  var path_566059 = newJObject()
  var query_566060 = newJObject()
  add(query_566060, "api-version", newJString(apiVersion))
  add(path_566059, "name", newJString(name))
  add(path_566059, "subscriptionId", newJString(subscriptionId))
  add(path_566059, "resourceGroupName", newJString(resourceGroupName))
  add(path_566059, "hostName", newJString(hostName))
  result = call_566058.call(path_566059, query_566060, nil, nil, nil)

var sitesDeleteSiteHostNameBinding* = Call_SitesDeleteSiteHostNameBinding_566049(
    name: "sitesDeleteSiteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBinding_566050, base: "",
    url: url_SitesDeleteSiteHostNameBinding_566051, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnections_566061 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteRelayServiceConnections_566063(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnections_566062(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566064 = path.getOrDefault("name")
  valid_566064 = validateParameter(valid_566064, JString, required = true,
                                 default = nil)
  if valid_566064 != nil:
    section.add "name", valid_566064
  var valid_566065 = path.getOrDefault("subscriptionId")
  valid_566065 = validateParameter(valid_566065, JString, required = true,
                                 default = nil)
  if valid_566065 != nil:
    section.add "subscriptionId", valid_566065
  var valid_566066 = path.getOrDefault("resourceGroupName")
  valid_566066 = validateParameter(valid_566066, JString, required = true,
                                 default = nil)
  if valid_566066 != nil:
    section.add "resourceGroupName", valid_566066
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566067 = query.getOrDefault("api-version")
  valid_566067 = validateParameter(valid_566067, JString, required = true,
                                 default = nil)
  if valid_566067 != nil:
    section.add "api-version", valid_566067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566068: Call_SitesListSiteRelayServiceConnections_566061;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566068.validator(path, query, header, formData, body)
  let scheme = call_566068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566068.url(scheme.get, call_566068.host, call_566068.base,
                         call_566068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566068, url, valid)

proc call*(call_566069: Call_SitesListSiteRelayServiceConnections_566061;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteRelayServiceConnections
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_566070 = newJObject()
  var query_566071 = newJObject()
  add(query_566071, "api-version", newJString(apiVersion))
  add(path_566070, "name", newJString(name))
  add(path_566070, "subscriptionId", newJString(subscriptionId))
  add(path_566070, "resourceGroupName", newJString(resourceGroupName))
  result = call_566069.call(path_566070, query_566071, nil, nil, nil)

var sitesListSiteRelayServiceConnections* = Call_SitesListSiteRelayServiceConnections_566061(
    name: "sitesListSiteRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnections_566062, base: "",
    url: url_SitesListSiteRelayServiceConnections_566063, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnection_566084 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteRelayServiceConnection_566086(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnection_566085(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566087 = path.getOrDefault("name")
  valid_566087 = validateParameter(valid_566087, JString, required = true,
                                 default = nil)
  if valid_566087 != nil:
    section.add "name", valid_566087
  var valid_566088 = path.getOrDefault("subscriptionId")
  valid_566088 = validateParameter(valid_566088, JString, required = true,
                                 default = nil)
  if valid_566088 != nil:
    section.add "subscriptionId", valid_566088
  var valid_566089 = path.getOrDefault("resourceGroupName")
  valid_566089 = validateParameter(valid_566089, JString, required = true,
                                 default = nil)
  if valid_566089 != nil:
    section.add "resourceGroupName", valid_566089
  var valid_566090 = path.getOrDefault("entityName")
  valid_566090 = validateParameter(valid_566090, JString, required = true,
                                 default = nil)
  if valid_566090 != nil:
    section.add "entityName", valid_566090
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566091 = query.getOrDefault("api-version")
  valid_566091 = validateParameter(valid_566091, JString, required = true,
                                 default = nil)
  if valid_566091 != nil:
    section.add "api-version", valid_566091
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566093: Call_SitesCreateOrUpdateSiteRelayServiceConnection_566084;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566093.validator(path, query, header, formData, body)
  let scheme = call_566093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566093.url(scheme.get, call_566093.host, call_566093.base,
                         call_566093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566093, url, valid)

proc call*(call_566094: Call_SitesCreateOrUpdateSiteRelayServiceConnection_566084;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnection
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566095 = newJObject()
  var query_566096 = newJObject()
  var body_566097 = newJObject()
  if connectionEnvelope != nil:
    body_566097 = connectionEnvelope
  add(query_566096, "api-version", newJString(apiVersion))
  add(path_566095, "name", newJString(name))
  add(path_566095, "subscriptionId", newJString(subscriptionId))
  add(path_566095, "resourceGroupName", newJString(resourceGroupName))
  add(path_566095, "entityName", newJString(entityName))
  result = call_566094.call(path_566095, query_566096, nil, nil, body_566097)

var sitesCreateOrUpdateSiteRelayServiceConnection* = Call_SitesCreateOrUpdateSiteRelayServiceConnection_566084(
    name: "sitesCreateOrUpdateSiteRelayServiceConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnection_566085,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnection_566086,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnection_566072 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteRelayServiceConnection_566074(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnection_566073(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566075 = path.getOrDefault("name")
  valid_566075 = validateParameter(valid_566075, JString, required = true,
                                 default = nil)
  if valid_566075 != nil:
    section.add "name", valid_566075
  var valid_566076 = path.getOrDefault("subscriptionId")
  valid_566076 = validateParameter(valid_566076, JString, required = true,
                                 default = nil)
  if valid_566076 != nil:
    section.add "subscriptionId", valid_566076
  var valid_566077 = path.getOrDefault("resourceGroupName")
  valid_566077 = validateParameter(valid_566077, JString, required = true,
                                 default = nil)
  if valid_566077 != nil:
    section.add "resourceGroupName", valid_566077
  var valid_566078 = path.getOrDefault("entityName")
  valid_566078 = validateParameter(valid_566078, JString, required = true,
                                 default = nil)
  if valid_566078 != nil:
    section.add "entityName", valid_566078
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566079 = query.getOrDefault("api-version")
  valid_566079 = validateParameter(valid_566079, JString, required = true,
                                 default = nil)
  if valid_566079 != nil:
    section.add "api-version", valid_566079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566080: Call_SitesGetSiteRelayServiceConnection_566072;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566080.validator(path, query, header, formData, body)
  let scheme = call_566080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566080.url(scheme.get, call_566080.host, call_566080.base,
                         call_566080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566080, url, valid)

proc call*(call_566081: Call_SitesGetSiteRelayServiceConnection_566072;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566082 = newJObject()
  var query_566083 = newJObject()
  add(query_566083, "api-version", newJString(apiVersion))
  add(path_566082, "name", newJString(name))
  add(path_566082, "subscriptionId", newJString(subscriptionId))
  add(path_566082, "resourceGroupName", newJString(resourceGroupName))
  add(path_566082, "entityName", newJString(entityName))
  result = call_566081.call(path_566082, query_566083, nil, nil, nil)

var sitesGetSiteRelayServiceConnection* = Call_SitesGetSiteRelayServiceConnection_566072(
    name: "sitesGetSiteRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnection_566073, base: "",
    url: url_SitesGetSiteRelayServiceConnection_566074, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnection_566110 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteRelayServiceConnection_566112(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnection_566111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566113 = path.getOrDefault("name")
  valid_566113 = validateParameter(valid_566113, JString, required = true,
                                 default = nil)
  if valid_566113 != nil:
    section.add "name", valid_566113
  var valid_566114 = path.getOrDefault("subscriptionId")
  valid_566114 = validateParameter(valid_566114, JString, required = true,
                                 default = nil)
  if valid_566114 != nil:
    section.add "subscriptionId", valid_566114
  var valid_566115 = path.getOrDefault("resourceGroupName")
  valid_566115 = validateParameter(valid_566115, JString, required = true,
                                 default = nil)
  if valid_566115 != nil:
    section.add "resourceGroupName", valid_566115
  var valid_566116 = path.getOrDefault("entityName")
  valid_566116 = validateParameter(valid_566116, JString, required = true,
                                 default = nil)
  if valid_566116 != nil:
    section.add "entityName", valid_566116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566117 = query.getOrDefault("api-version")
  valid_566117 = validateParameter(valid_566117, JString, required = true,
                                 default = nil)
  if valid_566117 != nil:
    section.add "api-version", valid_566117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566119: Call_SitesUpdateSiteRelayServiceConnection_566110;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566119.validator(path, query, header, formData, body)
  let scheme = call_566119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566119.url(scheme.get, call_566119.host, call_566119.base,
                         call_566119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566119, url, valid)

proc call*(call_566120: Call_SitesUpdateSiteRelayServiceConnection_566110;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnection
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566121 = newJObject()
  var query_566122 = newJObject()
  var body_566123 = newJObject()
  if connectionEnvelope != nil:
    body_566123 = connectionEnvelope
  add(query_566122, "api-version", newJString(apiVersion))
  add(path_566121, "name", newJString(name))
  add(path_566121, "subscriptionId", newJString(subscriptionId))
  add(path_566121, "resourceGroupName", newJString(resourceGroupName))
  add(path_566121, "entityName", newJString(entityName))
  result = call_566120.call(path_566121, query_566122, nil, nil, body_566123)

var sitesUpdateSiteRelayServiceConnection* = Call_SitesUpdateSiteRelayServiceConnection_566110(
    name: "sitesUpdateSiteRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnection_566111, base: "",
    url: url_SitesUpdateSiteRelayServiceConnection_566112, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnection_566098 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteRelayServiceConnection_566100(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnection_566099(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566101 = path.getOrDefault("name")
  valid_566101 = validateParameter(valid_566101, JString, required = true,
                                 default = nil)
  if valid_566101 != nil:
    section.add "name", valid_566101
  var valid_566102 = path.getOrDefault("subscriptionId")
  valid_566102 = validateParameter(valid_566102, JString, required = true,
                                 default = nil)
  if valid_566102 != nil:
    section.add "subscriptionId", valid_566102
  var valid_566103 = path.getOrDefault("resourceGroupName")
  valid_566103 = validateParameter(valid_566103, JString, required = true,
                                 default = nil)
  if valid_566103 != nil:
    section.add "resourceGroupName", valid_566103
  var valid_566104 = path.getOrDefault("entityName")
  valid_566104 = validateParameter(valid_566104, JString, required = true,
                                 default = nil)
  if valid_566104 != nil:
    section.add "entityName", valid_566104
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566105 = query.getOrDefault("api-version")
  valid_566105 = validateParameter(valid_566105, JString, required = true,
                                 default = nil)
  if valid_566105 != nil:
    section.add "api-version", valid_566105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566106: Call_SitesDeleteSiteRelayServiceConnection_566098;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566106.validator(path, query, header, formData, body)
  let scheme = call_566106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566106.url(scheme.get, call_566106.host, call_566106.base,
                         call_566106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566106, url, valid)

proc call*(call_566107: Call_SitesDeleteSiteRelayServiceConnection_566098;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566108 = newJObject()
  var query_566109 = newJObject()
  add(query_566109, "api-version", newJString(apiVersion))
  add(path_566108, "name", newJString(name))
  add(path_566108, "subscriptionId", newJString(subscriptionId))
  add(path_566108, "resourceGroupName", newJString(resourceGroupName))
  add(path_566108, "entityName", newJString(entityName))
  result = call_566107.call(path_566108, query_566109, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnection* = Call_SitesDeleteSiteRelayServiceConnection_566098(
    name: "sitesDeleteSiteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnection_566099, base: "",
    url: url_SitesDeleteSiteRelayServiceConnection_566100, schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiers_566124 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteInstanceIdentifiers_566126(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiers_566125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566127 = path.getOrDefault("name")
  valid_566127 = validateParameter(valid_566127, JString, required = true,
                                 default = nil)
  if valid_566127 != nil:
    section.add "name", valid_566127
  var valid_566128 = path.getOrDefault("subscriptionId")
  valid_566128 = validateParameter(valid_566128, JString, required = true,
                                 default = nil)
  if valid_566128 != nil:
    section.add "subscriptionId", valid_566128
  var valid_566129 = path.getOrDefault("resourceGroupName")
  valid_566129 = validateParameter(valid_566129, JString, required = true,
                                 default = nil)
  if valid_566129 != nil:
    section.add "resourceGroupName", valid_566129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566130 = query.getOrDefault("api-version")
  valid_566130 = validateParameter(valid_566130, JString, required = true,
                                 default = nil)
  if valid_566130 != nil:
    section.add "api-version", valid_566130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566131: Call_SitesGetSiteInstanceIdentifiers_566124;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566131.validator(path, query, header, formData, body)
  let scheme = call_566131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566131.url(scheme.get, call_566131.host, call_566131.base,
                         call_566131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566131, url, valid)

proc call*(call_566132: Call_SitesGetSiteInstanceIdentifiers_566124;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteInstanceIdentifiers
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566133 = newJObject()
  var query_566134 = newJObject()
  add(query_566134, "api-version", newJString(apiVersion))
  add(path_566133, "name", newJString(name))
  add(path_566133, "subscriptionId", newJString(subscriptionId))
  add(path_566133, "resourceGroupName", newJString(resourceGroupName))
  result = call_566132.call(path_566133, query_566134, nil, nil, nil)

var sitesGetSiteInstanceIdentifiers* = Call_SitesGetSiteInstanceIdentifiers_566124(
    name: "sitesGetSiteInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiers_566125, base: "",
    url: url_SitesGetSiteInstanceIdentifiers_566126, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployments_566135 = ref object of OpenApiRestCall_563548
proc url_SitesGetInstanceDeployments_566137(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployments_566136(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566138 = path.getOrDefault("name")
  valid_566138 = validateParameter(valid_566138, JString, required = true,
                                 default = nil)
  if valid_566138 != nil:
    section.add "name", valid_566138
  var valid_566139 = path.getOrDefault("subscriptionId")
  valid_566139 = validateParameter(valid_566139, JString, required = true,
                                 default = nil)
  if valid_566139 != nil:
    section.add "subscriptionId", valid_566139
  var valid_566140 = path.getOrDefault("resourceGroupName")
  valid_566140 = validateParameter(valid_566140, JString, required = true,
                                 default = nil)
  if valid_566140 != nil:
    section.add "resourceGroupName", valid_566140
  var valid_566141 = path.getOrDefault("instanceId")
  valid_566141 = validateParameter(valid_566141, JString, required = true,
                                 default = nil)
  if valid_566141 != nil:
    section.add "instanceId", valid_566141
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566142 = query.getOrDefault("api-version")
  valid_566142 = validateParameter(valid_566142, JString, required = true,
                                 default = nil)
  if valid_566142 != nil:
    section.add "api-version", valid_566142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566143: Call_SitesGetInstanceDeployments_566135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566143.validator(path, query, header, formData, body)
  let scheme = call_566143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566143.url(scheme.get, call_566143.host, call_566143.base,
                         call_566143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566143, url, valid)

proc call*(call_566144: Call_SitesGetInstanceDeployments_566135;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeployments
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566145 = newJObject()
  var query_566146 = newJObject()
  add(query_566146, "api-version", newJString(apiVersion))
  add(path_566145, "name", newJString(name))
  add(path_566145, "subscriptionId", newJString(subscriptionId))
  add(path_566145, "resourceGroupName", newJString(resourceGroupName))
  add(path_566145, "instanceId", newJString(instanceId))
  result = call_566144.call(path_566145, query_566146, nil, nil, nil)

var sitesGetInstanceDeployments* = Call_SitesGetInstanceDeployments_566135(
    name: "sitesGetInstanceDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeployments_566136, base: "",
    url: url_SitesGetInstanceDeployments_566137, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeployment_566160 = ref object of OpenApiRestCall_563548
proc url_SitesCreateInstanceDeployment_566162(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeployment_566161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_566163 = path.getOrDefault("id")
  valid_566163 = validateParameter(valid_566163, JString, required = true,
                                 default = nil)
  if valid_566163 != nil:
    section.add "id", valid_566163
  var valid_566164 = path.getOrDefault("name")
  valid_566164 = validateParameter(valid_566164, JString, required = true,
                                 default = nil)
  if valid_566164 != nil:
    section.add "name", valid_566164
  var valid_566165 = path.getOrDefault("subscriptionId")
  valid_566165 = validateParameter(valid_566165, JString, required = true,
                                 default = nil)
  if valid_566165 != nil:
    section.add "subscriptionId", valid_566165
  var valid_566166 = path.getOrDefault("resourceGroupName")
  valid_566166 = validateParameter(valid_566166, JString, required = true,
                                 default = nil)
  if valid_566166 != nil:
    section.add "resourceGroupName", valid_566166
  var valid_566167 = path.getOrDefault("instanceId")
  valid_566167 = validateParameter(valid_566167, JString, required = true,
                                 default = nil)
  if valid_566167 != nil:
    section.add "instanceId", valid_566167
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566168 = query.getOrDefault("api-version")
  valid_566168 = validateParameter(valid_566168, JString, required = true,
                                 default = nil)
  if valid_566168 != nil:
    section.add "api-version", valid_566168
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566170: Call_SitesCreateInstanceDeployment_566160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566170.validator(path, query, header, formData, body)
  let scheme = call_566170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566170.url(scheme.get, call_566170.host, call_566170.base,
                         call_566170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566170, url, valid)

proc call*(call_566171: Call_SitesCreateInstanceDeployment_566160;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          deployment: JsonNode; resourceGroupName: string; instanceId: string): Recallable =
  ## sitesCreateInstanceDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deployment: JObject (required)
  ##             : Details of deployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566172 = newJObject()
  var query_566173 = newJObject()
  var body_566174 = newJObject()
  add(query_566173, "api-version", newJString(apiVersion))
  add(path_566172, "id", newJString(id))
  add(path_566172, "name", newJString(name))
  add(path_566172, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_566174 = deployment
  add(path_566172, "resourceGroupName", newJString(resourceGroupName))
  add(path_566172, "instanceId", newJString(instanceId))
  result = call_566171.call(path_566172, query_566173, nil, nil, body_566174)

var sitesCreateInstanceDeployment* = Call_SitesCreateInstanceDeployment_566160(
    name: "sitesCreateInstanceDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeployment_566161, base: "",
    url: url_SitesCreateInstanceDeployment_566162, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeployment_566147 = ref object of OpenApiRestCall_563548
proc url_SitesGetInstanceDeployment_566149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeployment_566148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_566150 = path.getOrDefault("id")
  valid_566150 = validateParameter(valid_566150, JString, required = true,
                                 default = nil)
  if valid_566150 != nil:
    section.add "id", valid_566150
  var valid_566151 = path.getOrDefault("name")
  valid_566151 = validateParameter(valid_566151, JString, required = true,
                                 default = nil)
  if valid_566151 != nil:
    section.add "name", valid_566151
  var valid_566152 = path.getOrDefault("subscriptionId")
  valid_566152 = validateParameter(valid_566152, JString, required = true,
                                 default = nil)
  if valid_566152 != nil:
    section.add "subscriptionId", valid_566152
  var valid_566153 = path.getOrDefault("resourceGroupName")
  valid_566153 = validateParameter(valid_566153, JString, required = true,
                                 default = nil)
  if valid_566153 != nil:
    section.add "resourceGroupName", valid_566153
  var valid_566154 = path.getOrDefault("instanceId")
  valid_566154 = validateParameter(valid_566154, JString, required = true,
                                 default = nil)
  if valid_566154 != nil:
    section.add "instanceId", valid_566154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566155 = query.getOrDefault("api-version")
  valid_566155 = validateParameter(valid_566155, JString, required = true,
                                 default = nil)
  if valid_566155 != nil:
    section.add "api-version", valid_566155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566156: Call_SitesGetInstanceDeployment_566147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566156.validator(path, query, header, formData, body)
  let scheme = call_566156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566156.url(scheme.get, call_566156.host, call_566156.base,
                         call_566156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566156, url, valid)

proc call*(call_566157: Call_SitesGetInstanceDeployment_566147; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string;
          instanceId: string): Recallable =
  ## sitesGetInstanceDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566158 = newJObject()
  var query_566159 = newJObject()
  add(query_566159, "api-version", newJString(apiVersion))
  add(path_566158, "id", newJString(id))
  add(path_566158, "name", newJString(name))
  add(path_566158, "subscriptionId", newJString(subscriptionId))
  add(path_566158, "resourceGroupName", newJString(resourceGroupName))
  add(path_566158, "instanceId", newJString(instanceId))
  result = call_566157.call(path_566158, query_566159, nil, nil, nil)

var sitesGetInstanceDeployment* = Call_SitesGetInstanceDeployment_566147(
    name: "sitesGetInstanceDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeployment_566148, base: "",
    url: url_SitesGetInstanceDeployment_566149, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeployment_566175 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteInstanceDeployment_566177(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeployment_566176(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_566178 = path.getOrDefault("id")
  valid_566178 = validateParameter(valid_566178, JString, required = true,
                                 default = nil)
  if valid_566178 != nil:
    section.add "id", valid_566178
  var valid_566179 = path.getOrDefault("name")
  valid_566179 = validateParameter(valid_566179, JString, required = true,
                                 default = nil)
  if valid_566179 != nil:
    section.add "name", valid_566179
  var valid_566180 = path.getOrDefault("subscriptionId")
  valid_566180 = validateParameter(valid_566180, JString, required = true,
                                 default = nil)
  if valid_566180 != nil:
    section.add "subscriptionId", valid_566180
  var valid_566181 = path.getOrDefault("resourceGroupName")
  valid_566181 = validateParameter(valid_566181, JString, required = true,
                                 default = nil)
  if valid_566181 != nil:
    section.add "resourceGroupName", valid_566181
  var valid_566182 = path.getOrDefault("instanceId")
  valid_566182 = validateParameter(valid_566182, JString, required = true,
                                 default = nil)
  if valid_566182 != nil:
    section.add "instanceId", valid_566182
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566183 = query.getOrDefault("api-version")
  valid_566183 = validateParameter(valid_566183, JString, required = true,
                                 default = nil)
  if valid_566183 != nil:
    section.add "api-version", valid_566183
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566184: Call_SitesDeleteInstanceDeployment_566175; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566184.validator(path, query, header, formData, body)
  let scheme = call_566184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566184.url(scheme.get, call_566184.host, call_566184.base,
                         call_566184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566184, url, valid)

proc call*(call_566185: Call_SitesDeleteInstanceDeployment_566175;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## sitesDeleteInstanceDeployment
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566186 = newJObject()
  var query_566187 = newJObject()
  add(query_566187, "api-version", newJString(apiVersion))
  add(path_566186, "id", newJString(id))
  add(path_566186, "name", newJString(name))
  add(path_566186, "subscriptionId", newJString(subscriptionId))
  add(path_566186, "resourceGroupName", newJString(resourceGroupName))
  add(path_566186, "instanceId", newJString(instanceId))
  result = call_566185.call(path_566186, query_566187, nil, nil, nil)

var sitesDeleteInstanceDeployment* = Call_SitesDeleteInstanceDeployment_566175(
    name: "sitesDeleteInstanceDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeployment_566176, base: "",
    url: url_SitesDeleteInstanceDeployment_566177, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneable_566188 = ref object of OpenApiRestCall_563548
proc url_SitesIsSiteCloneable_566190(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneable_566189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566191 = path.getOrDefault("name")
  valid_566191 = validateParameter(valid_566191, JString, required = true,
                                 default = nil)
  if valid_566191 != nil:
    section.add "name", valid_566191
  var valid_566192 = path.getOrDefault("subscriptionId")
  valid_566192 = validateParameter(valid_566192, JString, required = true,
                                 default = nil)
  if valid_566192 != nil:
    section.add "subscriptionId", valid_566192
  var valid_566193 = path.getOrDefault("resourceGroupName")
  valid_566193 = validateParameter(valid_566193, JString, required = true,
                                 default = nil)
  if valid_566193 != nil:
    section.add "resourceGroupName", valid_566193
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566194 = query.getOrDefault("api-version")
  valid_566194 = validateParameter(valid_566194, JString, required = true,
                                 default = nil)
  if valid_566194 != nil:
    section.add "api-version", valid_566194
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566195: Call_SitesIsSiteCloneable_566188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566195.validator(path, query, header, formData, body)
  let scheme = call_566195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566195.url(scheme.get, call_566195.host, call_566195.base,
                         call_566195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566195, url, valid)

proc call*(call_566196: Call_SitesIsSiteCloneable_566188; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesIsSiteCloneable
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_566197 = newJObject()
  var query_566198 = newJObject()
  add(query_566198, "api-version", newJString(apiVersion))
  add(path_566197, "name", newJString(name))
  add(path_566197, "subscriptionId", newJString(subscriptionId))
  add(path_566197, "resourceGroupName", newJString(resourceGroupName))
  result = call_566196.call(path_566197, query_566198, nil, nil, nil)

var sitesIsSiteCloneable* = Call_SitesIsSiteCloneable_566188(
    name: "sitesIsSiteCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_SitesIsSiteCloneable_566189, base: "",
    url: url_SitesIsSiteCloneable_566190, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitions_566199 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteMetricDefinitions_566201(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitions_566200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566202 = path.getOrDefault("name")
  valid_566202 = validateParameter(valid_566202, JString, required = true,
                                 default = nil)
  if valid_566202 != nil:
    section.add "name", valid_566202
  var valid_566203 = path.getOrDefault("subscriptionId")
  valid_566203 = validateParameter(valid_566203, JString, required = true,
                                 default = nil)
  if valid_566203 != nil:
    section.add "subscriptionId", valid_566203
  var valid_566204 = path.getOrDefault("resourceGroupName")
  valid_566204 = validateParameter(valid_566204, JString, required = true,
                                 default = nil)
  if valid_566204 != nil:
    section.add "resourceGroupName", valid_566204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566205 = query.getOrDefault("api-version")
  valid_566205 = validateParameter(valid_566205, JString, required = true,
                                 default = nil)
  if valid_566205 != nil:
    section.add "api-version", valid_566205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566206: Call_SitesGetSiteMetricDefinitions_566199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566206.validator(path, query, header, formData, body)
  let scheme = call_566206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566206.url(scheme.get, call_566206.host, call_566206.base,
                         call_566206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566206, url, valid)

proc call*(call_566207: Call_SitesGetSiteMetricDefinitions_566199;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteMetricDefinitions
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566208 = newJObject()
  var query_566209 = newJObject()
  add(query_566209, "api-version", newJString(apiVersion))
  add(path_566208, "name", newJString(name))
  add(path_566208, "subscriptionId", newJString(subscriptionId))
  add(path_566208, "resourceGroupName", newJString(resourceGroupName))
  result = call_566207.call(path_566208, query_566209, nil, nil, nil)

var sitesGetSiteMetricDefinitions* = Call_SitesGetSiteMetricDefinitions_566199(
    name: "sitesGetSiteMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitions_566200, base: "",
    url: url_SitesGetSiteMetricDefinitions_566201, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetrics_566210 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteMetrics_566212(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetrics_566211(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566213 = path.getOrDefault("name")
  valid_566213 = validateParameter(valid_566213, JString, required = true,
                                 default = nil)
  if valid_566213 != nil:
    section.add "name", valid_566213
  var valid_566214 = path.getOrDefault("subscriptionId")
  valid_566214 = validateParameter(valid_566214, JString, required = true,
                                 default = nil)
  if valid_566214 != nil:
    section.add "subscriptionId", valid_566214
  var valid_566215 = path.getOrDefault("resourceGroupName")
  valid_566215 = validateParameter(valid_566215, JString, required = true,
                                 default = nil)
  if valid_566215 != nil:
    section.add "resourceGroupName", valid_566215
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_566216 = query.getOrDefault("details")
  valid_566216 = validateParameter(valid_566216, JBool, required = false, default = nil)
  if valid_566216 != nil:
    section.add "details", valid_566216
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566217 = query.getOrDefault("api-version")
  valid_566217 = validateParameter(valid_566217, JString, required = true,
                                 default = nil)
  if valid_566217 != nil:
    section.add "api-version", valid_566217
  var valid_566218 = query.getOrDefault("$filter")
  valid_566218 = validateParameter(valid_566218, JString, required = false,
                                 default = nil)
  if valid_566218 != nil:
    section.add "$filter", valid_566218
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566219: Call_SitesGetSiteMetrics_566210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566219.validator(path, query, header, formData, body)
  let scheme = call_566219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566219.url(scheme.get, call_566219.host, call_566219.base,
                         call_566219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566219, url, valid)

proc call*(call_566220: Call_SitesGetSiteMetrics_566210; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetrics
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_566221 = newJObject()
  var query_566222 = newJObject()
  add(query_566222, "details", newJBool(details))
  add(query_566222, "api-version", newJString(apiVersion))
  add(path_566221, "name", newJString(name))
  add(path_566221, "subscriptionId", newJString(subscriptionId))
  add(path_566221, "resourceGroupName", newJString(resourceGroupName))
  add(query_566222, "$filter", newJString(Filter))
  result = call_566220.call(path_566221, query_566222, nil, nil, nil)

var sitesGetSiteMetrics* = Call_SitesGetSiteMetrics_566210(
    name: "sitesGetSiteMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_SitesGetSiteMetrics_566211, base: "",
    url: url_SitesGetSiteMetrics_566212, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeatures_566223 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteNetworkFeatures_566225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeatures_566224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `view` field"
  var valid_566226 = path.getOrDefault("view")
  valid_566226 = validateParameter(valid_566226, JString, required = true,
                                 default = nil)
  if valid_566226 != nil:
    section.add "view", valid_566226
  var valid_566227 = path.getOrDefault("name")
  valid_566227 = validateParameter(valid_566227, JString, required = true,
                                 default = nil)
  if valid_566227 != nil:
    section.add "name", valid_566227
  var valid_566228 = path.getOrDefault("subscriptionId")
  valid_566228 = validateParameter(valid_566228, JString, required = true,
                                 default = nil)
  if valid_566228 != nil:
    section.add "subscriptionId", valid_566228
  var valid_566229 = path.getOrDefault("resourceGroupName")
  valid_566229 = validateParameter(valid_566229, JString, required = true,
                                 default = nil)
  if valid_566229 != nil:
    section.add "resourceGroupName", valid_566229
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566230 = query.getOrDefault("api-version")
  valid_566230 = validateParameter(valid_566230, JString, required = true,
                                 default = nil)
  if valid_566230 != nil:
    section.add "api-version", valid_566230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566231: Call_SitesGetSiteNetworkFeatures_566223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566231.validator(path, query, header, formData, body)
  let scheme = call_566231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566231.url(scheme.get, call_566231.host, call_566231.base,
                         call_566231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566231, url, valid)

proc call*(call_566232: Call_SitesGetSiteNetworkFeatures_566223;
          apiVersion: string; view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteNetworkFeatures
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_566233 = newJObject()
  var query_566234 = newJObject()
  add(query_566234, "api-version", newJString(apiVersion))
  add(path_566233, "view", newJString(view))
  add(path_566233, "name", newJString(name))
  add(path_566233, "subscriptionId", newJString(subscriptionId))
  add(path_566233, "resourceGroupName", newJString(resourceGroupName))
  result = call_566232.call(path_566233, query_566234, nil, nil, nil)

var sitesGetSiteNetworkFeatures* = Call_SitesGetSiteNetworkFeatures_566223(
    name: "sitesGetSiteNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeatures_566224, base: "",
    url: url_SitesGetSiteNetworkFeatures_566225, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPassword_566235 = ref object of OpenApiRestCall_563548
proc url_SitesGenerateNewSitePublishingPassword_566237(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPassword_566236(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566238 = path.getOrDefault("name")
  valid_566238 = validateParameter(valid_566238, JString, required = true,
                                 default = nil)
  if valid_566238 != nil:
    section.add "name", valid_566238
  var valid_566239 = path.getOrDefault("subscriptionId")
  valid_566239 = validateParameter(valid_566239, JString, required = true,
                                 default = nil)
  if valid_566239 != nil:
    section.add "subscriptionId", valid_566239
  var valid_566240 = path.getOrDefault("resourceGroupName")
  valid_566240 = validateParameter(valid_566240, JString, required = true,
                                 default = nil)
  if valid_566240 != nil:
    section.add "resourceGroupName", valid_566240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566241 = query.getOrDefault("api-version")
  valid_566241 = validateParameter(valid_566241, JString, required = true,
                                 default = nil)
  if valid_566241 != nil:
    section.add "api-version", valid_566241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566242: Call_SitesGenerateNewSitePublishingPassword_566235;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566242.validator(path, query, header, formData, body)
  let scheme = call_566242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566242.url(scheme.get, call_566242.host, call_566242.base,
                         call_566242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566242, url, valid)

proc call*(call_566243: Call_SitesGenerateNewSitePublishingPassword_566235;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGenerateNewSitePublishingPassword
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566244 = newJObject()
  var query_566245 = newJObject()
  add(query_566245, "api-version", newJString(apiVersion))
  add(path_566244, "name", newJString(name))
  add(path_566244, "subscriptionId", newJString(subscriptionId))
  add(path_566244, "resourceGroupName", newJString(resourceGroupName))
  result = call_566243.call(path_566244, query_566245, nil, nil, nil)

var sitesGenerateNewSitePublishingPassword* = Call_SitesGenerateNewSitePublishingPassword_566235(
    name: "sitesGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPassword_566236, base: "",
    url: url_SitesGenerateNewSitePublishingPassword_566237,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperation_566246 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteOperation_566248(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperation_566247(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : Id of an operation
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_566249 = path.getOrDefault("operationId")
  valid_566249 = validateParameter(valid_566249, JString, required = true,
                                 default = nil)
  if valid_566249 != nil:
    section.add "operationId", valid_566249
  var valid_566250 = path.getOrDefault("name")
  valid_566250 = validateParameter(valid_566250, JString, required = true,
                                 default = nil)
  if valid_566250 != nil:
    section.add "name", valid_566250
  var valid_566251 = path.getOrDefault("subscriptionId")
  valid_566251 = validateParameter(valid_566251, JString, required = true,
                                 default = nil)
  if valid_566251 != nil:
    section.add "subscriptionId", valid_566251
  var valid_566252 = path.getOrDefault("resourceGroupName")
  valid_566252 = validateParameter(valid_566252, JString, required = true,
                                 default = nil)
  if valid_566252 != nil:
    section.add "resourceGroupName", valid_566252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566253 = query.getOrDefault("api-version")
  valid_566253 = validateParameter(valid_566253, JString, required = true,
                                 default = nil)
  if valid_566253 != nil:
    section.add "api-version", valid_566253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566254: Call_SitesGetSiteOperation_566246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566254.validator(path, query, header, formData, body)
  let scheme = call_566254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566254.url(scheme.get, call_566254.host, call_566254.base,
                         call_566254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566254, url, valid)

proc call*(call_566255: Call_SitesGetSiteOperation_566246; apiVersion: string;
          operationId: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteOperation
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : Id of an operation
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566256 = newJObject()
  var query_566257 = newJObject()
  add(query_566257, "api-version", newJString(apiVersion))
  add(path_566256, "operationId", newJString(operationId))
  add(path_566256, "name", newJString(name))
  add(path_566256, "subscriptionId", newJString(subscriptionId))
  add(path_566256, "resourceGroupName", newJString(resourceGroupName))
  result = call_566255.call(path_566256, query_566257, nil, nil, nil)

var sitesGetSiteOperation* = Call_SitesGetSiteOperation_566246(
    name: "sitesGetSiteOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperation_566247, base: "",
    url: url_SitesGetSiteOperation_566248, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOns_566258 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePremierAddOns_566260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOns_566259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566261 = path.getOrDefault("name")
  valid_566261 = validateParameter(valid_566261, JString, required = true,
                                 default = nil)
  if valid_566261 != nil:
    section.add "name", valid_566261
  var valid_566262 = path.getOrDefault("subscriptionId")
  valid_566262 = validateParameter(valid_566262, JString, required = true,
                                 default = nil)
  if valid_566262 != nil:
    section.add "subscriptionId", valid_566262
  var valid_566263 = path.getOrDefault("resourceGroupName")
  valid_566263 = validateParameter(valid_566263, JString, required = true,
                                 default = nil)
  if valid_566263 != nil:
    section.add "resourceGroupName", valid_566263
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566264 = query.getOrDefault("api-version")
  valid_566264 = validateParameter(valid_566264, JString, required = true,
                                 default = nil)
  if valid_566264 != nil:
    section.add "api-version", valid_566264
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566265: Call_SitesListSitePremierAddOns_566258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566265.validator(path, query, header, formData, body)
  let scheme = call_566265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566265.url(scheme.get, call_566265.host, call_566265.base,
                         call_566265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566265, url, valid)

proc call*(call_566266: Call_SitesListSitePremierAddOns_566258; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSitePremierAddOns
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  var path_566267 = newJObject()
  var query_566268 = newJObject()
  add(query_566268, "api-version", newJString(apiVersion))
  add(path_566267, "name", newJString(name))
  add(path_566267, "subscriptionId", newJString(subscriptionId))
  add(path_566267, "resourceGroupName", newJString(resourceGroupName))
  result = call_566266.call(path_566267, query_566268, nil, nil, nil)

var sitesListSitePremierAddOns* = Call_SitesListSitePremierAddOns_566258(
    name: "sitesListSitePremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_SitesListSitePremierAddOns_566259, base: "",
    url: url_SitesListSitePremierAddOns_566260, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOn_566281 = ref object of OpenApiRestCall_563548
proc url_SitesAddSitePremierAddOn_566283(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOn_566282(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566284 = path.getOrDefault("name")
  valid_566284 = validateParameter(valid_566284, JString, required = true,
                                 default = nil)
  if valid_566284 != nil:
    section.add "name", valid_566284
  var valid_566285 = path.getOrDefault("subscriptionId")
  valid_566285 = validateParameter(valid_566285, JString, required = true,
                                 default = nil)
  if valid_566285 != nil:
    section.add "subscriptionId", valid_566285
  var valid_566286 = path.getOrDefault("premierAddOnName")
  valid_566286 = validateParameter(valid_566286, JString, required = true,
                                 default = nil)
  if valid_566286 != nil:
    section.add "premierAddOnName", valid_566286
  var valid_566287 = path.getOrDefault("resourceGroupName")
  valid_566287 = validateParameter(valid_566287, JString, required = true,
                                 default = nil)
  if valid_566287 != nil:
    section.add "resourceGroupName", valid_566287
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566288 = query.getOrDefault("api-version")
  valid_566288 = validateParameter(valid_566288, JString, required = true,
                                 default = nil)
  if valid_566288 != nil:
    section.add "api-version", valid_566288
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566290: Call_SitesAddSitePremierAddOn_566281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566290.validator(path, query, header, formData, body)
  let scheme = call_566290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566290.url(scheme.get, call_566290.host, call_566290.base,
                         call_566290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566290, url, valid)

proc call*(call_566291: Call_SitesAddSitePremierAddOn_566281; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          premierAddOn: JsonNode; resourceGroupName: string): Recallable =
  ## sitesAddSitePremierAddOn
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   premierAddOn: JObject (required)
  ##   resourceGroupName: string (required)
  var path_566292 = newJObject()
  var query_566293 = newJObject()
  var body_566294 = newJObject()
  add(query_566293, "api-version", newJString(apiVersion))
  add(path_566292, "name", newJString(name))
  add(path_566292, "subscriptionId", newJString(subscriptionId))
  add(path_566292, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_566294 = premierAddOn
  add(path_566292, "resourceGroupName", newJString(resourceGroupName))
  result = call_566291.call(path_566292, query_566293, nil, nil, body_566294)

var sitesAddSitePremierAddOn* = Call_SitesAddSitePremierAddOn_566281(
    name: "sitesAddSitePremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOn_566282, base: "",
    url: url_SitesAddSitePremierAddOn_566283, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOn_566269 = ref object of OpenApiRestCall_563548
proc url_SitesGetSitePremierAddOn_566271(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOn_566270(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566272 = path.getOrDefault("name")
  valid_566272 = validateParameter(valid_566272, JString, required = true,
                                 default = nil)
  if valid_566272 != nil:
    section.add "name", valid_566272
  var valid_566273 = path.getOrDefault("subscriptionId")
  valid_566273 = validateParameter(valid_566273, JString, required = true,
                                 default = nil)
  if valid_566273 != nil:
    section.add "subscriptionId", valid_566273
  var valid_566274 = path.getOrDefault("premierAddOnName")
  valid_566274 = validateParameter(valid_566274, JString, required = true,
                                 default = nil)
  if valid_566274 != nil:
    section.add "premierAddOnName", valid_566274
  var valid_566275 = path.getOrDefault("resourceGroupName")
  valid_566275 = validateParameter(valid_566275, JString, required = true,
                                 default = nil)
  if valid_566275 != nil:
    section.add "resourceGroupName", valid_566275
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566276 = query.getOrDefault("api-version")
  valid_566276 = validateParameter(valid_566276, JString, required = true,
                                 default = nil)
  if valid_566276 != nil:
    section.add "api-version", valid_566276
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566277: Call_SitesGetSitePremierAddOn_566269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566277.validator(path, query, header, formData, body)
  let scheme = call_566277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566277.url(scheme.get, call_566277.host, call_566277.base,
                         call_566277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566277, url, valid)

proc call*(call_566278: Call_SitesGetSitePremierAddOn_566269; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSitePremierAddOn
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   resourceGroupName: string (required)
  var path_566279 = newJObject()
  var query_566280 = newJObject()
  add(query_566280, "api-version", newJString(apiVersion))
  add(path_566279, "name", newJString(name))
  add(path_566279, "subscriptionId", newJString(subscriptionId))
  add(path_566279, "premierAddOnName", newJString(premierAddOnName))
  add(path_566279, "resourceGroupName", newJString(resourceGroupName))
  result = call_566278.call(path_566279, query_566280, nil, nil, nil)

var sitesGetSitePremierAddOn* = Call_SitesGetSitePremierAddOn_566269(
    name: "sitesGetSitePremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOn_566270, base: "",
    url: url_SitesGetSitePremierAddOn_566271, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOn_566295 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSitePremierAddOn_566297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOn_566296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566298 = path.getOrDefault("name")
  valid_566298 = validateParameter(valid_566298, JString, required = true,
                                 default = nil)
  if valid_566298 != nil:
    section.add "name", valid_566298
  var valid_566299 = path.getOrDefault("subscriptionId")
  valid_566299 = validateParameter(valid_566299, JString, required = true,
                                 default = nil)
  if valid_566299 != nil:
    section.add "subscriptionId", valid_566299
  var valid_566300 = path.getOrDefault("premierAddOnName")
  valid_566300 = validateParameter(valid_566300, JString, required = true,
                                 default = nil)
  if valid_566300 != nil:
    section.add "premierAddOnName", valid_566300
  var valid_566301 = path.getOrDefault("resourceGroupName")
  valid_566301 = validateParameter(valid_566301, JString, required = true,
                                 default = nil)
  if valid_566301 != nil:
    section.add "resourceGroupName", valid_566301
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566302 = query.getOrDefault("api-version")
  valid_566302 = validateParameter(valid_566302, JString, required = true,
                                 default = nil)
  if valid_566302 != nil:
    section.add "api-version", valid_566302
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566303: Call_SitesDeleteSitePremierAddOn_566295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566303.validator(path, query, header, formData, body)
  let scheme = call_566303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566303.url(scheme.get, call_566303.host, call_566303.base,
                         call_566303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566303, url, valid)

proc call*(call_566304: Call_SitesDeleteSitePremierAddOn_566295;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## sitesDeleteSitePremierAddOn
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   resourceGroupName: string (required)
  var path_566305 = newJObject()
  var query_566306 = newJObject()
  add(query_566306, "api-version", newJString(apiVersion))
  add(path_566305, "name", newJString(name))
  add(path_566305, "subscriptionId", newJString(subscriptionId))
  add(path_566305, "premierAddOnName", newJString(premierAddOnName))
  add(path_566305, "resourceGroupName", newJString(resourceGroupName))
  result = call_566304.call(path_566305, query_566306, nil, nil, nil)

var sitesDeleteSitePremierAddOn* = Call_SitesDeleteSitePremierAddOn_566295(
    name: "sitesDeleteSitePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOn_566296, base: "",
    url: url_SitesDeleteSitePremierAddOn_566297, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXml_566307 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePublishingProfileXml_566309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXml_566308(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566310 = path.getOrDefault("name")
  valid_566310 = validateParameter(valid_566310, JString, required = true,
                                 default = nil)
  if valid_566310 != nil:
    section.add "name", valid_566310
  var valid_566311 = path.getOrDefault("subscriptionId")
  valid_566311 = validateParameter(valid_566311, JString, required = true,
                                 default = nil)
  if valid_566311 != nil:
    section.add "subscriptionId", valid_566311
  var valid_566312 = path.getOrDefault("resourceGroupName")
  valid_566312 = validateParameter(valid_566312, JString, required = true,
                                 default = nil)
  if valid_566312 != nil:
    section.add "resourceGroupName", valid_566312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566313 = query.getOrDefault("api-version")
  valid_566313 = validateParameter(valid_566313, JString, required = true,
                                 default = nil)
  if valid_566313 != nil:
    section.add "api-version", valid_566313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566315: Call_SitesListSitePublishingProfileXml_566307;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566315.validator(path, query, header, formData, body)
  let scheme = call_566315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566315.url(scheme.get, call_566315.host, call_566315.base,
                         call_566315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566315, url, valid)

proc call*(call_566316: Call_SitesListSitePublishingProfileXml_566307;
          options: JsonNode; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSitePublishingProfileXml
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566317 = newJObject()
  var query_566318 = newJObject()
  var body_566319 = newJObject()
  if options != nil:
    body_566319 = options
  add(query_566318, "api-version", newJString(apiVersion))
  add(path_566317, "name", newJString(name))
  add(path_566317, "subscriptionId", newJString(subscriptionId))
  add(path_566317, "resourceGroupName", newJString(resourceGroupName))
  result = call_566316.call(path_566317, query_566318, nil, nil, body_566319)

var sitesListSitePublishingProfileXml* = Call_SitesListSitePublishingProfileXml_566307(
    name: "sitesListSitePublishingProfileXml", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_SitesListSitePublishingProfileXml_566308, base: "",
    url: url_SitesListSitePublishingProfileXml_566309, schemes: {Scheme.Https})
type
  Call_SitesRecoverSite_566320 = ref object of OpenApiRestCall_563548
proc url_SitesRecoverSite_566322(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSite_566321(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566323 = path.getOrDefault("name")
  valid_566323 = validateParameter(valid_566323, JString, required = true,
                                 default = nil)
  if valid_566323 != nil:
    section.add "name", valid_566323
  var valid_566324 = path.getOrDefault("subscriptionId")
  valid_566324 = validateParameter(valid_566324, JString, required = true,
                                 default = nil)
  if valid_566324 != nil:
    section.add "subscriptionId", valid_566324
  var valid_566325 = path.getOrDefault("resourceGroupName")
  valid_566325 = validateParameter(valid_566325, JString, required = true,
                                 default = nil)
  if valid_566325 != nil:
    section.add "resourceGroupName", valid_566325
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566326 = query.getOrDefault("api-version")
  valid_566326 = validateParameter(valid_566326, JString, required = true,
                                 default = nil)
  if valid_566326 != nil:
    section.add "api-version", valid_566326
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566328: Call_SitesRecoverSite_566320; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566328.validator(path, query, header, formData, body)
  let scheme = call_566328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566328.url(scheme.get, call_566328.host, call_566328.base,
                         call_566328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566328, url, valid)

proc call*(call_566329: Call_SitesRecoverSite_566320; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_566330 = newJObject()
  var query_566331 = newJObject()
  var body_566332 = newJObject()
  add(query_566331, "api-version", newJString(apiVersion))
  add(path_566330, "name", newJString(name))
  add(path_566330, "subscriptionId", newJString(subscriptionId))
  add(path_566330, "resourceGroupName", newJString(resourceGroupName))
  if recoveryEntity != nil:
    body_566332 = recoveryEntity
  result = call_566329.call(path_566330, query_566331, nil, nil, body_566332)

var sitesRecoverSite* = Call_SitesRecoverSite_566320(name: "sitesRecoverSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_SitesRecoverSite_566321, base: "",
    url: url_SitesRecoverSite_566322, schemes: {Scheme.Https})
type
  Call_SitesResetProductionSlotConfig_566333 = ref object of OpenApiRestCall_563548
proc url_SitesResetProductionSlotConfig_566335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetProductionSlotConfig_566334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566336 = path.getOrDefault("name")
  valid_566336 = validateParameter(valid_566336, JString, required = true,
                                 default = nil)
  if valid_566336 != nil:
    section.add "name", valid_566336
  var valid_566337 = path.getOrDefault("subscriptionId")
  valid_566337 = validateParameter(valid_566337, JString, required = true,
                                 default = nil)
  if valid_566337 != nil:
    section.add "subscriptionId", valid_566337
  var valid_566338 = path.getOrDefault("resourceGroupName")
  valid_566338 = validateParameter(valid_566338, JString, required = true,
                                 default = nil)
  if valid_566338 != nil:
    section.add "resourceGroupName", valid_566338
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566339 = query.getOrDefault("api-version")
  valid_566339 = validateParameter(valid_566339, JString, required = true,
                                 default = nil)
  if valid_566339 != nil:
    section.add "api-version", valid_566339
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566340: Call_SitesResetProductionSlotConfig_566333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566340.validator(path, query, header, formData, body)
  let scheme = call_566340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566340.url(scheme.get, call_566340.host, call_566340.base,
                         call_566340.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566340, url, valid)

proc call*(call_566341: Call_SitesResetProductionSlotConfig_566333;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesResetProductionSlotConfig
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566342 = newJObject()
  var query_566343 = newJObject()
  add(query_566343, "api-version", newJString(apiVersion))
  add(path_566342, "name", newJString(name))
  add(path_566342, "subscriptionId", newJString(subscriptionId))
  add(path_566342, "resourceGroupName", newJString(resourceGroupName))
  result = call_566341.call(path_566342, query_566343, nil, nil, nil)

var sitesResetProductionSlotConfig* = Call_SitesResetProductionSlotConfig_566333(
    name: "sitesResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_SitesResetProductionSlotConfig_566334, base: "",
    url: url_SitesResetProductionSlotConfig_566335, schemes: {Scheme.Https})
type
  Call_SitesRestartSite_566344 = ref object of OpenApiRestCall_563548
proc url_SitesRestartSite_566346(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSite_566345(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566347 = path.getOrDefault("name")
  valid_566347 = validateParameter(valid_566347, JString, required = true,
                                 default = nil)
  if valid_566347 != nil:
    section.add "name", valid_566347
  var valid_566348 = path.getOrDefault("subscriptionId")
  valid_566348 = validateParameter(valid_566348, JString, required = true,
                                 default = nil)
  if valid_566348 != nil:
    section.add "subscriptionId", valid_566348
  var valid_566349 = path.getOrDefault("resourceGroupName")
  valid_566349 = validateParameter(valid_566349, JString, required = true,
                                 default = nil)
  if valid_566349 != nil:
    section.add "resourceGroupName", valid_566349
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  var valid_566350 = query.getOrDefault("synchronous")
  valid_566350 = validateParameter(valid_566350, JBool, required = false, default = nil)
  if valid_566350 != nil:
    section.add "synchronous", valid_566350
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566351 = query.getOrDefault("api-version")
  valid_566351 = validateParameter(valid_566351, JString, required = true,
                                 default = nil)
  if valid_566351 != nil:
    section.add "api-version", valid_566351
  var valid_566352 = query.getOrDefault("softRestart")
  valid_566352 = validateParameter(valid_566352, JBool, required = false, default = nil)
  if valid_566352 != nil:
    section.add "softRestart", valid_566352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566353: Call_SitesRestartSite_566344; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566353.validator(path, query, header, formData, body)
  let scheme = call_566353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566353.url(scheme.get, call_566353.host, call_566353.base,
                         call_566353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566353, url, valid)

proc call*(call_566354: Call_SitesRestartSite_566344; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## sitesRestartSite
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_566355 = newJObject()
  var query_566356 = newJObject()
  add(query_566356, "synchronous", newJBool(synchronous))
  add(query_566356, "api-version", newJString(apiVersion))
  add(path_566355, "name", newJString(name))
  add(path_566355, "subscriptionId", newJString(subscriptionId))
  add(path_566355, "resourceGroupName", newJString(resourceGroupName))
  add(query_566356, "softRestart", newJBool(softRestart))
  result = call_566354.call(path_566355, query_566356, nil, nil, nil)

var sitesRestartSite* = Call_SitesRestartSite_566344(name: "sitesRestartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_SitesRestartSite_566345, base: "",
    url: url_SitesRestartSite_566346, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlots_566357 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSlots_566359(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlots_566358(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_566360 = path.getOrDefault("name")
  valid_566360 = validateParameter(valid_566360, JString, required = true,
                                 default = nil)
  if valid_566360 != nil:
    section.add "name", valid_566360
  var valid_566361 = path.getOrDefault("subscriptionId")
  valid_566361 = validateParameter(valid_566361, JString, required = true,
                                 default = nil)
  if valid_566361 != nil:
    section.add "subscriptionId", valid_566361
  var valid_566362 = path.getOrDefault("resourceGroupName")
  valid_566362 = validateParameter(valid_566362, JString, required = true,
                                 default = nil)
  if valid_566362 != nil:
    section.add "resourceGroupName", valid_566362
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : List of app properties to include in the response
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566363 = query.getOrDefault("api-version")
  valid_566363 = validateParameter(valid_566363, JString, required = true,
                                 default = nil)
  if valid_566363 != nil:
    section.add "api-version", valid_566363
  var valid_566364 = query.getOrDefault("propertiesToInclude")
  valid_566364 = validateParameter(valid_566364, JString, required = false,
                                 default = nil)
  if valid_566364 != nil:
    section.add "propertiesToInclude", valid_566364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566365: Call_SitesGetSiteSlots_566357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566365.validator(path, query, header, formData, body)
  let scheme = call_566365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566365.url(scheme.get, call_566365.host, call_566365.base,
                         call_566365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566365, url, valid)

proc call*(call_566366: Call_SitesGetSiteSlots_566357; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlots
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : List of app properties to include in the response
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566367 = newJObject()
  var query_566368 = newJObject()
  add(query_566368, "api-version", newJString(apiVersion))
  add(path_566367, "name", newJString(name))
  add(path_566367, "subscriptionId", newJString(subscriptionId))
  add(query_566368, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_566367, "resourceGroupName", newJString(resourceGroupName))
  result = call_566366.call(path_566367, query_566368, nil, nil, nil)

var sitesGetSiteSlots* = Call_SitesGetSiteSlots_566357(name: "sitesGetSiteSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_SitesGetSiteSlots_566358, base: "",
    url: url_SitesGetSiteSlots_566359, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSlot_566382 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteSlot_566384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSlot_566383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566385 = path.getOrDefault("slot")
  valid_566385 = validateParameter(valid_566385, JString, required = true,
                                 default = nil)
  if valid_566385 != nil:
    section.add "slot", valid_566385
  var valid_566386 = path.getOrDefault("name")
  valid_566386 = validateParameter(valid_566386, JString, required = true,
                                 default = nil)
  if valid_566386 != nil:
    section.add "name", valid_566386
  var valid_566387 = path.getOrDefault("subscriptionId")
  valid_566387 = validateParameter(valid_566387, JString, required = true,
                                 default = nil)
  if valid_566387 != nil:
    section.add "subscriptionId", valid_566387
  var valid_566388 = path.getOrDefault("resourceGroupName")
  valid_566388 = validateParameter(valid_566388, JString, required = true,
                                 default = nil)
  if valid_566388 != nil:
    section.add "resourceGroupName", valid_566388
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name
  ##   skipCustomDomainVerification: JString
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JString
  ##                       : If true, web app hostname is force registered with DNS
  ##   skipDnsRegistration: JString
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566389 = query.getOrDefault("api-version")
  valid_566389 = validateParameter(valid_566389, JString, required = true,
                                 default = nil)
  if valid_566389 != nil:
    section.add "api-version", valid_566389
  var valid_566390 = query.getOrDefault("ttlInSeconds")
  valid_566390 = validateParameter(valid_566390, JString, required = false,
                                 default = nil)
  if valid_566390 != nil:
    section.add "ttlInSeconds", valid_566390
  var valid_566391 = query.getOrDefault("skipCustomDomainVerification")
  valid_566391 = validateParameter(valid_566391, JString, required = false,
                                 default = nil)
  if valid_566391 != nil:
    section.add "skipCustomDomainVerification", valid_566391
  var valid_566392 = query.getOrDefault("forceDnsRegistration")
  valid_566392 = validateParameter(valid_566392, JString, required = false,
                                 default = nil)
  if valid_566392 != nil:
    section.add "forceDnsRegistration", valid_566392
  var valid_566393 = query.getOrDefault("skipDnsRegistration")
  valid_566393 = validateParameter(valid_566393, JString, required = false,
                                 default = nil)
  if valid_566393 != nil:
    section.add "skipDnsRegistration", valid_566393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566395: Call_SitesCreateOrUpdateSiteSlot_566382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566395.validator(path, query, header, formData, body)
  let scheme = call_566395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566395.url(scheme.get, call_566395.host, call_566395.base,
                         call_566395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566395, url, valid)

proc call*(call_566396: Call_SitesCreateOrUpdateSiteSlot_566382; slot: string;
          apiVersion: string; siteEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string;
          ttlInSeconds: string = ""; skipCustomDomainVerification: string = "";
          forceDnsRegistration: string = ""; skipDnsRegistration: string = ""): Recallable =
  ## sitesCreateOrUpdateSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : Details of web app if it exists already
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   skipCustomDomainVerification: string
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: string
  ##                       : If true, web app hostname is force registered with DNS
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  ##   skipDnsRegistration: string
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##             only used for app creation
  var path_566397 = newJObject()
  var query_566398 = newJObject()
  var body_566399 = newJObject()
  add(path_566397, "slot", newJString(slot))
  add(query_566398, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_566399 = siteEnvelope
  add(query_566398, "ttlInSeconds", newJString(ttlInSeconds))
  add(path_566397, "name", newJString(name))
  add(path_566397, "subscriptionId", newJString(subscriptionId))
  add(query_566398, "skipCustomDomainVerification",
      newJString(skipCustomDomainVerification))
  add(query_566398, "forceDnsRegistration", newJString(forceDnsRegistration))
  add(path_566397, "resourceGroupName", newJString(resourceGroupName))
  add(query_566398, "skipDnsRegistration", newJString(skipDnsRegistration))
  result = call_566396.call(path_566397, query_566398, nil, nil, body_566399)

var sitesCreateOrUpdateSiteSlot* = Call_SitesCreateOrUpdateSiteSlot_566382(
    name: "sitesCreateOrUpdateSiteSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesCreateOrUpdateSiteSlot_566383, base: "",
    url: url_SitesCreateOrUpdateSiteSlot_566384, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSlot_566369 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSlot_566371(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSlot_566370(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566372 = path.getOrDefault("slot")
  valid_566372 = validateParameter(valid_566372, JString, required = true,
                                 default = nil)
  if valid_566372 != nil:
    section.add "slot", valid_566372
  var valid_566373 = path.getOrDefault("name")
  valid_566373 = validateParameter(valid_566373, JString, required = true,
                                 default = nil)
  if valid_566373 != nil:
    section.add "name", valid_566373
  var valid_566374 = path.getOrDefault("subscriptionId")
  valid_566374 = validateParameter(valid_566374, JString, required = true,
                                 default = nil)
  if valid_566374 != nil:
    section.add "subscriptionId", valid_566374
  var valid_566375 = path.getOrDefault("resourceGroupName")
  valid_566375 = validateParameter(valid_566375, JString, required = true,
                                 default = nil)
  if valid_566375 != nil:
    section.add "resourceGroupName", valid_566375
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   propertiesToInclude: JString
  ##                      : Additional web app properties included in the response
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566376 = query.getOrDefault("api-version")
  valid_566376 = validateParameter(valid_566376, JString, required = true,
                                 default = nil)
  if valid_566376 != nil:
    section.add "api-version", valid_566376
  var valid_566377 = query.getOrDefault("propertiesToInclude")
  valid_566377 = validateParameter(valid_566377, JString, required = false,
                                 default = nil)
  if valid_566377 != nil:
    section.add "propertiesToInclude", valid_566377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566378: Call_SitesGetSiteSlot_566369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566378.validator(path, query, header, formData, body)
  let scheme = call_566378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566378.url(scheme.get, call_566378.host, call_566378.base,
                         call_566378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566378, url, valid)

proc call*(call_566379: Call_SitesGetSiteSlot_566369; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; propertiesToInclude: string = ""): Recallable =
  ## sitesGetSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   propertiesToInclude: string
  ##                      : Additional web app properties included in the response
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566380 = newJObject()
  var query_566381 = newJObject()
  add(path_566380, "slot", newJString(slot))
  add(query_566381, "api-version", newJString(apiVersion))
  add(path_566380, "name", newJString(name))
  add(path_566380, "subscriptionId", newJString(subscriptionId))
  add(query_566381, "propertiesToInclude", newJString(propertiesToInclude))
  add(path_566380, "resourceGroupName", newJString(resourceGroupName))
  result = call_566379.call(path_566380, query_566381, nil, nil, nil)

var sitesGetSiteSlot* = Call_SitesGetSiteSlot_566369(name: "sitesGetSiteSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesGetSiteSlot_566370, base: "",
    url: url_SitesGetSiteSlot_566371, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSlot_566400 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteSlot_566402(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSlot_566401(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566403 = path.getOrDefault("slot")
  valid_566403 = validateParameter(valid_566403, JString, required = true,
                                 default = nil)
  if valid_566403 != nil:
    section.add "slot", valid_566403
  var valid_566404 = path.getOrDefault("name")
  valid_566404 = validateParameter(valid_566404, JString, required = true,
                                 default = nil)
  if valid_566404 != nil:
    section.add "name", valid_566404
  var valid_566405 = path.getOrDefault("subscriptionId")
  valid_566405 = validateParameter(valid_566405, JString, required = true,
                                 default = nil)
  if valid_566405 != nil:
    section.add "subscriptionId", valid_566405
  var valid_566406 = path.getOrDefault("resourceGroupName")
  valid_566406 = validateParameter(valid_566406, JString, required = true,
                                 default = nil)
  if valid_566406 != nil:
    section.add "resourceGroupName", valid_566406
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JString
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   deleteMetrics: JString
  ##                : If true, web app metrics are also deleted
  ##   skipDnsRegistration: JString
  ##                      : If true, DNS registration is skipped
  ##   deleteAllSlots: JString
  ##                 : If true, all slots associated with web app are also deleted
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566407 = query.getOrDefault("api-version")
  valid_566407 = validateParameter(valid_566407, JString, required = true,
                                 default = nil)
  if valid_566407 != nil:
    section.add "api-version", valid_566407
  var valid_566408 = query.getOrDefault("deleteEmptyServerFarm")
  valid_566408 = validateParameter(valid_566408, JString, required = false,
                                 default = nil)
  if valid_566408 != nil:
    section.add "deleteEmptyServerFarm", valid_566408
  var valid_566409 = query.getOrDefault("deleteMetrics")
  valid_566409 = validateParameter(valid_566409, JString, required = false,
                                 default = nil)
  if valid_566409 != nil:
    section.add "deleteMetrics", valid_566409
  var valid_566410 = query.getOrDefault("skipDnsRegistration")
  valid_566410 = validateParameter(valid_566410, JString, required = false,
                                 default = nil)
  if valid_566410 != nil:
    section.add "skipDnsRegistration", valid_566410
  var valid_566411 = query.getOrDefault("deleteAllSlots")
  valid_566411 = validateParameter(valid_566411, JString, required = false,
                                 default = nil)
  if valid_566411 != nil:
    section.add "deleteAllSlots", valid_566411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566412: Call_SitesDeleteSiteSlot_566400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566412.validator(path, query, header, formData, body)
  let scheme = call_566412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566412.url(scheme.get, call_566412.host, call_566412.base,
                         call_566412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566412, url, valid)

proc call*(call_566413: Call_SitesDeleteSiteSlot_566400; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; deleteEmptyServerFarm: string = "";
          deleteMetrics: string = ""; skipDnsRegistration: string = "";
          deleteAllSlots: string = ""): Recallable =
  ## sitesDeleteSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: string
  ##                        : If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deleteMetrics: string
  ##                : If true, web app metrics are also deleted
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   skipDnsRegistration: string
  ##                      : If true, DNS registration is skipped
  ##   deleteAllSlots: string
  ##                 : If true, all slots associated with web app are also deleted
  var path_566414 = newJObject()
  var query_566415 = newJObject()
  add(path_566414, "slot", newJString(slot))
  add(query_566415, "api-version", newJString(apiVersion))
  add(query_566415, "deleteEmptyServerFarm", newJString(deleteEmptyServerFarm))
  add(path_566414, "name", newJString(name))
  add(path_566414, "subscriptionId", newJString(subscriptionId))
  add(query_566415, "deleteMetrics", newJString(deleteMetrics))
  add(path_566414, "resourceGroupName", newJString(resourceGroupName))
  add(query_566415, "skipDnsRegistration", newJString(skipDnsRegistration))
  add(query_566415, "deleteAllSlots", newJString(deleteAllSlots))
  result = call_566413.call(path_566414, query_566415, nil, nil, nil)

var sitesDeleteSiteSlot* = Call_SitesDeleteSiteSlot_566400(
    name: "sitesDeleteSiteSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_SitesDeleteSiteSlot_566401, base: "",
    url: url_SitesDeleteSiteSlot_566402, schemes: {Scheme.Https})
type
  Call_SitesApplySlotConfigSlot_566416 = ref object of OpenApiRestCall_563548
proc url_SitesApplySlotConfigSlot_566418(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesApplySlotConfigSlot_566417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566419 = path.getOrDefault("slot")
  valid_566419 = validateParameter(valid_566419, JString, required = true,
                                 default = nil)
  if valid_566419 != nil:
    section.add "slot", valid_566419
  var valid_566420 = path.getOrDefault("name")
  valid_566420 = validateParameter(valid_566420, JString, required = true,
                                 default = nil)
  if valid_566420 != nil:
    section.add "name", valid_566420
  var valid_566421 = path.getOrDefault("subscriptionId")
  valid_566421 = validateParameter(valid_566421, JString, required = true,
                                 default = nil)
  if valid_566421 != nil:
    section.add "subscriptionId", valid_566421
  var valid_566422 = path.getOrDefault("resourceGroupName")
  valid_566422 = validateParameter(valid_566422, JString, required = true,
                                 default = nil)
  if valid_566422 != nil:
    section.add "resourceGroupName", valid_566422
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566423 = query.getOrDefault("api-version")
  valid_566423 = validateParameter(valid_566423, JString, required = true,
                                 default = nil)
  if valid_566423 != nil:
    section.add "api-version", valid_566423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566425: Call_SitesApplySlotConfigSlot_566416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566425.validator(path, query, header, formData, body)
  let scheme = call_566425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566425.url(scheme.get, call_566425.host, call_566425.base,
                         call_566425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566425, url, valid)

proc call*(call_566426: Call_SitesApplySlotConfigSlot_566416; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesApplySlotConfigSlot
  ##   slot: string (required)
  ##       : Name of the source slot. Settings from the target slot will be applied onto this slot
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name. Settings from that slot will be applied on the source slot
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566427 = newJObject()
  var query_566428 = newJObject()
  var body_566429 = newJObject()
  add(path_566427, "slot", newJString(slot))
  add(query_566428, "api-version", newJString(apiVersion))
  add(path_566427, "name", newJString(name))
  add(path_566427, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_566429 = slotSwapEntity
  add(path_566427, "resourceGroupName", newJString(resourceGroupName))
  result = call_566426.call(path_566427, query_566428, nil, nil, body_566429)

var sitesApplySlotConfigSlot* = Call_SitesApplySlotConfigSlot_566416(
    name: "sitesApplySlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_SitesApplySlotConfigSlot_566417, base: "",
    url: url_SitesApplySlotConfigSlot_566418, schemes: {Scheme.Https})
type
  Call_SitesBackupSiteSlot_566430 = ref object of OpenApiRestCall_563548
proc url_SitesBackupSiteSlot_566432(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesBackupSiteSlot_566431(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566433 = path.getOrDefault("slot")
  valid_566433 = validateParameter(valid_566433, JString, required = true,
                                 default = nil)
  if valid_566433 != nil:
    section.add "slot", valid_566433
  var valid_566434 = path.getOrDefault("name")
  valid_566434 = validateParameter(valid_566434, JString, required = true,
                                 default = nil)
  if valid_566434 != nil:
    section.add "name", valid_566434
  var valid_566435 = path.getOrDefault("subscriptionId")
  valid_566435 = validateParameter(valid_566435, JString, required = true,
                                 default = nil)
  if valid_566435 != nil:
    section.add "subscriptionId", valid_566435
  var valid_566436 = path.getOrDefault("resourceGroupName")
  valid_566436 = validateParameter(valid_566436, JString, required = true,
                                 default = nil)
  if valid_566436 != nil:
    section.add "resourceGroupName", valid_566436
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566437 = query.getOrDefault("api-version")
  valid_566437 = validateParameter(valid_566437, JString, required = true,
                                 default = nil)
  if valid_566437 != nil:
    section.add "api-version", valid_566437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566439: Call_SitesBackupSiteSlot_566430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566439.validator(path, query, header, formData, body)
  let scheme = call_566439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566439.url(scheme.get, call_566439.host, call_566439.base,
                         call_566439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566439, url, valid)

proc call*(call_566440: Call_SitesBackupSiteSlot_566430; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesBackupSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_566441 = newJObject()
  var query_566442 = newJObject()
  var body_566443 = newJObject()
  add(path_566441, "slot", newJString(slot))
  add(query_566442, "api-version", newJString(apiVersion))
  add(path_566441, "name", newJString(name))
  add(path_566441, "subscriptionId", newJString(subscriptionId))
  add(path_566441, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566443 = request
  result = call_566440.call(path_566441, query_566442, nil, nil, body_566443)

var sitesBackupSiteSlot* = Call_SitesBackupSiteSlot_566430(
    name: "sitesBackupSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_SitesBackupSiteSlot_566431, base: "",
    url: url_SitesBackupSiteSlot_566432, schemes: {Scheme.Https})
type
  Call_SitesListSiteBackupsSlot_566444 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteBackupsSlot_566446(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteBackupsSlot_566445(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566447 = path.getOrDefault("slot")
  valid_566447 = validateParameter(valid_566447, JString, required = true,
                                 default = nil)
  if valid_566447 != nil:
    section.add "slot", valid_566447
  var valid_566448 = path.getOrDefault("name")
  valid_566448 = validateParameter(valid_566448, JString, required = true,
                                 default = nil)
  if valid_566448 != nil:
    section.add "name", valid_566448
  var valid_566449 = path.getOrDefault("subscriptionId")
  valid_566449 = validateParameter(valid_566449, JString, required = true,
                                 default = nil)
  if valid_566449 != nil:
    section.add "subscriptionId", valid_566449
  var valid_566450 = path.getOrDefault("resourceGroupName")
  valid_566450 = validateParameter(valid_566450, JString, required = true,
                                 default = nil)
  if valid_566450 != nil:
    section.add "resourceGroupName", valid_566450
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566451 = query.getOrDefault("api-version")
  valid_566451 = validateParameter(valid_566451, JString, required = true,
                                 default = nil)
  if valid_566451 != nil:
    section.add "api-version", valid_566451
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566452: Call_SitesListSiteBackupsSlot_566444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566452.validator(path, query, header, formData, body)
  let scheme = call_566452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566452.url(scheme.get, call_566452.host, call_566452.base,
                         call_566452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566452, url, valid)

proc call*(call_566453: Call_SitesListSiteBackupsSlot_566444; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteBackupsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566454 = newJObject()
  var query_566455 = newJObject()
  add(path_566454, "slot", newJString(slot))
  add(query_566455, "api-version", newJString(apiVersion))
  add(path_566454, "name", newJString(name))
  add(path_566454, "subscriptionId", newJString(subscriptionId))
  add(path_566454, "resourceGroupName", newJString(resourceGroupName))
  result = call_566453.call(path_566454, query_566455, nil, nil, nil)

var sitesListSiteBackupsSlot* = Call_SitesListSiteBackupsSlot_566444(
    name: "sitesListSiteBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_SitesListSiteBackupsSlot_566445, base: "",
    url: url_SitesListSiteBackupsSlot_566446, schemes: {Scheme.Https})
type
  Call_SitesDiscoverSiteRestoreSlot_566456 = ref object of OpenApiRestCall_563548
proc url_SitesDiscoverSiteRestoreSlot_566458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDiscoverSiteRestoreSlot_566457(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566459 = path.getOrDefault("slot")
  valid_566459 = validateParameter(valid_566459, JString, required = true,
                                 default = nil)
  if valid_566459 != nil:
    section.add "slot", valid_566459
  var valid_566460 = path.getOrDefault("name")
  valid_566460 = validateParameter(valid_566460, JString, required = true,
                                 default = nil)
  if valid_566460 != nil:
    section.add "name", valid_566460
  var valid_566461 = path.getOrDefault("subscriptionId")
  valid_566461 = validateParameter(valid_566461, JString, required = true,
                                 default = nil)
  if valid_566461 != nil:
    section.add "subscriptionId", valid_566461
  var valid_566462 = path.getOrDefault("resourceGroupName")
  valid_566462 = validateParameter(valid_566462, JString, required = true,
                                 default = nil)
  if valid_566462 != nil:
    section.add "resourceGroupName", valid_566462
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566463 = query.getOrDefault("api-version")
  valid_566463 = validateParameter(valid_566463, JString, required = true,
                                 default = nil)
  if valid_566463 != nil:
    section.add "api-version", valid_566463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566465: Call_SitesDiscoverSiteRestoreSlot_566456; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566465.validator(path, query, header, formData, body)
  let scheme = call_566465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566465.url(scheme.get, call_566465.host, call_566465.base,
                         call_566465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566465, url, valid)

proc call*(call_566466: Call_SitesDiscoverSiteRestoreSlot_566456; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesDiscoverSiteRestoreSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_566467 = newJObject()
  var query_566468 = newJObject()
  var body_566469 = newJObject()
  add(path_566467, "slot", newJString(slot))
  add(query_566468, "api-version", newJString(apiVersion))
  add(path_566467, "name", newJString(name))
  add(path_566467, "subscriptionId", newJString(subscriptionId))
  add(path_566467, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566469 = request
  result = call_566466.call(path_566467, query_566468, nil, nil, body_566469)

var sitesDiscoverSiteRestoreSlot* = Call_SitesDiscoverSiteRestoreSlot_566456(
    name: "sitesDiscoverSiteRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_SitesDiscoverSiteRestoreSlot_566457, base: "",
    url: url_SitesDiscoverSiteRestoreSlot_566458, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSlot_566470 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupStatusSlot_566472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSlot_566471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566473 = path.getOrDefault("slot")
  valid_566473 = validateParameter(valid_566473, JString, required = true,
                                 default = nil)
  if valid_566473 != nil:
    section.add "slot", valid_566473
  var valid_566474 = path.getOrDefault("name")
  valid_566474 = validateParameter(valid_566474, JString, required = true,
                                 default = nil)
  if valid_566474 != nil:
    section.add "name", valid_566474
  var valid_566475 = path.getOrDefault("subscriptionId")
  valid_566475 = validateParameter(valid_566475, JString, required = true,
                                 default = nil)
  if valid_566475 != nil:
    section.add "subscriptionId", valid_566475
  var valid_566476 = path.getOrDefault("backupId")
  valid_566476 = validateParameter(valid_566476, JString, required = true,
                                 default = nil)
  if valid_566476 != nil:
    section.add "backupId", valid_566476
  var valid_566477 = path.getOrDefault("resourceGroupName")
  valid_566477 = validateParameter(valid_566477, JString, required = true,
                                 default = nil)
  if valid_566477 != nil:
    section.add "resourceGroupName", valid_566477
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566478 = query.getOrDefault("api-version")
  valid_566478 = validateParameter(valid_566478, JString, required = true,
                                 default = nil)
  if valid_566478 != nil:
    section.add "api-version", valid_566478
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566479: Call_SitesGetSiteBackupStatusSlot_566470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566479.validator(path, query, header, formData, body)
  let scheme = call_566479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566479.url(scheme.get, call_566479.host, call_566479.base,
                         call_566479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566479, url, valid)

proc call*(call_566480: Call_SitesGetSiteBackupStatusSlot_566470; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteBackupStatusSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566481 = newJObject()
  var query_566482 = newJObject()
  add(path_566481, "slot", newJString(slot))
  add(query_566482, "api-version", newJString(apiVersion))
  add(path_566481, "name", newJString(name))
  add(path_566481, "subscriptionId", newJString(subscriptionId))
  add(path_566481, "backupId", newJString(backupId))
  add(path_566481, "resourceGroupName", newJString(resourceGroupName))
  result = call_566480.call(path_566481, query_566482, nil, nil, nil)

var sitesGetSiteBackupStatusSlot* = Call_SitesGetSiteBackupStatusSlot_566470(
    name: "sitesGetSiteBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesGetSiteBackupStatusSlot_566471, base: "",
    url: url_SitesGetSiteBackupStatusSlot_566472, schemes: {Scheme.Https})
type
  Call_SitesDeleteBackupSlot_566483 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteBackupSlot_566485(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteBackupSlot_566484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566486 = path.getOrDefault("slot")
  valid_566486 = validateParameter(valid_566486, JString, required = true,
                                 default = nil)
  if valid_566486 != nil:
    section.add "slot", valid_566486
  var valid_566487 = path.getOrDefault("name")
  valid_566487 = validateParameter(valid_566487, JString, required = true,
                                 default = nil)
  if valid_566487 != nil:
    section.add "name", valid_566487
  var valid_566488 = path.getOrDefault("subscriptionId")
  valid_566488 = validateParameter(valid_566488, JString, required = true,
                                 default = nil)
  if valid_566488 != nil:
    section.add "subscriptionId", valid_566488
  var valid_566489 = path.getOrDefault("backupId")
  valid_566489 = validateParameter(valid_566489, JString, required = true,
                                 default = nil)
  if valid_566489 != nil:
    section.add "backupId", valid_566489
  var valid_566490 = path.getOrDefault("resourceGroupName")
  valid_566490 = validateParameter(valid_566490, JString, required = true,
                                 default = nil)
  if valid_566490 != nil:
    section.add "resourceGroupName", valid_566490
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566491 = query.getOrDefault("api-version")
  valid_566491 = validateParameter(valid_566491, JString, required = true,
                                 default = nil)
  if valid_566491 != nil:
    section.add "api-version", valid_566491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566492: Call_SitesDeleteBackupSlot_566483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566492.validator(path, query, header, formData, body)
  let scheme = call_566492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566492.url(scheme.get, call_566492.host, call_566492.base,
                         call_566492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566492, url, valid)

proc call*(call_566493: Call_SitesDeleteBackupSlot_566483; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteBackupSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566494 = newJObject()
  var query_566495 = newJObject()
  add(path_566494, "slot", newJString(slot))
  add(query_566495, "api-version", newJString(apiVersion))
  add(path_566494, "name", newJString(name))
  add(path_566494, "subscriptionId", newJString(subscriptionId))
  add(path_566494, "backupId", newJString(backupId))
  add(path_566494, "resourceGroupName", newJString(resourceGroupName))
  result = call_566493.call(path_566494, query_566495, nil, nil, nil)

var sitesDeleteBackupSlot* = Call_SitesDeleteBackupSlot_566483(
    name: "sitesDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_SitesDeleteBackupSlot_566484, base: "",
    url: url_SitesDeleteBackupSlot_566485, schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupStatusSecretsSlot_566496 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupStatusSecretsSlot_566498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupStatusSecretsSlot_566497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566499 = path.getOrDefault("slot")
  valid_566499 = validateParameter(valid_566499, JString, required = true,
                                 default = nil)
  if valid_566499 != nil:
    section.add "slot", valid_566499
  var valid_566500 = path.getOrDefault("name")
  valid_566500 = validateParameter(valid_566500, JString, required = true,
                                 default = nil)
  if valid_566500 != nil:
    section.add "name", valid_566500
  var valid_566501 = path.getOrDefault("subscriptionId")
  valid_566501 = validateParameter(valid_566501, JString, required = true,
                                 default = nil)
  if valid_566501 != nil:
    section.add "subscriptionId", valid_566501
  var valid_566502 = path.getOrDefault("backupId")
  valid_566502 = validateParameter(valid_566502, JString, required = true,
                                 default = nil)
  if valid_566502 != nil:
    section.add "backupId", valid_566502
  var valid_566503 = path.getOrDefault("resourceGroupName")
  valid_566503 = validateParameter(valid_566503, JString, required = true,
                                 default = nil)
  if valid_566503 != nil:
    section.add "resourceGroupName", valid_566503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566504 = query.getOrDefault("api-version")
  valid_566504 = validateParameter(valid_566504, JString, required = true,
                                 default = nil)
  if valid_566504 != nil:
    section.add "api-version", valid_566504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566506: Call_SitesGetSiteBackupStatusSecretsSlot_566496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566506.validator(path, query, header, formData, body)
  let scheme = call_566506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566506.url(scheme.get, call_566506.host, call_566506.base,
                         call_566506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566506, url, valid)

proc call*(call_566507: Call_SitesGetSiteBackupStatusSecretsSlot_566496;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          backupId: string; resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesGetSiteBackupStatusSecretsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_566508 = newJObject()
  var query_566509 = newJObject()
  var body_566510 = newJObject()
  add(path_566508, "slot", newJString(slot))
  add(query_566509, "api-version", newJString(apiVersion))
  add(path_566508, "name", newJString(name))
  add(path_566508, "subscriptionId", newJString(subscriptionId))
  add(path_566508, "backupId", newJString(backupId))
  add(path_566508, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566510 = request
  result = call_566507.call(path_566508, query_566509, nil, nil, body_566510)

var sitesGetSiteBackupStatusSecretsSlot* = Call_SitesGetSiteBackupStatusSecretsSlot_566496(
    name: "sitesGetSiteBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_SitesGetSiteBackupStatusSecretsSlot_566497, base: "",
    url: url_SitesGetSiteBackupStatusSecretsSlot_566498, schemes: {Scheme.Https})
type
  Call_SitesRestoreSiteSlot_566511 = ref object of OpenApiRestCall_563548
proc url_SitesRestoreSiteSlot_566513(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestoreSiteSlot_566512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   backupId: JString (required)
  ##           : Id of backup to restore
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566514 = path.getOrDefault("slot")
  valid_566514 = validateParameter(valid_566514, JString, required = true,
                                 default = nil)
  if valid_566514 != nil:
    section.add "slot", valid_566514
  var valid_566515 = path.getOrDefault("name")
  valid_566515 = validateParameter(valid_566515, JString, required = true,
                                 default = nil)
  if valid_566515 != nil:
    section.add "name", valid_566515
  var valid_566516 = path.getOrDefault("subscriptionId")
  valid_566516 = validateParameter(valid_566516, JString, required = true,
                                 default = nil)
  if valid_566516 != nil:
    section.add "subscriptionId", valid_566516
  var valid_566517 = path.getOrDefault("backupId")
  valid_566517 = validateParameter(valid_566517, JString, required = true,
                                 default = nil)
  if valid_566517 != nil:
    section.add "backupId", valid_566517
  var valid_566518 = path.getOrDefault("resourceGroupName")
  valid_566518 = validateParameter(valid_566518, JString, required = true,
                                 default = nil)
  if valid_566518 != nil:
    section.add "resourceGroupName", valid_566518
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566519 = query.getOrDefault("api-version")
  valid_566519 = validateParameter(valid_566519, JString, required = true,
                                 default = nil)
  if valid_566519 != nil:
    section.add "api-version", valid_566519
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566521: Call_SitesRestoreSiteSlot_566511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566521.validator(path, query, header, formData, body)
  let scheme = call_566521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566521.url(scheme.get, call_566521.host, call_566521.base,
                         call_566521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566521, url, valid)

proc call*(call_566522: Call_SitesRestoreSiteSlot_566511; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesRestoreSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   backupId: string (required)
  ##           : Id of backup to restore
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on restore request
  var path_566523 = newJObject()
  var query_566524 = newJObject()
  var body_566525 = newJObject()
  add(path_566523, "slot", newJString(slot))
  add(query_566524, "api-version", newJString(apiVersion))
  add(path_566523, "name", newJString(name))
  add(path_566523, "subscriptionId", newJString(subscriptionId))
  add(path_566523, "backupId", newJString(backupId))
  add(path_566523, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566525 = request
  result = call_566522.call(path_566523, query_566524, nil, nil, body_566525)

var sitesRestoreSiteSlot* = Call_SitesRestoreSiteSlot_566511(
    name: "sitesRestoreSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_SitesRestoreSiteSlot_566512, base: "",
    url: url_SitesRestoreSiteSlot_566513, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAppSettingsSlot_566526 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteAppSettingsSlot_566528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAppSettingsSlot_566527(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566529 = path.getOrDefault("slot")
  valid_566529 = validateParameter(valid_566529, JString, required = true,
                                 default = nil)
  if valid_566529 != nil:
    section.add "slot", valid_566529
  var valid_566530 = path.getOrDefault("name")
  valid_566530 = validateParameter(valid_566530, JString, required = true,
                                 default = nil)
  if valid_566530 != nil:
    section.add "name", valid_566530
  var valid_566531 = path.getOrDefault("subscriptionId")
  valid_566531 = validateParameter(valid_566531, JString, required = true,
                                 default = nil)
  if valid_566531 != nil:
    section.add "subscriptionId", valid_566531
  var valid_566532 = path.getOrDefault("resourceGroupName")
  valid_566532 = validateParameter(valid_566532, JString, required = true,
                                 default = nil)
  if valid_566532 != nil:
    section.add "resourceGroupName", valid_566532
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566533 = query.getOrDefault("api-version")
  valid_566533 = validateParameter(valid_566533, JString, required = true,
                                 default = nil)
  if valid_566533 != nil:
    section.add "api-version", valid_566533
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566535: Call_SitesUpdateSiteAppSettingsSlot_566526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566535.validator(path, query, header, formData, body)
  let scheme = call_566535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566535.url(scheme.get, call_566535.host, call_566535.base,
                         call_566535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566535, url, valid)

proc call*(call_566536: Call_SitesUpdateSiteAppSettingsSlot_566526;
          appSettings: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteAppSettingsSlot
  ##   appSettings: JObject (required)
  ##              : Application settings of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566537 = newJObject()
  var query_566538 = newJObject()
  var body_566539 = newJObject()
  if appSettings != nil:
    body_566539 = appSettings
  add(path_566537, "slot", newJString(slot))
  add(query_566538, "api-version", newJString(apiVersion))
  add(path_566537, "name", newJString(name))
  add(path_566537, "subscriptionId", newJString(subscriptionId))
  add(path_566537, "resourceGroupName", newJString(resourceGroupName))
  result = call_566536.call(path_566537, query_566538, nil, nil, body_566539)

var sitesUpdateSiteAppSettingsSlot* = Call_SitesUpdateSiteAppSettingsSlot_566526(
    name: "sitesUpdateSiteAppSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_SitesUpdateSiteAppSettingsSlot_566527, base: "",
    url: url_SitesUpdateSiteAppSettingsSlot_566528, schemes: {Scheme.Https})
type
  Call_SitesListSiteAppSettingsSlot_566540 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteAppSettingsSlot_566542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAppSettingsSlot_566541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566543 = path.getOrDefault("slot")
  valid_566543 = validateParameter(valid_566543, JString, required = true,
                                 default = nil)
  if valid_566543 != nil:
    section.add "slot", valid_566543
  var valid_566544 = path.getOrDefault("name")
  valid_566544 = validateParameter(valid_566544, JString, required = true,
                                 default = nil)
  if valid_566544 != nil:
    section.add "name", valid_566544
  var valid_566545 = path.getOrDefault("subscriptionId")
  valid_566545 = validateParameter(valid_566545, JString, required = true,
                                 default = nil)
  if valid_566545 != nil:
    section.add "subscriptionId", valid_566545
  var valid_566546 = path.getOrDefault("resourceGroupName")
  valid_566546 = validateParameter(valid_566546, JString, required = true,
                                 default = nil)
  if valid_566546 != nil:
    section.add "resourceGroupName", valid_566546
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566547 = query.getOrDefault("api-version")
  valid_566547 = validateParameter(valid_566547, JString, required = true,
                                 default = nil)
  if valid_566547 != nil:
    section.add "api-version", valid_566547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566548: Call_SitesListSiteAppSettingsSlot_566540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566548.validator(path, query, header, formData, body)
  let scheme = call_566548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566548.url(scheme.get, call_566548.host, call_566548.base,
                         call_566548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566548, url, valid)

proc call*(call_566549: Call_SitesListSiteAppSettingsSlot_566540; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteAppSettingsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566550 = newJObject()
  var query_566551 = newJObject()
  add(path_566550, "slot", newJString(slot))
  add(query_566551, "api-version", newJString(apiVersion))
  add(path_566550, "name", newJString(name))
  add(path_566550, "subscriptionId", newJString(subscriptionId))
  add(path_566550, "resourceGroupName", newJString(resourceGroupName))
  result = call_566549.call(path_566550, query_566551, nil, nil, nil)

var sitesListSiteAppSettingsSlot* = Call_SitesListSiteAppSettingsSlot_566540(
    name: "sitesListSiteAppSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_SitesListSiteAppSettingsSlot_566541, base: "",
    url: url_SitesListSiteAppSettingsSlot_566542, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteAuthSettingsSlot_566552 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteAuthSettingsSlot_566554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteAuthSettingsSlot_566553(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566555 = path.getOrDefault("slot")
  valid_566555 = validateParameter(valid_566555, JString, required = true,
                                 default = nil)
  if valid_566555 != nil:
    section.add "slot", valid_566555
  var valid_566556 = path.getOrDefault("name")
  valid_566556 = validateParameter(valid_566556, JString, required = true,
                                 default = nil)
  if valid_566556 != nil:
    section.add "name", valid_566556
  var valid_566557 = path.getOrDefault("subscriptionId")
  valid_566557 = validateParameter(valid_566557, JString, required = true,
                                 default = nil)
  if valid_566557 != nil:
    section.add "subscriptionId", valid_566557
  var valid_566558 = path.getOrDefault("resourceGroupName")
  valid_566558 = validateParameter(valid_566558, JString, required = true,
                                 default = nil)
  if valid_566558 != nil:
    section.add "resourceGroupName", valid_566558
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566559 = query.getOrDefault("api-version")
  valid_566559 = validateParameter(valid_566559, JString, required = true,
                                 default = nil)
  if valid_566559 != nil:
    section.add "api-version", valid_566559
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566561: Call_SitesUpdateSiteAuthSettingsSlot_566552;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566561.validator(path, query, header, formData, body)
  let scheme = call_566561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566561.url(scheme.get, call_566561.host, call_566561.base,
                         call_566561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566561, url, valid)

proc call*(call_566562: Call_SitesUpdateSiteAuthSettingsSlot_566552; slot: string;
          apiVersion: string; siteAuthSettings: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteAuthSettingsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566563 = newJObject()
  var query_566564 = newJObject()
  var body_566565 = newJObject()
  add(path_566563, "slot", newJString(slot))
  add(query_566564, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_566565 = siteAuthSettings
  add(path_566563, "name", newJString(name))
  add(path_566563, "subscriptionId", newJString(subscriptionId))
  add(path_566563, "resourceGroupName", newJString(resourceGroupName))
  result = call_566562.call(path_566563, query_566564, nil, nil, body_566565)

var sitesUpdateSiteAuthSettingsSlot* = Call_SitesUpdateSiteAuthSettingsSlot_566552(
    name: "sitesUpdateSiteAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_SitesUpdateSiteAuthSettingsSlot_566553, base: "",
    url: url_SitesUpdateSiteAuthSettingsSlot_566554, schemes: {Scheme.Https})
type
  Call_SitesListSiteAuthSettingsSlot_566566 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteAuthSettingsSlot_566568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteAuthSettingsSlot_566567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566569 = path.getOrDefault("slot")
  valid_566569 = validateParameter(valid_566569, JString, required = true,
                                 default = nil)
  if valid_566569 != nil:
    section.add "slot", valid_566569
  var valid_566570 = path.getOrDefault("name")
  valid_566570 = validateParameter(valid_566570, JString, required = true,
                                 default = nil)
  if valid_566570 != nil:
    section.add "name", valid_566570
  var valid_566571 = path.getOrDefault("subscriptionId")
  valid_566571 = validateParameter(valid_566571, JString, required = true,
                                 default = nil)
  if valid_566571 != nil:
    section.add "subscriptionId", valid_566571
  var valid_566572 = path.getOrDefault("resourceGroupName")
  valid_566572 = validateParameter(valid_566572, JString, required = true,
                                 default = nil)
  if valid_566572 != nil:
    section.add "resourceGroupName", valid_566572
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566573 = query.getOrDefault("api-version")
  valid_566573 = validateParameter(valid_566573, JString, required = true,
                                 default = nil)
  if valid_566573 != nil:
    section.add "api-version", valid_566573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566574: Call_SitesListSiteAuthSettingsSlot_566566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566574.validator(path, query, header, formData, body)
  let scheme = call_566574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566574.url(scheme.get, call_566574.host, call_566574.base,
                         call_566574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566574, url, valid)

proc call*(call_566575: Call_SitesListSiteAuthSettingsSlot_566566; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteAuthSettingsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566576 = newJObject()
  var query_566577 = newJObject()
  add(path_566576, "slot", newJString(slot))
  add(query_566577, "api-version", newJString(apiVersion))
  add(path_566576, "name", newJString(name))
  add(path_566576, "subscriptionId", newJString(subscriptionId))
  add(path_566576, "resourceGroupName", newJString(resourceGroupName))
  result = call_566575.call(path_566576, query_566577, nil, nil, nil)

var sitesListSiteAuthSettingsSlot* = Call_SitesListSiteAuthSettingsSlot_566566(
    name: "sitesListSiteAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_SitesListSiteAuthSettingsSlot_566567, base: "",
    url: url_SitesListSiteAuthSettingsSlot_566568, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteBackupConfigurationSlot_566578 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteBackupConfigurationSlot_566580(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteBackupConfigurationSlot_566579(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566581 = path.getOrDefault("slot")
  valid_566581 = validateParameter(valid_566581, JString, required = true,
                                 default = nil)
  if valid_566581 != nil:
    section.add "slot", valid_566581
  var valid_566582 = path.getOrDefault("name")
  valid_566582 = validateParameter(valid_566582, JString, required = true,
                                 default = nil)
  if valid_566582 != nil:
    section.add "name", valid_566582
  var valid_566583 = path.getOrDefault("subscriptionId")
  valid_566583 = validateParameter(valid_566583, JString, required = true,
                                 default = nil)
  if valid_566583 != nil:
    section.add "subscriptionId", valid_566583
  var valid_566584 = path.getOrDefault("resourceGroupName")
  valid_566584 = validateParameter(valid_566584, JString, required = true,
                                 default = nil)
  if valid_566584 != nil:
    section.add "resourceGroupName", valid_566584
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566585 = query.getOrDefault("api-version")
  valid_566585 = validateParameter(valid_566585, JString, required = true,
                                 default = nil)
  if valid_566585 != nil:
    section.add "api-version", valid_566585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566587: Call_SitesUpdateSiteBackupConfigurationSlot_566578;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566587.validator(path, query, header, formData, body)
  let scheme = call_566587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566587.url(scheme.get, call_566587.host, call_566587.base,
                         call_566587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566587, url, valid)

proc call*(call_566588: Call_SitesUpdateSiteBackupConfigurationSlot_566578;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## sitesUpdateSiteBackupConfigurationSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   request: JObject (required)
  ##          : Information on backup request
  var path_566589 = newJObject()
  var query_566590 = newJObject()
  var body_566591 = newJObject()
  add(path_566589, "slot", newJString(slot))
  add(query_566590, "api-version", newJString(apiVersion))
  add(path_566589, "name", newJString(name))
  add(path_566589, "subscriptionId", newJString(subscriptionId))
  add(path_566589, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566591 = request
  result = call_566588.call(path_566589, query_566590, nil, nil, body_566591)

var sitesUpdateSiteBackupConfigurationSlot* = Call_SitesUpdateSiteBackupConfigurationSlot_566578(
    name: "sitesUpdateSiteBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_SitesUpdateSiteBackupConfigurationSlot_566579, base: "",
    url: url_SitesUpdateSiteBackupConfigurationSlot_566580,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteBackupConfigurationSlot_566592 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteBackupConfigurationSlot_566594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteBackupConfigurationSlot_566593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566595 = path.getOrDefault("slot")
  valid_566595 = validateParameter(valid_566595, JString, required = true,
                                 default = nil)
  if valid_566595 != nil:
    section.add "slot", valid_566595
  var valid_566596 = path.getOrDefault("name")
  valid_566596 = validateParameter(valid_566596, JString, required = true,
                                 default = nil)
  if valid_566596 != nil:
    section.add "name", valid_566596
  var valid_566597 = path.getOrDefault("subscriptionId")
  valid_566597 = validateParameter(valid_566597, JString, required = true,
                                 default = nil)
  if valid_566597 != nil:
    section.add "subscriptionId", valid_566597
  var valid_566598 = path.getOrDefault("resourceGroupName")
  valid_566598 = validateParameter(valid_566598, JString, required = true,
                                 default = nil)
  if valid_566598 != nil:
    section.add "resourceGroupName", valid_566598
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566599 = query.getOrDefault("api-version")
  valid_566599 = validateParameter(valid_566599, JString, required = true,
                                 default = nil)
  if valid_566599 != nil:
    section.add "api-version", valid_566599
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566600: Call_SitesGetSiteBackupConfigurationSlot_566592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566600.validator(path, query, header, formData, body)
  let scheme = call_566600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566600.url(scheme.get, call_566600.host, call_566600.base,
                         call_566600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566600, url, valid)

proc call*(call_566601: Call_SitesGetSiteBackupConfigurationSlot_566592;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteBackupConfigurationSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566602 = newJObject()
  var query_566603 = newJObject()
  add(path_566602, "slot", newJString(slot))
  add(query_566603, "api-version", newJString(apiVersion))
  add(path_566602, "name", newJString(name))
  add(path_566602, "subscriptionId", newJString(subscriptionId))
  add(path_566602, "resourceGroupName", newJString(resourceGroupName))
  result = call_566601.call(path_566602, query_566603, nil, nil, nil)

var sitesGetSiteBackupConfigurationSlot* = Call_SitesGetSiteBackupConfigurationSlot_566592(
    name: "sitesGetSiteBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_SitesGetSiteBackupConfigurationSlot_566593, base: "",
    url: url_SitesGetSiteBackupConfigurationSlot_566594, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConnectionStringsSlot_566604 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteConnectionStringsSlot_566606(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConnectionStringsSlot_566605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566607 = path.getOrDefault("slot")
  valid_566607 = validateParameter(valid_566607, JString, required = true,
                                 default = nil)
  if valid_566607 != nil:
    section.add "slot", valid_566607
  var valid_566608 = path.getOrDefault("name")
  valid_566608 = validateParameter(valid_566608, JString, required = true,
                                 default = nil)
  if valid_566608 != nil:
    section.add "name", valid_566608
  var valid_566609 = path.getOrDefault("subscriptionId")
  valid_566609 = validateParameter(valid_566609, JString, required = true,
                                 default = nil)
  if valid_566609 != nil:
    section.add "subscriptionId", valid_566609
  var valid_566610 = path.getOrDefault("resourceGroupName")
  valid_566610 = validateParameter(valid_566610, JString, required = true,
                                 default = nil)
  if valid_566610 != nil:
    section.add "resourceGroupName", valid_566610
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566611 = query.getOrDefault("api-version")
  valid_566611 = validateParameter(valid_566611, JString, required = true,
                                 default = nil)
  if valid_566611 != nil:
    section.add "api-version", valid_566611
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566613: Call_SitesUpdateSiteConnectionStringsSlot_566604;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566613.validator(path, query, header, formData, body)
  let scheme = call_566613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566613.url(scheme.get, call_566613.host, call_566613.base,
                         call_566613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566613, url, valid)

proc call*(call_566614: Call_SitesUpdateSiteConnectionStringsSlot_566604;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## sitesUpdateSiteConnectionStringsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings associated with web app
  var path_566615 = newJObject()
  var query_566616 = newJObject()
  var body_566617 = newJObject()
  add(path_566615, "slot", newJString(slot))
  add(query_566616, "api-version", newJString(apiVersion))
  add(path_566615, "name", newJString(name))
  add(path_566615, "subscriptionId", newJString(subscriptionId))
  add(path_566615, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_566617 = connectionStrings
  result = call_566614.call(path_566615, query_566616, nil, nil, body_566617)

var sitesUpdateSiteConnectionStringsSlot* = Call_SitesUpdateSiteConnectionStringsSlot_566604(
    name: "sitesUpdateSiteConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_SitesUpdateSiteConnectionStringsSlot_566605, base: "",
    url: url_SitesUpdateSiteConnectionStringsSlot_566606, schemes: {Scheme.Https})
type
  Call_SitesListSiteConnectionStringsSlot_566618 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteConnectionStringsSlot_566620(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteConnectionStringsSlot_566619(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566621 = path.getOrDefault("slot")
  valid_566621 = validateParameter(valid_566621, JString, required = true,
                                 default = nil)
  if valid_566621 != nil:
    section.add "slot", valid_566621
  var valid_566622 = path.getOrDefault("name")
  valid_566622 = validateParameter(valid_566622, JString, required = true,
                                 default = nil)
  if valid_566622 != nil:
    section.add "name", valid_566622
  var valid_566623 = path.getOrDefault("subscriptionId")
  valid_566623 = validateParameter(valid_566623, JString, required = true,
                                 default = nil)
  if valid_566623 != nil:
    section.add "subscriptionId", valid_566623
  var valid_566624 = path.getOrDefault("resourceGroupName")
  valid_566624 = validateParameter(valid_566624, JString, required = true,
                                 default = nil)
  if valid_566624 != nil:
    section.add "resourceGroupName", valid_566624
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566625 = query.getOrDefault("api-version")
  valid_566625 = validateParameter(valid_566625, JString, required = true,
                                 default = nil)
  if valid_566625 != nil:
    section.add "api-version", valid_566625
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566626: Call_SitesListSiteConnectionStringsSlot_566618;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566626.validator(path, query, header, formData, body)
  let scheme = call_566626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566626.url(scheme.get, call_566626.host, call_566626.base,
                         call_566626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566626, url, valid)

proc call*(call_566627: Call_SitesListSiteConnectionStringsSlot_566618;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteConnectionStringsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566628 = newJObject()
  var query_566629 = newJObject()
  add(path_566628, "slot", newJString(slot))
  add(query_566629, "api-version", newJString(apiVersion))
  add(path_566628, "name", newJString(name))
  add(path_566628, "subscriptionId", newJString(subscriptionId))
  add(path_566628, "resourceGroupName", newJString(resourceGroupName))
  result = call_566627.call(path_566628, query_566629, nil, nil, nil)

var sitesListSiteConnectionStringsSlot* = Call_SitesListSiteConnectionStringsSlot_566618(
    name: "sitesListSiteConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_SitesListSiteConnectionStringsSlot_566619, base: "",
    url: url_SitesListSiteConnectionStringsSlot_566620, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteLogsConfigSlot_566642 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteLogsConfigSlot_566644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteLogsConfigSlot_566643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566645 = path.getOrDefault("slot")
  valid_566645 = validateParameter(valid_566645, JString, required = true,
                                 default = nil)
  if valid_566645 != nil:
    section.add "slot", valid_566645
  var valid_566646 = path.getOrDefault("name")
  valid_566646 = validateParameter(valid_566646, JString, required = true,
                                 default = nil)
  if valid_566646 != nil:
    section.add "name", valid_566646
  var valid_566647 = path.getOrDefault("subscriptionId")
  valid_566647 = validateParameter(valid_566647, JString, required = true,
                                 default = nil)
  if valid_566647 != nil:
    section.add "subscriptionId", valid_566647
  var valid_566648 = path.getOrDefault("resourceGroupName")
  valid_566648 = validateParameter(valid_566648, JString, required = true,
                                 default = nil)
  if valid_566648 != nil:
    section.add "resourceGroupName", valid_566648
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566649 = query.getOrDefault("api-version")
  valid_566649 = validateParameter(valid_566649, JString, required = true,
                                 default = nil)
  if valid_566649 != nil:
    section.add "api-version", valid_566649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566651: Call_SitesUpdateSiteLogsConfigSlot_566642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566651.validator(path, query, header, formData, body)
  let scheme = call_566651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566651.url(scheme.get, call_566651.host, call_566651.base,
                         call_566651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566651, url, valid)

proc call*(call_566652: Call_SitesUpdateSiteLogsConfigSlot_566642; slot: string;
          apiVersion: string; siteLogsConfig: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteLogsConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : Site logs configuration
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566653 = newJObject()
  var query_566654 = newJObject()
  var body_566655 = newJObject()
  add(path_566653, "slot", newJString(slot))
  add(query_566654, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_566655 = siteLogsConfig
  add(path_566653, "name", newJString(name))
  add(path_566653, "subscriptionId", newJString(subscriptionId))
  add(path_566653, "resourceGroupName", newJString(resourceGroupName))
  result = call_566652.call(path_566653, query_566654, nil, nil, body_566655)

var sitesUpdateSiteLogsConfigSlot* = Call_SitesUpdateSiteLogsConfigSlot_566642(
    name: "sitesUpdateSiteLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesUpdateSiteLogsConfigSlot_566643, base: "",
    url: url_SitesUpdateSiteLogsConfigSlot_566644, schemes: {Scheme.Https})
type
  Call_SitesGetSiteLogsConfigSlot_566630 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteLogsConfigSlot_566632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteLogsConfigSlot_566631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566633 = path.getOrDefault("slot")
  valid_566633 = validateParameter(valid_566633, JString, required = true,
                                 default = nil)
  if valid_566633 != nil:
    section.add "slot", valid_566633
  var valid_566634 = path.getOrDefault("name")
  valid_566634 = validateParameter(valid_566634, JString, required = true,
                                 default = nil)
  if valid_566634 != nil:
    section.add "name", valid_566634
  var valid_566635 = path.getOrDefault("subscriptionId")
  valid_566635 = validateParameter(valid_566635, JString, required = true,
                                 default = nil)
  if valid_566635 != nil:
    section.add "subscriptionId", valid_566635
  var valid_566636 = path.getOrDefault("resourceGroupName")
  valid_566636 = validateParameter(valid_566636, JString, required = true,
                                 default = nil)
  if valid_566636 != nil:
    section.add "resourceGroupName", valid_566636
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566637 = query.getOrDefault("api-version")
  valid_566637 = validateParameter(valid_566637, JString, required = true,
                                 default = nil)
  if valid_566637 != nil:
    section.add "api-version", valid_566637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566638: Call_SitesGetSiteLogsConfigSlot_566630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566638.validator(path, query, header, formData, body)
  let scheme = call_566638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566638.url(scheme.get, call_566638.host, call_566638.base,
                         call_566638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566638, url, valid)

proc call*(call_566639: Call_SitesGetSiteLogsConfigSlot_566630; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteLogsConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566640 = newJObject()
  var query_566641 = newJObject()
  add(path_566640, "slot", newJString(slot))
  add(query_566641, "api-version", newJString(apiVersion))
  add(path_566640, "name", newJString(name))
  add(path_566640, "subscriptionId", newJString(subscriptionId))
  add(path_566640, "resourceGroupName", newJString(resourceGroupName))
  result = call_566639.call(path_566640, query_566641, nil, nil, nil)

var sitesGetSiteLogsConfigSlot* = Call_SitesGetSiteLogsConfigSlot_566630(
    name: "sitesGetSiteLogsConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_SitesGetSiteLogsConfigSlot_566631, base: "",
    url: url_SitesGetSiteLogsConfigSlot_566632, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteMetadataSlot_566656 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteMetadataSlot_566658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteMetadataSlot_566657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566659 = path.getOrDefault("slot")
  valid_566659 = validateParameter(valid_566659, JString, required = true,
                                 default = nil)
  if valid_566659 != nil:
    section.add "slot", valid_566659
  var valid_566660 = path.getOrDefault("name")
  valid_566660 = validateParameter(valid_566660, JString, required = true,
                                 default = nil)
  if valid_566660 != nil:
    section.add "name", valid_566660
  var valid_566661 = path.getOrDefault("subscriptionId")
  valid_566661 = validateParameter(valid_566661, JString, required = true,
                                 default = nil)
  if valid_566661 != nil:
    section.add "subscriptionId", valid_566661
  var valid_566662 = path.getOrDefault("resourceGroupName")
  valid_566662 = validateParameter(valid_566662, JString, required = true,
                                 default = nil)
  if valid_566662 != nil:
    section.add "resourceGroupName", valid_566662
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566663 = query.getOrDefault("api-version")
  valid_566663 = validateParameter(valid_566663, JString, required = true,
                                 default = nil)
  if valid_566663 != nil:
    section.add "api-version", valid_566663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566665: Call_SitesUpdateSiteMetadataSlot_566656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566665.validator(path, query, header, formData, body)
  let scheme = call_566665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566665.url(scheme.get, call_566665.host, call_566665.base,
                         call_566665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566665, url, valid)

proc call*(call_566666: Call_SitesUpdateSiteMetadataSlot_566656;
          metadata: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteMetadataSlot
  ##   metadata: JObject (required)
  ##           : Meta data of web app
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566667 = newJObject()
  var query_566668 = newJObject()
  var body_566669 = newJObject()
  if metadata != nil:
    body_566669 = metadata
  add(path_566667, "slot", newJString(slot))
  add(query_566668, "api-version", newJString(apiVersion))
  add(path_566667, "name", newJString(name))
  add(path_566667, "subscriptionId", newJString(subscriptionId))
  add(path_566667, "resourceGroupName", newJString(resourceGroupName))
  result = call_566666.call(path_566667, query_566668, nil, nil, body_566669)

var sitesUpdateSiteMetadataSlot* = Call_SitesUpdateSiteMetadataSlot_566656(
    name: "sitesUpdateSiteMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_SitesUpdateSiteMetadataSlot_566657, base: "",
    url: url_SitesUpdateSiteMetadataSlot_566658, schemes: {Scheme.Https})
type
  Call_SitesListSiteMetadataSlot_566670 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteMetadataSlot_566672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteMetadataSlot_566671(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566673 = path.getOrDefault("slot")
  valid_566673 = validateParameter(valid_566673, JString, required = true,
                                 default = nil)
  if valid_566673 != nil:
    section.add "slot", valid_566673
  var valid_566674 = path.getOrDefault("name")
  valid_566674 = validateParameter(valid_566674, JString, required = true,
                                 default = nil)
  if valid_566674 != nil:
    section.add "name", valid_566674
  var valid_566675 = path.getOrDefault("subscriptionId")
  valid_566675 = validateParameter(valid_566675, JString, required = true,
                                 default = nil)
  if valid_566675 != nil:
    section.add "subscriptionId", valid_566675
  var valid_566676 = path.getOrDefault("resourceGroupName")
  valid_566676 = validateParameter(valid_566676, JString, required = true,
                                 default = nil)
  if valid_566676 != nil:
    section.add "resourceGroupName", valid_566676
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566677 = query.getOrDefault("api-version")
  valid_566677 = validateParameter(valid_566677, JString, required = true,
                                 default = nil)
  if valid_566677 != nil:
    section.add "api-version", valid_566677
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566678: Call_SitesListSiteMetadataSlot_566670; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566678.validator(path, query, header, formData, body)
  let scheme = call_566678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566678.url(scheme.get, call_566678.host, call_566678.base,
                         call_566678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566678, url, valid)

proc call*(call_566679: Call_SitesListSiteMetadataSlot_566670; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteMetadataSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566680 = newJObject()
  var query_566681 = newJObject()
  add(path_566680, "slot", newJString(slot))
  add(query_566681, "api-version", newJString(apiVersion))
  add(path_566680, "name", newJString(name))
  add(path_566680, "subscriptionId", newJString(subscriptionId))
  add(path_566680, "resourceGroupName", newJString(resourceGroupName))
  result = call_566679.call(path_566680, query_566681, nil, nil, nil)

var sitesListSiteMetadataSlot* = Call_SitesListSiteMetadataSlot_566670(
    name: "sitesListSiteMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_SitesListSiteMetadataSlot_566671, base: "",
    url: url_SitesListSiteMetadataSlot_566672, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingCredentialsSlot_566682 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePublishingCredentialsSlot_566684(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingCredentialsSlot_566683(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566685 = path.getOrDefault("slot")
  valid_566685 = validateParameter(valid_566685, JString, required = true,
                                 default = nil)
  if valid_566685 != nil:
    section.add "slot", valid_566685
  var valid_566686 = path.getOrDefault("name")
  valid_566686 = validateParameter(valid_566686, JString, required = true,
                                 default = nil)
  if valid_566686 != nil:
    section.add "name", valid_566686
  var valid_566687 = path.getOrDefault("subscriptionId")
  valid_566687 = validateParameter(valid_566687, JString, required = true,
                                 default = nil)
  if valid_566687 != nil:
    section.add "subscriptionId", valid_566687
  var valid_566688 = path.getOrDefault("resourceGroupName")
  valid_566688 = validateParameter(valid_566688, JString, required = true,
                                 default = nil)
  if valid_566688 != nil:
    section.add "resourceGroupName", valid_566688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566689 = query.getOrDefault("api-version")
  valid_566689 = validateParameter(valid_566689, JString, required = true,
                                 default = nil)
  if valid_566689 != nil:
    section.add "api-version", valid_566689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566690: Call_SitesListSitePublishingCredentialsSlot_566682;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566690.validator(path, query, header, formData, body)
  let scheme = call_566690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566690.url(scheme.get, call_566690.host, call_566690.base,
                         call_566690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566690, url, valid)

proc call*(call_566691: Call_SitesListSitePublishingCredentialsSlot_566682;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSitePublishingCredentialsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566692 = newJObject()
  var query_566693 = newJObject()
  add(path_566692, "slot", newJString(slot))
  add(query_566693, "api-version", newJString(apiVersion))
  add(path_566692, "name", newJString(name))
  add(path_566692, "subscriptionId", newJString(subscriptionId))
  add(path_566692, "resourceGroupName", newJString(resourceGroupName))
  result = call_566691.call(path_566692, query_566693, nil, nil, nil)

var sitesListSitePublishingCredentialsSlot* = Call_SitesListSitePublishingCredentialsSlot_566682(
    name: "sitesListSitePublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_SitesListSitePublishingCredentialsSlot_566683, base: "",
    url: url_SitesListSitePublishingCredentialsSlot_566684,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteConfigSlot_566706 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteConfigSlot_566708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteConfigSlot_566707(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566709 = path.getOrDefault("slot")
  valid_566709 = validateParameter(valid_566709, JString, required = true,
                                 default = nil)
  if valid_566709 != nil:
    section.add "slot", valid_566709
  var valid_566710 = path.getOrDefault("name")
  valid_566710 = validateParameter(valid_566710, JString, required = true,
                                 default = nil)
  if valid_566710 != nil:
    section.add "name", valid_566710
  var valid_566711 = path.getOrDefault("subscriptionId")
  valid_566711 = validateParameter(valid_566711, JString, required = true,
                                 default = nil)
  if valid_566711 != nil:
    section.add "subscriptionId", valid_566711
  var valid_566712 = path.getOrDefault("resourceGroupName")
  valid_566712 = validateParameter(valid_566712, JString, required = true,
                                 default = nil)
  if valid_566712 != nil:
    section.add "resourceGroupName", valid_566712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566713 = query.getOrDefault("api-version")
  valid_566713 = validateParameter(valid_566713, JString, required = true,
                                 default = nil)
  if valid_566713 != nil:
    section.add "api-version", valid_566713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566715: Call_SitesCreateOrUpdateSiteConfigSlot_566706;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566715.validator(path, query, header, formData, body)
  let scheme = call_566715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566715.url(scheme.get, call_566715.host, call_566715.base,
                         call_566715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566715, url, valid)

proc call*(call_566716: Call_SitesCreateOrUpdateSiteConfigSlot_566706;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566717 = newJObject()
  var query_566718 = newJObject()
  var body_566719 = newJObject()
  add(path_566717, "slot", newJString(slot))
  add(query_566718, "api-version", newJString(apiVersion))
  add(path_566717, "name", newJString(name))
  add(path_566717, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566719 = siteConfig
  add(path_566717, "resourceGroupName", newJString(resourceGroupName))
  result = call_566716.call(path_566717, query_566718, nil, nil, body_566719)

var sitesCreateOrUpdateSiteConfigSlot* = Call_SitesCreateOrUpdateSiteConfigSlot_566706(
    name: "sitesCreateOrUpdateSiteConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesCreateOrUpdateSiteConfigSlot_566707, base: "",
    url: url_SitesCreateOrUpdateSiteConfigSlot_566708, schemes: {Scheme.Https})
type
  Call_SitesGetSiteConfigSlot_566694 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteConfigSlot_566696(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteConfigSlot_566695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566697 = path.getOrDefault("slot")
  valid_566697 = validateParameter(valid_566697, JString, required = true,
                                 default = nil)
  if valid_566697 != nil:
    section.add "slot", valid_566697
  var valid_566698 = path.getOrDefault("name")
  valid_566698 = validateParameter(valid_566698, JString, required = true,
                                 default = nil)
  if valid_566698 != nil:
    section.add "name", valid_566698
  var valid_566699 = path.getOrDefault("subscriptionId")
  valid_566699 = validateParameter(valid_566699, JString, required = true,
                                 default = nil)
  if valid_566699 != nil:
    section.add "subscriptionId", valid_566699
  var valid_566700 = path.getOrDefault("resourceGroupName")
  valid_566700 = validateParameter(valid_566700, JString, required = true,
                                 default = nil)
  if valid_566700 != nil:
    section.add "resourceGroupName", valid_566700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566701 = query.getOrDefault("api-version")
  valid_566701 = validateParameter(valid_566701, JString, required = true,
                                 default = nil)
  if valid_566701 != nil:
    section.add "api-version", valid_566701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566702: Call_SitesGetSiteConfigSlot_566694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566702.validator(path, query, header, formData, body)
  let scheme = call_566702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566702.url(scheme.get, call_566702.host, call_566702.base,
                         call_566702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566702, url, valid)

proc call*(call_566703: Call_SitesGetSiteConfigSlot_566694; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566704 = newJObject()
  var query_566705 = newJObject()
  add(path_566704, "slot", newJString(slot))
  add(query_566705, "api-version", newJString(apiVersion))
  add(path_566704, "name", newJString(name))
  add(path_566704, "subscriptionId", newJString(subscriptionId))
  add(path_566704, "resourceGroupName", newJString(resourceGroupName))
  result = call_566703.call(path_566704, query_566705, nil, nil, nil)

var sitesGetSiteConfigSlot* = Call_SitesGetSiteConfigSlot_566694(
    name: "sitesGetSiteConfigSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesGetSiteConfigSlot_566695, base: "",
    url: url_SitesGetSiteConfigSlot_566696, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteConfigSlot_566720 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteConfigSlot_566722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteConfigSlot_566721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566723 = path.getOrDefault("slot")
  valid_566723 = validateParameter(valid_566723, JString, required = true,
                                 default = nil)
  if valid_566723 != nil:
    section.add "slot", valid_566723
  var valid_566724 = path.getOrDefault("name")
  valid_566724 = validateParameter(valid_566724, JString, required = true,
                                 default = nil)
  if valid_566724 != nil:
    section.add "name", valid_566724
  var valid_566725 = path.getOrDefault("subscriptionId")
  valid_566725 = validateParameter(valid_566725, JString, required = true,
                                 default = nil)
  if valid_566725 != nil:
    section.add "subscriptionId", valid_566725
  var valid_566726 = path.getOrDefault("resourceGroupName")
  valid_566726 = validateParameter(valid_566726, JString, required = true,
                                 default = nil)
  if valid_566726 != nil:
    section.add "resourceGroupName", valid_566726
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566727 = query.getOrDefault("api-version")
  valid_566727 = validateParameter(valid_566727, JString, required = true,
                                 default = nil)
  if valid_566727 != nil:
    section.add "api-version", valid_566727
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566729: Call_SitesUpdateSiteConfigSlot_566720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566729.validator(path, query, header, formData, body)
  let scheme = call_566729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566729.url(scheme.get, call_566729.host, call_566729.base,
                         call_566729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566729, url, valid)

proc call*(call_566730: Call_SitesUpdateSiteConfigSlot_566720; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   siteConfig: JObject (required)
  ##             : Request body that contains the configuration setting for the web app
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566731 = newJObject()
  var query_566732 = newJObject()
  var body_566733 = newJObject()
  add(path_566731, "slot", newJString(slot))
  add(query_566732, "api-version", newJString(apiVersion))
  add(path_566731, "name", newJString(name))
  add(path_566731, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566733 = siteConfig
  add(path_566731, "resourceGroupName", newJString(resourceGroupName))
  result = call_566730.call(path_566731, query_566732, nil, nil, body_566733)

var sitesUpdateSiteConfigSlot* = Call_SitesUpdateSiteConfigSlot_566720(
    name: "sitesUpdateSiteConfigSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_SitesUpdateSiteConfigSlot_566721, base: "",
    url: url_SitesUpdateSiteConfigSlot_566722, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentsSlot_566734 = ref object of OpenApiRestCall_563548
proc url_SitesGetDeploymentsSlot_566736(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentsSlot_566735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566737 = path.getOrDefault("slot")
  valid_566737 = validateParameter(valid_566737, JString, required = true,
                                 default = nil)
  if valid_566737 != nil:
    section.add "slot", valid_566737
  var valid_566738 = path.getOrDefault("name")
  valid_566738 = validateParameter(valid_566738, JString, required = true,
                                 default = nil)
  if valid_566738 != nil:
    section.add "name", valid_566738
  var valid_566739 = path.getOrDefault("subscriptionId")
  valid_566739 = validateParameter(valid_566739, JString, required = true,
                                 default = nil)
  if valid_566739 != nil:
    section.add "subscriptionId", valid_566739
  var valid_566740 = path.getOrDefault("resourceGroupName")
  valid_566740 = validateParameter(valid_566740, JString, required = true,
                                 default = nil)
  if valid_566740 != nil:
    section.add "resourceGroupName", valid_566740
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566741 = query.getOrDefault("api-version")
  valid_566741 = validateParameter(valid_566741, JString, required = true,
                                 default = nil)
  if valid_566741 != nil:
    section.add "api-version", valid_566741
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566742: Call_SitesGetDeploymentsSlot_566734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566742.validator(path, query, header, formData, body)
  let scheme = call_566742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566742.url(scheme.get, call_566742.host, call_566742.base,
                         call_566742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566742, url, valid)

proc call*(call_566743: Call_SitesGetDeploymentsSlot_566734; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetDeploymentsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566744 = newJObject()
  var query_566745 = newJObject()
  add(path_566744, "slot", newJString(slot))
  add(query_566745, "api-version", newJString(apiVersion))
  add(path_566744, "name", newJString(name))
  add(path_566744, "subscriptionId", newJString(subscriptionId))
  add(path_566744, "resourceGroupName", newJString(resourceGroupName))
  result = call_566743.call(path_566744, query_566745, nil, nil, nil)

var sitesGetDeploymentsSlot* = Call_SitesGetDeploymentsSlot_566734(
    name: "sitesGetDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_SitesGetDeploymentsSlot_566735, base: "",
    url: url_SitesGetDeploymentsSlot_566736, schemes: {Scheme.Https})
type
  Call_SitesCreateDeploymentSlot_566759 = ref object of OpenApiRestCall_563548
proc url_SitesCreateDeploymentSlot_566761(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateDeploymentSlot_566760(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566762 = path.getOrDefault("slot")
  valid_566762 = validateParameter(valid_566762, JString, required = true,
                                 default = nil)
  if valid_566762 != nil:
    section.add "slot", valid_566762
  var valid_566763 = path.getOrDefault("id")
  valid_566763 = validateParameter(valid_566763, JString, required = true,
                                 default = nil)
  if valid_566763 != nil:
    section.add "id", valid_566763
  var valid_566764 = path.getOrDefault("name")
  valid_566764 = validateParameter(valid_566764, JString, required = true,
                                 default = nil)
  if valid_566764 != nil:
    section.add "name", valid_566764
  var valid_566765 = path.getOrDefault("subscriptionId")
  valid_566765 = validateParameter(valid_566765, JString, required = true,
                                 default = nil)
  if valid_566765 != nil:
    section.add "subscriptionId", valid_566765
  var valid_566766 = path.getOrDefault("resourceGroupName")
  valid_566766 = validateParameter(valid_566766, JString, required = true,
                                 default = nil)
  if valid_566766 != nil:
    section.add "resourceGroupName", valid_566766
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566767 = query.getOrDefault("api-version")
  valid_566767 = validateParameter(valid_566767, JString, required = true,
                                 default = nil)
  if valid_566767 != nil:
    section.add "api-version", valid_566767
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566769: Call_SitesCreateDeploymentSlot_566759; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566769.validator(path, query, header, formData, body)
  let scheme = call_566769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566769.url(scheme.get, call_566769.host, call_566769.base,
                         call_566769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566769, url, valid)

proc call*(call_566770: Call_SitesCreateDeploymentSlot_566759; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          deployment: JsonNode; resourceGroupName: string): Recallable =
  ## sitesCreateDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deployment: JObject (required)
  ##             : Details of deployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566771 = newJObject()
  var query_566772 = newJObject()
  var body_566773 = newJObject()
  add(path_566771, "slot", newJString(slot))
  add(query_566772, "api-version", newJString(apiVersion))
  add(path_566771, "id", newJString(id))
  add(path_566771, "name", newJString(name))
  add(path_566771, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_566773 = deployment
  add(path_566771, "resourceGroupName", newJString(resourceGroupName))
  result = call_566770.call(path_566771, query_566772, nil, nil, body_566773)

var sitesCreateDeploymentSlot* = Call_SitesCreateDeploymentSlot_566759(
    name: "sitesCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesCreateDeploymentSlot_566760, base: "",
    url: url_SitesCreateDeploymentSlot_566761, schemes: {Scheme.Https})
type
  Call_SitesGetDeploymentSlot_566746 = ref object of OpenApiRestCall_563548
proc url_SitesGetDeploymentSlot_566748(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetDeploymentSlot_566747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566749 = path.getOrDefault("slot")
  valid_566749 = validateParameter(valid_566749, JString, required = true,
                                 default = nil)
  if valid_566749 != nil:
    section.add "slot", valid_566749
  var valid_566750 = path.getOrDefault("id")
  valid_566750 = validateParameter(valid_566750, JString, required = true,
                                 default = nil)
  if valid_566750 != nil:
    section.add "id", valid_566750
  var valid_566751 = path.getOrDefault("name")
  valid_566751 = validateParameter(valid_566751, JString, required = true,
                                 default = nil)
  if valid_566751 != nil:
    section.add "name", valid_566751
  var valid_566752 = path.getOrDefault("subscriptionId")
  valid_566752 = validateParameter(valid_566752, JString, required = true,
                                 default = nil)
  if valid_566752 != nil:
    section.add "subscriptionId", valid_566752
  var valid_566753 = path.getOrDefault("resourceGroupName")
  valid_566753 = validateParameter(valid_566753, JString, required = true,
                                 default = nil)
  if valid_566753 != nil:
    section.add "resourceGroupName", valid_566753
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566754 = query.getOrDefault("api-version")
  valid_566754 = validateParameter(valid_566754, JString, required = true,
                                 default = nil)
  if valid_566754 != nil:
    section.add "api-version", valid_566754
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566755: Call_SitesGetDeploymentSlot_566746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566755.validator(path, query, header, formData, body)
  let scheme = call_566755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566755.url(scheme.get, call_566755.host, call_566755.base,
                         call_566755.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566755, url, valid)

proc call*(call_566756: Call_SitesGetDeploymentSlot_566746; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566757 = newJObject()
  var query_566758 = newJObject()
  add(path_566757, "slot", newJString(slot))
  add(query_566758, "api-version", newJString(apiVersion))
  add(path_566757, "id", newJString(id))
  add(path_566757, "name", newJString(name))
  add(path_566757, "subscriptionId", newJString(subscriptionId))
  add(path_566757, "resourceGroupName", newJString(resourceGroupName))
  result = call_566756.call(path_566757, query_566758, nil, nil, nil)

var sitesGetDeploymentSlot* = Call_SitesGetDeploymentSlot_566746(
    name: "sitesGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesGetDeploymentSlot_566747, base: "",
    url: url_SitesGetDeploymentSlot_566748, schemes: {Scheme.Https})
type
  Call_SitesDeleteDeploymentSlot_566774 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteDeploymentSlot_566776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteDeploymentSlot_566775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566777 = path.getOrDefault("slot")
  valid_566777 = validateParameter(valid_566777, JString, required = true,
                                 default = nil)
  if valid_566777 != nil:
    section.add "slot", valid_566777
  var valid_566778 = path.getOrDefault("id")
  valid_566778 = validateParameter(valid_566778, JString, required = true,
                                 default = nil)
  if valid_566778 != nil:
    section.add "id", valid_566778
  var valid_566779 = path.getOrDefault("name")
  valid_566779 = validateParameter(valid_566779, JString, required = true,
                                 default = nil)
  if valid_566779 != nil:
    section.add "name", valid_566779
  var valid_566780 = path.getOrDefault("subscriptionId")
  valid_566780 = validateParameter(valid_566780, JString, required = true,
                                 default = nil)
  if valid_566780 != nil:
    section.add "subscriptionId", valid_566780
  var valid_566781 = path.getOrDefault("resourceGroupName")
  valid_566781 = validateParameter(valid_566781, JString, required = true,
                                 default = nil)
  if valid_566781 != nil:
    section.add "resourceGroupName", valid_566781
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566782 = query.getOrDefault("api-version")
  valid_566782 = validateParameter(valid_566782, JString, required = true,
                                 default = nil)
  if valid_566782 != nil:
    section.add "api-version", valid_566782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566783: Call_SitesDeleteDeploymentSlot_566774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566783.validator(path, query, header, formData, body)
  let scheme = call_566783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566783.url(scheme.get, call_566783.host, call_566783.base,
                         call_566783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566783, url, valid)

proc call*(call_566784: Call_SitesDeleteDeploymentSlot_566774; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566785 = newJObject()
  var query_566786 = newJObject()
  add(path_566785, "slot", newJString(slot))
  add(query_566786, "api-version", newJString(apiVersion))
  add(path_566785, "id", newJString(id))
  add(path_566785, "name", newJString(name))
  add(path_566785, "subscriptionId", newJString(subscriptionId))
  add(path_566785, "resourceGroupName", newJString(resourceGroupName))
  result = call_566784.call(path_566785, query_566786, nil, nil, nil)

var sitesDeleteDeploymentSlot* = Call_SitesDeleteDeploymentSlot_566774(
    name: "sitesDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_SitesDeleteDeploymentSlot_566775, base: "",
    url: url_SitesDeleteDeploymentSlot_566776, schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingsSlot_566787 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteHostNameBindingsSlot_566789(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingsSlot_566788(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566790 = path.getOrDefault("slot")
  valid_566790 = validateParameter(valid_566790, JString, required = true,
                                 default = nil)
  if valid_566790 != nil:
    section.add "slot", valid_566790
  var valid_566791 = path.getOrDefault("name")
  valid_566791 = validateParameter(valid_566791, JString, required = true,
                                 default = nil)
  if valid_566791 != nil:
    section.add "name", valid_566791
  var valid_566792 = path.getOrDefault("subscriptionId")
  valid_566792 = validateParameter(valid_566792, JString, required = true,
                                 default = nil)
  if valid_566792 != nil:
    section.add "subscriptionId", valid_566792
  var valid_566793 = path.getOrDefault("resourceGroupName")
  valid_566793 = validateParameter(valid_566793, JString, required = true,
                                 default = nil)
  if valid_566793 != nil:
    section.add "resourceGroupName", valid_566793
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566794 = query.getOrDefault("api-version")
  valid_566794 = validateParameter(valid_566794, JString, required = true,
                                 default = nil)
  if valid_566794 != nil:
    section.add "api-version", valid_566794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566795: Call_SitesGetSiteHostNameBindingsSlot_566787;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566795.validator(path, query, header, formData, body)
  let scheme = call_566795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566795.url(scheme.get, call_566795.host, call_566795.base,
                         call_566795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566795, url, valid)

proc call*(call_566796: Call_SitesGetSiteHostNameBindingsSlot_566787; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteHostNameBindingsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566797 = newJObject()
  var query_566798 = newJObject()
  add(path_566797, "slot", newJString(slot))
  add(query_566798, "api-version", newJString(apiVersion))
  add(path_566797, "name", newJString(name))
  add(path_566797, "subscriptionId", newJString(subscriptionId))
  add(path_566797, "resourceGroupName", newJString(resourceGroupName))
  result = call_566796.call(path_566797, query_566798, nil, nil, nil)

var sitesGetSiteHostNameBindingsSlot* = Call_SitesGetSiteHostNameBindingsSlot_566787(
    name: "sitesGetSiteHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_SitesGetSiteHostNameBindingsSlot_566788, base: "",
    url: url_SitesGetSiteHostNameBindingsSlot_566789, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteHostNameBindingSlot_566812 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteHostNameBindingSlot_566814(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteHostNameBindingSlot_566813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566815 = path.getOrDefault("slot")
  valid_566815 = validateParameter(valid_566815, JString, required = true,
                                 default = nil)
  if valid_566815 != nil:
    section.add "slot", valid_566815
  var valid_566816 = path.getOrDefault("name")
  valid_566816 = validateParameter(valid_566816, JString, required = true,
                                 default = nil)
  if valid_566816 != nil:
    section.add "name", valid_566816
  var valid_566817 = path.getOrDefault("subscriptionId")
  valid_566817 = validateParameter(valid_566817, JString, required = true,
                                 default = nil)
  if valid_566817 != nil:
    section.add "subscriptionId", valid_566817
  var valid_566818 = path.getOrDefault("resourceGroupName")
  valid_566818 = validateParameter(valid_566818, JString, required = true,
                                 default = nil)
  if valid_566818 != nil:
    section.add "resourceGroupName", valid_566818
  var valid_566819 = path.getOrDefault("hostName")
  valid_566819 = validateParameter(valid_566819, JString, required = true,
                                 default = nil)
  if valid_566819 != nil:
    section.add "hostName", valid_566819
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566820 = query.getOrDefault("api-version")
  valid_566820 = validateParameter(valid_566820, JString, required = true,
                                 default = nil)
  if valid_566820 != nil:
    section.add "api-version", valid_566820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566822: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_566812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566822.validator(path, query, header, formData, body)
  let scheme = call_566822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566822.url(scheme.get, call_566822.host, call_566822.base,
                         call_566822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566822, url, valid)

proc call*(call_566823: Call_SitesCreateOrUpdateSiteHostNameBindingSlot_566812;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## sitesCreateOrUpdateSiteHostNameBindingSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostNameBinding: JObject (required)
  ##                  : Host name binding information
  ##   hostName: string (required)
  ##           : Name of host
  var path_566824 = newJObject()
  var query_566825 = newJObject()
  var body_566826 = newJObject()
  add(path_566824, "slot", newJString(slot))
  add(query_566825, "api-version", newJString(apiVersion))
  add(path_566824, "name", newJString(name))
  add(path_566824, "subscriptionId", newJString(subscriptionId))
  add(path_566824, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_566826 = hostNameBinding
  add(path_566824, "hostName", newJString(hostName))
  result = call_566823.call(path_566824, query_566825, nil, nil, body_566826)

var sitesCreateOrUpdateSiteHostNameBindingSlot* = Call_SitesCreateOrUpdateSiteHostNameBindingSlot_566812(
    name: "sitesCreateOrUpdateSiteHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesCreateOrUpdateSiteHostNameBindingSlot_566813,
    base: "", url: url_SitesCreateOrUpdateSiteHostNameBindingSlot_566814,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteHostNameBindingSlot_566799 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteHostNameBindingSlot_566801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteHostNameBindingSlot_566800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566802 = path.getOrDefault("slot")
  valid_566802 = validateParameter(valid_566802, JString, required = true,
                                 default = nil)
  if valid_566802 != nil:
    section.add "slot", valid_566802
  var valid_566803 = path.getOrDefault("name")
  valid_566803 = validateParameter(valid_566803, JString, required = true,
                                 default = nil)
  if valid_566803 != nil:
    section.add "name", valid_566803
  var valid_566804 = path.getOrDefault("subscriptionId")
  valid_566804 = validateParameter(valid_566804, JString, required = true,
                                 default = nil)
  if valid_566804 != nil:
    section.add "subscriptionId", valid_566804
  var valid_566805 = path.getOrDefault("resourceGroupName")
  valid_566805 = validateParameter(valid_566805, JString, required = true,
                                 default = nil)
  if valid_566805 != nil:
    section.add "resourceGroupName", valid_566805
  var valid_566806 = path.getOrDefault("hostName")
  valid_566806 = validateParameter(valid_566806, JString, required = true,
                                 default = nil)
  if valid_566806 != nil:
    section.add "hostName", valid_566806
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566807 = query.getOrDefault("api-version")
  valid_566807 = validateParameter(valid_566807, JString, required = true,
                                 default = nil)
  if valid_566807 != nil:
    section.add "api-version", valid_566807
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566808: Call_SitesGetSiteHostNameBindingSlot_566799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566808.validator(path, query, header, formData, body)
  let scheme = call_566808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566808.url(scheme.get, call_566808.host, call_566808.base,
                         call_566808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566808, url, valid)

proc call*(call_566809: Call_SitesGetSiteHostNameBindingSlot_566799; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## sitesGetSiteHostNameBindingSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostName: string (required)
  ##           : Name of host
  var path_566810 = newJObject()
  var query_566811 = newJObject()
  add(path_566810, "slot", newJString(slot))
  add(query_566811, "api-version", newJString(apiVersion))
  add(path_566810, "name", newJString(name))
  add(path_566810, "subscriptionId", newJString(subscriptionId))
  add(path_566810, "resourceGroupName", newJString(resourceGroupName))
  add(path_566810, "hostName", newJString(hostName))
  result = call_566809.call(path_566810, query_566811, nil, nil, nil)

var sitesGetSiteHostNameBindingSlot* = Call_SitesGetSiteHostNameBindingSlot_566799(
    name: "sitesGetSiteHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesGetSiteHostNameBindingSlot_566800, base: "",
    url: url_SitesGetSiteHostNameBindingSlot_566801, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteHostNameBindingSlot_566827 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteHostNameBindingSlot_566829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteHostNameBindingSlot_566828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   hostName: JString (required)
  ##           : Name of host
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566830 = path.getOrDefault("slot")
  valid_566830 = validateParameter(valid_566830, JString, required = true,
                                 default = nil)
  if valid_566830 != nil:
    section.add "slot", valid_566830
  var valid_566831 = path.getOrDefault("name")
  valid_566831 = validateParameter(valid_566831, JString, required = true,
                                 default = nil)
  if valid_566831 != nil:
    section.add "name", valid_566831
  var valid_566832 = path.getOrDefault("subscriptionId")
  valid_566832 = validateParameter(valid_566832, JString, required = true,
                                 default = nil)
  if valid_566832 != nil:
    section.add "subscriptionId", valid_566832
  var valid_566833 = path.getOrDefault("resourceGroupName")
  valid_566833 = validateParameter(valid_566833, JString, required = true,
                                 default = nil)
  if valid_566833 != nil:
    section.add "resourceGroupName", valid_566833
  var valid_566834 = path.getOrDefault("hostName")
  valid_566834 = validateParameter(valid_566834, JString, required = true,
                                 default = nil)
  if valid_566834 != nil:
    section.add "hostName", valid_566834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566835 = query.getOrDefault("api-version")
  valid_566835 = validateParameter(valid_566835, JString, required = true,
                                 default = nil)
  if valid_566835 != nil:
    section.add "api-version", valid_566835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566836: Call_SitesDeleteSiteHostNameBindingSlot_566827;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566836.validator(path, query, header, formData, body)
  let scheme = call_566836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566836.url(scheme.get, call_566836.host, call_566836.base,
                         call_566836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566836, url, valid)

proc call*(call_566837: Call_SitesDeleteSiteHostNameBindingSlot_566827;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## sitesDeleteSiteHostNameBindingSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   hostName: string (required)
  ##           : Name of host
  var path_566838 = newJObject()
  var query_566839 = newJObject()
  add(path_566838, "slot", newJString(slot))
  add(query_566839, "api-version", newJString(apiVersion))
  add(path_566838, "name", newJString(name))
  add(path_566838, "subscriptionId", newJString(subscriptionId))
  add(path_566838, "resourceGroupName", newJString(resourceGroupName))
  add(path_566838, "hostName", newJString(hostName))
  result = call_566837.call(path_566838, query_566839, nil, nil, nil)

var sitesDeleteSiteHostNameBindingSlot* = Call_SitesDeleteSiteHostNameBindingSlot_566827(
    name: "sitesDeleteSiteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_SitesDeleteSiteHostNameBindingSlot_566828, base: "",
    url: url_SitesDeleteSiteHostNameBindingSlot_566829, schemes: {Scheme.Https})
type
  Call_SitesListSiteRelayServiceConnectionsSlot_566840 = ref object of OpenApiRestCall_563548
proc url_SitesListSiteRelayServiceConnectionsSlot_566842(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSiteRelayServiceConnectionsSlot_566841(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566843 = path.getOrDefault("slot")
  valid_566843 = validateParameter(valid_566843, JString, required = true,
                                 default = nil)
  if valid_566843 != nil:
    section.add "slot", valid_566843
  var valid_566844 = path.getOrDefault("name")
  valid_566844 = validateParameter(valid_566844, JString, required = true,
                                 default = nil)
  if valid_566844 != nil:
    section.add "name", valid_566844
  var valid_566845 = path.getOrDefault("subscriptionId")
  valid_566845 = validateParameter(valid_566845, JString, required = true,
                                 default = nil)
  if valid_566845 != nil:
    section.add "subscriptionId", valid_566845
  var valid_566846 = path.getOrDefault("resourceGroupName")
  valid_566846 = validateParameter(valid_566846, JString, required = true,
                                 default = nil)
  if valid_566846 != nil:
    section.add "resourceGroupName", valid_566846
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566847 = query.getOrDefault("api-version")
  valid_566847 = validateParameter(valid_566847, JString, required = true,
                                 default = nil)
  if valid_566847 != nil:
    section.add "api-version", valid_566847
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566848: Call_SitesListSiteRelayServiceConnectionsSlot_566840;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566848.validator(path, query, header, formData, body)
  let scheme = call_566848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566848.url(scheme.get, call_566848.host, call_566848.base,
                         call_566848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566848, url, valid)

proc call*(call_566849: Call_SitesListSiteRelayServiceConnectionsSlot_566840;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSiteRelayServiceConnectionsSlot
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_566850 = newJObject()
  var query_566851 = newJObject()
  add(path_566850, "slot", newJString(slot))
  add(query_566851, "api-version", newJString(apiVersion))
  add(path_566850, "name", newJString(name))
  add(path_566850, "subscriptionId", newJString(subscriptionId))
  add(path_566850, "resourceGroupName", newJString(resourceGroupName))
  result = call_566849.call(path_566850, query_566851, nil, nil, nil)

var sitesListSiteRelayServiceConnectionsSlot* = Call_SitesListSiteRelayServiceConnectionsSlot_566840(
    name: "sitesListSiteRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_SitesListSiteRelayServiceConnectionsSlot_566841, base: "",
    url: url_SitesListSiteRelayServiceConnectionsSlot_566842,
    schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566865 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566867(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566866(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566868 = path.getOrDefault("slot")
  valid_566868 = validateParameter(valid_566868, JString, required = true,
                                 default = nil)
  if valid_566868 != nil:
    section.add "slot", valid_566868
  var valid_566869 = path.getOrDefault("name")
  valid_566869 = validateParameter(valid_566869, JString, required = true,
                                 default = nil)
  if valid_566869 != nil:
    section.add "name", valid_566869
  var valid_566870 = path.getOrDefault("subscriptionId")
  valid_566870 = validateParameter(valid_566870, JString, required = true,
                                 default = nil)
  if valid_566870 != nil:
    section.add "subscriptionId", valid_566870
  var valid_566871 = path.getOrDefault("resourceGroupName")
  valid_566871 = validateParameter(valid_566871, JString, required = true,
                                 default = nil)
  if valid_566871 != nil:
    section.add "resourceGroupName", valid_566871
  var valid_566872 = path.getOrDefault("entityName")
  valid_566872 = validateParameter(valid_566872, JString, required = true,
                                 default = nil)
  if valid_566872 != nil:
    section.add "entityName", valid_566872
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566873 = query.getOrDefault("api-version")
  valid_566873 = validateParameter(valid_566873, JString, required = true,
                                 default = nil)
  if valid_566873 != nil:
    section.add "api-version", valid_566873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566875: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566865;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566875.validator(path, query, header, formData, body)
  let scheme = call_566875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566875.url(scheme.get, call_566875.host, call_566875.base,
                         call_566875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566875, url, valid)

proc call*(call_566876: Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566865;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## sitesCreateOrUpdateSiteRelayServiceConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566877 = newJObject()
  var query_566878 = newJObject()
  var body_566879 = newJObject()
  add(path_566877, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566879 = connectionEnvelope
  add(query_566878, "api-version", newJString(apiVersion))
  add(path_566877, "name", newJString(name))
  add(path_566877, "subscriptionId", newJString(subscriptionId))
  add(path_566877, "resourceGroupName", newJString(resourceGroupName))
  add(path_566877, "entityName", newJString(entityName))
  result = call_566876.call(path_566877, query_566878, nil, nil, body_566879)

var sitesCreateOrUpdateSiteRelayServiceConnectionSlot* = Call_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566865(
    name: "sitesCreateOrUpdateSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566866,
    base: "", url: url_SitesCreateOrUpdateSiteRelayServiceConnectionSlot_566867,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteRelayServiceConnectionSlot_566852 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteRelayServiceConnectionSlot_566854(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteRelayServiceConnectionSlot_566853(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566855 = path.getOrDefault("slot")
  valid_566855 = validateParameter(valid_566855, JString, required = true,
                                 default = nil)
  if valid_566855 != nil:
    section.add "slot", valid_566855
  var valid_566856 = path.getOrDefault("name")
  valid_566856 = validateParameter(valid_566856, JString, required = true,
                                 default = nil)
  if valid_566856 != nil:
    section.add "name", valid_566856
  var valid_566857 = path.getOrDefault("subscriptionId")
  valid_566857 = validateParameter(valid_566857, JString, required = true,
                                 default = nil)
  if valid_566857 != nil:
    section.add "subscriptionId", valid_566857
  var valid_566858 = path.getOrDefault("resourceGroupName")
  valid_566858 = validateParameter(valid_566858, JString, required = true,
                                 default = nil)
  if valid_566858 != nil:
    section.add "resourceGroupName", valid_566858
  var valid_566859 = path.getOrDefault("entityName")
  valid_566859 = validateParameter(valid_566859, JString, required = true,
                                 default = nil)
  if valid_566859 != nil:
    section.add "entityName", valid_566859
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566860 = query.getOrDefault("api-version")
  valid_566860 = validateParameter(valid_566860, JString, required = true,
                                 default = nil)
  if valid_566860 != nil:
    section.add "api-version", valid_566860
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566861: Call_SitesGetSiteRelayServiceConnectionSlot_566852;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566861.validator(path, query, header, formData, body)
  let scheme = call_566861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566861.url(scheme.get, call_566861.host, call_566861.base,
                         call_566861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566861, url, valid)

proc call*(call_566862: Call_SitesGetSiteRelayServiceConnectionSlot_566852;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## sitesGetSiteRelayServiceConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566863 = newJObject()
  var query_566864 = newJObject()
  add(path_566863, "slot", newJString(slot))
  add(query_566864, "api-version", newJString(apiVersion))
  add(path_566863, "name", newJString(name))
  add(path_566863, "subscriptionId", newJString(subscriptionId))
  add(path_566863, "resourceGroupName", newJString(resourceGroupName))
  add(path_566863, "entityName", newJString(entityName))
  result = call_566862.call(path_566863, query_566864, nil, nil, nil)

var sitesGetSiteRelayServiceConnectionSlot* = Call_SitesGetSiteRelayServiceConnectionSlot_566852(
    name: "sitesGetSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesGetSiteRelayServiceConnectionSlot_566853, base: "",
    url: url_SitesGetSiteRelayServiceConnectionSlot_566854,
    schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteRelayServiceConnectionSlot_566893 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteRelayServiceConnectionSlot_566895(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteRelayServiceConnectionSlot_566894(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566896 = path.getOrDefault("slot")
  valid_566896 = validateParameter(valid_566896, JString, required = true,
                                 default = nil)
  if valid_566896 != nil:
    section.add "slot", valid_566896
  var valid_566897 = path.getOrDefault("name")
  valid_566897 = validateParameter(valid_566897, JString, required = true,
                                 default = nil)
  if valid_566897 != nil:
    section.add "name", valid_566897
  var valid_566898 = path.getOrDefault("subscriptionId")
  valid_566898 = validateParameter(valid_566898, JString, required = true,
                                 default = nil)
  if valid_566898 != nil:
    section.add "subscriptionId", valid_566898
  var valid_566899 = path.getOrDefault("resourceGroupName")
  valid_566899 = validateParameter(valid_566899, JString, required = true,
                                 default = nil)
  if valid_566899 != nil:
    section.add "resourceGroupName", valid_566899
  var valid_566900 = path.getOrDefault("entityName")
  valid_566900 = validateParameter(valid_566900, JString, required = true,
                                 default = nil)
  if valid_566900 != nil:
    section.add "entityName", valid_566900
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566901 = query.getOrDefault("api-version")
  valid_566901 = validateParameter(valid_566901, JString, required = true,
                                 default = nil)
  if valid_566901 != nil:
    section.add "api-version", valid_566901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566903: Call_SitesUpdateSiteRelayServiceConnectionSlot_566893;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566903.validator(path, query, header, formData, body)
  let scheme = call_566903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566903.url(scheme.get, call_566903.host, call_566903.base,
                         call_566903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566903, url, valid)

proc call*(call_566904: Call_SitesUpdateSiteRelayServiceConnectionSlot_566893;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## sitesUpdateSiteRelayServiceConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the Hybrid Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566905 = newJObject()
  var query_566906 = newJObject()
  var body_566907 = newJObject()
  add(path_566905, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566907 = connectionEnvelope
  add(query_566906, "api-version", newJString(apiVersion))
  add(path_566905, "name", newJString(name))
  add(path_566905, "subscriptionId", newJString(subscriptionId))
  add(path_566905, "resourceGroupName", newJString(resourceGroupName))
  add(path_566905, "entityName", newJString(entityName))
  result = call_566904.call(path_566905, query_566906, nil, nil, body_566907)

var sitesUpdateSiteRelayServiceConnectionSlot* = Call_SitesUpdateSiteRelayServiceConnectionSlot_566893(
    name: "sitesUpdateSiteRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesUpdateSiteRelayServiceConnectionSlot_566894,
    base: "", url: url_SitesUpdateSiteRelayServiceConnectionSlot_566895,
    schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteRelayServiceConnectionSlot_566880 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteRelayServiceConnectionSlot_566882(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteRelayServiceConnectionSlot_566881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  ##   entityName: JString (required)
  ##             : The name by which the Hybrid Connection is identified
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566883 = path.getOrDefault("slot")
  valid_566883 = validateParameter(valid_566883, JString, required = true,
                                 default = nil)
  if valid_566883 != nil:
    section.add "slot", valid_566883
  var valid_566884 = path.getOrDefault("name")
  valid_566884 = validateParameter(valid_566884, JString, required = true,
                                 default = nil)
  if valid_566884 != nil:
    section.add "name", valid_566884
  var valid_566885 = path.getOrDefault("subscriptionId")
  valid_566885 = validateParameter(valid_566885, JString, required = true,
                                 default = nil)
  if valid_566885 != nil:
    section.add "subscriptionId", valid_566885
  var valid_566886 = path.getOrDefault("resourceGroupName")
  valid_566886 = validateParameter(valid_566886, JString, required = true,
                                 default = nil)
  if valid_566886 != nil:
    section.add "resourceGroupName", valid_566886
  var valid_566887 = path.getOrDefault("entityName")
  valid_566887 = validateParameter(valid_566887, JString, required = true,
                                 default = nil)
  if valid_566887 != nil:
    section.add "entityName", valid_566887
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566888 = query.getOrDefault("api-version")
  valid_566888 = validateParameter(valid_566888, JString, required = true,
                                 default = nil)
  if valid_566888 != nil:
    section.add "api-version", valid_566888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566889: Call_SitesDeleteSiteRelayServiceConnectionSlot_566880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566889.validator(path, query, header, formData, body)
  let scheme = call_566889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566889.url(scheme.get, call_566889.host, call_566889.base,
                         call_566889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566889, url, valid)

proc call*(call_566890: Call_SitesDeleteSiteRelayServiceConnectionSlot_566880;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## sitesDeleteSiteRelayServiceConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  ##   entityName: string (required)
  ##             : The name by which the Hybrid Connection is identified
  var path_566891 = newJObject()
  var query_566892 = newJObject()
  add(path_566891, "slot", newJString(slot))
  add(query_566892, "api-version", newJString(apiVersion))
  add(path_566891, "name", newJString(name))
  add(path_566891, "subscriptionId", newJString(subscriptionId))
  add(path_566891, "resourceGroupName", newJString(resourceGroupName))
  add(path_566891, "entityName", newJString(entityName))
  result = call_566890.call(path_566891, query_566892, nil, nil, nil)

var sitesDeleteSiteRelayServiceConnectionSlot* = Call_SitesDeleteSiteRelayServiceConnectionSlot_566880(
    name: "sitesDeleteSiteRelayServiceConnectionSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_SitesDeleteSiteRelayServiceConnectionSlot_566881,
    base: "", url: url_SitesDeleteSiteRelayServiceConnectionSlot_566882,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteInstanceIdentifiersSlot_566908 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteInstanceIdentifiersSlot_566910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteInstanceIdentifiersSlot_566909(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566911 = path.getOrDefault("slot")
  valid_566911 = validateParameter(valid_566911, JString, required = true,
                                 default = nil)
  if valid_566911 != nil:
    section.add "slot", valid_566911
  var valid_566912 = path.getOrDefault("name")
  valid_566912 = validateParameter(valid_566912, JString, required = true,
                                 default = nil)
  if valid_566912 != nil:
    section.add "name", valid_566912
  var valid_566913 = path.getOrDefault("subscriptionId")
  valid_566913 = validateParameter(valid_566913, JString, required = true,
                                 default = nil)
  if valid_566913 != nil:
    section.add "subscriptionId", valid_566913
  var valid_566914 = path.getOrDefault("resourceGroupName")
  valid_566914 = validateParameter(valid_566914, JString, required = true,
                                 default = nil)
  if valid_566914 != nil:
    section.add "resourceGroupName", valid_566914
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566915 = query.getOrDefault("api-version")
  valid_566915 = validateParameter(valid_566915, JString, required = true,
                                 default = nil)
  if valid_566915 != nil:
    section.add "api-version", valid_566915
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566916: Call_SitesGetSiteInstanceIdentifiersSlot_566908;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566916.validator(path, query, header, formData, body)
  let scheme = call_566916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566916.url(scheme.get, call_566916.host, call_566916.base,
                         call_566916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566916, url, valid)

proc call*(call_566917: Call_SitesGetSiteInstanceIdentifiersSlot_566908;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteInstanceIdentifiersSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566918 = newJObject()
  var query_566919 = newJObject()
  add(path_566918, "slot", newJString(slot))
  add(query_566919, "api-version", newJString(apiVersion))
  add(path_566918, "name", newJString(name))
  add(path_566918, "subscriptionId", newJString(subscriptionId))
  add(path_566918, "resourceGroupName", newJString(resourceGroupName))
  result = call_566917.call(path_566918, query_566919, nil, nil, nil)

var sitesGetSiteInstanceIdentifiersSlot* = Call_SitesGetSiteInstanceIdentifiersSlot_566908(
    name: "sitesGetSiteInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_SitesGetSiteInstanceIdentifiersSlot_566909, base: "",
    url: url_SitesGetSiteInstanceIdentifiersSlot_566910, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentsSlot_566920 = ref object of OpenApiRestCall_563548
proc url_SitesGetInstanceDeploymentsSlot_566922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentsSlot_566921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566923 = path.getOrDefault("slot")
  valid_566923 = validateParameter(valid_566923, JString, required = true,
                                 default = nil)
  if valid_566923 != nil:
    section.add "slot", valid_566923
  var valid_566924 = path.getOrDefault("name")
  valid_566924 = validateParameter(valid_566924, JString, required = true,
                                 default = nil)
  if valid_566924 != nil:
    section.add "name", valid_566924
  var valid_566925 = path.getOrDefault("subscriptionId")
  valid_566925 = validateParameter(valid_566925, JString, required = true,
                                 default = nil)
  if valid_566925 != nil:
    section.add "subscriptionId", valid_566925
  var valid_566926 = path.getOrDefault("resourceGroupName")
  valid_566926 = validateParameter(valid_566926, JString, required = true,
                                 default = nil)
  if valid_566926 != nil:
    section.add "resourceGroupName", valid_566926
  var valid_566927 = path.getOrDefault("instanceId")
  valid_566927 = validateParameter(valid_566927, JString, required = true,
                                 default = nil)
  if valid_566927 != nil:
    section.add "instanceId", valid_566927
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566928 = query.getOrDefault("api-version")
  valid_566928 = validateParameter(valid_566928, JString, required = true,
                                 default = nil)
  if valid_566928 != nil:
    section.add "api-version", valid_566928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566929: Call_SitesGetInstanceDeploymentsSlot_566920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566929.validator(path, query, header, formData, body)
  let scheme = call_566929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566929.url(scheme.get, call_566929.host, call_566929.base,
                         call_566929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566929, url, valid)

proc call*(call_566930: Call_SitesGetInstanceDeploymentsSlot_566920; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeploymentsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566931 = newJObject()
  var query_566932 = newJObject()
  add(path_566931, "slot", newJString(slot))
  add(query_566932, "api-version", newJString(apiVersion))
  add(path_566931, "name", newJString(name))
  add(path_566931, "subscriptionId", newJString(subscriptionId))
  add(path_566931, "resourceGroupName", newJString(resourceGroupName))
  add(path_566931, "instanceId", newJString(instanceId))
  result = call_566930.call(path_566931, query_566932, nil, nil, nil)

var sitesGetInstanceDeploymentsSlot* = Call_SitesGetInstanceDeploymentsSlot_566920(
    name: "sitesGetInstanceDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
    validator: validate_SitesGetInstanceDeploymentsSlot_566921, base: "",
    url: url_SitesGetInstanceDeploymentsSlot_566922, schemes: {Scheme.Https})
type
  Call_SitesCreateInstanceDeploymentSlot_566947 = ref object of OpenApiRestCall_563548
proc url_SitesCreateInstanceDeploymentSlot_566949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateInstanceDeploymentSlot_566948(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566950 = path.getOrDefault("slot")
  valid_566950 = validateParameter(valid_566950, JString, required = true,
                                 default = nil)
  if valid_566950 != nil:
    section.add "slot", valid_566950
  var valid_566951 = path.getOrDefault("id")
  valid_566951 = validateParameter(valid_566951, JString, required = true,
                                 default = nil)
  if valid_566951 != nil:
    section.add "id", valid_566951
  var valid_566952 = path.getOrDefault("name")
  valid_566952 = validateParameter(valid_566952, JString, required = true,
                                 default = nil)
  if valid_566952 != nil:
    section.add "name", valid_566952
  var valid_566953 = path.getOrDefault("subscriptionId")
  valid_566953 = validateParameter(valid_566953, JString, required = true,
                                 default = nil)
  if valid_566953 != nil:
    section.add "subscriptionId", valid_566953
  var valid_566954 = path.getOrDefault("resourceGroupName")
  valid_566954 = validateParameter(valid_566954, JString, required = true,
                                 default = nil)
  if valid_566954 != nil:
    section.add "resourceGroupName", valid_566954
  var valid_566955 = path.getOrDefault("instanceId")
  valid_566955 = validateParameter(valid_566955, JString, required = true,
                                 default = nil)
  if valid_566955 != nil:
    section.add "instanceId", valid_566955
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566956 = query.getOrDefault("api-version")
  valid_566956 = validateParameter(valid_566956, JString, required = true,
                                 default = nil)
  if valid_566956 != nil:
    section.add "api-version", valid_566956
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Details of deployment
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566958: Call_SitesCreateInstanceDeploymentSlot_566947;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566958.validator(path, query, header, formData, body)
  let scheme = call_566958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566958.url(scheme.get, call_566958.host, call_566958.base,
                         call_566958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566958, url, valid)

proc call*(call_566959: Call_SitesCreateInstanceDeploymentSlot_566947;
          slot: string; apiVersion: string; id: string; name: string;
          subscriptionId: string; deployment: JsonNode; resourceGroupName: string;
          instanceId: string): Recallable =
  ## sitesCreateInstanceDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   deployment: JObject (required)
  ##             : Details of deployment
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566960 = newJObject()
  var query_566961 = newJObject()
  var body_566962 = newJObject()
  add(path_566960, "slot", newJString(slot))
  add(query_566961, "api-version", newJString(apiVersion))
  add(path_566960, "id", newJString(id))
  add(path_566960, "name", newJString(name))
  add(path_566960, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_566962 = deployment
  add(path_566960, "resourceGroupName", newJString(resourceGroupName))
  add(path_566960, "instanceId", newJString(instanceId))
  result = call_566959.call(path_566960, query_566961, nil, nil, body_566962)

var sitesCreateInstanceDeploymentSlot* = Call_SitesCreateInstanceDeploymentSlot_566947(
    name: "sitesCreateInstanceDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesCreateInstanceDeploymentSlot_566948, base: "",
    url: url_SitesCreateInstanceDeploymentSlot_566949, schemes: {Scheme.Https})
type
  Call_SitesGetInstanceDeploymentSlot_566933 = ref object of OpenApiRestCall_563548
proc url_SitesGetInstanceDeploymentSlot_566935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetInstanceDeploymentSlot_566934(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566936 = path.getOrDefault("slot")
  valid_566936 = validateParameter(valid_566936, JString, required = true,
                                 default = nil)
  if valid_566936 != nil:
    section.add "slot", valid_566936
  var valid_566937 = path.getOrDefault("id")
  valid_566937 = validateParameter(valid_566937, JString, required = true,
                                 default = nil)
  if valid_566937 != nil:
    section.add "id", valid_566937
  var valid_566938 = path.getOrDefault("name")
  valid_566938 = validateParameter(valid_566938, JString, required = true,
                                 default = nil)
  if valid_566938 != nil:
    section.add "name", valid_566938
  var valid_566939 = path.getOrDefault("subscriptionId")
  valid_566939 = validateParameter(valid_566939, JString, required = true,
                                 default = nil)
  if valid_566939 != nil:
    section.add "subscriptionId", valid_566939
  var valid_566940 = path.getOrDefault("resourceGroupName")
  valid_566940 = validateParameter(valid_566940, JString, required = true,
                                 default = nil)
  if valid_566940 != nil:
    section.add "resourceGroupName", valid_566940
  var valid_566941 = path.getOrDefault("instanceId")
  valid_566941 = validateParameter(valid_566941, JString, required = true,
                                 default = nil)
  if valid_566941 != nil:
    section.add "instanceId", valid_566941
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566942 = query.getOrDefault("api-version")
  valid_566942 = validateParameter(valid_566942, JString, required = true,
                                 default = nil)
  if valid_566942 != nil:
    section.add "api-version", valid_566942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566943: Call_SitesGetInstanceDeploymentSlot_566933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566943.validator(path, query, header, formData, body)
  let scheme = call_566943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566943.url(scheme.get, call_566943.host, call_566943.base,
                         call_566943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566943, url, valid)

proc call*(call_566944: Call_SitesGetInstanceDeploymentSlot_566933; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## sitesGetInstanceDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566945 = newJObject()
  var query_566946 = newJObject()
  add(path_566945, "slot", newJString(slot))
  add(query_566946, "api-version", newJString(apiVersion))
  add(path_566945, "id", newJString(id))
  add(path_566945, "name", newJString(name))
  add(path_566945, "subscriptionId", newJString(subscriptionId))
  add(path_566945, "resourceGroupName", newJString(resourceGroupName))
  add(path_566945, "instanceId", newJString(instanceId))
  result = call_566944.call(path_566945, query_566946, nil, nil, nil)

var sitesGetInstanceDeploymentSlot* = Call_SitesGetInstanceDeploymentSlot_566933(
    name: "sitesGetInstanceDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesGetInstanceDeploymentSlot_566934, base: "",
    url: url_SitesGetInstanceDeploymentSlot_566935, schemes: {Scheme.Https})
type
  Call_SitesDeleteInstanceDeploymentSlot_566963 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteInstanceDeploymentSlot_566965(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteInstanceDeploymentSlot_566964(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   id: JString (required)
  ##     : Id of the deployment
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  ##   instanceId: JString (required)
  ##             : Id of web app instance
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566966 = path.getOrDefault("slot")
  valid_566966 = validateParameter(valid_566966, JString, required = true,
                                 default = nil)
  if valid_566966 != nil:
    section.add "slot", valid_566966
  var valid_566967 = path.getOrDefault("id")
  valid_566967 = validateParameter(valid_566967, JString, required = true,
                                 default = nil)
  if valid_566967 != nil:
    section.add "id", valid_566967
  var valid_566968 = path.getOrDefault("name")
  valid_566968 = validateParameter(valid_566968, JString, required = true,
                                 default = nil)
  if valid_566968 != nil:
    section.add "name", valid_566968
  var valid_566969 = path.getOrDefault("subscriptionId")
  valid_566969 = validateParameter(valid_566969, JString, required = true,
                                 default = nil)
  if valid_566969 != nil:
    section.add "subscriptionId", valid_566969
  var valid_566970 = path.getOrDefault("resourceGroupName")
  valid_566970 = validateParameter(valid_566970, JString, required = true,
                                 default = nil)
  if valid_566970 != nil:
    section.add "resourceGroupName", valid_566970
  var valid_566971 = path.getOrDefault("instanceId")
  valid_566971 = validateParameter(valid_566971, JString, required = true,
                                 default = nil)
  if valid_566971 != nil:
    section.add "instanceId", valid_566971
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566972 = query.getOrDefault("api-version")
  valid_566972 = validateParameter(valid_566972, JString, required = true,
                                 default = nil)
  if valid_566972 != nil:
    section.add "api-version", valid_566972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566973: Call_SitesDeleteInstanceDeploymentSlot_566963;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566973.validator(path, query, header, formData, body)
  let scheme = call_566973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566973.url(scheme.get, call_566973.host, call_566973.base,
                         call_566973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566973, url, valid)

proc call*(call_566974: Call_SitesDeleteInstanceDeploymentSlot_566963;
          slot: string; apiVersion: string; id: string; name: string;
          subscriptionId: string; resourceGroupName: string; instanceId: string): Recallable =
  ## sitesDeleteInstanceDeploymentSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Id of the deployment
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   instanceId: string (required)
  ##             : Id of web app instance
  var path_566975 = newJObject()
  var query_566976 = newJObject()
  add(path_566975, "slot", newJString(slot))
  add(query_566976, "api-version", newJString(apiVersion))
  add(path_566975, "id", newJString(id))
  add(path_566975, "name", newJString(name))
  add(path_566975, "subscriptionId", newJString(subscriptionId))
  add(path_566975, "resourceGroupName", newJString(resourceGroupName))
  add(path_566975, "instanceId", newJString(instanceId))
  result = call_566974.call(path_566975, query_566976, nil, nil, nil)

var sitesDeleteInstanceDeploymentSlot* = Call_SitesDeleteInstanceDeploymentSlot_566963(
    name: "sitesDeleteInstanceDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
    validator: validate_SitesDeleteInstanceDeploymentSlot_566964, base: "",
    url: url_SitesDeleteInstanceDeploymentSlot_566965, schemes: {Scheme.Https})
type
  Call_SitesIsSiteCloneableSlot_566977 = ref object of OpenApiRestCall_563548
proc url_SitesIsSiteCloneableSlot_566979(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesIsSiteCloneableSlot_566978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566980 = path.getOrDefault("slot")
  valid_566980 = validateParameter(valid_566980, JString, required = true,
                                 default = nil)
  if valid_566980 != nil:
    section.add "slot", valid_566980
  var valid_566981 = path.getOrDefault("name")
  valid_566981 = validateParameter(valid_566981, JString, required = true,
                                 default = nil)
  if valid_566981 != nil:
    section.add "name", valid_566981
  var valid_566982 = path.getOrDefault("subscriptionId")
  valid_566982 = validateParameter(valid_566982, JString, required = true,
                                 default = nil)
  if valid_566982 != nil:
    section.add "subscriptionId", valid_566982
  var valid_566983 = path.getOrDefault("resourceGroupName")
  valid_566983 = validateParameter(valid_566983, JString, required = true,
                                 default = nil)
  if valid_566983 != nil:
    section.add "resourceGroupName", valid_566983
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566984 = query.getOrDefault("api-version")
  valid_566984 = validateParameter(valid_566984, JString, required = true,
                                 default = nil)
  if valid_566984 != nil:
    section.add "api-version", valid_566984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566985: Call_SitesIsSiteCloneableSlot_566977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_566985.validator(path, query, header, formData, body)
  let scheme = call_566985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566985.url(scheme.get, call_566985.host, call_566985.base,
                         call_566985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566985, url, valid)

proc call*(call_566986: Call_SitesIsSiteCloneableSlot_566977; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesIsSiteCloneableSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group
  var path_566987 = newJObject()
  var query_566988 = newJObject()
  add(path_566987, "slot", newJString(slot))
  add(query_566988, "api-version", newJString(apiVersion))
  add(path_566987, "name", newJString(name))
  add(path_566987, "subscriptionId", newJString(subscriptionId))
  add(path_566987, "resourceGroupName", newJString(resourceGroupName))
  result = call_566986.call(path_566987, query_566988, nil, nil, nil)

var sitesIsSiteCloneableSlot* = Call_SitesIsSiteCloneableSlot_566977(
    name: "sitesIsSiteCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_SitesIsSiteCloneableSlot_566978, base: "",
    url: url_SitesIsSiteCloneableSlot_566979, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricDefinitionsSlot_566989 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteMetricDefinitionsSlot_566991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricDefinitionsSlot_566990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566992 = path.getOrDefault("slot")
  valid_566992 = validateParameter(valid_566992, JString, required = true,
                                 default = nil)
  if valid_566992 != nil:
    section.add "slot", valid_566992
  var valid_566993 = path.getOrDefault("name")
  valid_566993 = validateParameter(valid_566993, JString, required = true,
                                 default = nil)
  if valid_566993 != nil:
    section.add "name", valid_566993
  var valid_566994 = path.getOrDefault("subscriptionId")
  valid_566994 = validateParameter(valid_566994, JString, required = true,
                                 default = nil)
  if valid_566994 != nil:
    section.add "subscriptionId", valid_566994
  var valid_566995 = path.getOrDefault("resourceGroupName")
  valid_566995 = validateParameter(valid_566995, JString, required = true,
                                 default = nil)
  if valid_566995 != nil:
    section.add "resourceGroupName", valid_566995
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566996 = query.getOrDefault("api-version")
  valid_566996 = validateParameter(valid_566996, JString, required = true,
                                 default = nil)
  if valid_566996 != nil:
    section.add "api-version", valid_566996
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566997: Call_SitesGetSiteMetricDefinitionsSlot_566989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_566997.validator(path, query, header, formData, body)
  let scheme = call_566997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566997.url(scheme.get, call_566997.host, call_566997.base,
                         call_566997.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566997, url, valid)

proc call*(call_566998: Call_SitesGetSiteMetricDefinitionsSlot_566989;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteMetricDefinitionsSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_566999 = newJObject()
  var query_567000 = newJObject()
  add(path_566999, "slot", newJString(slot))
  add(query_567000, "api-version", newJString(apiVersion))
  add(path_566999, "name", newJString(name))
  add(path_566999, "subscriptionId", newJString(subscriptionId))
  add(path_566999, "resourceGroupName", newJString(resourceGroupName))
  result = call_566998.call(path_566999, query_567000, nil, nil, nil)

var sitesGetSiteMetricDefinitionsSlot* = Call_SitesGetSiteMetricDefinitionsSlot_566989(
    name: "sitesGetSiteMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_SitesGetSiteMetricDefinitionsSlot_566990, base: "",
    url: url_SitesGetSiteMetricDefinitionsSlot_566991, schemes: {Scheme.Https})
type
  Call_SitesGetSiteMetricsSlot_567001 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteMetricsSlot_567003(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteMetricsSlot_567002(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567004 = path.getOrDefault("slot")
  valid_567004 = validateParameter(valid_567004, JString, required = true,
                                 default = nil)
  if valid_567004 != nil:
    section.add "slot", valid_567004
  var valid_567005 = path.getOrDefault("name")
  valid_567005 = validateParameter(valid_567005, JString, required = true,
                                 default = nil)
  if valid_567005 != nil:
    section.add "name", valid_567005
  var valid_567006 = path.getOrDefault("subscriptionId")
  valid_567006 = validateParameter(valid_567006, JString, required = true,
                                 default = nil)
  if valid_567006 != nil:
    section.add "subscriptionId", valid_567006
  var valid_567007 = path.getOrDefault("resourceGroupName")
  valid_567007 = validateParameter(valid_567007, JString, required = true,
                                 default = nil)
  if valid_567007 != nil:
    section.add "resourceGroupName", valid_567007
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : If true, metric details are included in response
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_567008 = query.getOrDefault("details")
  valid_567008 = validateParameter(valid_567008, JBool, required = false, default = nil)
  if valid_567008 != nil:
    section.add "details", valid_567008
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567009 = query.getOrDefault("api-version")
  valid_567009 = validateParameter(valid_567009, JString, required = true,
                                 default = nil)
  if valid_567009 != nil:
    section.add "api-version", valid_567009
  var valid_567010 = query.getOrDefault("$filter")
  valid_567010 = validateParameter(valid_567010, JString, required = false,
                                 default = nil)
  if valid_567010 != nil:
    section.add "$filter", valid_567010
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567011: Call_SitesGetSiteMetricsSlot_567001; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567011.validator(path, query, header, formData, body)
  let scheme = call_567011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567011.url(scheme.get, call_567011.host, call_567011.base,
                         call_567011.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567011, url, valid)

proc call*(call_567012: Call_SitesGetSiteMetricsSlot_567001; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; Filter: string = ""): Recallable =
  ## sitesGetSiteMetricsSlot
  ##   details: bool
  ##          : If true, metric details are included in response
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567013 = newJObject()
  var query_567014 = newJObject()
  add(query_567014, "details", newJBool(details))
  add(path_567013, "slot", newJString(slot))
  add(query_567014, "api-version", newJString(apiVersion))
  add(path_567013, "name", newJString(name))
  add(path_567013, "subscriptionId", newJString(subscriptionId))
  add(path_567013, "resourceGroupName", newJString(resourceGroupName))
  add(query_567014, "$filter", newJString(Filter))
  result = call_567012.call(path_567013, query_567014, nil, nil, nil)

var sitesGetSiteMetricsSlot* = Call_SitesGetSiteMetricsSlot_567001(
    name: "sitesGetSiteMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_SitesGetSiteMetricsSlot_567002, base: "",
    url: url_SitesGetSiteMetricsSlot_567003, schemes: {Scheme.Https})
type
  Call_SitesGetSiteNetworkFeaturesSlot_567015 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteNetworkFeaturesSlot_567017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteNetworkFeaturesSlot_567016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567018 = path.getOrDefault("slot")
  valid_567018 = validateParameter(valid_567018, JString, required = true,
                                 default = nil)
  if valid_567018 != nil:
    section.add "slot", valid_567018
  var valid_567019 = path.getOrDefault("view")
  valid_567019 = validateParameter(valid_567019, JString, required = true,
                                 default = nil)
  if valid_567019 != nil:
    section.add "view", valid_567019
  var valid_567020 = path.getOrDefault("name")
  valid_567020 = validateParameter(valid_567020, JString, required = true,
                                 default = nil)
  if valid_567020 != nil:
    section.add "name", valid_567020
  var valid_567021 = path.getOrDefault("subscriptionId")
  valid_567021 = validateParameter(valid_567021, JString, required = true,
                                 default = nil)
  if valid_567021 != nil:
    section.add "subscriptionId", valid_567021
  var valid_567022 = path.getOrDefault("resourceGroupName")
  valid_567022 = validateParameter(valid_567022, JString, required = true,
                                 default = nil)
  if valid_567022 != nil:
    section.add "resourceGroupName", valid_567022
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567023 = query.getOrDefault("api-version")
  valid_567023 = validateParameter(valid_567023, JString, required = true,
                                 default = nil)
  if valid_567023 != nil:
    section.add "api-version", valid_567023
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567024: Call_SitesGetSiteNetworkFeaturesSlot_567015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567024.validator(path, query, header, formData, body)
  let scheme = call_567024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567024.url(scheme.get, call_567024.host, call_567024.base,
                         call_567024.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567024, url, valid)

proc call*(call_567025: Call_SitesGetSiteNetworkFeaturesSlot_567015; slot: string;
          apiVersion: string; view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteNetworkFeaturesSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567026 = newJObject()
  var query_567027 = newJObject()
  add(path_567026, "slot", newJString(slot))
  add(query_567027, "api-version", newJString(apiVersion))
  add(path_567026, "view", newJString(view))
  add(path_567026, "name", newJString(name))
  add(path_567026, "subscriptionId", newJString(subscriptionId))
  add(path_567026, "resourceGroupName", newJString(resourceGroupName))
  result = call_567025.call(path_567026, query_567027, nil, nil, nil)

var sitesGetSiteNetworkFeaturesSlot* = Call_SitesGetSiteNetworkFeaturesSlot_567015(
    name: "sitesGetSiteNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_SitesGetSiteNetworkFeaturesSlot_567016, base: "",
    url: url_SitesGetSiteNetworkFeaturesSlot_567017, schemes: {Scheme.Https})
type
  Call_SitesGenerateNewSitePublishingPasswordSlot_567028 = ref object of OpenApiRestCall_563548
proc url_SitesGenerateNewSitePublishingPasswordSlot_567030(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGenerateNewSitePublishingPasswordSlot_567029(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567031 = path.getOrDefault("slot")
  valid_567031 = validateParameter(valid_567031, JString, required = true,
                                 default = nil)
  if valid_567031 != nil:
    section.add "slot", valid_567031
  var valid_567032 = path.getOrDefault("name")
  valid_567032 = validateParameter(valid_567032, JString, required = true,
                                 default = nil)
  if valid_567032 != nil:
    section.add "name", valid_567032
  var valid_567033 = path.getOrDefault("subscriptionId")
  valid_567033 = validateParameter(valid_567033, JString, required = true,
                                 default = nil)
  if valid_567033 != nil:
    section.add "subscriptionId", valid_567033
  var valid_567034 = path.getOrDefault("resourceGroupName")
  valid_567034 = validateParameter(valid_567034, JString, required = true,
                                 default = nil)
  if valid_567034 != nil:
    section.add "resourceGroupName", valid_567034
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567035 = query.getOrDefault("api-version")
  valid_567035 = validateParameter(valid_567035, JString, required = true,
                                 default = nil)
  if valid_567035 != nil:
    section.add "api-version", valid_567035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567036: Call_SitesGenerateNewSitePublishingPasswordSlot_567028;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567036.validator(path, query, header, formData, body)
  let scheme = call_567036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567036.url(scheme.get, call_567036.host, call_567036.base,
                         call_567036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567036, url, valid)

proc call*(call_567037: Call_SitesGenerateNewSitePublishingPasswordSlot_567028;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGenerateNewSitePublishingPasswordSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567038 = newJObject()
  var query_567039 = newJObject()
  add(path_567038, "slot", newJString(slot))
  add(query_567039, "api-version", newJString(apiVersion))
  add(path_567038, "name", newJString(name))
  add(path_567038, "subscriptionId", newJString(subscriptionId))
  add(path_567038, "resourceGroupName", newJString(resourceGroupName))
  result = call_567037.call(path_567038, query_567039, nil, nil, nil)

var sitesGenerateNewSitePublishingPasswordSlot* = Call_SitesGenerateNewSitePublishingPasswordSlot_567028(
    name: "sitesGenerateNewSitePublishingPasswordSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_SitesGenerateNewSitePublishingPasswordSlot_567029,
    base: "", url: url_SitesGenerateNewSitePublishingPasswordSlot_567030,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteOperationSlot_567040 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteOperationSlot_567042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteOperationSlot_567041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   operationId: JString (required)
  ##              : Id of an operation
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567043 = path.getOrDefault("slot")
  valid_567043 = validateParameter(valid_567043, JString, required = true,
                                 default = nil)
  if valid_567043 != nil:
    section.add "slot", valid_567043
  var valid_567044 = path.getOrDefault("operationId")
  valid_567044 = validateParameter(valid_567044, JString, required = true,
                                 default = nil)
  if valid_567044 != nil:
    section.add "operationId", valid_567044
  var valid_567045 = path.getOrDefault("name")
  valid_567045 = validateParameter(valid_567045, JString, required = true,
                                 default = nil)
  if valid_567045 != nil:
    section.add "name", valid_567045
  var valid_567046 = path.getOrDefault("subscriptionId")
  valid_567046 = validateParameter(valid_567046, JString, required = true,
                                 default = nil)
  if valid_567046 != nil:
    section.add "subscriptionId", valid_567046
  var valid_567047 = path.getOrDefault("resourceGroupName")
  valid_567047 = validateParameter(valid_567047, JString, required = true,
                                 default = nil)
  if valid_567047 != nil:
    section.add "resourceGroupName", valid_567047
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567048 = query.getOrDefault("api-version")
  valid_567048 = validateParameter(valid_567048, JString, required = true,
                                 default = nil)
  if valid_567048 != nil:
    section.add "api-version", valid_567048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567049: Call_SitesGetSiteOperationSlot_567040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567049.validator(path, query, header, formData, body)
  let scheme = call_567049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567049.url(scheme.get, call_567049.host, call_567049.base,
                         call_567049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567049, url, valid)

proc call*(call_567050: Call_SitesGetSiteOperationSlot_567040; slot: string;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteOperationSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : Id of an operation
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567051 = newJObject()
  var query_567052 = newJObject()
  add(path_567051, "slot", newJString(slot))
  add(query_567052, "api-version", newJString(apiVersion))
  add(path_567051, "operationId", newJString(operationId))
  add(path_567051, "name", newJString(name))
  add(path_567051, "subscriptionId", newJString(subscriptionId))
  add(path_567051, "resourceGroupName", newJString(resourceGroupName))
  result = call_567050.call(path_567051, query_567052, nil, nil, nil)

var sitesGetSiteOperationSlot* = Call_SitesGetSiteOperationSlot_567040(
    name: "sitesGetSiteOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}",
    validator: validate_SitesGetSiteOperationSlot_567041, base: "",
    url: url_SitesGetSiteOperationSlot_567042, schemes: {Scheme.Https})
type
  Call_SitesListSitePremierAddOnsSlot_567053 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePremierAddOnsSlot_567055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePremierAddOnsSlot_567054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567056 = path.getOrDefault("slot")
  valid_567056 = validateParameter(valid_567056, JString, required = true,
                                 default = nil)
  if valid_567056 != nil:
    section.add "slot", valid_567056
  var valid_567057 = path.getOrDefault("name")
  valid_567057 = validateParameter(valid_567057, JString, required = true,
                                 default = nil)
  if valid_567057 != nil:
    section.add "name", valid_567057
  var valid_567058 = path.getOrDefault("subscriptionId")
  valid_567058 = validateParameter(valid_567058, JString, required = true,
                                 default = nil)
  if valid_567058 != nil:
    section.add "subscriptionId", valid_567058
  var valid_567059 = path.getOrDefault("resourceGroupName")
  valid_567059 = validateParameter(valid_567059, JString, required = true,
                                 default = nil)
  if valid_567059 != nil:
    section.add "resourceGroupName", valid_567059
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567060 = query.getOrDefault("api-version")
  valid_567060 = validateParameter(valid_567060, JString, required = true,
                                 default = nil)
  if valid_567060 != nil:
    section.add "api-version", valid_567060
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567061: Call_SitesListSitePremierAddOnsSlot_567053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567061.validator(path, query, header, formData, body)
  let scheme = call_567061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567061.url(scheme.get, call_567061.host, call_567061.base,
                         call_567061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567061, url, valid)

proc call*(call_567062: Call_SitesListSitePremierAddOnsSlot_567053; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesListSitePremierAddOnsSlot
  ##   slot: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  var path_567063 = newJObject()
  var query_567064 = newJObject()
  add(path_567063, "slot", newJString(slot))
  add(query_567064, "api-version", newJString(apiVersion))
  add(path_567063, "name", newJString(name))
  add(path_567063, "subscriptionId", newJString(subscriptionId))
  add(path_567063, "resourceGroupName", newJString(resourceGroupName))
  result = call_567062.call(path_567063, query_567064, nil, nil, nil)

var sitesListSitePremierAddOnsSlot* = Call_SitesListSitePremierAddOnsSlot_567053(
    name: "sitesListSitePremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_SitesListSitePremierAddOnsSlot_567054, base: "",
    url: url_SitesListSitePremierAddOnsSlot_567055, schemes: {Scheme.Https})
type
  Call_SitesAddSitePremierAddOnSlot_567078 = ref object of OpenApiRestCall_563548
proc url_SitesAddSitePremierAddOnSlot_567080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesAddSitePremierAddOnSlot_567079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567081 = path.getOrDefault("slot")
  valid_567081 = validateParameter(valid_567081, JString, required = true,
                                 default = nil)
  if valid_567081 != nil:
    section.add "slot", valid_567081
  var valid_567082 = path.getOrDefault("name")
  valid_567082 = validateParameter(valid_567082, JString, required = true,
                                 default = nil)
  if valid_567082 != nil:
    section.add "name", valid_567082
  var valid_567083 = path.getOrDefault("subscriptionId")
  valid_567083 = validateParameter(valid_567083, JString, required = true,
                                 default = nil)
  if valid_567083 != nil:
    section.add "subscriptionId", valid_567083
  var valid_567084 = path.getOrDefault("premierAddOnName")
  valid_567084 = validateParameter(valid_567084, JString, required = true,
                                 default = nil)
  if valid_567084 != nil:
    section.add "premierAddOnName", valid_567084
  var valid_567085 = path.getOrDefault("resourceGroupName")
  valid_567085 = validateParameter(valid_567085, JString, required = true,
                                 default = nil)
  if valid_567085 != nil:
    section.add "resourceGroupName", valid_567085
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567086 = query.getOrDefault("api-version")
  valid_567086 = validateParameter(valid_567086, JString, required = true,
                                 default = nil)
  if valid_567086 != nil:
    section.add "api-version", valid_567086
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567088: Call_SitesAddSitePremierAddOnSlot_567078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567088.validator(path, query, header, formData, body)
  let scheme = call_567088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567088.url(scheme.get, call_567088.host, call_567088.base,
                         call_567088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567088, url, valid)

proc call*(call_567089: Call_SitesAddSitePremierAddOnSlot_567078; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; premierAddOn: JsonNode;
          resourceGroupName: string): Recallable =
  ## sitesAddSitePremierAddOnSlot
  ##   slot: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   premierAddOn: JObject (required)
  ##   resourceGroupName: string (required)
  var path_567090 = newJObject()
  var query_567091 = newJObject()
  var body_567092 = newJObject()
  add(path_567090, "slot", newJString(slot))
  add(query_567091, "api-version", newJString(apiVersion))
  add(path_567090, "name", newJString(name))
  add(path_567090, "subscriptionId", newJString(subscriptionId))
  add(path_567090, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_567092 = premierAddOn
  add(path_567090, "resourceGroupName", newJString(resourceGroupName))
  result = call_567089.call(path_567090, query_567091, nil, nil, body_567092)

var sitesAddSitePremierAddOnSlot* = Call_SitesAddSitePremierAddOnSlot_567078(
    name: "sitesAddSitePremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesAddSitePremierAddOnSlot_567079, base: "",
    url: url_SitesAddSitePremierAddOnSlot_567080, schemes: {Scheme.Https})
type
  Call_SitesGetSitePremierAddOnSlot_567065 = ref object of OpenApiRestCall_563548
proc url_SitesGetSitePremierAddOnSlot_567067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSitePremierAddOnSlot_567066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567068 = path.getOrDefault("slot")
  valid_567068 = validateParameter(valid_567068, JString, required = true,
                                 default = nil)
  if valid_567068 != nil:
    section.add "slot", valid_567068
  var valid_567069 = path.getOrDefault("name")
  valid_567069 = validateParameter(valid_567069, JString, required = true,
                                 default = nil)
  if valid_567069 != nil:
    section.add "name", valid_567069
  var valid_567070 = path.getOrDefault("subscriptionId")
  valid_567070 = validateParameter(valid_567070, JString, required = true,
                                 default = nil)
  if valid_567070 != nil:
    section.add "subscriptionId", valid_567070
  var valid_567071 = path.getOrDefault("premierAddOnName")
  valid_567071 = validateParameter(valid_567071, JString, required = true,
                                 default = nil)
  if valid_567071 != nil:
    section.add "premierAddOnName", valid_567071
  var valid_567072 = path.getOrDefault("resourceGroupName")
  valid_567072 = validateParameter(valid_567072, JString, required = true,
                                 default = nil)
  if valid_567072 != nil:
    section.add "resourceGroupName", valid_567072
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567073 = query.getOrDefault("api-version")
  valid_567073 = validateParameter(valid_567073, JString, required = true,
                                 default = nil)
  if valid_567073 != nil:
    section.add "api-version", valid_567073
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567074: Call_SitesGetSitePremierAddOnSlot_567065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567074.validator(path, query, header, formData, body)
  let scheme = call_567074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567074.url(scheme.get, call_567074.host, call_567074.base,
                         call_567074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567074, url, valid)

proc call*(call_567075: Call_SitesGetSitePremierAddOnSlot_567065; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## sitesGetSitePremierAddOnSlot
  ##   slot: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   resourceGroupName: string (required)
  var path_567076 = newJObject()
  var query_567077 = newJObject()
  add(path_567076, "slot", newJString(slot))
  add(query_567077, "api-version", newJString(apiVersion))
  add(path_567076, "name", newJString(name))
  add(path_567076, "subscriptionId", newJString(subscriptionId))
  add(path_567076, "premierAddOnName", newJString(premierAddOnName))
  add(path_567076, "resourceGroupName", newJString(resourceGroupName))
  result = call_567075.call(path_567076, query_567077, nil, nil, nil)

var sitesGetSitePremierAddOnSlot* = Call_SitesGetSitePremierAddOnSlot_567065(
    name: "sitesGetSitePremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesGetSitePremierAddOnSlot_567066, base: "",
    url: url_SitesGetSitePremierAddOnSlot_567067, schemes: {Scheme.Https})
type
  Call_SitesDeleteSitePremierAddOnSlot_567093 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSitePremierAddOnSlot_567095(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSitePremierAddOnSlot_567094(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   premierAddOnName: JString (required)
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567096 = path.getOrDefault("slot")
  valid_567096 = validateParameter(valid_567096, JString, required = true,
                                 default = nil)
  if valid_567096 != nil:
    section.add "slot", valid_567096
  var valid_567097 = path.getOrDefault("name")
  valid_567097 = validateParameter(valid_567097, JString, required = true,
                                 default = nil)
  if valid_567097 != nil:
    section.add "name", valid_567097
  var valid_567098 = path.getOrDefault("subscriptionId")
  valid_567098 = validateParameter(valid_567098, JString, required = true,
                                 default = nil)
  if valid_567098 != nil:
    section.add "subscriptionId", valid_567098
  var valid_567099 = path.getOrDefault("premierAddOnName")
  valid_567099 = validateParameter(valid_567099, JString, required = true,
                                 default = nil)
  if valid_567099 != nil:
    section.add "premierAddOnName", valid_567099
  var valid_567100 = path.getOrDefault("resourceGroupName")
  valid_567100 = validateParameter(valid_567100, JString, required = true,
                                 default = nil)
  if valid_567100 != nil:
    section.add "resourceGroupName", valid_567100
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567101 = query.getOrDefault("api-version")
  valid_567101 = validateParameter(valid_567101, JString, required = true,
                                 default = nil)
  if valid_567101 != nil:
    section.add "api-version", valid_567101
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567102: Call_SitesDeleteSitePremierAddOnSlot_567093;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567102.validator(path, query, header, formData, body)
  let scheme = call_567102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567102.url(scheme.get, call_567102.host, call_567102.base,
                         call_567102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567102, url, valid)

proc call*(call_567103: Call_SitesDeleteSitePremierAddOnSlot_567093; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## sitesDeleteSitePremierAddOnSlot
  ##   slot: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   premierAddOnName: string (required)
  ##   resourceGroupName: string (required)
  var path_567104 = newJObject()
  var query_567105 = newJObject()
  add(path_567104, "slot", newJString(slot))
  add(query_567105, "api-version", newJString(apiVersion))
  add(path_567104, "name", newJString(name))
  add(path_567104, "subscriptionId", newJString(subscriptionId))
  add(path_567104, "premierAddOnName", newJString(premierAddOnName))
  add(path_567104, "resourceGroupName", newJString(resourceGroupName))
  result = call_567103.call(path_567104, query_567105, nil, nil, nil)

var sitesDeleteSitePremierAddOnSlot* = Call_SitesDeleteSitePremierAddOnSlot_567093(
    name: "sitesDeleteSitePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_SitesDeleteSitePremierAddOnSlot_567094, base: "",
    url: url_SitesDeleteSitePremierAddOnSlot_567095, schemes: {Scheme.Https})
type
  Call_SitesListSitePublishingProfileXmlSlot_567106 = ref object of OpenApiRestCall_563548
proc url_SitesListSitePublishingProfileXmlSlot_567108(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesListSitePublishingProfileXmlSlot_567107(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567109 = path.getOrDefault("slot")
  valid_567109 = validateParameter(valid_567109, JString, required = true,
                                 default = nil)
  if valid_567109 != nil:
    section.add "slot", valid_567109
  var valid_567110 = path.getOrDefault("name")
  valid_567110 = validateParameter(valid_567110, JString, required = true,
                                 default = nil)
  if valid_567110 != nil:
    section.add "name", valid_567110
  var valid_567111 = path.getOrDefault("subscriptionId")
  valid_567111 = validateParameter(valid_567111, JString, required = true,
                                 default = nil)
  if valid_567111 != nil:
    section.add "subscriptionId", valid_567111
  var valid_567112 = path.getOrDefault("resourceGroupName")
  valid_567112 = validateParameter(valid_567112, JString, required = true,
                                 default = nil)
  if valid_567112 != nil:
    section.add "resourceGroupName", valid_567112
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567113 = query.getOrDefault("api-version")
  valid_567113 = validateParameter(valid_567113, JString, required = true,
                                 default = nil)
  if valid_567113 != nil:
    section.add "api-version", valid_567113
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567115: Call_SitesListSitePublishingProfileXmlSlot_567106;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567115.validator(path, query, header, formData, body)
  let scheme = call_567115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567115.url(scheme.get, call_567115.host, call_567115.base,
                         call_567115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567115, url, valid)

proc call*(call_567116: Call_SitesListSitePublishingProfileXmlSlot_567106;
          options: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesListSitePublishingProfileXmlSlot
  ##   options: JObject (required)
  ##          : Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567117 = newJObject()
  var query_567118 = newJObject()
  var body_567119 = newJObject()
  if options != nil:
    body_567119 = options
  add(path_567117, "slot", newJString(slot))
  add(query_567118, "api-version", newJString(apiVersion))
  add(path_567117, "name", newJString(name))
  add(path_567117, "subscriptionId", newJString(subscriptionId))
  add(path_567117, "resourceGroupName", newJString(resourceGroupName))
  result = call_567116.call(path_567117, query_567118, nil, nil, body_567119)

var sitesListSitePublishingProfileXmlSlot* = Call_SitesListSitePublishingProfileXmlSlot_567106(
    name: "sitesListSitePublishingProfileXmlSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_SitesListSitePublishingProfileXmlSlot_567107, base: "",
    url: url_SitesListSitePublishingProfileXmlSlot_567108, schemes: {Scheme.Https})
type
  Call_SitesRecoverSiteSlot_567120 = ref object of OpenApiRestCall_563548
proc url_SitesRecoverSiteSlot_567122(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRecoverSiteSlot_567121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567123 = path.getOrDefault("slot")
  valid_567123 = validateParameter(valid_567123, JString, required = true,
                                 default = nil)
  if valid_567123 != nil:
    section.add "slot", valid_567123
  var valid_567124 = path.getOrDefault("name")
  valid_567124 = validateParameter(valid_567124, JString, required = true,
                                 default = nil)
  if valid_567124 != nil:
    section.add "name", valid_567124
  var valid_567125 = path.getOrDefault("subscriptionId")
  valid_567125 = validateParameter(valid_567125, JString, required = true,
                                 default = nil)
  if valid_567125 != nil:
    section.add "subscriptionId", valid_567125
  var valid_567126 = path.getOrDefault("resourceGroupName")
  valid_567126 = validateParameter(valid_567126, JString, required = true,
                                 default = nil)
  if valid_567126 != nil:
    section.add "resourceGroupName", valid_567126
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567127 = query.getOrDefault("api-version")
  valid_567127 = validateParameter(valid_567127, JString, required = true,
                                 default = nil)
  if valid_567127 != nil:
    section.add "api-version", valid_567127
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567129: Call_SitesRecoverSiteSlot_567120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567129.validator(path, query, header, formData, body)
  let scheme = call_567129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567129.url(scheme.get, call_567129.host, call_567129.base,
                         call_567129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567129, url, valid)

proc call*(call_567130: Call_SitesRecoverSiteSlot_567120; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; recoveryEntity: JsonNode): Recallable =
  ## sitesRecoverSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_567131 = newJObject()
  var query_567132 = newJObject()
  var body_567133 = newJObject()
  add(path_567131, "slot", newJString(slot))
  add(query_567132, "api-version", newJString(apiVersion))
  add(path_567131, "name", newJString(name))
  add(path_567131, "subscriptionId", newJString(subscriptionId))
  add(path_567131, "resourceGroupName", newJString(resourceGroupName))
  if recoveryEntity != nil:
    body_567133 = recoveryEntity
  result = call_567130.call(path_567131, query_567132, nil, nil, body_567133)

var sitesRecoverSiteSlot* = Call_SitesRecoverSiteSlot_567120(
    name: "sitesRecoverSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_SitesRecoverSiteSlot_567121, base: "",
    url: url_SitesRecoverSiteSlot_567122, schemes: {Scheme.Https})
type
  Call_SitesResetSlotConfigSlot_567134 = ref object of OpenApiRestCall_563548
proc url_SitesResetSlotConfigSlot_567136(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesResetSlotConfigSlot_567135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567137 = path.getOrDefault("slot")
  valid_567137 = validateParameter(valid_567137, JString, required = true,
                                 default = nil)
  if valid_567137 != nil:
    section.add "slot", valid_567137
  var valid_567138 = path.getOrDefault("name")
  valid_567138 = validateParameter(valid_567138, JString, required = true,
                                 default = nil)
  if valid_567138 != nil:
    section.add "name", valid_567138
  var valid_567139 = path.getOrDefault("subscriptionId")
  valid_567139 = validateParameter(valid_567139, JString, required = true,
                                 default = nil)
  if valid_567139 != nil:
    section.add "subscriptionId", valid_567139
  var valid_567140 = path.getOrDefault("resourceGroupName")
  valid_567140 = validateParameter(valid_567140, JString, required = true,
                                 default = nil)
  if valid_567140 != nil:
    section.add "resourceGroupName", valid_567140
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567141 = query.getOrDefault("api-version")
  valid_567141 = validateParameter(valid_567141, JString, required = true,
                                 default = nil)
  if valid_567141 != nil:
    section.add "api-version", valid_567141
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567142: Call_SitesResetSlotConfigSlot_567134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567142.validator(path, query, header, formData, body)
  let scheme = call_567142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567142.url(scheme.get, call_567142.host, call_567142.base,
                         call_567142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567142, url, valid)

proc call*(call_567143: Call_SitesResetSlotConfigSlot_567134; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesResetSlotConfigSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567144 = newJObject()
  var query_567145 = newJObject()
  add(path_567144, "slot", newJString(slot))
  add(query_567145, "api-version", newJString(apiVersion))
  add(path_567144, "name", newJString(name))
  add(path_567144, "subscriptionId", newJString(subscriptionId))
  add(path_567144, "resourceGroupName", newJString(resourceGroupName))
  result = call_567143.call(path_567144, query_567145, nil, nil, nil)

var sitesResetSlotConfigSlot* = Call_SitesResetSlotConfigSlot_567134(
    name: "sitesResetSlotConfigSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_SitesResetSlotConfigSlot_567135, base: "",
    url: url_SitesResetSlotConfigSlot_567136, schemes: {Scheme.Https})
type
  Call_SitesRestartSiteSlot_567146 = ref object of OpenApiRestCall_563548
proc url_SitesRestartSiteSlot_567148(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesRestartSiteSlot_567147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567149 = path.getOrDefault("slot")
  valid_567149 = validateParameter(valid_567149, JString, required = true,
                                 default = nil)
  if valid_567149 != nil:
    section.add "slot", valid_567149
  var valid_567150 = path.getOrDefault("name")
  valid_567150 = validateParameter(valid_567150, JString, required = true,
                                 default = nil)
  if valid_567150 != nil:
    section.add "name", valid_567150
  var valid_567151 = path.getOrDefault("subscriptionId")
  valid_567151 = validateParameter(valid_567151, JString, required = true,
                                 default = nil)
  if valid_567151 != nil:
    section.add "subscriptionId", valid_567151
  var valid_567152 = path.getOrDefault("resourceGroupName")
  valid_567152 = validateParameter(valid_567152, JString, required = true,
                                 default = nil)
  if valid_567152 != nil:
    section.add "resourceGroupName", valid_567152
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : If true then the API will block until the app has been restarted
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  section = newJObject()
  var valid_567153 = query.getOrDefault("synchronous")
  valid_567153 = validateParameter(valid_567153, JBool, required = false, default = nil)
  if valid_567153 != nil:
    section.add "synchronous", valid_567153
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567154 = query.getOrDefault("api-version")
  valid_567154 = validateParameter(valid_567154, JString, required = true,
                                 default = nil)
  if valid_567154 != nil:
    section.add "api-version", valid_567154
  var valid_567155 = query.getOrDefault("softRestart")
  valid_567155 = validateParameter(valid_567155, JBool, required = false, default = nil)
  if valid_567155 != nil:
    section.add "softRestart", valid_567155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567156: Call_SitesRestartSiteSlot_567146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567156.validator(path, query, header, formData, body)
  let scheme = call_567156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567156.url(scheme.get, call_567156.host, call_567156.base,
                         call_567156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567156, url, valid)

proc call*(call_567157: Call_SitesRestartSiteSlot_567146; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; synchronous: bool = false;
          softRestart: bool = false): Recallable =
  ## sitesRestartSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   synchronous: bool
  ##              : If true then the API will block until the app has been restarted
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   softRestart: bool
  ##              : Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
  var path_567158 = newJObject()
  var query_567159 = newJObject()
  add(path_567158, "slot", newJString(slot))
  add(query_567159, "synchronous", newJBool(synchronous))
  add(query_567159, "api-version", newJString(apiVersion))
  add(path_567158, "name", newJString(name))
  add(path_567158, "subscriptionId", newJString(subscriptionId))
  add(path_567158, "resourceGroupName", newJString(resourceGroupName))
  add(query_567159, "softRestart", newJBool(softRestart))
  result = call_567157.call(path_567158, query_567159, nil, nil, nil)

var sitesRestartSiteSlot* = Call_SitesRestartSiteSlot_567146(
    name: "sitesRestartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_SitesRestartSiteSlot_567147, base: "",
    url: url_SitesRestartSiteSlot_567148, schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesSlot_567160 = ref object of OpenApiRestCall_563548
proc url_SitesGetSlotsDifferencesSlot_567162(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesSlot_567161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567163 = path.getOrDefault("slot")
  valid_567163 = validateParameter(valid_567163, JString, required = true,
                                 default = nil)
  if valid_567163 != nil:
    section.add "slot", valid_567163
  var valid_567164 = path.getOrDefault("name")
  valid_567164 = validateParameter(valid_567164, JString, required = true,
                                 default = nil)
  if valid_567164 != nil:
    section.add "name", valid_567164
  var valid_567165 = path.getOrDefault("subscriptionId")
  valid_567165 = validateParameter(valid_567165, JString, required = true,
                                 default = nil)
  if valid_567165 != nil:
    section.add "subscriptionId", valid_567165
  var valid_567166 = path.getOrDefault("resourceGroupName")
  valid_567166 = validateParameter(valid_567166, JString, required = true,
                                 default = nil)
  if valid_567166 != nil:
    section.add "resourceGroupName", valid_567166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567167 = query.getOrDefault("api-version")
  valid_567167 = validateParameter(valid_567167, JString, required = true,
                                 default = nil)
  if valid_567167 != nil:
    section.add "api-version", valid_567167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567169: Call_SitesGetSlotsDifferencesSlot_567160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567169.validator(path, query, header, formData, body)
  let scheme = call_567169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567169.url(scheme.get, call_567169.host, call_567169.base,
                         call_567169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567169, url, valid)

proc call*(call_567170: Call_SitesGetSlotsDifferencesSlot_567160; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesGetSlotsDifferencesSlot
  ##   slot: string (required)
  ##       : Name of the source slot
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567171 = newJObject()
  var query_567172 = newJObject()
  var body_567173 = newJObject()
  add(path_567171, "slot", newJString(slot))
  add(query_567172, "api-version", newJString(apiVersion))
  add(path_567171, "name", newJString(name))
  add(path_567171, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567173 = slotSwapEntity
  add(path_567171, "resourceGroupName", newJString(resourceGroupName))
  result = call_567170.call(path_567171, query_567172, nil, nil, body_567173)

var sitesGetSlotsDifferencesSlot* = Call_SitesGetSlotsDifferencesSlot_567160(
    name: "sitesGetSlotsDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesSlot_567161, base: "",
    url: url_SitesGetSlotsDifferencesSlot_567162, schemes: {Scheme.Https})
type
  Call_SitesSwapSlotsSlot_567174 = ref object of OpenApiRestCall_563548
proc url_SitesSwapSlotsSlot_567176(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotsSlot_567175(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of source slot for the swap
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567177 = path.getOrDefault("slot")
  valid_567177 = validateParameter(valid_567177, JString, required = true,
                                 default = nil)
  if valid_567177 != nil:
    section.add "slot", valid_567177
  var valid_567178 = path.getOrDefault("name")
  valid_567178 = validateParameter(valid_567178, JString, required = true,
                                 default = nil)
  if valid_567178 != nil:
    section.add "name", valid_567178
  var valid_567179 = path.getOrDefault("subscriptionId")
  valid_567179 = validateParameter(valid_567179, JString, required = true,
                                 default = nil)
  if valid_567179 != nil:
    section.add "subscriptionId", valid_567179
  var valid_567180 = path.getOrDefault("resourceGroupName")
  valid_567180 = validateParameter(valid_567180, JString, required = true,
                                 default = nil)
  if valid_567180 != nil:
    section.add "resourceGroupName", valid_567180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567181 = query.getOrDefault("api-version")
  valid_567181 = validateParameter(valid_567181, JString, required = true,
                                 default = nil)
  if valid_567181 != nil:
    section.add "api-version", valid_567181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567183: Call_SitesSwapSlotsSlot_567174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567183.validator(path, query, header, formData, body)
  let scheme = call_567183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567183.url(scheme.get, call_567183.host, call_567183.base,
                         call_567183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567183, url, valid)

proc call*(call_567184: Call_SitesSwapSlotsSlot_567174; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesSwapSlotsSlot
  ##   slot: string (required)
  ##       : Name of source slot for the swap
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567185 = newJObject()
  var query_567186 = newJObject()
  var body_567187 = newJObject()
  add(path_567185, "slot", newJString(slot))
  add(query_567186, "api-version", newJString(apiVersion))
  add(path_567185, "name", newJString(name))
  add(path_567185, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567187 = slotSwapEntity
  add(path_567185, "resourceGroupName", newJString(resourceGroupName))
  result = call_567184.call(path_567185, query_567186, nil, nil, body_567187)

var sitesSwapSlotsSlot* = Call_SitesSwapSlotsSlot_567174(
    name: "sitesSwapSlotsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_SitesSwapSlotsSlot_567175, base: "",
    url: url_SitesSwapSlotsSlot_567176, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshotsSlot_567188 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSnapshotsSlot_567190(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshotsSlot_567189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Website Slot
  ##   name: JString (required)
  ##       : Website Name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567191 = path.getOrDefault("slot")
  valid_567191 = validateParameter(valid_567191, JString, required = true,
                                 default = nil)
  if valid_567191 != nil:
    section.add "slot", valid_567191
  var valid_567192 = path.getOrDefault("name")
  valid_567192 = validateParameter(valid_567192, JString, required = true,
                                 default = nil)
  if valid_567192 != nil:
    section.add "name", valid_567192
  var valid_567193 = path.getOrDefault("subscriptionId")
  valid_567193 = validateParameter(valid_567193, JString, required = true,
                                 default = nil)
  if valid_567193 != nil:
    section.add "subscriptionId", valid_567193
  var valid_567194 = path.getOrDefault("resourceGroupName")
  valid_567194 = validateParameter(valid_567194, JString, required = true,
                                 default = nil)
  if valid_567194 != nil:
    section.add "resourceGroupName", valid_567194
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567195 = query.getOrDefault("api-version")
  valid_567195 = validateParameter(valid_567195, JString, required = true,
                                 default = nil)
  if valid_567195 != nil:
    section.add "api-version", valid_567195
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567196: Call_SitesGetSiteSnapshotsSlot_567188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567196.validator(path, query, header, formData, body)
  let scheme = call_567196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567196.url(scheme.get, call_567196.host, call_567196.base,
                         call_567196.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567196, url, valid)

proc call*(call_567197: Call_SitesGetSiteSnapshotsSlot_567188; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteSnapshotsSlot
  ##   slot: string (required)
  ##       : Website Slot
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  var path_567198 = newJObject()
  var query_567199 = newJObject()
  add(path_567198, "slot", newJString(slot))
  add(query_567199, "api-version", newJString(apiVersion))
  add(path_567198, "name", newJString(name))
  add(path_567198, "subscriptionId", newJString(subscriptionId))
  add(path_567198, "resourceGroupName", newJString(resourceGroupName))
  result = call_567197.call(path_567198, query_567199, nil, nil, nil)

var sitesGetSiteSnapshotsSlot* = Call_SitesGetSiteSnapshotsSlot_567188(
    name: "sitesGetSiteSnapshotsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_SitesGetSiteSnapshotsSlot_567189, base: "",
    url: url_SitesGetSiteSnapshotsSlot_567190, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControlSlot_567212 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteSourceControlSlot_567214(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControlSlot_567213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567215 = path.getOrDefault("slot")
  valid_567215 = validateParameter(valid_567215, JString, required = true,
                                 default = nil)
  if valid_567215 != nil:
    section.add "slot", valid_567215
  var valid_567216 = path.getOrDefault("name")
  valid_567216 = validateParameter(valid_567216, JString, required = true,
                                 default = nil)
  if valid_567216 != nil:
    section.add "name", valid_567216
  var valid_567217 = path.getOrDefault("subscriptionId")
  valid_567217 = validateParameter(valid_567217, JString, required = true,
                                 default = nil)
  if valid_567217 != nil:
    section.add "subscriptionId", valid_567217
  var valid_567218 = path.getOrDefault("resourceGroupName")
  valid_567218 = validateParameter(valid_567218, JString, required = true,
                                 default = nil)
  if valid_567218 != nil:
    section.add "resourceGroupName", valid_567218
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567219 = query.getOrDefault("api-version")
  valid_567219 = validateParameter(valid_567219, JString, required = true,
                                 default = nil)
  if valid_567219 != nil:
    section.add "api-version", valid_567219
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567221: Call_SitesCreateOrUpdateSiteSourceControlSlot_567212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567221.validator(path, query, header, formData, body)
  let scheme = call_567221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567221.url(scheme.get, call_567221.host, call_567221.base,
                         call_567221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567221, url, valid)

proc call*(call_567222: Call_SitesCreateOrUpdateSiteSourceControlSlot_567212;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteSourceControlSlot
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567223 = newJObject()
  var query_567224 = newJObject()
  var body_567225 = newJObject()
  if siteSourceControl != nil:
    body_567225 = siteSourceControl
  add(path_567223, "slot", newJString(slot))
  add(query_567224, "api-version", newJString(apiVersion))
  add(path_567223, "name", newJString(name))
  add(path_567223, "subscriptionId", newJString(subscriptionId))
  add(path_567223, "resourceGroupName", newJString(resourceGroupName))
  result = call_567222.call(path_567223, query_567224, nil, nil, body_567225)

var sitesCreateOrUpdateSiteSourceControlSlot* = Call_SitesCreateOrUpdateSiteSourceControlSlot_567212(
    name: "sitesCreateOrUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControlSlot_567213, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControlSlot_567214,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControlSlot_567200 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSourceControlSlot_567202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControlSlot_567201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567203 = path.getOrDefault("slot")
  valid_567203 = validateParameter(valid_567203, JString, required = true,
                                 default = nil)
  if valid_567203 != nil:
    section.add "slot", valid_567203
  var valid_567204 = path.getOrDefault("name")
  valid_567204 = validateParameter(valid_567204, JString, required = true,
                                 default = nil)
  if valid_567204 != nil:
    section.add "name", valid_567204
  var valid_567205 = path.getOrDefault("subscriptionId")
  valid_567205 = validateParameter(valid_567205, JString, required = true,
                                 default = nil)
  if valid_567205 != nil:
    section.add "subscriptionId", valid_567205
  var valid_567206 = path.getOrDefault("resourceGroupName")
  valid_567206 = validateParameter(valid_567206, JString, required = true,
                                 default = nil)
  if valid_567206 != nil:
    section.add "resourceGroupName", valid_567206
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567207 = query.getOrDefault("api-version")
  valid_567207 = validateParameter(valid_567207, JString, required = true,
                                 default = nil)
  if valid_567207 != nil:
    section.add "api-version", valid_567207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567208: Call_SitesGetSiteSourceControlSlot_567200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567208.validator(path, query, header, formData, body)
  let scheme = call_567208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567208.url(scheme.get, call_567208.host, call_567208.base,
                         call_567208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567208, url, valid)

proc call*(call_567209: Call_SitesGetSiteSourceControlSlot_567200; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteSourceControlSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567210 = newJObject()
  var query_567211 = newJObject()
  add(path_567210, "slot", newJString(slot))
  add(query_567211, "api-version", newJString(apiVersion))
  add(path_567210, "name", newJString(name))
  add(path_567210, "subscriptionId", newJString(subscriptionId))
  add(path_567210, "resourceGroupName", newJString(resourceGroupName))
  result = call_567209.call(path_567210, query_567211, nil, nil, nil)

var sitesGetSiteSourceControlSlot* = Call_SitesGetSiteSourceControlSlot_567200(
    name: "sitesGetSiteSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControlSlot_567201, base: "",
    url: url_SitesGetSiteSourceControlSlot_567202, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControlSlot_567238 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteSourceControlSlot_567240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControlSlot_567239(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567241 = path.getOrDefault("slot")
  valid_567241 = validateParameter(valid_567241, JString, required = true,
                                 default = nil)
  if valid_567241 != nil:
    section.add "slot", valid_567241
  var valid_567242 = path.getOrDefault("name")
  valid_567242 = validateParameter(valid_567242, JString, required = true,
                                 default = nil)
  if valid_567242 != nil:
    section.add "name", valid_567242
  var valid_567243 = path.getOrDefault("subscriptionId")
  valid_567243 = validateParameter(valid_567243, JString, required = true,
                                 default = nil)
  if valid_567243 != nil:
    section.add "subscriptionId", valid_567243
  var valid_567244 = path.getOrDefault("resourceGroupName")
  valid_567244 = validateParameter(valid_567244, JString, required = true,
                                 default = nil)
  if valid_567244 != nil:
    section.add "resourceGroupName", valid_567244
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567245 = query.getOrDefault("api-version")
  valid_567245 = validateParameter(valid_567245, JString, required = true,
                                 default = nil)
  if valid_567245 != nil:
    section.add "api-version", valid_567245
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567247: Call_SitesUpdateSiteSourceControlSlot_567238;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567247.validator(path, query, header, formData, body)
  let scheme = call_567247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567247.url(scheme.get, call_567247.host, call_567247.base,
                         call_567247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567247, url, valid)

proc call*(call_567248: Call_SitesUpdateSiteSourceControlSlot_567238;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteSourceControlSlot
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567249 = newJObject()
  var query_567250 = newJObject()
  var body_567251 = newJObject()
  if siteSourceControl != nil:
    body_567251 = siteSourceControl
  add(path_567249, "slot", newJString(slot))
  add(query_567250, "api-version", newJString(apiVersion))
  add(path_567249, "name", newJString(name))
  add(path_567249, "subscriptionId", newJString(subscriptionId))
  add(path_567249, "resourceGroupName", newJString(resourceGroupName))
  result = call_567248.call(path_567249, query_567250, nil, nil, body_567251)

var sitesUpdateSiteSourceControlSlot* = Call_SitesUpdateSiteSourceControlSlot_567238(
    name: "sitesUpdateSiteSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControlSlot_567239, base: "",
    url: url_SitesUpdateSiteSourceControlSlot_567240, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControlSlot_567226 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteSourceControlSlot_567228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControlSlot_567227(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567229 = path.getOrDefault("slot")
  valid_567229 = validateParameter(valid_567229, JString, required = true,
                                 default = nil)
  if valid_567229 != nil:
    section.add "slot", valid_567229
  var valid_567230 = path.getOrDefault("name")
  valid_567230 = validateParameter(valid_567230, JString, required = true,
                                 default = nil)
  if valid_567230 != nil:
    section.add "name", valid_567230
  var valid_567231 = path.getOrDefault("subscriptionId")
  valid_567231 = validateParameter(valid_567231, JString, required = true,
                                 default = nil)
  if valid_567231 != nil:
    section.add "subscriptionId", valid_567231
  var valid_567232 = path.getOrDefault("resourceGroupName")
  valid_567232 = validateParameter(valid_567232, JString, required = true,
                                 default = nil)
  if valid_567232 != nil:
    section.add "resourceGroupName", valid_567232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567233 = query.getOrDefault("api-version")
  valid_567233 = validateParameter(valid_567233, JString, required = true,
                                 default = nil)
  if valid_567233 != nil:
    section.add "api-version", valid_567233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567234: Call_SitesDeleteSiteSourceControlSlot_567226;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567234.validator(path, query, header, formData, body)
  let scheme = call_567234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567234.url(scheme.get, call_567234.host, call_567234.base,
                         call_567234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567234, url, valid)

proc call*(call_567235: Call_SitesDeleteSiteSourceControlSlot_567226; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteSiteSourceControlSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567236 = newJObject()
  var query_567237 = newJObject()
  add(path_567236, "slot", newJString(slot))
  add(query_567237, "api-version", newJString(apiVersion))
  add(path_567236, "name", newJString(name))
  add(path_567236, "subscriptionId", newJString(subscriptionId))
  add(path_567236, "resourceGroupName", newJString(resourceGroupName))
  result = call_567235.call(path_567236, query_567237, nil, nil, nil)

var sitesDeleteSiteSourceControlSlot* = Call_SitesDeleteSiteSourceControlSlot_567226(
    name: "sitesDeleteSiteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControlSlot_567227, base: "",
    url: url_SitesDeleteSiteSourceControlSlot_567228, schemes: {Scheme.Https})
type
  Call_SitesStartSiteSlot_567252 = ref object of OpenApiRestCall_563548
proc url_SitesStartSiteSlot_567254(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSiteSlot_567253(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567255 = path.getOrDefault("slot")
  valid_567255 = validateParameter(valid_567255, JString, required = true,
                                 default = nil)
  if valid_567255 != nil:
    section.add "slot", valid_567255
  var valid_567256 = path.getOrDefault("name")
  valid_567256 = validateParameter(valid_567256, JString, required = true,
                                 default = nil)
  if valid_567256 != nil:
    section.add "name", valid_567256
  var valid_567257 = path.getOrDefault("subscriptionId")
  valid_567257 = validateParameter(valid_567257, JString, required = true,
                                 default = nil)
  if valid_567257 != nil:
    section.add "subscriptionId", valid_567257
  var valid_567258 = path.getOrDefault("resourceGroupName")
  valid_567258 = validateParameter(valid_567258, JString, required = true,
                                 default = nil)
  if valid_567258 != nil:
    section.add "resourceGroupName", valid_567258
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567259 = query.getOrDefault("api-version")
  valid_567259 = validateParameter(valid_567259, JString, required = true,
                                 default = nil)
  if valid_567259 != nil:
    section.add "api-version", valid_567259
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567260: Call_SitesStartSiteSlot_567252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567260.validator(path, query, header, formData, body)
  let scheme = call_567260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567260.url(scheme.get, call_567260.host, call_567260.base,
                         call_567260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567260, url, valid)

proc call*(call_567261: Call_SitesStartSiteSlot_567252; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesStartSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567262 = newJObject()
  var query_567263 = newJObject()
  add(path_567262, "slot", newJString(slot))
  add(query_567263, "api-version", newJString(apiVersion))
  add(path_567262, "name", newJString(name))
  add(path_567262, "subscriptionId", newJString(subscriptionId))
  add(path_567262, "resourceGroupName", newJString(resourceGroupName))
  result = call_567261.call(path_567262, query_567263, nil, nil, nil)

var sitesStartSiteSlot* = Call_SitesStartSiteSlot_567252(
    name: "sitesStartSiteSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_SitesStartSiteSlot_567253, base: "",
    url: url_SitesStartSiteSlot_567254, schemes: {Scheme.Https})
type
  Call_SitesStopSiteSlot_567264 = ref object of OpenApiRestCall_563548
proc url_SitesStopSiteSlot_567266(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSiteSlot_567265(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567267 = path.getOrDefault("slot")
  valid_567267 = validateParameter(valid_567267, JString, required = true,
                                 default = nil)
  if valid_567267 != nil:
    section.add "slot", valid_567267
  var valid_567268 = path.getOrDefault("name")
  valid_567268 = validateParameter(valid_567268, JString, required = true,
                                 default = nil)
  if valid_567268 != nil:
    section.add "name", valid_567268
  var valid_567269 = path.getOrDefault("subscriptionId")
  valid_567269 = validateParameter(valid_567269, JString, required = true,
                                 default = nil)
  if valid_567269 != nil:
    section.add "subscriptionId", valid_567269
  var valid_567270 = path.getOrDefault("resourceGroupName")
  valid_567270 = validateParameter(valid_567270, JString, required = true,
                                 default = nil)
  if valid_567270 != nil:
    section.add "resourceGroupName", valid_567270
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567271 = query.getOrDefault("api-version")
  valid_567271 = validateParameter(valid_567271, JString, required = true,
                                 default = nil)
  if valid_567271 != nil:
    section.add "api-version", valid_567271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567272: Call_SitesStopSiteSlot_567264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567272.validator(path, query, header, formData, body)
  let scheme = call_567272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567272.url(scheme.get, call_567272.host, call_567272.base,
                         call_567272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567272, url, valid)

proc call*(call_567273: Call_SitesStopSiteSlot_567264; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesStopSiteSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567274 = newJObject()
  var query_567275 = newJObject()
  add(path_567274, "slot", newJString(slot))
  add(query_567275, "api-version", newJString(apiVersion))
  add(path_567274, "name", newJString(name))
  add(path_567274, "subscriptionId", newJString(subscriptionId))
  add(path_567274, "resourceGroupName", newJString(resourceGroupName))
  result = call_567273.call(path_567274, query_567275, nil, nil, nil)

var sitesStopSiteSlot* = Call_SitesStopSiteSlot_567264(name: "sitesStopSiteSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_SitesStopSiteSlot_567265, base: "",
    url: url_SitesStopSiteSlot_567266, schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepositorySlot_567276 = ref object of OpenApiRestCall_563548
proc url_SitesSyncSiteRepositorySlot_567278(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepositorySlot_567277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567279 = path.getOrDefault("slot")
  valid_567279 = validateParameter(valid_567279, JString, required = true,
                                 default = nil)
  if valid_567279 != nil:
    section.add "slot", valid_567279
  var valid_567280 = path.getOrDefault("name")
  valid_567280 = validateParameter(valid_567280, JString, required = true,
                                 default = nil)
  if valid_567280 != nil:
    section.add "name", valid_567280
  var valid_567281 = path.getOrDefault("subscriptionId")
  valid_567281 = validateParameter(valid_567281, JString, required = true,
                                 default = nil)
  if valid_567281 != nil:
    section.add "subscriptionId", valid_567281
  var valid_567282 = path.getOrDefault("resourceGroupName")
  valid_567282 = validateParameter(valid_567282, JString, required = true,
                                 default = nil)
  if valid_567282 != nil:
    section.add "resourceGroupName", valid_567282
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567283 = query.getOrDefault("api-version")
  valid_567283 = validateParameter(valid_567283, JString, required = true,
                                 default = nil)
  if valid_567283 != nil:
    section.add "api-version", valid_567283
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567284: Call_SitesSyncSiteRepositorySlot_567276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567284.validator(path, query, header, formData, body)
  let scheme = call_567284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567284.url(scheme.get, call_567284.host, call_567284.base,
                         call_567284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567284, url, valid)

proc call*(call_567285: Call_SitesSyncSiteRepositorySlot_567276; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesSyncSiteRepositorySlot
  ##   slot: string (required)
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  var path_567286 = newJObject()
  var query_567287 = newJObject()
  add(path_567286, "slot", newJString(slot))
  add(query_567287, "api-version", newJString(apiVersion))
  add(path_567286, "name", newJString(name))
  add(path_567286, "subscriptionId", newJString(subscriptionId))
  add(path_567286, "resourceGroupName", newJString(resourceGroupName))
  result = call_567285.call(path_567286, query_567287, nil, nil, nil)

var sitesSyncSiteRepositorySlot* = Call_SitesSyncSiteRepositorySlot_567276(
    name: "sitesSyncSiteRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_SitesSyncSiteRepositorySlot_567277, base: "",
    url: url_SitesSyncSiteRepositorySlot_567278, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsagesSlot_567288 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteUsagesSlot_567290(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsagesSlot_567289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567291 = path.getOrDefault("slot")
  valid_567291 = validateParameter(valid_567291, JString, required = true,
                                 default = nil)
  if valid_567291 != nil:
    section.add "slot", valid_567291
  var valid_567292 = path.getOrDefault("name")
  valid_567292 = validateParameter(valid_567292, JString, required = true,
                                 default = nil)
  if valid_567292 != nil:
    section.add "name", valid_567292
  var valid_567293 = path.getOrDefault("subscriptionId")
  valid_567293 = validateParameter(valid_567293, JString, required = true,
                                 default = nil)
  if valid_567293 != nil:
    section.add "subscriptionId", valid_567293
  var valid_567294 = path.getOrDefault("resourceGroupName")
  valid_567294 = validateParameter(valid_567294, JString, required = true,
                                 default = nil)
  if valid_567294 != nil:
    section.add "resourceGroupName", valid_567294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567295 = query.getOrDefault("api-version")
  valid_567295 = validateParameter(valid_567295, JString, required = true,
                                 default = nil)
  if valid_567295 != nil:
    section.add "api-version", valid_567295
  var valid_567296 = query.getOrDefault("$filter")
  valid_567296 = validateParameter(valid_567296, JString, required = false,
                                 default = nil)
  if valid_567296 != nil:
    section.add "$filter", valid_567296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567297: Call_SitesGetSiteUsagesSlot_567288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567297.validator(path, query, header, formData, body)
  let scheme = call_567297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567297.url(scheme.get, call_567297.host, call_567297.base,
                         call_567297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567297, url, valid)

proc call*(call_567298: Call_SitesGetSiteUsagesSlot_567288; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## sitesGetSiteUsagesSlot
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567299 = newJObject()
  var query_567300 = newJObject()
  add(path_567299, "slot", newJString(slot))
  add(query_567300, "api-version", newJString(apiVersion))
  add(path_567299, "name", newJString(name))
  add(path_567299, "subscriptionId", newJString(subscriptionId))
  add(path_567299, "resourceGroupName", newJString(resourceGroupName))
  add(query_567300, "$filter", newJString(Filter))
  result = call_567298.call(path_567299, query_567300, nil, nil, nil)

var sitesGetSiteUsagesSlot* = Call_SitesGetSiteUsagesSlot_567288(
    name: "sitesGetSiteUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_SitesGetSiteUsagesSlot_567289, base: "",
    url: url_SitesGetSiteUsagesSlot_567290, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionsSlot_567301 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVNETConnectionsSlot_567303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionsSlot_567302(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567304 = path.getOrDefault("slot")
  valid_567304 = validateParameter(valid_567304, JString, required = true,
                                 default = nil)
  if valid_567304 != nil:
    section.add "slot", valid_567304
  var valid_567305 = path.getOrDefault("name")
  valid_567305 = validateParameter(valid_567305, JString, required = true,
                                 default = nil)
  if valid_567305 != nil:
    section.add "name", valid_567305
  var valid_567306 = path.getOrDefault("subscriptionId")
  valid_567306 = validateParameter(valid_567306, JString, required = true,
                                 default = nil)
  if valid_567306 != nil:
    section.add "subscriptionId", valid_567306
  var valid_567307 = path.getOrDefault("resourceGroupName")
  valid_567307 = validateParameter(valid_567307, JString, required = true,
                                 default = nil)
  if valid_567307 != nil:
    section.add "resourceGroupName", valid_567307
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567308 = query.getOrDefault("api-version")
  valid_567308 = validateParameter(valid_567308, JString, required = true,
                                 default = nil)
  if valid_567308 != nil:
    section.add "api-version", valid_567308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567309: Call_SitesGetSiteVNETConnectionsSlot_567301;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567309.validator(path, query, header, formData, body)
  let scheme = call_567309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567309.url(scheme.get, call_567309.host, call_567309.base,
                         call_567309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567309, url, valid)

proc call*(call_567310: Call_SitesGetSiteVNETConnectionsSlot_567301; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteVNETConnectionsSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567311 = newJObject()
  var query_567312 = newJObject()
  add(path_567311, "slot", newJString(slot))
  add(query_567312, "api-version", newJString(apiVersion))
  add(path_567311, "name", newJString(name))
  add(path_567311, "subscriptionId", newJString(subscriptionId))
  add(path_567311, "resourceGroupName", newJString(resourceGroupName))
  result = call_567310.call(path_567311, query_567312, nil, nil, nil)

var sitesGetSiteVNETConnectionsSlot* = Call_SitesGetSiteVNETConnectionsSlot_567301(
    name: "sitesGetSiteVNETConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnectionsSlot_567302, base: "",
    url: url_SitesGetSiteVNETConnectionsSlot_567303, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionSlot_567326 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteVNETConnectionSlot_567328(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionSlot_567327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567329 = path.getOrDefault("slot")
  valid_567329 = validateParameter(valid_567329, JString, required = true,
                                 default = nil)
  if valid_567329 != nil:
    section.add "slot", valid_567329
  var valid_567330 = path.getOrDefault("name")
  valid_567330 = validateParameter(valid_567330, JString, required = true,
                                 default = nil)
  if valid_567330 != nil:
    section.add "name", valid_567330
  var valid_567331 = path.getOrDefault("vnetName")
  valid_567331 = validateParameter(valid_567331, JString, required = true,
                                 default = nil)
  if valid_567331 != nil:
    section.add "vnetName", valid_567331
  var valid_567332 = path.getOrDefault("subscriptionId")
  valid_567332 = validateParameter(valid_567332, JString, required = true,
                                 default = nil)
  if valid_567332 != nil:
    section.add "subscriptionId", valid_567332
  var valid_567333 = path.getOrDefault("resourceGroupName")
  valid_567333 = validateParameter(valid_567333, JString, required = true,
                                 default = nil)
  if valid_567333 != nil:
    section.add "resourceGroupName", valid_567333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567334 = query.getOrDefault("api-version")
  valid_567334 = validateParameter(valid_567334, JString, required = true,
                                 default = nil)
  if valid_567334 != nil:
    section.add "api-version", valid_567334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567336: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_567326;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567336.validator(path, query, header, formData, body)
  let scheme = call_567336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567336.url(scheme.get, call_567336.host, call_567336.base,
                         call_567336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567336, url, valid)

proc call*(call_567337: Call_SitesCreateOrUpdateSiteVNETConnectionSlot_567326;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567338 = newJObject()
  var query_567339 = newJObject()
  var body_567340 = newJObject()
  add(path_567338, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567340 = connectionEnvelope
  add(query_567339, "api-version", newJString(apiVersion))
  add(path_567338, "name", newJString(name))
  add(path_567338, "vnetName", newJString(vnetName))
  add(path_567338, "subscriptionId", newJString(subscriptionId))
  add(path_567338, "resourceGroupName", newJString(resourceGroupName))
  result = call_567337.call(path_567338, query_567339, nil, nil, body_567340)

var sitesCreateOrUpdateSiteVNETConnectionSlot* = Call_SitesCreateOrUpdateSiteVNETConnectionSlot_567326(
    name: "sitesCreateOrUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionSlot_567327,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionSlot_567328,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnectionSlot_567313 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVNETConnectionSlot_567315(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnectionSlot_567314(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567316 = path.getOrDefault("slot")
  valid_567316 = validateParameter(valid_567316, JString, required = true,
                                 default = nil)
  if valid_567316 != nil:
    section.add "slot", valid_567316
  var valid_567317 = path.getOrDefault("name")
  valid_567317 = validateParameter(valid_567317, JString, required = true,
                                 default = nil)
  if valid_567317 != nil:
    section.add "name", valid_567317
  var valid_567318 = path.getOrDefault("vnetName")
  valid_567318 = validateParameter(valid_567318, JString, required = true,
                                 default = nil)
  if valid_567318 != nil:
    section.add "vnetName", valid_567318
  var valid_567319 = path.getOrDefault("subscriptionId")
  valid_567319 = validateParameter(valid_567319, JString, required = true,
                                 default = nil)
  if valid_567319 != nil:
    section.add "subscriptionId", valid_567319
  var valid_567320 = path.getOrDefault("resourceGroupName")
  valid_567320 = validateParameter(valid_567320, JString, required = true,
                                 default = nil)
  if valid_567320 != nil:
    section.add "resourceGroupName", valid_567320
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567321 = query.getOrDefault("api-version")
  valid_567321 = validateParameter(valid_567321, JString, required = true,
                                 default = nil)
  if valid_567321 != nil:
    section.add "api-version", valid_567321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567322: Call_SitesGetSiteVNETConnectionSlot_567313; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567322.validator(path, query, header, formData, body)
  let scheme = call_567322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567322.url(scheme.get, call_567322.host, call_567322.base,
                         call_567322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567322, url, valid)

proc call*(call_567323: Call_SitesGetSiteVNETConnectionSlot_567313; slot: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteVNETConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567324 = newJObject()
  var query_567325 = newJObject()
  add(path_567324, "slot", newJString(slot))
  add(query_567325, "api-version", newJString(apiVersion))
  add(path_567324, "name", newJString(name))
  add(path_567324, "vnetName", newJString(vnetName))
  add(path_567324, "subscriptionId", newJString(subscriptionId))
  add(path_567324, "resourceGroupName", newJString(resourceGroupName))
  result = call_567323.call(path_567324, query_567325, nil, nil, nil)

var sitesGetSiteVNETConnectionSlot* = Call_SitesGetSiteVNETConnectionSlot_567313(
    name: "sitesGetSiteVNETConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnectionSlot_567314, base: "",
    url: url_SitesGetSiteVNETConnectionSlot_567315, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionSlot_567354 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteVNETConnectionSlot_567356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionSlot_567355(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567357 = path.getOrDefault("slot")
  valid_567357 = validateParameter(valid_567357, JString, required = true,
                                 default = nil)
  if valid_567357 != nil:
    section.add "slot", valid_567357
  var valid_567358 = path.getOrDefault("name")
  valid_567358 = validateParameter(valid_567358, JString, required = true,
                                 default = nil)
  if valid_567358 != nil:
    section.add "name", valid_567358
  var valid_567359 = path.getOrDefault("vnetName")
  valid_567359 = validateParameter(valid_567359, JString, required = true,
                                 default = nil)
  if valid_567359 != nil:
    section.add "vnetName", valid_567359
  var valid_567360 = path.getOrDefault("subscriptionId")
  valid_567360 = validateParameter(valid_567360, JString, required = true,
                                 default = nil)
  if valid_567360 != nil:
    section.add "subscriptionId", valid_567360
  var valid_567361 = path.getOrDefault("resourceGroupName")
  valid_567361 = validateParameter(valid_567361, JString, required = true,
                                 default = nil)
  if valid_567361 != nil:
    section.add "resourceGroupName", valid_567361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567362 = query.getOrDefault("api-version")
  valid_567362 = validateParameter(valid_567362, JString, required = true,
                                 default = nil)
  if valid_567362 != nil:
    section.add "api-version", valid_567362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567364: Call_SitesUpdateSiteVNETConnectionSlot_567354;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567364.validator(path, query, header, formData, body)
  let scheme = call_567364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567364.url(scheme.get, call_567364.host, call_567364.base,
                         call_567364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567364, url, valid)

proc call*(call_567365: Call_SitesUpdateSiteVNETConnectionSlot_567354;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteVNETConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567366 = newJObject()
  var query_567367 = newJObject()
  var body_567368 = newJObject()
  add(path_567366, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567368 = connectionEnvelope
  add(query_567367, "api-version", newJString(apiVersion))
  add(path_567366, "name", newJString(name))
  add(path_567366, "vnetName", newJString(vnetName))
  add(path_567366, "subscriptionId", newJString(subscriptionId))
  add(path_567366, "resourceGroupName", newJString(resourceGroupName))
  result = call_567365.call(path_567366, query_567367, nil, nil, body_567368)

var sitesUpdateSiteVNETConnectionSlot* = Call_SitesUpdateSiteVNETConnectionSlot_567354(
    name: "sitesUpdateSiteVNETConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnectionSlot_567355, base: "",
    url: url_SitesUpdateSiteVNETConnectionSlot_567356, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnectionSlot_567341 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteVNETConnectionSlot_567343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnectionSlot_567342(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567344 = path.getOrDefault("slot")
  valid_567344 = validateParameter(valid_567344, JString, required = true,
                                 default = nil)
  if valid_567344 != nil:
    section.add "slot", valid_567344
  var valid_567345 = path.getOrDefault("name")
  valid_567345 = validateParameter(valid_567345, JString, required = true,
                                 default = nil)
  if valid_567345 != nil:
    section.add "name", valid_567345
  var valid_567346 = path.getOrDefault("vnetName")
  valid_567346 = validateParameter(valid_567346, JString, required = true,
                                 default = nil)
  if valid_567346 != nil:
    section.add "vnetName", valid_567346
  var valid_567347 = path.getOrDefault("subscriptionId")
  valid_567347 = validateParameter(valid_567347, JString, required = true,
                                 default = nil)
  if valid_567347 != nil:
    section.add "subscriptionId", valid_567347
  var valid_567348 = path.getOrDefault("resourceGroupName")
  valid_567348 = validateParameter(valid_567348, JString, required = true,
                                 default = nil)
  if valid_567348 != nil:
    section.add "resourceGroupName", valid_567348
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567349 = query.getOrDefault("api-version")
  valid_567349 = validateParameter(valid_567349, JString, required = true,
                                 default = nil)
  if valid_567349 != nil:
    section.add "api-version", valid_567349
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567350: Call_SitesDeleteSiteVNETConnectionSlot_567341;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567350.validator(path, query, header, formData, body)
  let scheme = call_567350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567350.url(scheme.get, call_567350.host, call_567350.base,
                         call_567350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567350, url, valid)

proc call*(call_567351: Call_SitesDeleteSiteVNETConnectionSlot_567341;
          slot: string; apiVersion: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesDeleteSiteVNETConnectionSlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567352 = newJObject()
  var query_567353 = newJObject()
  add(path_567352, "slot", newJString(slot))
  add(query_567353, "api-version", newJString(apiVersion))
  add(path_567352, "name", newJString(name))
  add(path_567352, "vnetName", newJString(vnetName))
  add(path_567352, "subscriptionId", newJString(subscriptionId))
  add(path_567352, "resourceGroupName", newJString(resourceGroupName))
  result = call_567351.call(path_567352, query_567353, nil, nil, nil)

var sitesDeleteSiteVNETConnectionSlot* = Call_SitesDeleteSiteVNETConnectionSlot_567341(
    name: "sitesDeleteSiteVNETConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnectionSlot_567342, base: "",
    url: url_SitesDeleteSiteVNETConnectionSlot_567343, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567383 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567385(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567384(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567386 = path.getOrDefault("slot")
  valid_567386 = validateParameter(valid_567386, JString, required = true,
                                 default = nil)
  if valid_567386 != nil:
    section.add "slot", valid_567386
  var valid_567387 = path.getOrDefault("gatewayName")
  valid_567387 = validateParameter(valid_567387, JString, required = true,
                                 default = nil)
  if valid_567387 != nil:
    section.add "gatewayName", valid_567387
  var valid_567388 = path.getOrDefault("name")
  valid_567388 = validateParameter(valid_567388, JString, required = true,
                                 default = nil)
  if valid_567388 != nil:
    section.add "name", valid_567388
  var valid_567389 = path.getOrDefault("vnetName")
  valid_567389 = validateParameter(valid_567389, JString, required = true,
                                 default = nil)
  if valid_567389 != nil:
    section.add "vnetName", valid_567389
  var valid_567390 = path.getOrDefault("subscriptionId")
  valid_567390 = validateParameter(valid_567390, JString, required = true,
                                 default = nil)
  if valid_567390 != nil:
    section.add "subscriptionId", valid_567390
  var valid_567391 = path.getOrDefault("resourceGroupName")
  valid_567391 = validateParameter(valid_567391, JString, required = true,
                                 default = nil)
  if valid_567391 != nil:
    section.add "resourceGroupName", valid_567391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567392 = query.getOrDefault("api-version")
  valid_567392 = validateParameter(valid_567392, JString, required = true,
                                 default = nil)
  if valid_567392 != nil:
    section.add "api-version", valid_567392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567394: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567394.validator(path, query, header, formData, body)
  let scheme = call_567394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567394.url(scheme.get, call_567394.host, call_567394.base,
                         call_567394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567394, url, valid)

proc call*(call_567395: Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567383;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGatewaySlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567396 = newJObject()
  var query_567397 = newJObject()
  var body_567398 = newJObject()
  add(path_567396, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567398 = connectionEnvelope
  add(query_567397, "api-version", newJString(apiVersion))
  add(path_567396, "gatewayName", newJString(gatewayName))
  add(path_567396, "name", newJString(name))
  add(path_567396, "vnetName", newJString(vnetName))
  add(path_567396, "subscriptionId", newJString(subscriptionId))
  add(path_567396, "resourceGroupName", newJString(resourceGroupName))
  result = call_567395.call(path_567396, query_567397, nil, nil, body_567398)

var sitesCreateOrUpdateSiteVNETConnectionGatewaySlot* = Call_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567383(
    name: "sitesCreateOrUpdateSiteVNETConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567384,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGatewaySlot_567385,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGatewaySlot_567369 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVnetGatewaySlot_567371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGatewaySlot_567370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567372 = path.getOrDefault("slot")
  valid_567372 = validateParameter(valid_567372, JString, required = true,
                                 default = nil)
  if valid_567372 != nil:
    section.add "slot", valid_567372
  var valid_567373 = path.getOrDefault("gatewayName")
  valid_567373 = validateParameter(valid_567373, JString, required = true,
                                 default = nil)
  if valid_567373 != nil:
    section.add "gatewayName", valid_567373
  var valid_567374 = path.getOrDefault("name")
  valid_567374 = validateParameter(valid_567374, JString, required = true,
                                 default = nil)
  if valid_567374 != nil:
    section.add "name", valid_567374
  var valid_567375 = path.getOrDefault("vnetName")
  valid_567375 = validateParameter(valid_567375, JString, required = true,
                                 default = nil)
  if valid_567375 != nil:
    section.add "vnetName", valid_567375
  var valid_567376 = path.getOrDefault("subscriptionId")
  valid_567376 = validateParameter(valid_567376, JString, required = true,
                                 default = nil)
  if valid_567376 != nil:
    section.add "subscriptionId", valid_567376
  var valid_567377 = path.getOrDefault("resourceGroupName")
  valid_567377 = validateParameter(valid_567377, JString, required = true,
                                 default = nil)
  if valid_567377 != nil:
    section.add "resourceGroupName", valid_567377
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567378 = query.getOrDefault("api-version")
  valid_567378 = validateParameter(valid_567378, JString, required = true,
                                 default = nil)
  if valid_567378 != nil:
    section.add "api-version", valid_567378
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567379: Call_SitesGetSiteVnetGatewaySlot_567369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567379.validator(path, query, header, formData, body)
  let scheme = call_567379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567379.url(scheme.get, call_567379.host, call_567379.base,
                         call_567379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567379, url, valid)

proc call*(call_567380: Call_SitesGetSiteVnetGatewaySlot_567369; slot: string;
          apiVersion: string; gatewayName: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteVnetGatewaySlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567381 = newJObject()
  var query_567382 = newJObject()
  add(path_567381, "slot", newJString(slot))
  add(query_567382, "api-version", newJString(apiVersion))
  add(path_567381, "gatewayName", newJString(gatewayName))
  add(path_567381, "name", newJString(name))
  add(path_567381, "vnetName", newJString(vnetName))
  add(path_567381, "subscriptionId", newJString(subscriptionId))
  add(path_567381, "resourceGroupName", newJString(resourceGroupName))
  result = call_567380.call(path_567381, query_567382, nil, nil, nil)

var sitesGetSiteVnetGatewaySlot* = Call_SitesGetSiteVnetGatewaySlot_567369(
    name: "sitesGetSiteVnetGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGatewaySlot_567370, base: "",
    url: url_SitesGetSiteVnetGatewaySlot_567371, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGatewaySlot_567399 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteVNETConnectionGatewaySlot_567401(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGatewaySlot_567400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567402 = path.getOrDefault("slot")
  valid_567402 = validateParameter(valid_567402, JString, required = true,
                                 default = nil)
  if valid_567402 != nil:
    section.add "slot", valid_567402
  var valid_567403 = path.getOrDefault("gatewayName")
  valid_567403 = validateParameter(valid_567403, JString, required = true,
                                 default = nil)
  if valid_567403 != nil:
    section.add "gatewayName", valid_567403
  var valid_567404 = path.getOrDefault("name")
  valid_567404 = validateParameter(valid_567404, JString, required = true,
                                 default = nil)
  if valid_567404 != nil:
    section.add "name", valid_567404
  var valid_567405 = path.getOrDefault("vnetName")
  valid_567405 = validateParameter(valid_567405, JString, required = true,
                                 default = nil)
  if valid_567405 != nil:
    section.add "vnetName", valid_567405
  var valid_567406 = path.getOrDefault("subscriptionId")
  valid_567406 = validateParameter(valid_567406, JString, required = true,
                                 default = nil)
  if valid_567406 != nil:
    section.add "subscriptionId", valid_567406
  var valid_567407 = path.getOrDefault("resourceGroupName")
  valid_567407 = validateParameter(valid_567407, JString, required = true,
                                 default = nil)
  if valid_567407 != nil:
    section.add "resourceGroupName", valid_567407
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567408 = query.getOrDefault("api-version")
  valid_567408 = validateParameter(valid_567408, JString, required = true,
                                 default = nil)
  if valid_567408 != nil:
    section.add "api-version", valid_567408
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567410: Call_SitesUpdateSiteVNETConnectionGatewaySlot_567399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567410.validator(path, query, header, formData, body)
  let scheme = call_567410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567410.url(scheme.get, call_567410.host, call_567410.base,
                         call_567410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567410, url, valid)

proc call*(call_567411: Call_SitesUpdateSiteVNETConnectionGatewaySlot_567399;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGatewaySlot
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567412 = newJObject()
  var query_567413 = newJObject()
  var body_567414 = newJObject()
  add(path_567412, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567414 = connectionEnvelope
  add(query_567413, "api-version", newJString(apiVersion))
  add(path_567412, "gatewayName", newJString(gatewayName))
  add(path_567412, "name", newJString(name))
  add(path_567412, "vnetName", newJString(vnetName))
  add(path_567412, "subscriptionId", newJString(subscriptionId))
  add(path_567412, "resourceGroupName", newJString(resourceGroupName))
  result = call_567411.call(path_567412, query_567413, nil, nil, body_567414)

var sitesUpdateSiteVNETConnectionGatewaySlot* = Call_SitesUpdateSiteVNETConnectionGatewaySlot_567399(
    name: "sitesUpdateSiteVNETConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGatewaySlot_567400, base: "",
    url: url_SitesUpdateSiteVNETConnectionGatewaySlot_567401,
    schemes: {Scheme.Https})
type
  Call_SitesGetSlotsDifferencesFromProduction_567415 = ref object of OpenApiRestCall_563548
proc url_SitesGetSlotsDifferencesFromProduction_567417(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSlotsDifferencesFromProduction_567416(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567418 = path.getOrDefault("name")
  valid_567418 = validateParameter(valid_567418, JString, required = true,
                                 default = nil)
  if valid_567418 != nil:
    section.add "name", valid_567418
  var valid_567419 = path.getOrDefault("subscriptionId")
  valid_567419 = validateParameter(valid_567419, JString, required = true,
                                 default = nil)
  if valid_567419 != nil:
    section.add "subscriptionId", valid_567419
  var valid_567420 = path.getOrDefault("resourceGroupName")
  valid_567420 = validateParameter(valid_567420, JString, required = true,
                                 default = nil)
  if valid_567420 != nil:
    section.add "resourceGroupName", valid_567420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567421 = query.getOrDefault("api-version")
  valid_567421 = validateParameter(valid_567421, JString, required = true,
                                 default = nil)
  if valid_567421 != nil:
    section.add "api-version", valid_567421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567423: Call_SitesGetSlotsDifferencesFromProduction_567415;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567423.validator(path, query, header, formData, body)
  let scheme = call_567423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567423.url(scheme.get, call_567423.host, call_567423.base,
                         call_567423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567423, url, valid)

proc call*(call_567424: Call_SitesGetSlotsDifferencesFromProduction_567415;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesGetSlotsDifferencesFromProduction
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567425 = newJObject()
  var query_567426 = newJObject()
  var body_567427 = newJObject()
  add(query_567426, "api-version", newJString(apiVersion))
  add(path_567425, "name", newJString(name))
  add(path_567425, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567427 = slotSwapEntity
  add(path_567425, "resourceGroupName", newJString(resourceGroupName))
  result = call_567424.call(path_567425, query_567426, nil, nil, body_567427)

var sitesGetSlotsDifferencesFromProduction* = Call_SitesGetSlotsDifferencesFromProduction_567415(
    name: "sitesGetSlotsDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_SitesGetSlotsDifferencesFromProduction_567416, base: "",
    url: url_SitesGetSlotsDifferencesFromProduction_567417,
    schemes: {Scheme.Https})
type
  Call_SitesSwapSlotWithProduction_567428 = ref object of OpenApiRestCall_563548
proc url_SitesSwapSlotWithProduction_567430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSwapSlotWithProduction_567429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567431 = path.getOrDefault("name")
  valid_567431 = validateParameter(valid_567431, JString, required = true,
                                 default = nil)
  if valid_567431 != nil:
    section.add "name", valid_567431
  var valid_567432 = path.getOrDefault("subscriptionId")
  valid_567432 = validateParameter(valid_567432, JString, required = true,
                                 default = nil)
  if valid_567432 != nil:
    section.add "subscriptionId", valid_567432
  var valid_567433 = path.getOrDefault("resourceGroupName")
  valid_567433 = validateParameter(valid_567433, JString, required = true,
                                 default = nil)
  if valid_567433 != nil:
    section.add "resourceGroupName", valid_567433
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567434 = query.getOrDefault("api-version")
  valid_567434 = validateParameter(valid_567434, JString, required = true,
                                 default = nil)
  if valid_567434 != nil:
    section.add "api-version", valid_567434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567436: Call_SitesSwapSlotWithProduction_567428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567436.validator(path, query, header, formData, body)
  let scheme = call_567436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567436.url(scheme.get, call_567436.host, call_567436.base,
                         call_567436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567436, url, valid)

proc call*(call_567437: Call_SitesSwapSlotWithProduction_567428;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## sitesSwapSlotWithProduction
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   slotSwapEntity: JObject (required)
  ##                 : Request body that contains the target slot name
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567438 = newJObject()
  var query_567439 = newJObject()
  var body_567440 = newJObject()
  add(query_567439, "api-version", newJString(apiVersion))
  add(path_567438, "name", newJString(name))
  add(path_567438, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567440 = slotSwapEntity
  add(path_567438, "resourceGroupName", newJString(resourceGroupName))
  result = call_567437.call(path_567438, query_567439, nil, nil, body_567440)

var sitesSwapSlotWithProduction* = Call_SitesSwapSlotWithProduction_567428(
    name: "sitesSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_SitesSwapSlotWithProduction_567429, base: "",
    url: url_SitesSwapSlotWithProduction_567430, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSnapshots_567441 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSnapshots_567443(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSnapshots_567442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Website Name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Webspace
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567444 = path.getOrDefault("name")
  valid_567444 = validateParameter(valid_567444, JString, required = true,
                                 default = nil)
  if valid_567444 != nil:
    section.add "name", valid_567444
  var valid_567445 = path.getOrDefault("subscriptionId")
  valid_567445 = validateParameter(valid_567445, JString, required = true,
                                 default = nil)
  if valid_567445 != nil:
    section.add "subscriptionId", valid_567445
  var valid_567446 = path.getOrDefault("resourceGroupName")
  valid_567446 = validateParameter(valid_567446, JString, required = true,
                                 default = nil)
  if valid_567446 != nil:
    section.add "resourceGroupName", valid_567446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567447 = query.getOrDefault("api-version")
  valid_567447 = validateParameter(valid_567447, JString, required = true,
                                 default = nil)
  if valid_567447 != nil:
    section.add "api-version", valid_567447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567448: Call_SitesGetSiteSnapshots_567441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567448.validator(path, query, header, formData, body)
  let scheme = call_567448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567448.url(scheme.get, call_567448.host, call_567448.base,
                         call_567448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567448, url, valid)

proc call*(call_567449: Call_SitesGetSiteSnapshots_567441; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteSnapshots
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Webspace
  var path_567450 = newJObject()
  var query_567451 = newJObject()
  add(query_567451, "api-version", newJString(apiVersion))
  add(path_567450, "name", newJString(name))
  add(path_567450, "subscriptionId", newJString(subscriptionId))
  add(path_567450, "resourceGroupName", newJString(resourceGroupName))
  result = call_567449.call(path_567450, query_567451, nil, nil, nil)

var sitesGetSiteSnapshots* = Call_SitesGetSiteSnapshots_567441(
    name: "sitesGetSiteSnapshots", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_SitesGetSiteSnapshots_567442, base: "",
    url: url_SitesGetSiteSnapshots_567443, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteSourceControl_567463 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteSourceControl_567465(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteSourceControl_567464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567466 = path.getOrDefault("name")
  valid_567466 = validateParameter(valid_567466, JString, required = true,
                                 default = nil)
  if valid_567466 != nil:
    section.add "name", valid_567466
  var valid_567467 = path.getOrDefault("subscriptionId")
  valid_567467 = validateParameter(valid_567467, JString, required = true,
                                 default = nil)
  if valid_567467 != nil:
    section.add "subscriptionId", valid_567467
  var valid_567468 = path.getOrDefault("resourceGroupName")
  valid_567468 = validateParameter(valid_567468, JString, required = true,
                                 default = nil)
  if valid_567468 != nil:
    section.add "resourceGroupName", valid_567468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567469 = query.getOrDefault("api-version")
  valid_567469 = validateParameter(valid_567469, JString, required = true,
                                 default = nil)
  if valid_567469 != nil:
    section.add "api-version", valid_567469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567471: Call_SitesCreateOrUpdateSiteSourceControl_567463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567471.validator(path, query, header, formData, body)
  let scheme = call_567471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567471.url(scheme.get, call_567471.host, call_567471.base,
                         call_567471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567471, url, valid)

proc call*(call_567472: Call_SitesCreateOrUpdateSiteSourceControl_567463;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteSourceControl
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567473 = newJObject()
  var query_567474 = newJObject()
  var body_567475 = newJObject()
  if siteSourceControl != nil:
    body_567475 = siteSourceControl
  add(query_567474, "api-version", newJString(apiVersion))
  add(path_567473, "name", newJString(name))
  add(path_567473, "subscriptionId", newJString(subscriptionId))
  add(path_567473, "resourceGroupName", newJString(resourceGroupName))
  result = call_567472.call(path_567473, query_567474, nil, nil, body_567475)

var sitesCreateOrUpdateSiteSourceControl* = Call_SitesCreateOrUpdateSiteSourceControl_567463(
    name: "sitesCreateOrUpdateSiteSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesCreateOrUpdateSiteSourceControl_567464, base: "",
    url: url_SitesCreateOrUpdateSiteSourceControl_567465, schemes: {Scheme.Https})
type
  Call_SitesGetSiteSourceControl_567452 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteSourceControl_567454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteSourceControl_567453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567455 = path.getOrDefault("name")
  valid_567455 = validateParameter(valid_567455, JString, required = true,
                                 default = nil)
  if valid_567455 != nil:
    section.add "name", valid_567455
  var valid_567456 = path.getOrDefault("subscriptionId")
  valid_567456 = validateParameter(valid_567456, JString, required = true,
                                 default = nil)
  if valid_567456 != nil:
    section.add "subscriptionId", valid_567456
  var valid_567457 = path.getOrDefault("resourceGroupName")
  valid_567457 = validateParameter(valid_567457, JString, required = true,
                                 default = nil)
  if valid_567457 != nil:
    section.add "resourceGroupName", valid_567457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567458 = query.getOrDefault("api-version")
  valid_567458 = validateParameter(valid_567458, JString, required = true,
                                 default = nil)
  if valid_567458 != nil:
    section.add "api-version", valid_567458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567459: Call_SitesGetSiteSourceControl_567452; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567459.validator(path, query, header, formData, body)
  let scheme = call_567459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567459.url(scheme.get, call_567459.host, call_567459.base,
                         call_567459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567459, url, valid)

proc call*(call_567460: Call_SitesGetSiteSourceControl_567452; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesGetSiteSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567461 = newJObject()
  var query_567462 = newJObject()
  add(query_567462, "api-version", newJString(apiVersion))
  add(path_567461, "name", newJString(name))
  add(path_567461, "subscriptionId", newJString(subscriptionId))
  add(path_567461, "resourceGroupName", newJString(resourceGroupName))
  result = call_567460.call(path_567461, query_567462, nil, nil, nil)

var sitesGetSiteSourceControl* = Call_SitesGetSiteSourceControl_567452(
    name: "sitesGetSiteSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesGetSiteSourceControl_567453, base: "",
    url: url_SitesGetSiteSourceControl_567454, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteSourceControl_567487 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteSourceControl_567489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteSourceControl_567488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567490 = path.getOrDefault("name")
  valid_567490 = validateParameter(valid_567490, JString, required = true,
                                 default = nil)
  if valid_567490 != nil:
    section.add "name", valid_567490
  var valid_567491 = path.getOrDefault("subscriptionId")
  valid_567491 = validateParameter(valid_567491, JString, required = true,
                                 default = nil)
  if valid_567491 != nil:
    section.add "subscriptionId", valid_567491
  var valid_567492 = path.getOrDefault("resourceGroupName")
  valid_567492 = validateParameter(valid_567492, JString, required = true,
                                 default = nil)
  if valid_567492 != nil:
    section.add "resourceGroupName", valid_567492
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567493 = query.getOrDefault("api-version")
  valid_567493 = validateParameter(valid_567493, JString, required = true,
                                 default = nil)
  if valid_567493 != nil:
    section.add "api-version", valid_567493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567495: Call_SitesUpdateSiteSourceControl_567487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567495.validator(path, query, header, formData, body)
  let scheme = call_567495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567495.url(scheme.get, call_567495.host, call_567495.base,
                         call_567495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567495, url, valid)

proc call*(call_567496: Call_SitesUpdateSiteSourceControl_567487;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteSourceControl
  ##   siteSourceControl: JObject (required)
  ##                    : Request body that contains the source control parameters
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567497 = newJObject()
  var query_567498 = newJObject()
  var body_567499 = newJObject()
  if siteSourceControl != nil:
    body_567499 = siteSourceControl
  add(query_567498, "api-version", newJString(apiVersion))
  add(path_567497, "name", newJString(name))
  add(path_567497, "subscriptionId", newJString(subscriptionId))
  add(path_567497, "resourceGroupName", newJString(resourceGroupName))
  result = call_567496.call(path_567497, query_567498, nil, nil, body_567499)

var sitesUpdateSiteSourceControl* = Call_SitesUpdateSiteSourceControl_567487(
    name: "sitesUpdateSiteSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesUpdateSiteSourceControl_567488, base: "",
    url: url_SitesUpdateSiteSourceControl_567489, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteSourceControl_567476 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteSourceControl_567478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteSourceControl_567477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567479 = path.getOrDefault("name")
  valid_567479 = validateParameter(valid_567479, JString, required = true,
                                 default = nil)
  if valid_567479 != nil:
    section.add "name", valid_567479
  var valid_567480 = path.getOrDefault("subscriptionId")
  valid_567480 = validateParameter(valid_567480, JString, required = true,
                                 default = nil)
  if valid_567480 != nil:
    section.add "subscriptionId", valid_567480
  var valid_567481 = path.getOrDefault("resourceGroupName")
  valid_567481 = validateParameter(valid_567481, JString, required = true,
                                 default = nil)
  if valid_567481 != nil:
    section.add "resourceGroupName", valid_567481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567482 = query.getOrDefault("api-version")
  valid_567482 = validateParameter(valid_567482, JString, required = true,
                                 default = nil)
  if valid_567482 != nil:
    section.add "api-version", valid_567482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567483: Call_SitesDeleteSiteSourceControl_567476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567483.validator(path, query, header, formData, body)
  let scheme = call_567483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567483.url(scheme.get, call_567483.host, call_567483.base,
                         call_567483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567483, url, valid)

proc call*(call_567484: Call_SitesDeleteSiteSourceControl_567476;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteSiteSourceControl
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567485 = newJObject()
  var query_567486 = newJObject()
  add(query_567486, "api-version", newJString(apiVersion))
  add(path_567485, "name", newJString(name))
  add(path_567485, "subscriptionId", newJString(subscriptionId))
  add(path_567485, "resourceGroupName", newJString(resourceGroupName))
  result = call_567484.call(path_567485, query_567486, nil, nil, nil)

var sitesDeleteSiteSourceControl* = Call_SitesDeleteSiteSourceControl_567476(
    name: "sitesDeleteSiteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_SitesDeleteSiteSourceControl_567477, base: "",
    url: url_SitesDeleteSiteSourceControl_567478, schemes: {Scheme.Https})
type
  Call_SitesStartSite_567500 = ref object of OpenApiRestCall_563548
proc url_SitesStartSite_567502(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStartSite_567501(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567503 = path.getOrDefault("name")
  valid_567503 = validateParameter(valid_567503, JString, required = true,
                                 default = nil)
  if valid_567503 != nil:
    section.add "name", valid_567503
  var valid_567504 = path.getOrDefault("subscriptionId")
  valid_567504 = validateParameter(valid_567504, JString, required = true,
                                 default = nil)
  if valid_567504 != nil:
    section.add "subscriptionId", valid_567504
  var valid_567505 = path.getOrDefault("resourceGroupName")
  valid_567505 = validateParameter(valid_567505, JString, required = true,
                                 default = nil)
  if valid_567505 != nil:
    section.add "resourceGroupName", valid_567505
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567506 = query.getOrDefault("api-version")
  valid_567506 = validateParameter(valid_567506, JString, required = true,
                                 default = nil)
  if valid_567506 != nil:
    section.add "api-version", valid_567506
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567507: Call_SitesStartSite_567500; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567507.validator(path, query, header, formData, body)
  let scheme = call_567507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567507.url(scheme.get, call_567507.host, call_567507.base,
                         call_567507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567507, url, valid)

proc call*(call_567508: Call_SitesStartSite_567500; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesStartSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567509 = newJObject()
  var query_567510 = newJObject()
  add(query_567510, "api-version", newJString(apiVersion))
  add(path_567509, "name", newJString(name))
  add(path_567509, "subscriptionId", newJString(subscriptionId))
  add(path_567509, "resourceGroupName", newJString(resourceGroupName))
  result = call_567508.call(path_567509, query_567510, nil, nil, nil)

var sitesStartSite* = Call_SitesStartSite_567500(name: "sitesStartSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_SitesStartSite_567501, base: "", url: url_SitesStartSite_567502,
    schemes: {Scheme.Https})
type
  Call_SitesStopSite_567511 = ref object of OpenApiRestCall_563548
proc url_SitesStopSite_567513(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesStopSite_567512(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567514 = path.getOrDefault("name")
  valid_567514 = validateParameter(valid_567514, JString, required = true,
                                 default = nil)
  if valid_567514 != nil:
    section.add "name", valid_567514
  var valid_567515 = path.getOrDefault("subscriptionId")
  valid_567515 = validateParameter(valid_567515, JString, required = true,
                                 default = nil)
  if valid_567515 != nil:
    section.add "subscriptionId", valid_567515
  var valid_567516 = path.getOrDefault("resourceGroupName")
  valid_567516 = validateParameter(valid_567516, JString, required = true,
                                 default = nil)
  if valid_567516 != nil:
    section.add "resourceGroupName", valid_567516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567517 = query.getOrDefault("api-version")
  valid_567517 = validateParameter(valid_567517, JString, required = true,
                                 default = nil)
  if valid_567517 != nil:
    section.add "api-version", valid_567517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567518: Call_SitesStopSite_567511; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567518.validator(path, query, header, formData, body)
  let scheme = call_567518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567518.url(scheme.get, call_567518.host, call_567518.base,
                         call_567518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567518, url, valid)

proc call*(call_567519: Call_SitesStopSite_567511; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesStopSite
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  var path_567520 = newJObject()
  var query_567521 = newJObject()
  add(query_567521, "api-version", newJString(apiVersion))
  add(path_567520, "name", newJString(name))
  add(path_567520, "subscriptionId", newJString(subscriptionId))
  add(path_567520, "resourceGroupName", newJString(resourceGroupName))
  result = call_567519.call(path_567520, query_567521, nil, nil, nil)

var sitesStopSite* = Call_SitesStopSite_567511(name: "sitesStopSite",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
    validator: validate_SitesStopSite_567512, base: "", url: url_SitesStopSite_567513,
    schemes: {Scheme.Https})
type
  Call_SitesSyncSiteRepository_567522 = ref object of OpenApiRestCall_563548
proc url_SitesSyncSiteRepository_567524(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesSyncSiteRepository_567523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567525 = path.getOrDefault("name")
  valid_567525 = validateParameter(valid_567525, JString, required = true,
                                 default = nil)
  if valid_567525 != nil:
    section.add "name", valid_567525
  var valid_567526 = path.getOrDefault("subscriptionId")
  valid_567526 = validateParameter(valid_567526, JString, required = true,
                                 default = nil)
  if valid_567526 != nil:
    section.add "subscriptionId", valid_567526
  var valid_567527 = path.getOrDefault("resourceGroupName")
  valid_567527 = validateParameter(valid_567527, JString, required = true,
                                 default = nil)
  if valid_567527 != nil:
    section.add "resourceGroupName", valid_567527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567528 = query.getOrDefault("api-version")
  valid_567528 = validateParameter(valid_567528, JString, required = true,
                                 default = nil)
  if valid_567528 != nil:
    section.add "api-version", valid_567528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567529: Call_SitesSyncSiteRepository_567522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567529.validator(path, query, header, formData, body)
  let scheme = call_567529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567529.url(scheme.get, call_567529.host, call_567529.base,
                         call_567529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567529, url, valid)

proc call*(call_567530: Call_SitesSyncSiteRepository_567522; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesSyncSiteRepository
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  var path_567531 = newJObject()
  var query_567532 = newJObject()
  add(query_567532, "api-version", newJString(apiVersion))
  add(path_567531, "name", newJString(name))
  add(path_567531, "subscriptionId", newJString(subscriptionId))
  add(path_567531, "resourceGroupName", newJString(resourceGroupName))
  result = call_567530.call(path_567531, query_567532, nil, nil, nil)

var sitesSyncSiteRepository* = Call_SitesSyncSiteRepository_567522(
    name: "sitesSyncSiteRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_SitesSyncSiteRepository_567523, base: "",
    url: url_SitesSyncSiteRepository_567524, schemes: {Scheme.Https})
type
  Call_SitesGetSiteUsages_567533 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteUsages_567535(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteUsages_567534(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Name of resource group
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567536 = path.getOrDefault("name")
  valid_567536 = validateParameter(valid_567536, JString, required = true,
                                 default = nil)
  if valid_567536 != nil:
    section.add "name", valid_567536
  var valid_567537 = path.getOrDefault("subscriptionId")
  valid_567537 = validateParameter(valid_567537, JString, required = true,
                                 default = nil)
  if valid_567537 != nil:
    section.add "subscriptionId", valid_567537
  var valid_567538 = path.getOrDefault("resourceGroupName")
  valid_567538 = validateParameter(valid_567538, JString, required = true,
                                 default = nil)
  if valid_567538 != nil:
    section.add "resourceGroupName", valid_567538
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567539 = query.getOrDefault("api-version")
  valid_567539 = validateParameter(valid_567539, JString, required = true,
                                 default = nil)
  if valid_567539 != nil:
    section.add "api-version", valid_567539
  var valid_567540 = query.getOrDefault("$filter")
  valid_567540 = validateParameter(valid_567540, JString, required = false,
                                 default = nil)
  if valid_567540 != nil:
    section.add "$filter", valid_567540
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567541: Call_SitesGetSiteUsages_567533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567541.validator(path, query, header, formData, body)
  let scheme = call_567541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567541.url(scheme.get, call_567541.host, call_567541.base,
                         call_567541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567541, url, valid)

proc call*(call_567542: Call_SitesGetSiteUsages_567533; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          Filter: string = ""): Recallable =
  ## sitesGetSiteUsages
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Name of resource group
  ##   Filter: string
  ##         : Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567543 = newJObject()
  var query_567544 = newJObject()
  add(query_567544, "api-version", newJString(apiVersion))
  add(path_567543, "name", newJString(name))
  add(path_567543, "subscriptionId", newJString(subscriptionId))
  add(path_567543, "resourceGroupName", newJString(resourceGroupName))
  add(query_567544, "$filter", newJString(Filter))
  result = call_567542.call(path_567543, query_567544, nil, nil, nil)

var sitesGetSiteUsages* = Call_SitesGetSiteUsages_567533(
    name: "sitesGetSiteUsages", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_SitesGetSiteUsages_567534, base: "",
    url: url_SitesGetSiteUsages_567535, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnections_567545 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVNETConnections_567547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnections_567546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567548 = path.getOrDefault("name")
  valid_567548 = validateParameter(valid_567548, JString, required = true,
                                 default = nil)
  if valid_567548 != nil:
    section.add "name", valid_567548
  var valid_567549 = path.getOrDefault("subscriptionId")
  valid_567549 = validateParameter(valid_567549, JString, required = true,
                                 default = nil)
  if valid_567549 != nil:
    section.add "subscriptionId", valid_567549
  var valid_567550 = path.getOrDefault("resourceGroupName")
  valid_567550 = validateParameter(valid_567550, JString, required = true,
                                 default = nil)
  if valid_567550 != nil:
    section.add "resourceGroupName", valid_567550
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567551 = query.getOrDefault("api-version")
  valid_567551 = validateParameter(valid_567551, JString, required = true,
                                 default = nil)
  if valid_567551 != nil:
    section.add "api-version", valid_567551
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567552: Call_SitesGetSiteVNETConnections_567545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567552.validator(path, query, header, formData, body)
  let scheme = call_567552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567552.url(scheme.get, call_567552.host, call_567552.base,
                         call_567552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567552, url, valid)

proc call*(call_567553: Call_SitesGetSiteVNETConnections_567545;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteVNETConnections
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567554 = newJObject()
  var query_567555 = newJObject()
  add(query_567555, "api-version", newJString(apiVersion))
  add(path_567554, "name", newJString(name))
  add(path_567554, "subscriptionId", newJString(subscriptionId))
  add(path_567554, "resourceGroupName", newJString(resourceGroupName))
  result = call_567553.call(path_567554, query_567555, nil, nil, nil)

var sitesGetSiteVNETConnections* = Call_SitesGetSiteVNETConnections_567545(
    name: "sitesGetSiteVNETConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_SitesGetSiteVNETConnections_567546, base: "",
    url: url_SitesGetSiteVNETConnections_567547, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnection_567568 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteVNETConnection_567570(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnection_567569(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567571 = path.getOrDefault("name")
  valid_567571 = validateParameter(valid_567571, JString, required = true,
                                 default = nil)
  if valid_567571 != nil:
    section.add "name", valid_567571
  var valid_567572 = path.getOrDefault("vnetName")
  valid_567572 = validateParameter(valid_567572, JString, required = true,
                                 default = nil)
  if valid_567572 != nil:
    section.add "vnetName", valid_567572
  var valid_567573 = path.getOrDefault("subscriptionId")
  valid_567573 = validateParameter(valid_567573, JString, required = true,
                                 default = nil)
  if valid_567573 != nil:
    section.add "subscriptionId", valid_567573
  var valid_567574 = path.getOrDefault("resourceGroupName")
  valid_567574 = validateParameter(valid_567574, JString, required = true,
                                 default = nil)
  if valid_567574 != nil:
    section.add "resourceGroupName", valid_567574
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567575 = query.getOrDefault("api-version")
  valid_567575 = validateParameter(valid_567575, JString, required = true,
                                 default = nil)
  if valid_567575 != nil:
    section.add "api-version", valid_567575
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567577: Call_SitesCreateOrUpdateSiteVNETConnection_567568;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567577.validator(path, query, header, formData, body)
  let scheme = call_567577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567577.url(scheme.get, call_567577.host, call_567577.base,
                         call_567577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567577, url, valid)

proc call*(call_567578: Call_SitesCreateOrUpdateSiteVNETConnection_567568;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnection
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567579 = newJObject()
  var query_567580 = newJObject()
  var body_567581 = newJObject()
  if connectionEnvelope != nil:
    body_567581 = connectionEnvelope
  add(query_567580, "api-version", newJString(apiVersion))
  add(path_567579, "name", newJString(name))
  add(path_567579, "vnetName", newJString(vnetName))
  add(path_567579, "subscriptionId", newJString(subscriptionId))
  add(path_567579, "resourceGroupName", newJString(resourceGroupName))
  result = call_567578.call(path_567579, query_567580, nil, nil, body_567581)

var sitesCreateOrUpdateSiteVNETConnection* = Call_SitesCreateOrUpdateSiteVNETConnection_567568(
    name: "sitesCreateOrUpdateSiteVNETConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnection_567569, base: "",
    url: url_SitesCreateOrUpdateSiteVNETConnection_567570, schemes: {Scheme.Https})
type
  Call_SitesGetSiteVNETConnection_567556 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVNETConnection_567558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVNETConnection_567557(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567559 = path.getOrDefault("name")
  valid_567559 = validateParameter(valid_567559, JString, required = true,
                                 default = nil)
  if valid_567559 != nil:
    section.add "name", valid_567559
  var valid_567560 = path.getOrDefault("vnetName")
  valid_567560 = validateParameter(valid_567560, JString, required = true,
                                 default = nil)
  if valid_567560 != nil:
    section.add "vnetName", valid_567560
  var valid_567561 = path.getOrDefault("subscriptionId")
  valid_567561 = validateParameter(valid_567561, JString, required = true,
                                 default = nil)
  if valid_567561 != nil:
    section.add "subscriptionId", valid_567561
  var valid_567562 = path.getOrDefault("resourceGroupName")
  valid_567562 = validateParameter(valid_567562, JString, required = true,
                                 default = nil)
  if valid_567562 != nil:
    section.add "resourceGroupName", valid_567562
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567563 = query.getOrDefault("api-version")
  valid_567563 = validateParameter(valid_567563, JString, required = true,
                                 default = nil)
  if valid_567563 != nil:
    section.add "api-version", valid_567563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567564: Call_SitesGetSiteVNETConnection_567556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567564.validator(path, query, header, formData, body)
  let scheme = call_567564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567564.url(scheme.get, call_567564.host, call_567564.base,
                         call_567564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567564, url, valid)

proc call*(call_567565: Call_SitesGetSiteVNETConnection_567556; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteVNETConnection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567566 = newJObject()
  var query_567567 = newJObject()
  add(query_567567, "api-version", newJString(apiVersion))
  add(path_567566, "name", newJString(name))
  add(path_567566, "vnetName", newJString(vnetName))
  add(path_567566, "subscriptionId", newJString(subscriptionId))
  add(path_567566, "resourceGroupName", newJString(resourceGroupName))
  result = call_567565.call(path_567566, query_567567, nil, nil, nil)

var sitesGetSiteVNETConnection* = Call_SitesGetSiteVNETConnection_567556(
    name: "sitesGetSiteVNETConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesGetSiteVNETConnection_567557, base: "",
    url: url_SitesGetSiteVNETConnection_567558, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnection_567594 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteVNETConnection_567596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnection_567595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567597 = path.getOrDefault("name")
  valid_567597 = validateParameter(valid_567597, JString, required = true,
                                 default = nil)
  if valid_567597 != nil:
    section.add "name", valid_567597
  var valid_567598 = path.getOrDefault("vnetName")
  valid_567598 = validateParameter(valid_567598, JString, required = true,
                                 default = nil)
  if valid_567598 != nil:
    section.add "vnetName", valid_567598
  var valid_567599 = path.getOrDefault("subscriptionId")
  valid_567599 = validateParameter(valid_567599, JString, required = true,
                                 default = nil)
  if valid_567599 != nil:
    section.add "subscriptionId", valid_567599
  var valid_567600 = path.getOrDefault("resourceGroupName")
  valid_567600 = validateParameter(valid_567600, JString, required = true,
                                 default = nil)
  if valid_567600 != nil:
    section.add "resourceGroupName", valid_567600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567601 = query.getOrDefault("api-version")
  valid_567601 = validateParameter(valid_567601, JString, required = true,
                                 default = nil)
  if valid_567601 != nil:
    section.add "api-version", valid_567601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567603: Call_SitesUpdateSiteVNETConnection_567594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567603.validator(path, query, header, formData, body)
  let scheme = call_567603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567603.url(scheme.get, call_567603.host, call_567603.base,
                         call_567603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567603, url, valid)

proc call*(call_567604: Call_SitesUpdateSiteVNETConnection_567594;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## sitesUpdateSiteVNETConnection
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties of this Virtual Network Connection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567605 = newJObject()
  var query_567606 = newJObject()
  var body_567607 = newJObject()
  if connectionEnvelope != nil:
    body_567607 = connectionEnvelope
  add(query_567606, "api-version", newJString(apiVersion))
  add(path_567605, "name", newJString(name))
  add(path_567605, "vnetName", newJString(vnetName))
  add(path_567605, "subscriptionId", newJString(subscriptionId))
  add(path_567605, "resourceGroupName", newJString(resourceGroupName))
  result = call_567604.call(path_567605, query_567606, nil, nil, body_567607)

var sitesUpdateSiteVNETConnection* = Call_SitesUpdateSiteVNETConnection_567594(
    name: "sitesUpdateSiteVNETConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesUpdateSiteVNETConnection_567595, base: "",
    url: url_SitesUpdateSiteVNETConnection_567596, schemes: {Scheme.Https})
type
  Call_SitesDeleteSiteVNETConnection_567582 = ref object of OpenApiRestCall_563548
proc url_SitesDeleteSiteVNETConnection_567584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesDeleteSiteVNETConnection_567583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567585 = path.getOrDefault("name")
  valid_567585 = validateParameter(valid_567585, JString, required = true,
                                 default = nil)
  if valid_567585 != nil:
    section.add "name", valid_567585
  var valid_567586 = path.getOrDefault("vnetName")
  valid_567586 = validateParameter(valid_567586, JString, required = true,
                                 default = nil)
  if valid_567586 != nil:
    section.add "vnetName", valid_567586
  var valid_567587 = path.getOrDefault("subscriptionId")
  valid_567587 = validateParameter(valid_567587, JString, required = true,
                                 default = nil)
  if valid_567587 != nil:
    section.add "subscriptionId", valid_567587
  var valid_567588 = path.getOrDefault("resourceGroupName")
  valid_567588 = validateParameter(valid_567588, JString, required = true,
                                 default = nil)
  if valid_567588 != nil:
    section.add "resourceGroupName", valid_567588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567589 = query.getOrDefault("api-version")
  valid_567589 = validateParameter(valid_567589, JString, required = true,
                                 default = nil)
  if valid_567589 != nil:
    section.add "api-version", valid_567589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567590: Call_SitesDeleteSiteVNETConnection_567582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567590.validator(path, query, header, formData, body)
  let scheme = call_567590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567590.url(scheme.get, call_567590.host, call_567590.base,
                         call_567590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567590, url, valid)

proc call*(call_567591: Call_SitesDeleteSiteVNETConnection_567582;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesDeleteSiteVNETConnection
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567592 = newJObject()
  var query_567593 = newJObject()
  add(query_567593, "api-version", newJString(apiVersion))
  add(path_567592, "name", newJString(name))
  add(path_567592, "vnetName", newJString(vnetName))
  add(path_567592, "subscriptionId", newJString(subscriptionId))
  add(path_567592, "resourceGroupName", newJString(resourceGroupName))
  result = call_567591.call(path_567592, query_567593, nil, nil, nil)

var sitesDeleteSiteVNETConnection* = Call_SitesDeleteSiteVNETConnection_567582(
    name: "sitesDeleteSiteVNETConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_SitesDeleteSiteVNETConnection_567583, base: "",
    url: url_SitesDeleteSiteVNETConnection_567584, schemes: {Scheme.Https})
type
  Call_SitesCreateOrUpdateSiteVNETConnectionGateway_567621 = ref object of OpenApiRestCall_563548
proc url_SitesCreateOrUpdateSiteVNETConnectionGateway_567623(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesCreateOrUpdateSiteVNETConnectionGateway_567622(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_567624 = path.getOrDefault("gatewayName")
  valid_567624 = validateParameter(valid_567624, JString, required = true,
                                 default = nil)
  if valid_567624 != nil:
    section.add "gatewayName", valid_567624
  var valid_567625 = path.getOrDefault("name")
  valid_567625 = validateParameter(valid_567625, JString, required = true,
                                 default = nil)
  if valid_567625 != nil:
    section.add "name", valid_567625
  var valid_567626 = path.getOrDefault("vnetName")
  valid_567626 = validateParameter(valid_567626, JString, required = true,
                                 default = nil)
  if valid_567626 != nil:
    section.add "vnetName", valid_567626
  var valid_567627 = path.getOrDefault("subscriptionId")
  valid_567627 = validateParameter(valid_567627, JString, required = true,
                                 default = nil)
  if valid_567627 != nil:
    section.add "subscriptionId", valid_567627
  var valid_567628 = path.getOrDefault("resourceGroupName")
  valid_567628 = validateParameter(valid_567628, JString, required = true,
                                 default = nil)
  if valid_567628 != nil:
    section.add "resourceGroupName", valid_567628
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567629 = query.getOrDefault("api-version")
  valid_567629 = validateParameter(valid_567629, JString, required = true,
                                 default = nil)
  if valid_567629 != nil:
    section.add "api-version", valid_567629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567631: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_567621;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567631.validator(path, query, header, formData, body)
  let scheme = call_567631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567631.url(scheme.get, call_567631.host, call_567631.base,
                         call_567631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567631, url, valid)

proc call*(call_567632: Call_SitesCreateOrUpdateSiteVNETConnectionGateway_567621;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesCreateOrUpdateSiteVNETConnectionGateway
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567633 = newJObject()
  var query_567634 = newJObject()
  var body_567635 = newJObject()
  if connectionEnvelope != nil:
    body_567635 = connectionEnvelope
  add(query_567634, "api-version", newJString(apiVersion))
  add(path_567633, "gatewayName", newJString(gatewayName))
  add(path_567633, "name", newJString(name))
  add(path_567633, "vnetName", newJString(vnetName))
  add(path_567633, "subscriptionId", newJString(subscriptionId))
  add(path_567633, "resourceGroupName", newJString(resourceGroupName))
  result = call_567632.call(path_567633, query_567634, nil, nil, body_567635)

var sitesCreateOrUpdateSiteVNETConnectionGateway* = Call_SitesCreateOrUpdateSiteVNETConnectionGateway_567621(
    name: "sitesCreateOrUpdateSiteVNETConnectionGateway",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesCreateOrUpdateSiteVNETConnectionGateway_567622,
    base: "", url: url_SitesCreateOrUpdateSiteVNETConnectionGateway_567623,
    schemes: {Scheme.Https})
type
  Call_SitesGetSiteVnetGateway_567608 = ref object of OpenApiRestCall_563548
proc url_SitesGetSiteVnetGateway_567610(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesGetSiteVnetGateway_567609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_567611 = path.getOrDefault("gatewayName")
  valid_567611 = validateParameter(valid_567611, JString, required = true,
                                 default = nil)
  if valid_567611 != nil:
    section.add "gatewayName", valid_567611
  var valid_567612 = path.getOrDefault("name")
  valid_567612 = validateParameter(valid_567612, JString, required = true,
                                 default = nil)
  if valid_567612 != nil:
    section.add "name", valid_567612
  var valid_567613 = path.getOrDefault("vnetName")
  valid_567613 = validateParameter(valid_567613, JString, required = true,
                                 default = nil)
  if valid_567613 != nil:
    section.add "vnetName", valid_567613
  var valid_567614 = path.getOrDefault("subscriptionId")
  valid_567614 = validateParameter(valid_567614, JString, required = true,
                                 default = nil)
  if valid_567614 != nil:
    section.add "subscriptionId", valid_567614
  var valid_567615 = path.getOrDefault("resourceGroupName")
  valid_567615 = validateParameter(valid_567615, JString, required = true,
                                 default = nil)
  if valid_567615 != nil:
    section.add "resourceGroupName", valid_567615
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567616 = query.getOrDefault("api-version")
  valid_567616 = validateParameter(valid_567616, JString, required = true,
                                 default = nil)
  if valid_567616 != nil:
    section.add "api-version", valid_567616
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567617: Call_SitesGetSiteVnetGateway_567608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  let valid = call_567617.validator(path, query, header, formData, body)
  let scheme = call_567617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567617.url(scheme.get, call_567617.host, call_567617.base,
                         call_567617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567617, url, valid)

proc call*(call_567618: Call_SitesGetSiteVnetGateway_567608; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesGetSiteVnetGateway
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567619 = newJObject()
  var query_567620 = newJObject()
  add(query_567620, "api-version", newJString(apiVersion))
  add(path_567619, "gatewayName", newJString(gatewayName))
  add(path_567619, "name", newJString(name))
  add(path_567619, "vnetName", newJString(vnetName))
  add(path_567619, "subscriptionId", newJString(subscriptionId))
  add(path_567619, "resourceGroupName", newJString(resourceGroupName))
  result = call_567618.call(path_567619, query_567620, nil, nil, nil)

var sitesGetSiteVnetGateway* = Call_SitesGetSiteVnetGateway_567608(
    name: "sitesGetSiteVnetGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesGetSiteVnetGateway_567609, base: "",
    url: url_SitesGetSiteVnetGateway_567610, schemes: {Scheme.Https})
type
  Call_SitesUpdateSiteVNETConnectionGateway_567636 = ref object of OpenApiRestCall_563548
proc url_SitesUpdateSiteVNETConnectionGateway_567638(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SitesUpdateSiteVNETConnectionGateway_567637(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: JString (required)
  ##       : The name of the web app
  ##   vnetName: JString (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : The resource group name
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_567639 = path.getOrDefault("gatewayName")
  valid_567639 = validateParameter(valid_567639, JString, required = true,
                                 default = nil)
  if valid_567639 != nil:
    section.add "gatewayName", valid_567639
  var valid_567640 = path.getOrDefault("name")
  valid_567640 = validateParameter(valid_567640, JString, required = true,
                                 default = nil)
  if valid_567640 != nil:
    section.add "name", valid_567640
  var valid_567641 = path.getOrDefault("vnetName")
  valid_567641 = validateParameter(valid_567641, JString, required = true,
                                 default = nil)
  if valid_567641 != nil:
    section.add "vnetName", valid_567641
  var valid_567642 = path.getOrDefault("subscriptionId")
  valid_567642 = validateParameter(valid_567642, JString, required = true,
                                 default = nil)
  if valid_567642 != nil:
    section.add "subscriptionId", valid_567642
  var valid_567643 = path.getOrDefault("resourceGroupName")
  valid_567643 = validateParameter(valid_567643, JString, required = true,
                                 default = nil)
  if valid_567643 != nil:
    section.add "resourceGroupName", valid_567643
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567644 = query.getOrDefault("api-version")
  valid_567644 = validateParameter(valid_567644, JString, required = true,
                                 default = nil)
  if valid_567644 != nil:
    section.add "api-version", valid_567644
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567646: Call_SitesUpdateSiteVNETConnectionGateway_567636;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567646.validator(path, query, header, formData, body)
  let scheme = call_567646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567646.url(scheme.get, call_567646.host, call_567646.base,
                         call_567646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567646, url, valid)

proc call*(call_567647: Call_SitesUpdateSiteVNETConnectionGateway_567636;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## sitesUpdateSiteVNETConnectionGateway
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : The name of the gateway. The only gateway that exists presently is "primary"
  ##   name: string (required)
  ##       : The name of the web app
  ##   vnetName: string (required)
  ##           : The name of the Virtual Network
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : The resource group name
  var path_567648 = newJObject()
  var query_567649 = newJObject()
  var body_567650 = newJObject()
  if connectionEnvelope != nil:
    body_567650 = connectionEnvelope
  add(query_567649, "api-version", newJString(apiVersion))
  add(path_567648, "gatewayName", newJString(gatewayName))
  add(path_567648, "name", newJString(name))
  add(path_567648, "vnetName", newJString(vnetName))
  add(path_567648, "subscriptionId", newJString(subscriptionId))
  add(path_567648, "resourceGroupName", newJString(resourceGroupName))
  result = call_567647.call(path_567648, query_567649, nil, nil, body_567650)

var sitesUpdateSiteVNETConnectionGateway* = Call_SitesUpdateSiteVNETConnectionGateway_567636(
    name: "sitesUpdateSiteVNETConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_SitesUpdateSiteVNETConnectionGateway_567637, base: "",
    url: url_SitesUpdateSiteVNETConnectionGateway_567638, schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendationHistoryForSite_567651 = ref object of OpenApiRestCall_563548
proc url_RecommendationsGetRecommendationHistoryForSite_567653(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendationHistory")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendationHistoryForSite_567652(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `siteName` field"
  var valid_567654 = path.getOrDefault("siteName")
  valid_567654 = validateParameter(valid_567654, JString, required = true,
                                 default = nil)
  if valid_567654 != nil:
    section.add "siteName", valid_567654
  var valid_567655 = path.getOrDefault("subscriptionId")
  valid_567655 = validateParameter(valid_567655, JString, required = true,
                                 default = nil)
  if valid_567655 != nil:
    section.add "subscriptionId", valid_567655
  var valid_567656 = path.getOrDefault("resourceGroupName")
  valid_567656 = validateParameter(valid_567656, JString, required = true,
                                 default = nil)
  if valid_567656 != nil:
    section.add "resourceGroupName", valid_567656
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   startTime: JString
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   endTime: JString
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567657 = query.getOrDefault("api-version")
  valid_567657 = validateParameter(valid_567657, JString, required = true,
                                 default = nil)
  if valid_567657 != nil:
    section.add "api-version", valid_567657
  var valid_567658 = query.getOrDefault("startTime")
  valid_567658 = validateParameter(valid_567658, JString, required = false,
                                 default = nil)
  if valid_567658 != nil:
    section.add "startTime", valid_567658
  var valid_567659 = query.getOrDefault("endTime")
  valid_567659 = validateParameter(valid_567659, JString, required = false,
                                 default = nil)
  if valid_567659 != nil:
    section.add "endTime", valid_567659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567660: Call_RecommendationsGetRecommendationHistoryForSite_567651;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567660.validator(path, query, header, formData, body)
  let scheme = call_567660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567660.url(scheme.get, call_567660.host, call_567660.base,
                         call_567660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567660, url, valid)

proc call*(call_567661: Call_RecommendationsGetRecommendationHistoryForSite_567651;
          siteName: string; apiVersion: string; subscriptionId: string;
          resourceGroupName: string; startTime: string = ""; endTime: string = ""): Recallable =
  ## recommendationsGetRecommendationHistoryForSite
  ##   siteName: string (required)
  ##           : Site name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   startTime: string
  ##            : The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   endTime: string
  ##          : The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
  var path_567662 = newJObject()
  var query_567663 = newJObject()
  add(path_567662, "siteName", newJString(siteName))
  add(query_567663, "api-version", newJString(apiVersion))
  add(query_567663, "startTime", newJString(startTime))
  add(path_567662, "subscriptionId", newJString(subscriptionId))
  add(path_567662, "resourceGroupName", newJString(resourceGroupName))
  add(query_567663, "endTime", newJString(endTime))
  result = call_567661.call(path_567662, query_567663, nil, nil, nil)

var recommendationsGetRecommendationHistoryForSite* = Call_RecommendationsGetRecommendationHistoryForSite_567651(
    name: "recommendationsGetRecommendationHistoryForSite",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
    validator: validate_RecommendationsGetRecommendationHistoryForSite_567652,
    base: "", url: url_RecommendationsGetRecommendationHistoryForSite_567653,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRecommendedRulesForSite_567664 = ref object of OpenApiRestCall_563548
proc url_RecommendationsGetRecommendedRulesForSite_567666(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRecommendedRulesForSite_567665(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   siteName: JString (required)
  ##           : Site name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `siteName` field"
  var valid_567667 = path.getOrDefault("siteName")
  valid_567667 = validateParameter(valid_567667, JString, required = true,
                                 default = nil)
  if valid_567667 != nil:
    section.add "siteName", valid_567667
  var valid_567668 = path.getOrDefault("subscriptionId")
  valid_567668 = validateParameter(valid_567668, JString, required = true,
                                 default = nil)
  if valid_567668 != nil:
    section.add "subscriptionId", valid_567668
  var valid_567669 = path.getOrDefault("resourceGroupName")
  valid_567669 = validateParameter(valid_567669, JString, required = true,
                                 default = nil)
  if valid_567669 != nil:
    section.add "resourceGroupName", valid_567669
  result.add "path", section
  ## parameters in `query` object:
  ##   siteSku: JString
  ##          : The name of site SKU.
  ##   api-version: JString (required)
  ##              : API Version
  ##   featured: JBool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   numSlots: JInt
  ##           : The number of site slots associated to the site
  section = newJObject()
  var valid_567670 = query.getOrDefault("siteSku")
  valid_567670 = validateParameter(valid_567670, JString, required = false,
                                 default = nil)
  if valid_567670 != nil:
    section.add "siteSku", valid_567670
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567671 = query.getOrDefault("api-version")
  valid_567671 = validateParameter(valid_567671, JString, required = true,
                                 default = nil)
  if valid_567671 != nil:
    section.add "api-version", valid_567671
  var valid_567672 = query.getOrDefault("featured")
  valid_567672 = validateParameter(valid_567672, JBool, required = false, default = nil)
  if valid_567672 != nil:
    section.add "featured", valid_567672
  var valid_567673 = query.getOrDefault("numSlots")
  valid_567673 = validateParameter(valid_567673, JInt, required = false, default = nil)
  if valid_567673 != nil:
    section.add "numSlots", valid_567673
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567674: Call_RecommendationsGetRecommendedRulesForSite_567664;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567674.validator(path, query, header, formData, body)
  let scheme = call_567674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567674.url(scheme.get, call_567674.host, call_567674.base,
                         call_567674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567674, url, valid)

proc call*(call_567675: Call_RecommendationsGetRecommendedRulesForSite_567664;
          siteName: string; apiVersion: string; subscriptionId: string;
          resourceGroupName: string; siteSku: string = ""; featured: bool = false;
          numSlots: int = 0): Recallable =
  ## recommendationsGetRecommendedRulesForSite
  ##   siteSku: string
  ##          : The name of site SKU.
  ##   siteName: string (required)
  ##           : Site name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   featured: bool
  ##           : If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  ##   numSlots: int
  ##           : The number of site slots associated to the site
  var path_567676 = newJObject()
  var query_567677 = newJObject()
  add(query_567677, "siteSku", newJString(siteSku))
  add(path_567676, "siteName", newJString(siteName))
  add(query_567677, "api-version", newJString(apiVersion))
  add(path_567676, "subscriptionId", newJString(subscriptionId))
  add(query_567677, "featured", newJBool(featured))
  add(path_567676, "resourceGroupName", newJString(resourceGroupName))
  add(query_567677, "numSlots", newJInt(numSlots))
  result = call_567675.call(path_567676, query_567677, nil, nil, nil)

var recommendationsGetRecommendedRulesForSite* = Call_RecommendationsGetRecommendedRulesForSite_567664(
    name: "recommendationsGetRecommendedRulesForSite", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
    validator: validate_RecommendationsGetRecommendedRulesForSite_567665,
    base: "", url: url_RecommendationsGetRecommendedRulesForSite_567666,
    schemes: {Scheme.Https})
type
  Call_RecommendationsGetRuleDetailsBySiteName_567678 = ref object of OpenApiRestCall_563548
proc url_RecommendationsGetRuleDetailsBySiteName_567680(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "siteName" in path, "`siteName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "siteName"),
               (kind: ConstantSegment, value: "/recommendations/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecommendationsGetRuleDetailsBySiteName_567679(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   siteName: JString (required)
  ##           : Site name
  ##   name: JString (required)
  ##       : Recommendation rule name
  ##   subscriptionId: JString (required)
  ##                 : Subscription Id
  ##   resourceGroupName: JString (required)
  ##                    : Resource group name
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `siteName` field"
  var valid_567681 = path.getOrDefault("siteName")
  valid_567681 = validateParameter(valid_567681, JString, required = true,
                                 default = nil)
  if valid_567681 != nil:
    section.add "siteName", valid_567681
  var valid_567682 = path.getOrDefault("name")
  valid_567682 = validateParameter(valid_567682, JString, required = true,
                                 default = nil)
  if valid_567682 != nil:
    section.add "name", valid_567682
  var valid_567683 = path.getOrDefault("subscriptionId")
  valid_567683 = validateParameter(valid_567683, JString, required = true,
                                 default = nil)
  if valid_567683 != nil:
    section.add "subscriptionId", valid_567683
  var valid_567684 = path.getOrDefault("resourceGroupName")
  valid_567684 = validateParameter(valid_567684, JString, required = true,
                                 default = nil)
  if valid_567684 != nil:
    section.add "resourceGroupName", valid_567684
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567685 = query.getOrDefault("api-version")
  valid_567685 = validateParameter(valid_567685, JString, required = true,
                                 default = nil)
  if valid_567685 != nil:
    section.add "api-version", valid_567685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567686: Call_RecommendationsGetRuleDetailsBySiteName_567678;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  let valid = call_567686.validator(path, query, header, formData, body)
  let scheme = call_567686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567686.url(scheme.get, call_567686.host, call_567686.base,
                         call_567686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567686, url, valid)

proc call*(call_567687: Call_RecommendationsGetRuleDetailsBySiteName_567678;
          siteName: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## recommendationsGetRuleDetailsBySiteName
  ##   siteName: string (required)
  ##           : Site name
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Recommendation rule name
  ##   subscriptionId: string (required)
  ##                 : Subscription Id
  ##   resourceGroupName: string (required)
  ##                    : Resource group name
  var path_567688 = newJObject()
  var query_567689 = newJObject()
  add(path_567688, "siteName", newJString(siteName))
  add(query_567689, "api-version", newJString(apiVersion))
  add(path_567688, "name", newJString(name))
  add(path_567688, "subscriptionId", newJString(subscriptionId))
  add(path_567688, "resourceGroupName", newJString(resourceGroupName))
  result = call_567687.call(path_567688, query_567689, nil, nil, nil)

var recommendationsGetRuleDetailsBySiteName* = Call_RecommendationsGetRuleDetailsBySiteName_567678(
    name: "recommendationsGetRuleDetailsBySiteName", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
    validator: validate_RecommendationsGetRuleDetailsBySiteName_567679, base: "",
    url: url_RecommendationsGetRuleDetailsBySiteName_567680,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
