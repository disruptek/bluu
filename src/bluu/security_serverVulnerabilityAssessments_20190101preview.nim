
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: Security Center
## version: 2019-01-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## API spec for Microsoft.Security (Azure Security Center) resource provider
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563555 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563555](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563555): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "security-serverVulnerabilityAssessments"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ServerVulnerabilityAssessmentListByExtendedResource_563777 = ref object of OpenApiRestCall_563555
proc url_ServerVulnerabilityAssessmentListByExtendedResource_563779(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "resourceNamespace" in path,
        "`resourceNamespace` is a required path parameter"
  assert "resourceType" in path, "`resourceType` is a required path parameter"
  assert "resourceName" in path, "`resourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/"),
               (kind: VariableSegment, value: "resourceNamespace"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceType"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Security/serverVulnerabilityAssessments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerVulnerabilityAssessmentListByExtendedResource_563778(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets a list of server vulnerability assessment onboarding statuses on a given resource.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceType: JString (required)
  ##               : The type of the resource.
  ##   subscriptionId: JString (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: JString (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: JString (required)
  ##               : Name of the resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceType` field"
  var valid_563941 = path.getOrDefault("resourceType")
  valid_563941 = validateParameter(valid_563941, JString, required = true,
                                 default = nil)
  if valid_563941 != nil:
    section.add "resourceType", valid_563941
  var valid_563942 = path.getOrDefault("subscriptionId")
  valid_563942 = validateParameter(valid_563942, JString, required = true,
                                 default = nil)
  if valid_563942 != nil:
    section.add "subscriptionId", valid_563942
  var valid_563943 = path.getOrDefault("resourceNamespace")
  valid_563943 = validateParameter(valid_563943, JString, required = true,
                                 default = nil)
  if valid_563943 != nil:
    section.add "resourceNamespace", valid_563943
  var valid_563944 = path.getOrDefault("resourceGroupName")
  valid_563944 = validateParameter(valid_563944, JString, required = true,
                                 default = nil)
  if valid_563944 != nil:
    section.add "resourceGroupName", valid_563944
  var valid_563945 = path.getOrDefault("resourceName")
  valid_563945 = validateParameter(valid_563945, JString, required = true,
                                 default = nil)
  if valid_563945 != nil:
    section.add "resourceName", valid_563945
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API version for the operation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563946 = query.getOrDefault("api-version")
  valid_563946 = validateParameter(valid_563946, JString, required = true,
                                 default = nil)
  if valid_563946 != nil:
    section.add "api-version", valid_563946
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_563973: Call_ServerVulnerabilityAssessmentListByExtendedResource_563777;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of server vulnerability assessment onboarding statuses on a given resource.
  ## 
  let valid = call_563973.validator(path, query, header, formData, body)
  let scheme = call_563973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_563973.url(scheme.get, call_563973.host, call_563973.base,
                         call_563973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_563973, url, valid)

proc call*(call_564044: Call_ServerVulnerabilityAssessmentListByExtendedResource_563777;
          apiVersion: string; resourceType: string; subscriptionId: string;
          resourceNamespace: string; resourceGroupName: string; resourceName: string): Recallable =
  ## serverVulnerabilityAssessmentListByExtendedResource
  ## Gets a list of server vulnerability assessment onboarding statuses on a given resource.
  ##   apiVersion: string (required)
  ##             : API version for the operation
  ##   resourceType: string (required)
  ##               : The type of the resource.
  ##   subscriptionId: string (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: string (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: string (required)
  ##               : Name of the resource.
  var path_564045 = newJObject()
  var query_564047 = newJObject()
  add(query_564047, "api-version", newJString(apiVersion))
  add(path_564045, "resourceType", newJString(resourceType))
  add(path_564045, "subscriptionId", newJString(subscriptionId))
  add(path_564045, "resourceNamespace", newJString(resourceNamespace))
  add(path_564045, "resourceGroupName", newJString(resourceGroupName))
  add(path_564045, "resourceName", newJString(resourceName))
  result = call_564044.call(path_564045, query_564047, nil, nil, nil)

var serverVulnerabilityAssessmentListByExtendedResource* = Call_ServerVulnerabilityAssessmentListByExtendedResource_563777(
    name: "serverVulnerabilityAssessmentListByExtendedResource",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments",
    validator: validate_ServerVulnerabilityAssessmentListByExtendedResource_563778,
    base: "", url: url_ServerVulnerabilityAssessmentListByExtendedResource_563779,
    schemes: {Scheme.Https})
type
  Call_ServerVulnerabilityAssessmentCreateOrUpdate_564113 = ref object of OpenApiRestCall_563555
proc url_ServerVulnerabilityAssessmentCreateOrUpdate_564115(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "resourceNamespace" in path,
        "`resourceNamespace` is a required path parameter"
  assert "resourceType" in path, "`resourceType` is a required path parameter"
  assert "resourceName" in path, "`resourceName` is a required path parameter"
  assert "serverVulnerabilityAssessment" in path,
        "`serverVulnerabilityAssessment` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/"),
               (kind: VariableSegment, value: "resourceNamespace"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceType"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Security/serverVulnerabilityAssessments/"),
               (kind: VariableSegment, value: "serverVulnerabilityAssessment")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerVulnerabilityAssessmentCreateOrUpdate_564114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creating a server vulnerability assessment on a resource, which will onboard a resource for having a vulnerability assessment on it
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverVulnerabilityAssessment: JString (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   resourceType: JString (required)
  ##               : The type of the resource.
  ##   subscriptionId: JString (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: JString (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: JString (required)
  ##               : Name of the resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serverVulnerabilityAssessment` field"
  var valid_564116 = path.getOrDefault("serverVulnerabilityAssessment")
  valid_564116 = validateParameter(valid_564116, JString, required = true,
                                 default = newJString("default"))
  if valid_564116 != nil:
    section.add "serverVulnerabilityAssessment", valid_564116
  var valid_564117 = path.getOrDefault("resourceType")
  valid_564117 = validateParameter(valid_564117, JString, required = true,
                                 default = nil)
  if valid_564117 != nil:
    section.add "resourceType", valid_564117
  var valid_564118 = path.getOrDefault("subscriptionId")
  valid_564118 = validateParameter(valid_564118, JString, required = true,
                                 default = nil)
  if valid_564118 != nil:
    section.add "subscriptionId", valid_564118
  var valid_564119 = path.getOrDefault("resourceNamespace")
  valid_564119 = validateParameter(valid_564119, JString, required = true,
                                 default = nil)
  if valid_564119 != nil:
    section.add "resourceNamespace", valid_564119
  var valid_564120 = path.getOrDefault("resourceGroupName")
  valid_564120 = validateParameter(valid_564120, JString, required = true,
                                 default = nil)
  if valid_564120 != nil:
    section.add "resourceGroupName", valid_564120
  var valid_564121 = path.getOrDefault("resourceName")
  valid_564121 = validateParameter(valid_564121, JString, required = true,
                                 default = nil)
  if valid_564121 != nil:
    section.add "resourceName", valid_564121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API version for the operation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564122 = query.getOrDefault("api-version")
  valid_564122 = validateParameter(valid_564122, JString, required = true,
                                 default = nil)
  if valid_564122 != nil:
    section.add "api-version", valid_564122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564123: Call_ServerVulnerabilityAssessmentCreateOrUpdate_564113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creating a server vulnerability assessment on a resource, which will onboard a resource for having a vulnerability assessment on it
  ## 
  let valid = call_564123.validator(path, query, header, formData, body)
  let scheme = call_564123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564123.url(scheme.get, call_564123.host, call_564123.base,
                         call_564123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564123, url, valid)

proc call*(call_564124: Call_ServerVulnerabilityAssessmentCreateOrUpdate_564113;
          apiVersion: string; resourceType: string; subscriptionId: string;
          resourceNamespace: string; resourceGroupName: string;
          resourceName: string; serverVulnerabilityAssessment: string = "default"): Recallable =
  ## serverVulnerabilityAssessmentCreateOrUpdate
  ## Creating a server vulnerability assessment on a resource, which will onboard a resource for having a vulnerability assessment on it
  ##   serverVulnerabilityAssessment: string (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   apiVersion: string (required)
  ##             : API version for the operation
  ##   resourceType: string (required)
  ##               : The type of the resource.
  ##   subscriptionId: string (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: string (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: string (required)
  ##               : Name of the resource.
  var path_564125 = newJObject()
  var query_564126 = newJObject()
  add(path_564125, "serverVulnerabilityAssessment",
      newJString(serverVulnerabilityAssessment))
  add(query_564126, "api-version", newJString(apiVersion))
  add(path_564125, "resourceType", newJString(resourceType))
  add(path_564125, "subscriptionId", newJString(subscriptionId))
  add(path_564125, "resourceNamespace", newJString(resourceNamespace))
  add(path_564125, "resourceGroupName", newJString(resourceGroupName))
  add(path_564125, "resourceName", newJString(resourceName))
  result = call_564124.call(path_564125, query_564126, nil, nil, nil)

var serverVulnerabilityAssessmentCreateOrUpdate* = Call_ServerVulnerabilityAssessmentCreateOrUpdate_564113(
    name: "serverVulnerabilityAssessmentCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}",
    validator: validate_ServerVulnerabilityAssessmentCreateOrUpdate_564114,
    base: "", url: url_ServerVulnerabilityAssessmentCreateOrUpdate_564115,
    schemes: {Scheme.Https})
type
  Call_ServerVulnerabilityAssessmentGet_564086 = ref object of OpenApiRestCall_563555
proc url_ServerVulnerabilityAssessmentGet_564088(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "resourceNamespace" in path,
        "`resourceNamespace` is a required path parameter"
  assert "resourceType" in path, "`resourceType` is a required path parameter"
  assert "resourceName" in path, "`resourceName` is a required path parameter"
  assert "serverVulnerabilityAssessment" in path,
        "`serverVulnerabilityAssessment` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/"),
               (kind: VariableSegment, value: "resourceNamespace"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceType"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Security/serverVulnerabilityAssessments/"),
               (kind: VariableSegment, value: "serverVulnerabilityAssessment")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerVulnerabilityAssessmentGet_564087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a server vulnerability assessment onboarding statuses on a given resource.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverVulnerabilityAssessment: JString (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   resourceType: JString (required)
  ##               : The type of the resource.
  ##   subscriptionId: JString (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: JString (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: JString (required)
  ##               : Name of the resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serverVulnerabilityAssessment` field"
  var valid_564102 = path.getOrDefault("serverVulnerabilityAssessment")
  valid_564102 = validateParameter(valid_564102, JString, required = true,
                                 default = newJString("default"))
  if valid_564102 != nil:
    section.add "serverVulnerabilityAssessment", valid_564102
  var valid_564103 = path.getOrDefault("resourceType")
  valid_564103 = validateParameter(valid_564103, JString, required = true,
                                 default = nil)
  if valid_564103 != nil:
    section.add "resourceType", valid_564103
  var valid_564104 = path.getOrDefault("subscriptionId")
  valid_564104 = validateParameter(valid_564104, JString, required = true,
                                 default = nil)
  if valid_564104 != nil:
    section.add "subscriptionId", valid_564104
  var valid_564105 = path.getOrDefault("resourceNamespace")
  valid_564105 = validateParameter(valid_564105, JString, required = true,
                                 default = nil)
  if valid_564105 != nil:
    section.add "resourceNamespace", valid_564105
  var valid_564106 = path.getOrDefault("resourceGroupName")
  valid_564106 = validateParameter(valid_564106, JString, required = true,
                                 default = nil)
  if valid_564106 != nil:
    section.add "resourceGroupName", valid_564106
  var valid_564107 = path.getOrDefault("resourceName")
  valid_564107 = validateParameter(valid_564107, JString, required = true,
                                 default = nil)
  if valid_564107 != nil:
    section.add "resourceName", valid_564107
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API version for the operation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564108 = query.getOrDefault("api-version")
  valid_564108 = validateParameter(valid_564108, JString, required = true,
                                 default = nil)
  if valid_564108 != nil:
    section.add "api-version", valid_564108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564109: Call_ServerVulnerabilityAssessmentGet_564086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a server vulnerability assessment onboarding statuses on a given resource.
  ## 
  let valid = call_564109.validator(path, query, header, formData, body)
  let scheme = call_564109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564109.url(scheme.get, call_564109.host, call_564109.base,
                         call_564109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564109, url, valid)

proc call*(call_564110: Call_ServerVulnerabilityAssessmentGet_564086;
          apiVersion: string; resourceType: string; subscriptionId: string;
          resourceNamespace: string; resourceGroupName: string;
          resourceName: string; serverVulnerabilityAssessment: string = "default"): Recallable =
  ## serverVulnerabilityAssessmentGet
  ## Gets a server vulnerability assessment onboarding statuses on a given resource.
  ##   serverVulnerabilityAssessment: string (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   apiVersion: string (required)
  ##             : API version for the operation
  ##   resourceType: string (required)
  ##               : The type of the resource.
  ##   subscriptionId: string (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: string (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: string (required)
  ##               : Name of the resource.
  var path_564111 = newJObject()
  var query_564112 = newJObject()
  add(path_564111, "serverVulnerabilityAssessment",
      newJString(serverVulnerabilityAssessment))
  add(query_564112, "api-version", newJString(apiVersion))
  add(path_564111, "resourceType", newJString(resourceType))
  add(path_564111, "subscriptionId", newJString(subscriptionId))
  add(path_564111, "resourceNamespace", newJString(resourceNamespace))
  add(path_564111, "resourceGroupName", newJString(resourceGroupName))
  add(path_564111, "resourceName", newJString(resourceName))
  result = call_564110.call(path_564111, query_564112, nil, nil, nil)

var serverVulnerabilityAssessmentGet* = Call_ServerVulnerabilityAssessmentGet_564086(
    name: "serverVulnerabilityAssessmentGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}",
    validator: validate_ServerVulnerabilityAssessmentGet_564087, base: "",
    url: url_ServerVulnerabilityAssessmentGet_564088, schemes: {Scheme.Https})
type
  Call_ServerVulnerabilityAssessmentDelete_564127 = ref object of OpenApiRestCall_563555
proc url_ServerVulnerabilityAssessmentDelete_564129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "resourceNamespace" in path,
        "`resourceNamespace` is a required path parameter"
  assert "resourceType" in path, "`resourceType` is a required path parameter"
  assert "resourceName" in path, "`resourceName` is a required path parameter"
  assert "serverVulnerabilityAssessment" in path,
        "`serverVulnerabilityAssessment` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/"),
               (kind: VariableSegment, value: "resourceNamespace"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceType"),
               (kind: ConstantSegment, value: "/"),
               (kind: VariableSegment, value: "resourceName"), (
        kind: ConstantSegment,
        value: "/providers/Microsoft.Security/serverVulnerabilityAssessments/"),
               (kind: VariableSegment, value: "serverVulnerabilityAssessment")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ServerVulnerabilityAssessmentDelete_564128(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removing server vulnerability assessment from a resource.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverVulnerabilityAssessment: JString (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   resourceType: JString (required)
  ##               : The type of the resource.
  ##   subscriptionId: JString (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: JString (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: JString (required)
  ##               : Name of the resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serverVulnerabilityAssessment` field"
  var valid_564130 = path.getOrDefault("serverVulnerabilityAssessment")
  valid_564130 = validateParameter(valid_564130, JString, required = true,
                                 default = newJString("default"))
  if valid_564130 != nil:
    section.add "serverVulnerabilityAssessment", valid_564130
  var valid_564131 = path.getOrDefault("resourceType")
  valid_564131 = validateParameter(valid_564131, JString, required = true,
                                 default = nil)
  if valid_564131 != nil:
    section.add "resourceType", valid_564131
  var valid_564132 = path.getOrDefault("subscriptionId")
  valid_564132 = validateParameter(valid_564132, JString, required = true,
                                 default = nil)
  if valid_564132 != nil:
    section.add "subscriptionId", valid_564132
  var valid_564133 = path.getOrDefault("resourceNamespace")
  valid_564133 = validateParameter(valid_564133, JString, required = true,
                                 default = nil)
  if valid_564133 != nil:
    section.add "resourceNamespace", valid_564133
  var valid_564134 = path.getOrDefault("resourceGroupName")
  valid_564134 = validateParameter(valid_564134, JString, required = true,
                                 default = nil)
  if valid_564134 != nil:
    section.add "resourceGroupName", valid_564134
  var valid_564135 = path.getOrDefault("resourceName")
  valid_564135 = validateParameter(valid_564135, JString, required = true,
                                 default = nil)
  if valid_564135 != nil:
    section.add "resourceName", valid_564135
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API version for the operation
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564136 = query.getOrDefault("api-version")
  valid_564136 = validateParameter(valid_564136, JString, required = true,
                                 default = nil)
  if valid_564136 != nil:
    section.add "api-version", valid_564136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564137: Call_ServerVulnerabilityAssessmentDelete_564127;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removing server vulnerability assessment from a resource.
  ## 
  let valid = call_564137.validator(path, query, header, formData, body)
  let scheme = call_564137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564137.url(scheme.get, call_564137.host, call_564137.base,
                         call_564137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564137, url, valid)

proc call*(call_564138: Call_ServerVulnerabilityAssessmentDelete_564127;
          apiVersion: string; resourceType: string; subscriptionId: string;
          resourceNamespace: string; resourceGroupName: string;
          resourceName: string; serverVulnerabilityAssessment: string = "default"): Recallable =
  ## serverVulnerabilityAssessmentDelete
  ## Removing server vulnerability assessment from a resource.
  ##   serverVulnerabilityAssessment: string (required)
  ##                                : ServerVulnerabilityAssessment status. only a 'default' value is supported.
  ##   apiVersion: string (required)
  ##             : API version for the operation
  ##   resourceType: string (required)
  ##               : The type of the resource.
  ##   subscriptionId: string (required)
  ##                 : Azure subscription ID
  ##   resourceNamespace: string (required)
  ##                    : The Namespace of the resource.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the user's subscription. The name is case insensitive.
  ##   resourceName: string (required)
  ##               : Name of the resource.
  var path_564139 = newJObject()
  var query_564140 = newJObject()
  add(path_564139, "serverVulnerabilityAssessment",
      newJString(serverVulnerabilityAssessment))
  add(query_564140, "api-version", newJString(apiVersion))
  add(path_564139, "resourceType", newJString(resourceType))
  add(path_564139, "subscriptionId", newJString(subscriptionId))
  add(path_564139, "resourceNamespace", newJString(resourceNamespace))
  add(path_564139, "resourceGroupName", newJString(resourceGroupName))
  add(path_564139, "resourceName", newJString(resourceName))
  result = call_564138.call(path_564139, query_564140, nil, nil, nil)

var serverVulnerabilityAssessmentDelete* = Call_ServerVulnerabilityAssessmentDelete_564127(
    name: "serverVulnerabilityAssessmentDelete", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}",
    validator: validate_ServerVulnerabilityAssessmentDelete_564128, base: "",
    url: url_ServerVulnerabilityAssessmentDelete_564129, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
