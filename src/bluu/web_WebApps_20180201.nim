
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2018-02-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563564 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563564](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563564): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_563786 = ref object of OpenApiRestCall_563564
proc url_WebAppsList_563788(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_563787(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_563963 = path.getOrDefault("subscriptionId")
  valid_563963 = validateParameter(valid_563963, JString, required = true,
                                 default = nil)
  if valid_563963 != nil:
    section.add "subscriptionId", valid_563963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563964 = query.getOrDefault("api-version")
  valid_563964 = validateParameter(valid_563964, JString, required = true,
                                 default = nil)
  if valid_563964 != nil:
    section.add "api-version", valid_563964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_563987: Call_WebAppsList_563786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_563987.validator(path, query, header, formData, body)
  let scheme = call_563987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_563987.url(scheme.get, call_563987.host, call_563987.base,
                         call_563987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_563987, url, valid)

proc call*(call_564058: Call_WebAppsList_563786; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_564059 = newJObject()
  var query_564061 = newJObject()
  add(query_564061, "api-version", newJString(apiVersion))
  add(path_564059, "subscriptionId", newJString(subscriptionId))
  result = call_564058.call(path_564059, query_564061, nil, nil, nil)

var webAppsList* = Call_WebAppsList_563786(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_563787,
                                        base: "", url: url_WebAppsList_563788,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_564100 = ref object of OpenApiRestCall_563564
proc url_WebAppsListByResourceGroup_564102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_564101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564103 = path.getOrDefault("subscriptionId")
  valid_564103 = validateParameter(valid_564103, JString, required = true,
                                 default = nil)
  if valid_564103 != nil:
    section.add "subscriptionId", valid_564103
  var valid_564104 = path.getOrDefault("resourceGroupName")
  valid_564104 = validateParameter(valid_564104, JString, required = true,
                                 default = nil)
  if valid_564104 != nil:
    section.add "resourceGroupName", valid_564104
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564105 = query.getOrDefault("api-version")
  valid_564105 = validateParameter(valid_564105, JString, required = true,
                                 default = nil)
  if valid_564105 != nil:
    section.add "api-version", valid_564105
  var valid_564106 = query.getOrDefault("includeSlots")
  valid_564106 = validateParameter(valid_564106, JBool, required = false, default = nil)
  if valid_564106 != nil:
    section.add "includeSlots", valid_564106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564107: Call_WebAppsListByResourceGroup_564100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_564107.validator(path, query, header, formData, body)
  let scheme = call_564107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564107.url(scheme.get, call_564107.host, call_564107.base,
                         call_564107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564107, url, valid)

proc call*(call_564108: Call_WebAppsListByResourceGroup_564100; apiVersion: string;
          subscriptionId: string; resourceGroupName: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564109 = newJObject()
  var query_564110 = newJObject()
  add(query_564110, "api-version", newJString(apiVersion))
  add(query_564110, "includeSlots", newJBool(includeSlots))
  add(path_564109, "subscriptionId", newJString(subscriptionId))
  add(path_564109, "resourceGroupName", newJString(resourceGroupName))
  result = call_564108.call(path_564109, query_564110, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_564100(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_564101, base: "",
    url: url_WebAppsListByResourceGroup_564102, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_564122 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdate_564124(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_564123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564125 = path.getOrDefault("name")
  valid_564125 = validateParameter(valid_564125, JString, required = true,
                                 default = nil)
  if valid_564125 != nil:
    section.add "name", valid_564125
  var valid_564126 = path.getOrDefault("subscriptionId")
  valid_564126 = validateParameter(valid_564126, JString, required = true,
                                 default = nil)
  if valid_564126 != nil:
    section.add "subscriptionId", valid_564126
  var valid_564127 = path.getOrDefault("resourceGroupName")
  valid_564127 = validateParameter(valid_564127, JString, required = true,
                                 default = nil)
  if valid_564127 != nil:
    section.add "resourceGroupName", valid_564127
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564128 = query.getOrDefault("api-version")
  valid_564128 = validateParameter(valid_564128, JString, required = true,
                                 default = nil)
  if valid_564128 != nil:
    section.add "api-version", valid_564128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564130: Call_WebAppsCreateOrUpdate_564122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_564130.validator(path, query, header, formData, body)
  let scheme = call_564130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564130.url(scheme.get, call_564130.host, call_564130.base,
                         call_564130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564130, url, valid)

proc call*(call_564131: Call_WebAppsCreateOrUpdate_564122; apiVersion: string;
          siteEnvelope: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564132 = newJObject()
  var query_564133 = newJObject()
  var body_564134 = newJObject()
  add(query_564133, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_564134 = siteEnvelope
  add(path_564132, "name", newJString(name))
  add(path_564132, "subscriptionId", newJString(subscriptionId))
  add(path_564132, "resourceGroupName", newJString(resourceGroupName))
  result = call_564131.call(path_564132, query_564133, nil, nil, body_564134)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_564122(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_564123, base: "",
    url: url_WebAppsCreateOrUpdate_564124, schemes: {Scheme.Https})
type
  Call_WebAppsGet_564111 = ref object of OpenApiRestCall_563564
proc url_WebAppsGet_564113(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_564112(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564114 = path.getOrDefault("name")
  valid_564114 = validateParameter(valid_564114, JString, required = true,
                                 default = nil)
  if valid_564114 != nil:
    section.add "name", valid_564114
  var valid_564115 = path.getOrDefault("subscriptionId")
  valid_564115 = validateParameter(valid_564115, JString, required = true,
                                 default = nil)
  if valid_564115 != nil:
    section.add "subscriptionId", valid_564115
  var valid_564116 = path.getOrDefault("resourceGroupName")
  valid_564116 = validateParameter(valid_564116, JString, required = true,
                                 default = nil)
  if valid_564116 != nil:
    section.add "resourceGroupName", valid_564116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564117 = query.getOrDefault("api-version")
  valid_564117 = validateParameter(valid_564117, JString, required = true,
                                 default = nil)
  if valid_564117 != nil:
    section.add "api-version", valid_564117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564118: Call_WebAppsGet_564111; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_564118.validator(path, query, header, formData, body)
  let scheme = call_564118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564118.url(scheme.get, call_564118.host, call_564118.base,
                         call_564118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564118, url, valid)

proc call*(call_564119: Call_WebAppsGet_564111; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564120 = newJObject()
  var query_564121 = newJObject()
  add(query_564121, "api-version", newJString(apiVersion))
  add(path_564120, "name", newJString(name))
  add(path_564120, "subscriptionId", newJString(subscriptionId))
  add(path_564120, "resourceGroupName", newJString(resourceGroupName))
  result = call_564119.call(path_564120, query_564121, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_564111(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_564112,
                                      base: "", url: url_WebAppsGet_564113,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_564148 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdate_564150(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_564149(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564151 = path.getOrDefault("name")
  valid_564151 = validateParameter(valid_564151, JString, required = true,
                                 default = nil)
  if valid_564151 != nil:
    section.add "name", valid_564151
  var valid_564152 = path.getOrDefault("subscriptionId")
  valid_564152 = validateParameter(valid_564152, JString, required = true,
                                 default = nil)
  if valid_564152 != nil:
    section.add "subscriptionId", valid_564152
  var valid_564153 = path.getOrDefault("resourceGroupName")
  valid_564153 = validateParameter(valid_564153, JString, required = true,
                                 default = nil)
  if valid_564153 != nil:
    section.add "resourceGroupName", valid_564153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564154 = query.getOrDefault("api-version")
  valid_564154 = validateParameter(valid_564154, JString, required = true,
                                 default = nil)
  if valid_564154 != nil:
    section.add "api-version", valid_564154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564156: Call_WebAppsUpdate_564148; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_564156.validator(path, query, header, formData, body)
  let scheme = call_564156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564156.url(scheme.get, call_564156.host, call_564156.base,
                         call_564156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564156, url, valid)

proc call*(call_564157: Call_WebAppsUpdate_564148; apiVersion: string;
          siteEnvelope: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564158 = newJObject()
  var query_564159 = newJObject()
  var body_564160 = newJObject()
  add(query_564159, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_564160 = siteEnvelope
  add(path_564158, "name", newJString(name))
  add(path_564158, "subscriptionId", newJString(subscriptionId))
  add(path_564158, "resourceGroupName", newJString(resourceGroupName))
  result = call_564157.call(path_564158, query_564159, nil, nil, body_564160)

var webAppsUpdate* = Call_WebAppsUpdate_564148(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_564149, base: "", url: url_WebAppsUpdate_564150,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_564135 = ref object of OpenApiRestCall_563564
proc url_WebAppsDelete_564137(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_564136(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564138 = path.getOrDefault("name")
  valid_564138 = validateParameter(valid_564138, JString, required = true,
                                 default = nil)
  if valid_564138 != nil:
    section.add "name", valid_564138
  var valid_564139 = path.getOrDefault("subscriptionId")
  valid_564139 = validateParameter(valid_564139, JString, required = true,
                                 default = nil)
  if valid_564139 != nil:
    section.add "subscriptionId", valid_564139
  var valid_564140 = path.getOrDefault("resourceGroupName")
  valid_564140 = validateParameter(valid_564140, JString, required = true,
                                 default = nil)
  if valid_564140 != nil:
    section.add "resourceGroupName", valid_564140
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564141 = query.getOrDefault("api-version")
  valid_564141 = validateParameter(valid_564141, JString, required = true,
                                 default = nil)
  if valid_564141 != nil:
    section.add "api-version", valid_564141
  var valid_564142 = query.getOrDefault("deleteEmptyServerFarm")
  valid_564142 = validateParameter(valid_564142, JBool, required = false, default = nil)
  if valid_564142 != nil:
    section.add "deleteEmptyServerFarm", valid_564142
  var valid_564143 = query.getOrDefault("deleteMetrics")
  valid_564143 = validateParameter(valid_564143, JBool, required = false, default = nil)
  if valid_564143 != nil:
    section.add "deleteMetrics", valid_564143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564144: Call_WebAppsDelete_564135; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_564144.validator(path, query, header, formData, body)
  let scheme = call_564144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564144.url(scheme.get, call_564144.host, call_564144.base,
                         call_564144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564144, url, valid)

proc call*(call_564145: Call_WebAppsDelete_564135; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          deleteEmptyServerFarm: bool = false; deleteMetrics: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564146 = newJObject()
  var query_564147 = newJObject()
  add(query_564147, "api-version", newJString(apiVersion))
  add(query_564147, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  add(path_564146, "name", newJString(name))
  add(path_564146, "subscriptionId", newJString(subscriptionId))
  add(query_564147, "deleteMetrics", newJBool(deleteMetrics))
  add(path_564146, "resourceGroupName", newJString(resourceGroupName))
  result = call_564145.call(path_564146, query_564147, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_564135(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_564136, base: "", url: url_WebAppsDelete_564137,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_564161 = ref object of OpenApiRestCall_563564
proc url_WebAppsAnalyzeCustomHostname_564163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_564162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564164 = path.getOrDefault("name")
  valid_564164 = validateParameter(valid_564164, JString, required = true,
                                 default = nil)
  if valid_564164 != nil:
    section.add "name", valid_564164
  var valid_564165 = path.getOrDefault("subscriptionId")
  valid_564165 = validateParameter(valid_564165, JString, required = true,
                                 default = nil)
  if valid_564165 != nil:
    section.add "subscriptionId", valid_564165
  var valid_564166 = path.getOrDefault("resourceGroupName")
  valid_564166 = validateParameter(valid_564166, JString, required = true,
                                 default = nil)
  if valid_564166 != nil:
    section.add "resourceGroupName", valid_564166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564167 = query.getOrDefault("api-version")
  valid_564167 = validateParameter(valid_564167, JString, required = true,
                                 default = nil)
  if valid_564167 != nil:
    section.add "api-version", valid_564167
  var valid_564168 = query.getOrDefault("hostName")
  valid_564168 = validateParameter(valid_564168, JString, required = false,
                                 default = nil)
  if valid_564168 != nil:
    section.add "hostName", valid_564168
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564169: Call_WebAppsAnalyzeCustomHostname_564161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_564169.validator(path, query, header, formData, body)
  let scheme = call_564169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564169.url(scheme.get, call_564169.host, call_564169.base,
                         call_564169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564169, url, valid)

proc call*(call_564170: Call_WebAppsAnalyzeCustomHostname_564161;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string
  ##           : Custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564171 = newJObject()
  var query_564172 = newJObject()
  add(query_564172, "api-version", newJString(apiVersion))
  add(path_564171, "name", newJString(name))
  add(path_564171, "subscriptionId", newJString(subscriptionId))
  add(query_564172, "hostName", newJString(hostName))
  add(path_564171, "resourceGroupName", newJString(resourceGroupName))
  result = call_564170.call(path_564171, query_564172, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_564161(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_564162, base: "",
    url: url_WebAppsAnalyzeCustomHostname_564163, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_564173 = ref object of OpenApiRestCall_563564
proc url_WebAppsApplySlotConfigToProduction_564175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_564174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564176 = path.getOrDefault("name")
  valid_564176 = validateParameter(valid_564176, JString, required = true,
                                 default = nil)
  if valid_564176 != nil:
    section.add "name", valid_564176
  var valid_564177 = path.getOrDefault("subscriptionId")
  valid_564177 = validateParameter(valid_564177, JString, required = true,
                                 default = nil)
  if valid_564177 != nil:
    section.add "subscriptionId", valid_564177
  var valid_564178 = path.getOrDefault("resourceGroupName")
  valid_564178 = validateParameter(valid_564178, JString, required = true,
                                 default = nil)
  if valid_564178 != nil:
    section.add "resourceGroupName", valid_564178
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564179 = query.getOrDefault("api-version")
  valid_564179 = validateParameter(valid_564179, JString, required = true,
                                 default = nil)
  if valid_564179 != nil:
    section.add "api-version", valid_564179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564181: Call_WebAppsApplySlotConfigToProduction_564173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_564181.validator(path, query, header, formData, body)
  let scheme = call_564181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564181.url(scheme.get, call_564181.host, call_564181.base,
                         call_564181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564181, url, valid)

proc call*(call_564182: Call_WebAppsApplySlotConfigToProduction_564173;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564183 = newJObject()
  var query_564184 = newJObject()
  var body_564185 = newJObject()
  add(query_564184, "api-version", newJString(apiVersion))
  add(path_564183, "name", newJString(name))
  add(path_564183, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_564185 = slotSwapEntity
  add(path_564183, "resourceGroupName", newJString(resourceGroupName))
  result = call_564182.call(path_564183, query_564184, nil, nil, body_564185)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_564173(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_564174, base: "",
    url: url_WebAppsApplySlotConfigToProduction_564175, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_564186 = ref object of OpenApiRestCall_563564
proc url_WebAppsBackup_564188(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_564187(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564189 = path.getOrDefault("name")
  valid_564189 = validateParameter(valid_564189, JString, required = true,
                                 default = nil)
  if valid_564189 != nil:
    section.add "name", valid_564189
  var valid_564190 = path.getOrDefault("subscriptionId")
  valid_564190 = validateParameter(valid_564190, JString, required = true,
                                 default = nil)
  if valid_564190 != nil:
    section.add "subscriptionId", valid_564190
  var valid_564191 = path.getOrDefault("resourceGroupName")
  valid_564191 = validateParameter(valid_564191, JString, required = true,
                                 default = nil)
  if valid_564191 != nil:
    section.add "resourceGroupName", valid_564191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564192 = query.getOrDefault("api-version")
  valid_564192 = validateParameter(valid_564192, JString, required = true,
                                 default = nil)
  if valid_564192 != nil:
    section.add "api-version", valid_564192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564194: Call_WebAppsBackup_564186; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_564194.validator(path, query, header, formData, body)
  let scheme = call_564194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564194.url(scheme.get, call_564194.host, call_564194.base,
                         call_564194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564194, url, valid)

proc call*(call_564195: Call_WebAppsBackup_564186; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_564196 = newJObject()
  var query_564197 = newJObject()
  var body_564198 = newJObject()
  add(query_564197, "api-version", newJString(apiVersion))
  add(path_564196, "name", newJString(name))
  add(path_564196, "subscriptionId", newJString(subscriptionId))
  add(path_564196, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564198 = request
  result = call_564195.call(path_564196, query_564197, nil, nil, body_564198)

var webAppsBackup* = Call_WebAppsBackup_564186(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_564187, base: "", url: url_WebAppsBackup_564188,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_564199 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackups_564201(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_564200(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564202 = path.getOrDefault("name")
  valid_564202 = validateParameter(valid_564202, JString, required = true,
                                 default = nil)
  if valid_564202 != nil:
    section.add "name", valid_564202
  var valid_564203 = path.getOrDefault("subscriptionId")
  valid_564203 = validateParameter(valid_564203, JString, required = true,
                                 default = nil)
  if valid_564203 != nil:
    section.add "subscriptionId", valid_564203
  var valid_564204 = path.getOrDefault("resourceGroupName")
  valid_564204 = validateParameter(valid_564204, JString, required = true,
                                 default = nil)
  if valid_564204 != nil:
    section.add "resourceGroupName", valid_564204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564205 = query.getOrDefault("api-version")
  valid_564205 = validateParameter(valid_564205, JString, required = true,
                                 default = nil)
  if valid_564205 != nil:
    section.add "api-version", valid_564205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564206: Call_WebAppsListBackups_564199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_564206.validator(path, query, header, formData, body)
  let scheme = call_564206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564206.url(scheme.get, call_564206.host, call_564206.base,
                         call_564206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564206, url, valid)

proc call*(call_564207: Call_WebAppsListBackups_564199; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564208 = newJObject()
  var query_564209 = newJObject()
  add(query_564209, "api-version", newJString(apiVersion))
  add(path_564208, "name", newJString(name))
  add(path_564208, "subscriptionId", newJString(subscriptionId))
  add(path_564208, "resourceGroupName", newJString(resourceGroupName))
  result = call_564207.call(path_564208, query_564209, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_564199(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_564200, base: "",
    url: url_WebAppsListBackups_564201, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_564210 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupStatus_564212(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_564211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564213 = path.getOrDefault("name")
  valid_564213 = validateParameter(valid_564213, JString, required = true,
                                 default = nil)
  if valid_564213 != nil:
    section.add "name", valid_564213
  var valid_564214 = path.getOrDefault("subscriptionId")
  valid_564214 = validateParameter(valid_564214, JString, required = true,
                                 default = nil)
  if valid_564214 != nil:
    section.add "subscriptionId", valid_564214
  var valid_564215 = path.getOrDefault("backupId")
  valid_564215 = validateParameter(valid_564215, JString, required = true,
                                 default = nil)
  if valid_564215 != nil:
    section.add "backupId", valid_564215
  var valid_564216 = path.getOrDefault("resourceGroupName")
  valid_564216 = validateParameter(valid_564216, JString, required = true,
                                 default = nil)
  if valid_564216 != nil:
    section.add "resourceGroupName", valid_564216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564217 = query.getOrDefault("api-version")
  valid_564217 = validateParameter(valid_564217, JString, required = true,
                                 default = nil)
  if valid_564217 != nil:
    section.add "api-version", valid_564217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564218: Call_WebAppsGetBackupStatus_564210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_564218.validator(path, query, header, formData, body)
  let scheme = call_564218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564218.url(scheme.get, call_564218.host, call_564218.base,
                         call_564218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564218, url, valid)

proc call*(call_564219: Call_WebAppsGetBackupStatus_564210; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564220 = newJObject()
  var query_564221 = newJObject()
  add(query_564221, "api-version", newJString(apiVersion))
  add(path_564220, "name", newJString(name))
  add(path_564220, "subscriptionId", newJString(subscriptionId))
  add(path_564220, "backupId", newJString(backupId))
  add(path_564220, "resourceGroupName", newJString(resourceGroupName))
  result = call_564219.call(path_564220, query_564221, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_564210(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_564211, base: "",
    url: url_WebAppsGetBackupStatus_564212, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_564222 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackup_564224(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_564223(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564225 = path.getOrDefault("name")
  valid_564225 = validateParameter(valid_564225, JString, required = true,
                                 default = nil)
  if valid_564225 != nil:
    section.add "name", valid_564225
  var valid_564226 = path.getOrDefault("subscriptionId")
  valid_564226 = validateParameter(valid_564226, JString, required = true,
                                 default = nil)
  if valid_564226 != nil:
    section.add "subscriptionId", valid_564226
  var valid_564227 = path.getOrDefault("backupId")
  valid_564227 = validateParameter(valid_564227, JString, required = true,
                                 default = nil)
  if valid_564227 != nil:
    section.add "backupId", valid_564227
  var valid_564228 = path.getOrDefault("resourceGroupName")
  valid_564228 = validateParameter(valid_564228, JString, required = true,
                                 default = nil)
  if valid_564228 != nil:
    section.add "resourceGroupName", valid_564228
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564229 = query.getOrDefault("api-version")
  valid_564229 = validateParameter(valid_564229, JString, required = true,
                                 default = nil)
  if valid_564229 != nil:
    section.add "api-version", valid_564229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564230: Call_WebAppsDeleteBackup_564222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_564230.validator(path, query, header, formData, body)
  let scheme = call_564230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564230.url(scheme.get, call_564230.host, call_564230.base,
                         call_564230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564230, url, valid)

proc call*(call_564231: Call_WebAppsDeleteBackup_564222; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564232 = newJObject()
  var query_564233 = newJObject()
  add(query_564233, "api-version", newJString(apiVersion))
  add(path_564232, "name", newJString(name))
  add(path_564232, "subscriptionId", newJString(subscriptionId))
  add(path_564232, "backupId", newJString(backupId))
  add(path_564232, "resourceGroupName", newJString(resourceGroupName))
  result = call_564231.call(path_564232, query_564233, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_564222(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_564223, base: "",
    url: url_WebAppsDeleteBackup_564224, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_564234 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupStatusSecrets_564236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_564235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564237 = path.getOrDefault("name")
  valid_564237 = validateParameter(valid_564237, JString, required = true,
                                 default = nil)
  if valid_564237 != nil:
    section.add "name", valid_564237
  var valid_564238 = path.getOrDefault("subscriptionId")
  valid_564238 = validateParameter(valid_564238, JString, required = true,
                                 default = nil)
  if valid_564238 != nil:
    section.add "subscriptionId", valid_564238
  var valid_564239 = path.getOrDefault("backupId")
  valid_564239 = validateParameter(valid_564239, JString, required = true,
                                 default = nil)
  if valid_564239 != nil:
    section.add "backupId", valid_564239
  var valid_564240 = path.getOrDefault("resourceGroupName")
  valid_564240 = validateParameter(valid_564240, JString, required = true,
                                 default = nil)
  if valid_564240 != nil:
    section.add "resourceGroupName", valid_564240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564241 = query.getOrDefault("api-version")
  valid_564241 = validateParameter(valid_564241, JString, required = true,
                                 default = nil)
  if valid_564241 != nil:
    section.add "api-version", valid_564241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564243: Call_WebAppsListBackupStatusSecrets_564234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_564243.validator(path, query, header, formData, body)
  let scheme = call_564243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564243.url(scheme.get, call_564243.host, call_564243.base,
                         call_564243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564243, url, valid)

proc call*(call_564244: Call_WebAppsListBackupStatusSecrets_564234;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on backup request.
  var path_564245 = newJObject()
  var query_564246 = newJObject()
  var body_564247 = newJObject()
  add(query_564246, "api-version", newJString(apiVersion))
  add(path_564245, "name", newJString(name))
  add(path_564245, "subscriptionId", newJString(subscriptionId))
  add(path_564245, "backupId", newJString(backupId))
  add(path_564245, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564247 = request
  result = call_564244.call(path_564245, query_564246, nil, nil, body_564247)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_564234(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_564235, base: "",
    url: url_WebAppsListBackupStatusSecrets_564236, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_564248 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestore_564250(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_564249(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564251 = path.getOrDefault("name")
  valid_564251 = validateParameter(valid_564251, JString, required = true,
                                 default = nil)
  if valid_564251 != nil:
    section.add "name", valid_564251
  var valid_564252 = path.getOrDefault("subscriptionId")
  valid_564252 = validateParameter(valid_564252, JString, required = true,
                                 default = nil)
  if valid_564252 != nil:
    section.add "subscriptionId", valid_564252
  var valid_564253 = path.getOrDefault("backupId")
  valid_564253 = validateParameter(valid_564253, JString, required = true,
                                 default = nil)
  if valid_564253 != nil:
    section.add "backupId", valid_564253
  var valid_564254 = path.getOrDefault("resourceGroupName")
  valid_564254 = validateParameter(valid_564254, JString, required = true,
                                 default = nil)
  if valid_564254 != nil:
    section.add "resourceGroupName", valid_564254
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564255 = query.getOrDefault("api-version")
  valid_564255 = validateParameter(valid_564255, JString, required = true,
                                 default = nil)
  if valid_564255 != nil:
    section.add "api-version", valid_564255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564257: Call_WebAppsRestore_564248; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_564257.validator(path, query, header, formData, body)
  let scheme = call_564257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564257.url(scheme.get, call_564257.host, call_564257.base,
                         call_564257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564257, url, valid)

proc call*(call_564258: Call_WebAppsRestore_564248; apiVersion: string; name: string;
          subscriptionId: string; backupId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_564259 = newJObject()
  var query_564260 = newJObject()
  var body_564261 = newJObject()
  add(query_564260, "api-version", newJString(apiVersion))
  add(path_564259, "name", newJString(name))
  add(path_564259, "subscriptionId", newJString(subscriptionId))
  add(path_564259, "backupId", newJString(backupId))
  add(path_564259, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564261 = request
  result = call_564258.call(path_564259, query_564260, nil, nil, body_564261)

var webAppsRestore* = Call_WebAppsRestore_564248(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_564249, base: "", url: url_WebAppsRestore_564250,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_564262 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurations_564264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_564263(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564265 = path.getOrDefault("name")
  valid_564265 = validateParameter(valid_564265, JString, required = true,
                                 default = nil)
  if valid_564265 != nil:
    section.add "name", valid_564265
  var valid_564266 = path.getOrDefault("subscriptionId")
  valid_564266 = validateParameter(valid_564266, JString, required = true,
                                 default = nil)
  if valid_564266 != nil:
    section.add "subscriptionId", valid_564266
  var valid_564267 = path.getOrDefault("resourceGroupName")
  valid_564267 = validateParameter(valid_564267, JString, required = true,
                                 default = nil)
  if valid_564267 != nil:
    section.add "resourceGroupName", valid_564267
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564268 = query.getOrDefault("api-version")
  valid_564268 = validateParameter(valid_564268, JString, required = true,
                                 default = nil)
  if valid_564268 != nil:
    section.add "api-version", valid_564268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564269: Call_WebAppsListConfigurations_564262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_564269.validator(path, query, header, formData, body)
  let scheme = call_564269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564269.url(scheme.get, call_564269.host, call_564269.base,
                         call_564269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564269, url, valid)

proc call*(call_564270: Call_WebAppsListConfigurations_564262; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564271 = newJObject()
  var query_564272 = newJObject()
  add(query_564272, "api-version", newJString(apiVersion))
  add(path_564271, "name", newJString(name))
  add(path_564271, "subscriptionId", newJString(subscriptionId))
  add(path_564271, "resourceGroupName", newJString(resourceGroupName))
  result = call_564270.call(path_564271, query_564272, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_564262(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_564263, base: "",
    url: url_WebAppsListConfigurations_564264, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_564273 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateApplicationSettings_564275(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_564274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564276 = path.getOrDefault("name")
  valid_564276 = validateParameter(valid_564276, JString, required = true,
                                 default = nil)
  if valid_564276 != nil:
    section.add "name", valid_564276
  var valid_564277 = path.getOrDefault("subscriptionId")
  valid_564277 = validateParameter(valid_564277, JString, required = true,
                                 default = nil)
  if valid_564277 != nil:
    section.add "subscriptionId", valid_564277
  var valid_564278 = path.getOrDefault("resourceGroupName")
  valid_564278 = validateParameter(valid_564278, JString, required = true,
                                 default = nil)
  if valid_564278 != nil:
    section.add "resourceGroupName", valid_564278
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564279 = query.getOrDefault("api-version")
  valid_564279 = validateParameter(valid_564279, JString, required = true,
                                 default = nil)
  if valid_564279 != nil:
    section.add "api-version", valid_564279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564281: Call_WebAppsUpdateApplicationSettings_564273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_564281.validator(path, query, header, formData, body)
  let scheme = call_564281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564281.url(scheme.get, call_564281.host, call_564281.base,
                         call_564281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564281, url, valid)

proc call*(call_564282: Call_WebAppsUpdateApplicationSettings_564273;
          appSettings: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564283 = newJObject()
  var query_564284 = newJObject()
  var body_564285 = newJObject()
  if appSettings != nil:
    body_564285 = appSettings
  add(query_564284, "api-version", newJString(apiVersion))
  add(path_564283, "name", newJString(name))
  add(path_564283, "subscriptionId", newJString(subscriptionId))
  add(path_564283, "resourceGroupName", newJString(resourceGroupName))
  result = call_564282.call(path_564283, query_564284, nil, nil, body_564285)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_564273(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_564274, base: "",
    url: url_WebAppsUpdateApplicationSettings_564275, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_564286 = ref object of OpenApiRestCall_563564
proc url_WebAppsListApplicationSettings_564288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_564287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564289 = path.getOrDefault("name")
  valid_564289 = validateParameter(valid_564289, JString, required = true,
                                 default = nil)
  if valid_564289 != nil:
    section.add "name", valid_564289
  var valid_564290 = path.getOrDefault("subscriptionId")
  valid_564290 = validateParameter(valid_564290, JString, required = true,
                                 default = nil)
  if valid_564290 != nil:
    section.add "subscriptionId", valid_564290
  var valid_564291 = path.getOrDefault("resourceGroupName")
  valid_564291 = validateParameter(valid_564291, JString, required = true,
                                 default = nil)
  if valid_564291 != nil:
    section.add "resourceGroupName", valid_564291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564292 = query.getOrDefault("api-version")
  valid_564292 = validateParameter(valid_564292, JString, required = true,
                                 default = nil)
  if valid_564292 != nil:
    section.add "api-version", valid_564292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564293: Call_WebAppsListApplicationSettings_564286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_564293.validator(path, query, header, formData, body)
  let scheme = call_564293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564293.url(scheme.get, call_564293.host, call_564293.base,
                         call_564293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564293, url, valid)

proc call*(call_564294: Call_WebAppsListApplicationSettings_564286;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564295 = newJObject()
  var query_564296 = newJObject()
  add(query_564296, "api-version", newJString(apiVersion))
  add(path_564295, "name", newJString(name))
  add(path_564295, "subscriptionId", newJString(subscriptionId))
  add(path_564295, "resourceGroupName", newJString(resourceGroupName))
  result = call_564294.call(path_564295, query_564296, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_564286(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_564287, base: "",
    url: url_WebAppsListApplicationSettings_564288, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_564297 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAuthSettings_564299(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_564298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564300 = path.getOrDefault("name")
  valid_564300 = validateParameter(valid_564300, JString, required = true,
                                 default = nil)
  if valid_564300 != nil:
    section.add "name", valid_564300
  var valid_564301 = path.getOrDefault("subscriptionId")
  valid_564301 = validateParameter(valid_564301, JString, required = true,
                                 default = nil)
  if valid_564301 != nil:
    section.add "subscriptionId", valid_564301
  var valid_564302 = path.getOrDefault("resourceGroupName")
  valid_564302 = validateParameter(valid_564302, JString, required = true,
                                 default = nil)
  if valid_564302 != nil:
    section.add "resourceGroupName", valid_564302
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564303 = query.getOrDefault("api-version")
  valid_564303 = validateParameter(valid_564303, JString, required = true,
                                 default = nil)
  if valid_564303 != nil:
    section.add "api-version", valid_564303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564305: Call_WebAppsUpdateAuthSettings_564297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_564305.validator(path, query, header, formData, body)
  let scheme = call_564305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564305.url(scheme.get, call_564305.host, call_564305.base,
                         call_564305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564305, url, valid)

proc call*(call_564306: Call_WebAppsUpdateAuthSettings_564297; apiVersion: string;
          siteAuthSettings: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564307 = newJObject()
  var query_564308 = newJObject()
  var body_564309 = newJObject()
  add(query_564308, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_564309 = siteAuthSettings
  add(path_564307, "name", newJString(name))
  add(path_564307, "subscriptionId", newJString(subscriptionId))
  add(path_564307, "resourceGroupName", newJString(resourceGroupName))
  result = call_564306.call(path_564307, query_564308, nil, nil, body_564309)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_564297(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_564298, base: "",
    url: url_WebAppsUpdateAuthSettings_564299, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_564310 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetAuthSettings_564312(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_564311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564313 = path.getOrDefault("name")
  valid_564313 = validateParameter(valid_564313, JString, required = true,
                                 default = nil)
  if valid_564313 != nil:
    section.add "name", valid_564313
  var valid_564314 = path.getOrDefault("subscriptionId")
  valid_564314 = validateParameter(valid_564314, JString, required = true,
                                 default = nil)
  if valid_564314 != nil:
    section.add "subscriptionId", valid_564314
  var valid_564315 = path.getOrDefault("resourceGroupName")
  valid_564315 = validateParameter(valid_564315, JString, required = true,
                                 default = nil)
  if valid_564315 != nil:
    section.add "resourceGroupName", valid_564315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564316 = query.getOrDefault("api-version")
  valid_564316 = validateParameter(valid_564316, JString, required = true,
                                 default = nil)
  if valid_564316 != nil:
    section.add "api-version", valid_564316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564317: Call_WebAppsGetAuthSettings_564310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_564317.validator(path, query, header, formData, body)
  let scheme = call_564317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564317.url(scheme.get, call_564317.host, call_564317.base,
                         call_564317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564317, url, valid)

proc call*(call_564318: Call_WebAppsGetAuthSettings_564310; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564319 = newJObject()
  var query_564320 = newJObject()
  add(query_564320, "api-version", newJString(apiVersion))
  add(path_564319, "name", newJString(name))
  add(path_564319, "subscriptionId", newJString(subscriptionId))
  add(path_564319, "resourceGroupName", newJString(resourceGroupName))
  result = call_564318.call(path_564319, query_564320, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_564310(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_564311, base: "",
    url: url_WebAppsGetAuthSettings_564312, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccounts_564321 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAzureStorageAccounts_564323(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccounts_564322(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564324 = path.getOrDefault("name")
  valid_564324 = validateParameter(valid_564324, JString, required = true,
                                 default = nil)
  if valid_564324 != nil:
    section.add "name", valid_564324
  var valid_564325 = path.getOrDefault("subscriptionId")
  valid_564325 = validateParameter(valid_564325, JString, required = true,
                                 default = nil)
  if valid_564325 != nil:
    section.add "subscriptionId", valid_564325
  var valid_564326 = path.getOrDefault("resourceGroupName")
  valid_564326 = validateParameter(valid_564326, JString, required = true,
                                 default = nil)
  if valid_564326 != nil:
    section.add "resourceGroupName", valid_564326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564327 = query.getOrDefault("api-version")
  valid_564327 = validateParameter(valid_564327, JString, required = true,
                                 default = nil)
  if valid_564327 != nil:
    section.add "api-version", valid_564327
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564329: Call_WebAppsUpdateAzureStorageAccounts_564321;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_564329.validator(path, query, header, formData, body)
  let scheme = call_564329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564329.url(scheme.get, call_564329.host, call_564329.base,
                         call_564329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564329, url, valid)

proc call*(call_564330: Call_WebAppsUpdateAzureStorageAccounts_564321;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; azureStorageAccounts: JsonNode): Recallable =
  ## webAppsUpdateAzureStorageAccounts
  ## Updates the Azure storage account configurations of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  var path_564331 = newJObject()
  var query_564332 = newJObject()
  var body_564333 = newJObject()
  add(query_564332, "api-version", newJString(apiVersion))
  add(path_564331, "name", newJString(name))
  add(path_564331, "subscriptionId", newJString(subscriptionId))
  add(path_564331, "resourceGroupName", newJString(resourceGroupName))
  if azureStorageAccounts != nil:
    body_564333 = azureStorageAccounts
  result = call_564330.call(path_564331, query_564332, nil, nil, body_564333)

var webAppsUpdateAzureStorageAccounts* = Call_WebAppsUpdateAzureStorageAccounts_564321(
    name: "webAppsUpdateAzureStorageAccounts", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccounts_564322, base: "",
    url: url_WebAppsUpdateAzureStorageAccounts_564323, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccounts_564334 = ref object of OpenApiRestCall_563564
proc url_WebAppsListAzureStorageAccounts_564336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccounts_564335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564337 = path.getOrDefault("name")
  valid_564337 = validateParameter(valid_564337, JString, required = true,
                                 default = nil)
  if valid_564337 != nil:
    section.add "name", valid_564337
  var valid_564338 = path.getOrDefault("subscriptionId")
  valid_564338 = validateParameter(valid_564338, JString, required = true,
                                 default = nil)
  if valid_564338 != nil:
    section.add "subscriptionId", valid_564338
  var valid_564339 = path.getOrDefault("resourceGroupName")
  valid_564339 = validateParameter(valid_564339, JString, required = true,
                                 default = nil)
  if valid_564339 != nil:
    section.add "resourceGroupName", valid_564339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564340 = query.getOrDefault("api-version")
  valid_564340 = validateParameter(valid_564340, JString, required = true,
                                 default = nil)
  if valid_564340 != nil:
    section.add "api-version", valid_564340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564341: Call_WebAppsListAzureStorageAccounts_564334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_564341.validator(path, query, header, formData, body)
  let scheme = call_564341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564341.url(scheme.get, call_564341.host, call_564341.base,
                         call_564341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564341, url, valid)

proc call*(call_564342: Call_WebAppsListAzureStorageAccounts_564334;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListAzureStorageAccounts
  ## Gets the Azure storage account configurations of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564343 = newJObject()
  var query_564344 = newJObject()
  add(query_564344, "api-version", newJString(apiVersion))
  add(path_564343, "name", newJString(name))
  add(path_564343, "subscriptionId", newJString(subscriptionId))
  add(path_564343, "resourceGroupName", newJString(resourceGroupName))
  result = call_564342.call(path_564343, query_564344, nil, nil, nil)

var webAppsListAzureStorageAccounts* = Call_WebAppsListAzureStorageAccounts_564334(
    name: "webAppsListAzureStorageAccounts", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccounts_564335, base: "",
    url: url_WebAppsListAzureStorageAccounts_564336, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_564345 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateBackupConfiguration_564347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_564346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564348 = path.getOrDefault("name")
  valid_564348 = validateParameter(valid_564348, JString, required = true,
                                 default = nil)
  if valid_564348 != nil:
    section.add "name", valid_564348
  var valid_564349 = path.getOrDefault("subscriptionId")
  valid_564349 = validateParameter(valid_564349, JString, required = true,
                                 default = nil)
  if valid_564349 != nil:
    section.add "subscriptionId", valid_564349
  var valid_564350 = path.getOrDefault("resourceGroupName")
  valid_564350 = validateParameter(valid_564350, JString, required = true,
                                 default = nil)
  if valid_564350 != nil:
    section.add "resourceGroupName", valid_564350
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564351 = query.getOrDefault("api-version")
  valid_564351 = validateParameter(valid_564351, JString, required = true,
                                 default = nil)
  if valid_564351 != nil:
    section.add "api-version", valid_564351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564353: Call_WebAppsUpdateBackupConfiguration_564345;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_564353.validator(path, query, header, formData, body)
  let scheme = call_564353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564353.url(scheme.get, call_564353.host, call_564353.base,
                         call_564353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564353, url, valid)

proc call*(call_564354: Call_WebAppsUpdateBackupConfiguration_564345;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_564355 = newJObject()
  var query_564356 = newJObject()
  var body_564357 = newJObject()
  add(query_564356, "api-version", newJString(apiVersion))
  add(path_564355, "name", newJString(name))
  add(path_564355, "subscriptionId", newJString(subscriptionId))
  add(path_564355, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564357 = request
  result = call_564354.call(path_564355, query_564356, nil, nil, body_564357)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_564345(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_564346, base: "",
    url: url_WebAppsUpdateBackupConfiguration_564347, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_564358 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupConfiguration_564360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_564359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564361 = path.getOrDefault("name")
  valid_564361 = validateParameter(valid_564361, JString, required = true,
                                 default = nil)
  if valid_564361 != nil:
    section.add "name", valid_564361
  var valid_564362 = path.getOrDefault("subscriptionId")
  valid_564362 = validateParameter(valid_564362, JString, required = true,
                                 default = nil)
  if valid_564362 != nil:
    section.add "subscriptionId", valid_564362
  var valid_564363 = path.getOrDefault("resourceGroupName")
  valid_564363 = validateParameter(valid_564363, JString, required = true,
                                 default = nil)
  if valid_564363 != nil:
    section.add "resourceGroupName", valid_564363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564364 = query.getOrDefault("api-version")
  valid_564364 = validateParameter(valid_564364, JString, required = true,
                                 default = nil)
  if valid_564364 != nil:
    section.add "api-version", valid_564364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564365: Call_WebAppsDeleteBackupConfiguration_564358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_564365.validator(path, query, header, formData, body)
  let scheme = call_564365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564365.url(scheme.get, call_564365.host, call_564365.base,
                         call_564365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564365, url, valid)

proc call*(call_564366: Call_WebAppsDeleteBackupConfiguration_564358;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564367 = newJObject()
  var query_564368 = newJObject()
  add(query_564368, "api-version", newJString(apiVersion))
  add(path_564367, "name", newJString(name))
  add(path_564367, "subscriptionId", newJString(subscriptionId))
  add(path_564367, "resourceGroupName", newJString(resourceGroupName))
  result = call_564366.call(path_564367, query_564368, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_564358(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_564359, base: "",
    url: url_WebAppsDeleteBackupConfiguration_564360, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_564369 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupConfiguration_564371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_564370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564372 = path.getOrDefault("name")
  valid_564372 = validateParameter(valid_564372, JString, required = true,
                                 default = nil)
  if valid_564372 != nil:
    section.add "name", valid_564372
  var valid_564373 = path.getOrDefault("subscriptionId")
  valid_564373 = validateParameter(valid_564373, JString, required = true,
                                 default = nil)
  if valid_564373 != nil:
    section.add "subscriptionId", valid_564373
  var valid_564374 = path.getOrDefault("resourceGroupName")
  valid_564374 = validateParameter(valid_564374, JString, required = true,
                                 default = nil)
  if valid_564374 != nil:
    section.add "resourceGroupName", valid_564374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564375 = query.getOrDefault("api-version")
  valid_564375 = validateParameter(valid_564375, JString, required = true,
                                 default = nil)
  if valid_564375 != nil:
    section.add "api-version", valid_564375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564376: Call_WebAppsGetBackupConfiguration_564369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_564376.validator(path, query, header, formData, body)
  let scheme = call_564376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564376.url(scheme.get, call_564376.host, call_564376.base,
                         call_564376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564376, url, valid)

proc call*(call_564377: Call_WebAppsGetBackupConfiguration_564369;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564378 = newJObject()
  var query_564379 = newJObject()
  add(query_564379, "api-version", newJString(apiVersion))
  add(path_564378, "name", newJString(name))
  add(path_564378, "subscriptionId", newJString(subscriptionId))
  add(path_564378, "resourceGroupName", newJString(resourceGroupName))
  result = call_564377.call(path_564378, query_564379, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_564369(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_564370, base: "",
    url: url_WebAppsGetBackupConfiguration_564371, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_564380 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConnectionStrings_564382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_564381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564383 = path.getOrDefault("name")
  valid_564383 = validateParameter(valid_564383, JString, required = true,
                                 default = nil)
  if valid_564383 != nil:
    section.add "name", valid_564383
  var valid_564384 = path.getOrDefault("subscriptionId")
  valid_564384 = validateParameter(valid_564384, JString, required = true,
                                 default = nil)
  if valid_564384 != nil:
    section.add "subscriptionId", valid_564384
  var valid_564385 = path.getOrDefault("resourceGroupName")
  valid_564385 = validateParameter(valid_564385, JString, required = true,
                                 default = nil)
  if valid_564385 != nil:
    section.add "resourceGroupName", valid_564385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564386 = query.getOrDefault("api-version")
  valid_564386 = validateParameter(valid_564386, JString, required = true,
                                 default = nil)
  if valid_564386 != nil:
    section.add "api-version", valid_564386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564388: Call_WebAppsUpdateConnectionStrings_564380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_564388.validator(path, query, header, formData, body)
  let scheme = call_564388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564388.url(scheme.get, call_564388.host, call_564388.base,
                         call_564388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564388, url, valid)

proc call*(call_564389: Call_WebAppsUpdateConnectionStrings_564380;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  var path_564390 = newJObject()
  var query_564391 = newJObject()
  var body_564392 = newJObject()
  add(query_564391, "api-version", newJString(apiVersion))
  add(path_564390, "name", newJString(name))
  add(path_564390, "subscriptionId", newJString(subscriptionId))
  add(path_564390, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_564392 = connectionStrings
  result = call_564389.call(path_564390, query_564391, nil, nil, body_564392)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_564380(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_564381, base: "",
    url: url_WebAppsUpdateConnectionStrings_564382, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_564393 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConnectionStrings_564395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_564394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564396 = path.getOrDefault("name")
  valid_564396 = validateParameter(valid_564396, JString, required = true,
                                 default = nil)
  if valid_564396 != nil:
    section.add "name", valid_564396
  var valid_564397 = path.getOrDefault("subscriptionId")
  valid_564397 = validateParameter(valid_564397, JString, required = true,
                                 default = nil)
  if valid_564397 != nil:
    section.add "subscriptionId", valid_564397
  var valid_564398 = path.getOrDefault("resourceGroupName")
  valid_564398 = validateParameter(valid_564398, JString, required = true,
                                 default = nil)
  if valid_564398 != nil:
    section.add "resourceGroupName", valid_564398
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564399 = query.getOrDefault("api-version")
  valid_564399 = validateParameter(valid_564399, JString, required = true,
                                 default = nil)
  if valid_564399 != nil:
    section.add "api-version", valid_564399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564400: Call_WebAppsListConnectionStrings_564393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_564400.validator(path, query, header, formData, body)
  let scheme = call_564400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564400.url(scheme.get, call_564400.host, call_564400.base,
                         call_564400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564400, url, valid)

proc call*(call_564401: Call_WebAppsListConnectionStrings_564393;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564402 = newJObject()
  var query_564403 = newJObject()
  add(query_564403, "api-version", newJString(apiVersion))
  add(path_564402, "name", newJString(name))
  add(path_564402, "subscriptionId", newJString(subscriptionId))
  add(path_564402, "resourceGroupName", newJString(resourceGroupName))
  result = call_564401.call(path_564402, query_564403, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_564393(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_564394, base: "",
    url: url_WebAppsListConnectionStrings_564395, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_564415 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDiagnosticLogsConfig_564417(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_564416(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564418 = path.getOrDefault("name")
  valid_564418 = validateParameter(valid_564418, JString, required = true,
                                 default = nil)
  if valid_564418 != nil:
    section.add "name", valid_564418
  var valid_564419 = path.getOrDefault("subscriptionId")
  valid_564419 = validateParameter(valid_564419, JString, required = true,
                                 default = nil)
  if valid_564419 != nil:
    section.add "subscriptionId", valid_564419
  var valid_564420 = path.getOrDefault("resourceGroupName")
  valid_564420 = validateParameter(valid_564420, JString, required = true,
                                 default = nil)
  if valid_564420 != nil:
    section.add "resourceGroupName", valid_564420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564421 = query.getOrDefault("api-version")
  valid_564421 = validateParameter(valid_564421, JString, required = true,
                                 default = nil)
  if valid_564421 != nil:
    section.add "api-version", valid_564421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564423: Call_WebAppsUpdateDiagnosticLogsConfig_564415;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_564423.validator(path, query, header, formData, body)
  let scheme = call_564423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564423.url(scheme.get, call_564423.host, call_564423.base,
                         call_564423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564423, url, valid)

proc call*(call_564424: Call_WebAppsUpdateDiagnosticLogsConfig_564415;
          apiVersion: string; siteLogsConfig: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564425 = newJObject()
  var query_564426 = newJObject()
  var body_564427 = newJObject()
  add(query_564426, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_564427 = siteLogsConfig
  add(path_564425, "name", newJString(name))
  add(path_564425, "subscriptionId", newJString(subscriptionId))
  add(path_564425, "resourceGroupName", newJString(resourceGroupName))
  result = call_564424.call(path_564425, query_564426, nil, nil, body_564427)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_564415(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_564416, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_564417, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_564404 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDiagnosticLogsConfiguration_564406(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_564405(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564407 = path.getOrDefault("name")
  valid_564407 = validateParameter(valid_564407, JString, required = true,
                                 default = nil)
  if valid_564407 != nil:
    section.add "name", valid_564407
  var valid_564408 = path.getOrDefault("subscriptionId")
  valid_564408 = validateParameter(valid_564408, JString, required = true,
                                 default = nil)
  if valid_564408 != nil:
    section.add "subscriptionId", valid_564408
  var valid_564409 = path.getOrDefault("resourceGroupName")
  valid_564409 = validateParameter(valid_564409, JString, required = true,
                                 default = nil)
  if valid_564409 != nil:
    section.add "resourceGroupName", valid_564409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564410 = query.getOrDefault("api-version")
  valid_564410 = validateParameter(valid_564410, JString, required = true,
                                 default = nil)
  if valid_564410 != nil:
    section.add "api-version", valid_564410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564411: Call_WebAppsGetDiagnosticLogsConfiguration_564404;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_564411.validator(path, query, header, formData, body)
  let scheme = call_564411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564411.url(scheme.get, call_564411.host, call_564411.base,
                         call_564411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564411, url, valid)

proc call*(call_564412: Call_WebAppsGetDiagnosticLogsConfiguration_564404;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564413 = newJObject()
  var query_564414 = newJObject()
  add(query_564414, "api-version", newJString(apiVersion))
  add(path_564413, "name", newJString(name))
  add(path_564413, "subscriptionId", newJString(subscriptionId))
  add(path_564413, "resourceGroupName", newJString(resourceGroupName))
  result = call_564412.call(path_564413, query_564414, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_564404(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_564405, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_564406, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_564428 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateMetadata_564430(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_564429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564431 = path.getOrDefault("name")
  valid_564431 = validateParameter(valid_564431, JString, required = true,
                                 default = nil)
  if valid_564431 != nil:
    section.add "name", valid_564431
  var valid_564432 = path.getOrDefault("subscriptionId")
  valid_564432 = validateParameter(valid_564432, JString, required = true,
                                 default = nil)
  if valid_564432 != nil:
    section.add "subscriptionId", valid_564432
  var valid_564433 = path.getOrDefault("resourceGroupName")
  valid_564433 = validateParameter(valid_564433, JString, required = true,
                                 default = nil)
  if valid_564433 != nil:
    section.add "resourceGroupName", valid_564433
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564434 = query.getOrDefault("api-version")
  valid_564434 = validateParameter(valid_564434, JString, required = true,
                                 default = nil)
  if valid_564434 != nil:
    section.add "api-version", valid_564434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564436: Call_WebAppsUpdateMetadata_564428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_564436.validator(path, query, header, formData, body)
  let scheme = call_564436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564436.url(scheme.get, call_564436.host, call_564436.base,
                         call_564436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564436, url, valid)

proc call*(call_564437: Call_WebAppsUpdateMetadata_564428; metadata: JsonNode;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564438 = newJObject()
  var query_564439 = newJObject()
  var body_564440 = newJObject()
  if metadata != nil:
    body_564440 = metadata
  add(query_564439, "api-version", newJString(apiVersion))
  add(path_564438, "name", newJString(name))
  add(path_564438, "subscriptionId", newJString(subscriptionId))
  add(path_564438, "resourceGroupName", newJString(resourceGroupName))
  result = call_564437.call(path_564438, query_564439, nil, nil, body_564440)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_564428(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_564429, base: "",
    url: url_WebAppsUpdateMetadata_564430, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_564441 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetadata_564443(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_564442(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564444 = path.getOrDefault("name")
  valid_564444 = validateParameter(valid_564444, JString, required = true,
                                 default = nil)
  if valid_564444 != nil:
    section.add "name", valid_564444
  var valid_564445 = path.getOrDefault("subscriptionId")
  valid_564445 = validateParameter(valid_564445, JString, required = true,
                                 default = nil)
  if valid_564445 != nil:
    section.add "subscriptionId", valid_564445
  var valid_564446 = path.getOrDefault("resourceGroupName")
  valid_564446 = validateParameter(valid_564446, JString, required = true,
                                 default = nil)
  if valid_564446 != nil:
    section.add "resourceGroupName", valid_564446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564447 = query.getOrDefault("api-version")
  valid_564447 = validateParameter(valid_564447, JString, required = true,
                                 default = nil)
  if valid_564447 != nil:
    section.add "api-version", valid_564447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564448: Call_WebAppsListMetadata_564441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_564448.validator(path, query, header, formData, body)
  let scheme = call_564448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564448.url(scheme.get, call_564448.host, call_564448.base,
                         call_564448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564448, url, valid)

proc call*(call_564449: Call_WebAppsListMetadata_564441; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564450 = newJObject()
  var query_564451 = newJObject()
  add(query_564451, "api-version", newJString(apiVersion))
  add(path_564450, "name", newJString(name))
  add(path_564450, "subscriptionId", newJString(subscriptionId))
  add(path_564450, "resourceGroupName", newJString(resourceGroupName))
  result = call_564449.call(path_564450, query_564451, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_564441(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_564442, base: "",
    url: url_WebAppsListMetadata_564443, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_564452 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingCredentials_564454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_564453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564455 = path.getOrDefault("name")
  valid_564455 = validateParameter(valid_564455, JString, required = true,
                                 default = nil)
  if valid_564455 != nil:
    section.add "name", valid_564455
  var valid_564456 = path.getOrDefault("subscriptionId")
  valid_564456 = validateParameter(valid_564456, JString, required = true,
                                 default = nil)
  if valid_564456 != nil:
    section.add "subscriptionId", valid_564456
  var valid_564457 = path.getOrDefault("resourceGroupName")
  valid_564457 = validateParameter(valid_564457, JString, required = true,
                                 default = nil)
  if valid_564457 != nil:
    section.add "resourceGroupName", valid_564457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564458 = query.getOrDefault("api-version")
  valid_564458 = validateParameter(valid_564458, JString, required = true,
                                 default = nil)
  if valid_564458 != nil:
    section.add "api-version", valid_564458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564459: Call_WebAppsListPublishingCredentials_564452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_564459.validator(path, query, header, formData, body)
  let scheme = call_564459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564459.url(scheme.get, call_564459.host, call_564459.base,
                         call_564459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564459, url, valid)

proc call*(call_564460: Call_WebAppsListPublishingCredentials_564452;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564461 = newJObject()
  var query_564462 = newJObject()
  add(query_564462, "api-version", newJString(apiVersion))
  add(path_564461, "name", newJString(name))
  add(path_564461, "subscriptionId", newJString(subscriptionId))
  add(path_564461, "resourceGroupName", newJString(resourceGroupName))
  result = call_564460.call(path_564461, query_564462, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_564452(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_564453, base: "",
    url: url_WebAppsListPublishingCredentials_564454, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_564463 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSitePushSettings_564465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_564464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564466 = path.getOrDefault("name")
  valid_564466 = validateParameter(valid_564466, JString, required = true,
                                 default = nil)
  if valid_564466 != nil:
    section.add "name", valid_564466
  var valid_564467 = path.getOrDefault("subscriptionId")
  valid_564467 = validateParameter(valid_564467, JString, required = true,
                                 default = nil)
  if valid_564467 != nil:
    section.add "subscriptionId", valid_564467
  var valid_564468 = path.getOrDefault("resourceGroupName")
  valid_564468 = validateParameter(valid_564468, JString, required = true,
                                 default = nil)
  if valid_564468 != nil:
    section.add "resourceGroupName", valid_564468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564469 = query.getOrDefault("api-version")
  valid_564469 = validateParameter(valid_564469, JString, required = true,
                                 default = nil)
  if valid_564469 != nil:
    section.add "api-version", valid_564469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564471: Call_WebAppsUpdateSitePushSettings_564463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_564471.validator(path, query, header, formData, body)
  let scheme = call_564471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564471.url(scheme.get, call_564471.host, call_564471.base,
                         call_564471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564471, url, valid)

proc call*(call_564472: Call_WebAppsUpdateSitePushSettings_564463;
          apiVersion: string; name: string; subscriptionId: string;
          pushSettings: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564473 = newJObject()
  var query_564474 = newJObject()
  var body_564475 = newJObject()
  add(query_564474, "api-version", newJString(apiVersion))
  add(path_564473, "name", newJString(name))
  add(path_564473, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_564475 = pushSettings
  add(path_564473, "resourceGroupName", newJString(resourceGroupName))
  result = call_564472.call(path_564473, query_564474, nil, nil, body_564475)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_564463(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_564464, base: "",
    url: url_WebAppsUpdateSitePushSettings_564465, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_564476 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSitePushSettings_564478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_564477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564479 = path.getOrDefault("name")
  valid_564479 = validateParameter(valid_564479, JString, required = true,
                                 default = nil)
  if valid_564479 != nil:
    section.add "name", valid_564479
  var valid_564480 = path.getOrDefault("subscriptionId")
  valid_564480 = validateParameter(valid_564480, JString, required = true,
                                 default = nil)
  if valid_564480 != nil:
    section.add "subscriptionId", valid_564480
  var valid_564481 = path.getOrDefault("resourceGroupName")
  valid_564481 = validateParameter(valid_564481, JString, required = true,
                                 default = nil)
  if valid_564481 != nil:
    section.add "resourceGroupName", valid_564481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564482 = query.getOrDefault("api-version")
  valid_564482 = validateParameter(valid_564482, JString, required = true,
                                 default = nil)
  if valid_564482 != nil:
    section.add "api-version", valid_564482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564483: Call_WebAppsListSitePushSettings_564476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_564483.validator(path, query, header, formData, body)
  let scheme = call_564483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564483.url(scheme.get, call_564483.host, call_564483.base,
                         call_564483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564483, url, valid)

proc call*(call_564484: Call_WebAppsListSitePushSettings_564476;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564485 = newJObject()
  var query_564486 = newJObject()
  add(query_564486, "api-version", newJString(apiVersion))
  add(path_564485, "name", newJString(name))
  add(path_564485, "subscriptionId", newJString(subscriptionId))
  add(path_564485, "resourceGroupName", newJString(resourceGroupName))
  result = call_564484.call(path_564485, query_564486, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_564476(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_564477, base: "",
    url: url_WebAppsListSitePushSettings_564478, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_564498 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSlotConfigurationNames_564500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_564499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564501 = path.getOrDefault("name")
  valid_564501 = validateParameter(valid_564501, JString, required = true,
                                 default = nil)
  if valid_564501 != nil:
    section.add "name", valid_564501
  var valid_564502 = path.getOrDefault("subscriptionId")
  valid_564502 = validateParameter(valid_564502, JString, required = true,
                                 default = nil)
  if valid_564502 != nil:
    section.add "subscriptionId", valid_564502
  var valid_564503 = path.getOrDefault("resourceGroupName")
  valid_564503 = validateParameter(valid_564503, JString, required = true,
                                 default = nil)
  if valid_564503 != nil:
    section.add "resourceGroupName", valid_564503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564504 = query.getOrDefault("api-version")
  valid_564504 = validateParameter(valid_564504, JString, required = true,
                                 default = nil)
  if valid_564504 != nil:
    section.add "api-version", valid_564504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564506: Call_WebAppsUpdateSlotConfigurationNames_564498;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_564506.validator(path, query, header, formData, body)
  let scheme = call_564506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564506.url(scheme.get, call_564506.host, call_564506.base,
                         call_564506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564506, url, valid)

proc call*(call_564507: Call_WebAppsUpdateSlotConfigurationNames_564498;
          apiVersion: string; slotConfigNames: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564508 = newJObject()
  var query_564509 = newJObject()
  var body_564510 = newJObject()
  add(query_564509, "api-version", newJString(apiVersion))
  if slotConfigNames != nil:
    body_564510 = slotConfigNames
  add(path_564508, "name", newJString(name))
  add(path_564508, "subscriptionId", newJString(subscriptionId))
  add(path_564508, "resourceGroupName", newJString(resourceGroupName))
  result = call_564507.call(path_564508, query_564509, nil, nil, body_564510)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_564498(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_564499, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_564500, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_564487 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotConfigurationNames_564489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_564488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564490 = path.getOrDefault("name")
  valid_564490 = validateParameter(valid_564490, JString, required = true,
                                 default = nil)
  if valid_564490 != nil:
    section.add "name", valid_564490
  var valid_564491 = path.getOrDefault("subscriptionId")
  valid_564491 = validateParameter(valid_564491, JString, required = true,
                                 default = nil)
  if valid_564491 != nil:
    section.add "subscriptionId", valid_564491
  var valid_564492 = path.getOrDefault("resourceGroupName")
  valid_564492 = validateParameter(valid_564492, JString, required = true,
                                 default = nil)
  if valid_564492 != nil:
    section.add "resourceGroupName", valid_564492
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564493 = query.getOrDefault("api-version")
  valid_564493 = validateParameter(valid_564493, JString, required = true,
                                 default = nil)
  if valid_564493 != nil:
    section.add "api-version", valid_564493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564494: Call_WebAppsListSlotConfigurationNames_564487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_564494.validator(path, query, header, formData, body)
  let scheme = call_564494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564494.url(scheme.get, call_564494.host, call_564494.base,
                         call_564494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564494, url, valid)

proc call*(call_564495: Call_WebAppsListSlotConfigurationNames_564487;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564496 = newJObject()
  var query_564497 = newJObject()
  add(query_564497, "api-version", newJString(apiVersion))
  add(path_564496, "name", newJString(name))
  add(path_564496, "subscriptionId", newJString(subscriptionId))
  add(path_564496, "resourceGroupName", newJString(resourceGroupName))
  result = call_564495.call(path_564496, query_564497, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_564487(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_564488, base: "",
    url: url_WebAppsListSlotConfigurationNames_564489, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_564522 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateConfiguration_564524(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_564523(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564525 = path.getOrDefault("name")
  valid_564525 = validateParameter(valid_564525, JString, required = true,
                                 default = nil)
  if valid_564525 != nil:
    section.add "name", valid_564525
  var valid_564526 = path.getOrDefault("subscriptionId")
  valid_564526 = validateParameter(valid_564526, JString, required = true,
                                 default = nil)
  if valid_564526 != nil:
    section.add "subscriptionId", valid_564526
  var valid_564527 = path.getOrDefault("resourceGroupName")
  valid_564527 = validateParameter(valid_564527, JString, required = true,
                                 default = nil)
  if valid_564527 != nil:
    section.add "resourceGroupName", valid_564527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564528 = query.getOrDefault("api-version")
  valid_564528 = validateParameter(valid_564528, JString, required = true,
                                 default = nil)
  if valid_564528 != nil:
    section.add "api-version", valid_564528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564530: Call_WebAppsCreateOrUpdateConfiguration_564522;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_564530.validator(path, query, header, formData, body)
  let scheme = call_564530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564530.url(scheme.get, call_564530.host, call_564530.base,
                         call_564530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564530, url, valid)

proc call*(call_564531: Call_WebAppsCreateOrUpdateConfiguration_564522;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564532 = newJObject()
  var query_564533 = newJObject()
  var body_564534 = newJObject()
  add(query_564533, "api-version", newJString(apiVersion))
  add(path_564532, "name", newJString(name))
  add(path_564532, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_564534 = siteConfig
  add(path_564532, "resourceGroupName", newJString(resourceGroupName))
  result = call_564531.call(path_564532, query_564533, nil, nil, body_564534)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_564522(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_564523, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_564524, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_564511 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfiguration_564513(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_564512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564514 = path.getOrDefault("name")
  valid_564514 = validateParameter(valid_564514, JString, required = true,
                                 default = nil)
  if valid_564514 != nil:
    section.add "name", valid_564514
  var valid_564515 = path.getOrDefault("subscriptionId")
  valid_564515 = validateParameter(valid_564515, JString, required = true,
                                 default = nil)
  if valid_564515 != nil:
    section.add "subscriptionId", valid_564515
  var valid_564516 = path.getOrDefault("resourceGroupName")
  valid_564516 = validateParameter(valid_564516, JString, required = true,
                                 default = nil)
  if valid_564516 != nil:
    section.add "resourceGroupName", valid_564516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564517 = query.getOrDefault("api-version")
  valid_564517 = validateParameter(valid_564517, JString, required = true,
                                 default = nil)
  if valid_564517 != nil:
    section.add "api-version", valid_564517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564518: Call_WebAppsGetConfiguration_564511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_564518.validator(path, query, header, formData, body)
  let scheme = call_564518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564518.url(scheme.get, call_564518.host, call_564518.base,
                         call_564518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564518, url, valid)

proc call*(call_564519: Call_WebAppsGetConfiguration_564511; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564520 = newJObject()
  var query_564521 = newJObject()
  add(query_564521, "api-version", newJString(apiVersion))
  add(path_564520, "name", newJString(name))
  add(path_564520, "subscriptionId", newJString(subscriptionId))
  add(path_564520, "resourceGroupName", newJString(resourceGroupName))
  result = call_564519.call(path_564520, query_564521, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_564511(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_564512, base: "",
    url: url_WebAppsGetConfiguration_564513, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_564535 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConfiguration_564537(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_564536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564538 = path.getOrDefault("name")
  valid_564538 = validateParameter(valid_564538, JString, required = true,
                                 default = nil)
  if valid_564538 != nil:
    section.add "name", valid_564538
  var valid_564539 = path.getOrDefault("subscriptionId")
  valid_564539 = validateParameter(valid_564539, JString, required = true,
                                 default = nil)
  if valid_564539 != nil:
    section.add "subscriptionId", valid_564539
  var valid_564540 = path.getOrDefault("resourceGroupName")
  valid_564540 = validateParameter(valid_564540, JString, required = true,
                                 default = nil)
  if valid_564540 != nil:
    section.add "resourceGroupName", valid_564540
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564541 = query.getOrDefault("api-version")
  valid_564541 = validateParameter(valid_564541, JString, required = true,
                                 default = nil)
  if valid_564541 != nil:
    section.add "api-version", valid_564541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564543: Call_WebAppsUpdateConfiguration_564535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_564543.validator(path, query, header, formData, body)
  let scheme = call_564543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564543.url(scheme.get, call_564543.host, call_564543.base,
                         call_564543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564543, url, valid)

proc call*(call_564544: Call_WebAppsUpdateConfiguration_564535; apiVersion: string;
          name: string; subscriptionId: string; siteConfig: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564545 = newJObject()
  var query_564546 = newJObject()
  var body_564547 = newJObject()
  add(query_564546, "api-version", newJString(apiVersion))
  add(path_564545, "name", newJString(name))
  add(path_564545, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_564547 = siteConfig
  add(path_564545, "resourceGroupName", newJString(resourceGroupName))
  result = call_564544.call(path_564545, query_564546, nil, nil, body_564547)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_564535(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_564536, base: "",
    url: url_WebAppsUpdateConfiguration_564537, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_564548 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationSnapshotInfo_564550(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_564549(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564551 = path.getOrDefault("name")
  valid_564551 = validateParameter(valid_564551, JString, required = true,
                                 default = nil)
  if valid_564551 != nil:
    section.add "name", valid_564551
  var valid_564552 = path.getOrDefault("subscriptionId")
  valid_564552 = validateParameter(valid_564552, JString, required = true,
                                 default = nil)
  if valid_564552 != nil:
    section.add "subscriptionId", valid_564552
  var valid_564553 = path.getOrDefault("resourceGroupName")
  valid_564553 = validateParameter(valid_564553, JString, required = true,
                                 default = nil)
  if valid_564553 != nil:
    section.add "resourceGroupName", valid_564553
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564554 = query.getOrDefault("api-version")
  valid_564554 = validateParameter(valid_564554, JString, required = true,
                                 default = nil)
  if valid_564554 != nil:
    section.add "api-version", valid_564554
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564555: Call_WebAppsListConfigurationSnapshotInfo_564548;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_564555.validator(path, query, header, formData, body)
  let scheme = call_564555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564555.url(scheme.get, call_564555.host, call_564555.base,
                         call_564555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564555, url, valid)

proc call*(call_564556: Call_WebAppsListConfigurationSnapshotInfo_564548;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564557 = newJObject()
  var query_564558 = newJObject()
  add(query_564558, "api-version", newJString(apiVersion))
  add(path_564557, "name", newJString(name))
  add(path_564557, "subscriptionId", newJString(subscriptionId))
  add(path_564557, "resourceGroupName", newJString(resourceGroupName))
  result = call_564556.call(path_564557, query_564558, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_564548(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_564549, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_564550, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_564559 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSnapshot_564561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_564560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_564562 = path.getOrDefault("snapshotId")
  valid_564562 = validateParameter(valid_564562, JString, required = true,
                                 default = nil)
  if valid_564562 != nil:
    section.add "snapshotId", valid_564562
  var valid_564563 = path.getOrDefault("name")
  valid_564563 = validateParameter(valid_564563, JString, required = true,
                                 default = nil)
  if valid_564563 != nil:
    section.add "name", valid_564563
  var valid_564564 = path.getOrDefault("subscriptionId")
  valid_564564 = validateParameter(valid_564564, JString, required = true,
                                 default = nil)
  if valid_564564 != nil:
    section.add "subscriptionId", valid_564564
  var valid_564565 = path.getOrDefault("resourceGroupName")
  valid_564565 = validateParameter(valid_564565, JString, required = true,
                                 default = nil)
  if valid_564565 != nil:
    section.add "resourceGroupName", valid_564565
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564566 = query.getOrDefault("api-version")
  valid_564566 = validateParameter(valid_564566, JString, required = true,
                                 default = nil)
  if valid_564566 != nil:
    section.add "api-version", valid_564566
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564567: Call_WebAppsGetConfigurationSnapshot_564559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_564567.validator(path, query, header, formData, body)
  let scheme = call_564567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564567.url(scheme.get, call_564567.host, call_564567.base,
                         call_564567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564567, url, valid)

proc call*(call_564568: Call_WebAppsGetConfigurationSnapshot_564559;
          snapshotId: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564569 = newJObject()
  var query_564570 = newJObject()
  add(path_564569, "snapshotId", newJString(snapshotId))
  add(query_564570, "api-version", newJString(apiVersion))
  add(path_564569, "name", newJString(name))
  add(path_564569, "subscriptionId", newJString(subscriptionId))
  add(path_564569, "resourceGroupName", newJString(resourceGroupName))
  result = call_564568.call(path_564569, query_564570, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_564559(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_564560, base: "",
    url: url_WebAppsGetConfigurationSnapshot_564561, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_564571 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecoverSiteConfigurationSnapshot_564573(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_564572(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_564574 = path.getOrDefault("snapshotId")
  valid_564574 = validateParameter(valid_564574, JString, required = true,
                                 default = nil)
  if valid_564574 != nil:
    section.add "snapshotId", valid_564574
  var valid_564575 = path.getOrDefault("name")
  valid_564575 = validateParameter(valid_564575, JString, required = true,
                                 default = nil)
  if valid_564575 != nil:
    section.add "name", valid_564575
  var valid_564576 = path.getOrDefault("subscriptionId")
  valid_564576 = validateParameter(valid_564576, JString, required = true,
                                 default = nil)
  if valid_564576 != nil:
    section.add "subscriptionId", valid_564576
  var valid_564577 = path.getOrDefault("resourceGroupName")
  valid_564577 = validateParameter(valid_564577, JString, required = true,
                                 default = nil)
  if valid_564577 != nil:
    section.add "resourceGroupName", valid_564577
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564578 = query.getOrDefault("api-version")
  valid_564578 = validateParameter(valid_564578, JString, required = true,
                                 default = nil)
  if valid_564578 != nil:
    section.add "api-version", valid_564578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564579: Call_WebAppsRecoverSiteConfigurationSnapshot_564571;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_564579.validator(path, query, header, formData, body)
  let scheme = call_564579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564579.url(scheme.get, call_564579.host, call_564579.base,
                         call_564579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564579, url, valid)

proc call*(call_564580: Call_WebAppsRecoverSiteConfigurationSnapshot_564571;
          snapshotId: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564581 = newJObject()
  var query_564582 = newJObject()
  add(path_564581, "snapshotId", newJString(snapshotId))
  add(query_564582, "api-version", newJString(apiVersion))
  add(path_564581, "name", newJString(name))
  add(path_564581, "subscriptionId", newJString(subscriptionId))
  add(path_564581, "resourceGroupName", newJString(resourceGroupName))
  result = call_564580.call(path_564581, query_564582, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_564571(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_564572, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_564573,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_564583 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogs_564585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_564584(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564586 = path.getOrDefault("name")
  valid_564586 = validateParameter(valid_564586, JString, required = true,
                                 default = nil)
  if valid_564586 != nil:
    section.add "name", valid_564586
  var valid_564587 = path.getOrDefault("subscriptionId")
  valid_564587 = validateParameter(valid_564587, JString, required = true,
                                 default = nil)
  if valid_564587 != nil:
    section.add "subscriptionId", valid_564587
  var valid_564588 = path.getOrDefault("resourceGroupName")
  valid_564588 = validateParameter(valid_564588, JString, required = true,
                                 default = nil)
  if valid_564588 != nil:
    section.add "resourceGroupName", valid_564588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564589 = query.getOrDefault("api-version")
  valid_564589 = validateParameter(valid_564589, JString, required = true,
                                 default = nil)
  if valid_564589 != nil:
    section.add "api-version", valid_564589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564590: Call_WebAppsGetWebSiteContainerLogs_564583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_564590.validator(path, query, header, formData, body)
  let scheme = call_564590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564590.url(scheme.get, call_564590.host, call_564590.base,
                         call_564590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564590, url, valid)

proc call*(call_564591: Call_WebAppsGetWebSiteContainerLogs_564583;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564592 = newJObject()
  var query_564593 = newJObject()
  add(query_564593, "api-version", newJString(apiVersion))
  add(path_564592, "name", newJString(name))
  add(path_564592, "subscriptionId", newJString(subscriptionId))
  add(path_564592, "resourceGroupName", newJString(resourceGroupName))
  result = call_564591.call(path_564592, query_564593, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_564583(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_564584, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_564585, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZip_564594 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContainerLogsZip_564596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZip_564595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564597 = path.getOrDefault("name")
  valid_564597 = validateParameter(valid_564597, JString, required = true,
                                 default = nil)
  if valid_564597 != nil:
    section.add "name", valid_564597
  var valid_564598 = path.getOrDefault("subscriptionId")
  valid_564598 = validateParameter(valid_564598, JString, required = true,
                                 default = nil)
  if valid_564598 != nil:
    section.add "subscriptionId", valid_564598
  var valid_564599 = path.getOrDefault("resourceGroupName")
  valid_564599 = validateParameter(valid_564599, JString, required = true,
                                 default = nil)
  if valid_564599 != nil:
    section.add "resourceGroupName", valid_564599
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564600 = query.getOrDefault("api-version")
  valid_564600 = validateParameter(valid_564600, JString, required = true,
                                 default = nil)
  if valid_564600 != nil:
    section.add "api-version", valid_564600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564601: Call_WebAppsGetContainerLogsZip_564594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_564601.validator(path, query, header, formData, body)
  let scheme = call_564601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564601.url(scheme.get, call_564601.host, call_564601.base,
                         call_564601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564601, url, valid)

proc call*(call_564602: Call_WebAppsGetContainerLogsZip_564594; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564603 = newJObject()
  var query_564604 = newJObject()
  add(query_564604, "api-version", newJString(apiVersion))
  add(path_564603, "name", newJString(name))
  add(path_564603, "subscriptionId", newJString(subscriptionId))
  add(path_564603, "resourceGroupName", newJString(resourceGroupName))
  result = call_564602.call(path_564603, query_564604, nil, nil, nil)

var webAppsGetContainerLogsZip* = Call_WebAppsGetContainerLogsZip_564594(
    name: "webAppsGetContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZip_564595, base: "",
    url: url_WebAppsGetContainerLogsZip_564596, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_564605 = ref object of OpenApiRestCall_563564
proc url_WebAppsListContinuousWebJobs_564607(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_564606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564608 = path.getOrDefault("name")
  valid_564608 = validateParameter(valid_564608, JString, required = true,
                                 default = nil)
  if valid_564608 != nil:
    section.add "name", valid_564608
  var valid_564609 = path.getOrDefault("subscriptionId")
  valid_564609 = validateParameter(valid_564609, JString, required = true,
                                 default = nil)
  if valid_564609 != nil:
    section.add "subscriptionId", valid_564609
  var valid_564610 = path.getOrDefault("resourceGroupName")
  valid_564610 = validateParameter(valid_564610, JString, required = true,
                                 default = nil)
  if valid_564610 != nil:
    section.add "resourceGroupName", valid_564610
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564611 = query.getOrDefault("api-version")
  valid_564611 = validateParameter(valid_564611, JString, required = true,
                                 default = nil)
  if valid_564611 != nil:
    section.add "api-version", valid_564611
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564612: Call_WebAppsListContinuousWebJobs_564605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_564612.validator(path, query, header, formData, body)
  let scheme = call_564612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564612.url(scheme.get, call_564612.host, call_564612.base,
                         call_564612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564612, url, valid)

proc call*(call_564613: Call_WebAppsListContinuousWebJobs_564605;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564614 = newJObject()
  var query_564615 = newJObject()
  add(query_564615, "api-version", newJString(apiVersion))
  add(path_564614, "name", newJString(name))
  add(path_564614, "subscriptionId", newJString(subscriptionId))
  add(path_564614, "resourceGroupName", newJString(resourceGroupName))
  result = call_564613.call(path_564614, query_564615, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_564605(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_564606, base: "",
    url: url_WebAppsListContinuousWebJobs_564607, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_564616 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContinuousWebJob_564618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_564617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564619 = path.getOrDefault("name")
  valid_564619 = validateParameter(valid_564619, JString, required = true,
                                 default = nil)
  if valid_564619 != nil:
    section.add "name", valid_564619
  var valid_564620 = path.getOrDefault("subscriptionId")
  valid_564620 = validateParameter(valid_564620, JString, required = true,
                                 default = nil)
  if valid_564620 != nil:
    section.add "subscriptionId", valid_564620
  var valid_564621 = path.getOrDefault("webJobName")
  valid_564621 = validateParameter(valid_564621, JString, required = true,
                                 default = nil)
  if valid_564621 != nil:
    section.add "webJobName", valid_564621
  var valid_564622 = path.getOrDefault("resourceGroupName")
  valid_564622 = validateParameter(valid_564622, JString, required = true,
                                 default = nil)
  if valid_564622 != nil:
    section.add "resourceGroupName", valid_564622
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564623 = query.getOrDefault("api-version")
  valid_564623 = validateParameter(valid_564623, JString, required = true,
                                 default = nil)
  if valid_564623 != nil:
    section.add "api-version", valid_564623
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564624: Call_WebAppsGetContinuousWebJob_564616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564624.validator(path, query, header, formData, body)
  let scheme = call_564624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564624.url(scheme.get, call_564624.host, call_564624.base,
                         call_564624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564624, url, valid)

proc call*(call_564625: Call_WebAppsGetContinuousWebJob_564616; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564626 = newJObject()
  var query_564627 = newJObject()
  add(query_564627, "api-version", newJString(apiVersion))
  add(path_564626, "name", newJString(name))
  add(path_564626, "subscriptionId", newJString(subscriptionId))
  add(path_564626, "webJobName", newJString(webJobName))
  add(path_564626, "resourceGroupName", newJString(resourceGroupName))
  result = call_564625.call(path_564626, query_564627, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_564616(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_564617, base: "",
    url: url_WebAppsGetContinuousWebJob_564618, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_564628 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteContinuousWebJob_564630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_564629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564631 = path.getOrDefault("name")
  valid_564631 = validateParameter(valid_564631, JString, required = true,
                                 default = nil)
  if valid_564631 != nil:
    section.add "name", valid_564631
  var valid_564632 = path.getOrDefault("subscriptionId")
  valid_564632 = validateParameter(valid_564632, JString, required = true,
                                 default = nil)
  if valid_564632 != nil:
    section.add "subscriptionId", valid_564632
  var valid_564633 = path.getOrDefault("webJobName")
  valid_564633 = validateParameter(valid_564633, JString, required = true,
                                 default = nil)
  if valid_564633 != nil:
    section.add "webJobName", valid_564633
  var valid_564634 = path.getOrDefault("resourceGroupName")
  valid_564634 = validateParameter(valid_564634, JString, required = true,
                                 default = nil)
  if valid_564634 != nil:
    section.add "resourceGroupName", valid_564634
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564635 = query.getOrDefault("api-version")
  valid_564635 = validateParameter(valid_564635, JString, required = true,
                                 default = nil)
  if valid_564635 != nil:
    section.add "api-version", valid_564635
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564636: Call_WebAppsDeleteContinuousWebJob_564628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564636.validator(path, query, header, formData, body)
  let scheme = call_564636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564636.url(scheme.get, call_564636.host, call_564636.base,
                         call_564636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564636, url, valid)

proc call*(call_564637: Call_WebAppsDeleteContinuousWebJob_564628;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564638 = newJObject()
  var query_564639 = newJObject()
  add(query_564639, "api-version", newJString(apiVersion))
  add(path_564638, "name", newJString(name))
  add(path_564638, "subscriptionId", newJString(subscriptionId))
  add(path_564638, "webJobName", newJString(webJobName))
  add(path_564638, "resourceGroupName", newJString(resourceGroupName))
  result = call_564637.call(path_564638, query_564639, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_564628(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_564629, base: "",
    url: url_WebAppsDeleteContinuousWebJob_564630, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_564640 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartContinuousWebJob_564642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_564641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564643 = path.getOrDefault("name")
  valid_564643 = validateParameter(valid_564643, JString, required = true,
                                 default = nil)
  if valid_564643 != nil:
    section.add "name", valid_564643
  var valid_564644 = path.getOrDefault("subscriptionId")
  valid_564644 = validateParameter(valid_564644, JString, required = true,
                                 default = nil)
  if valid_564644 != nil:
    section.add "subscriptionId", valid_564644
  var valid_564645 = path.getOrDefault("webJobName")
  valid_564645 = validateParameter(valid_564645, JString, required = true,
                                 default = nil)
  if valid_564645 != nil:
    section.add "webJobName", valid_564645
  var valid_564646 = path.getOrDefault("resourceGroupName")
  valid_564646 = validateParameter(valid_564646, JString, required = true,
                                 default = nil)
  if valid_564646 != nil:
    section.add "resourceGroupName", valid_564646
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564647 = query.getOrDefault("api-version")
  valid_564647 = validateParameter(valid_564647, JString, required = true,
                                 default = nil)
  if valid_564647 != nil:
    section.add "api-version", valid_564647
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564648: Call_WebAppsStartContinuousWebJob_564640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_564648.validator(path, query, header, formData, body)
  let scheme = call_564648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564648.url(scheme.get, call_564648.host, call_564648.base,
                         call_564648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564648, url, valid)

proc call*(call_564649: Call_WebAppsStartContinuousWebJob_564640;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564650 = newJObject()
  var query_564651 = newJObject()
  add(query_564651, "api-version", newJString(apiVersion))
  add(path_564650, "name", newJString(name))
  add(path_564650, "subscriptionId", newJString(subscriptionId))
  add(path_564650, "webJobName", newJString(webJobName))
  add(path_564650, "resourceGroupName", newJString(resourceGroupName))
  result = call_564649.call(path_564650, query_564651, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_564640(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_564641, base: "",
    url: url_WebAppsStartContinuousWebJob_564642, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_564652 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopContinuousWebJob_564654(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_564653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564655 = path.getOrDefault("name")
  valid_564655 = validateParameter(valid_564655, JString, required = true,
                                 default = nil)
  if valid_564655 != nil:
    section.add "name", valid_564655
  var valid_564656 = path.getOrDefault("subscriptionId")
  valid_564656 = validateParameter(valid_564656, JString, required = true,
                                 default = nil)
  if valid_564656 != nil:
    section.add "subscriptionId", valid_564656
  var valid_564657 = path.getOrDefault("webJobName")
  valid_564657 = validateParameter(valid_564657, JString, required = true,
                                 default = nil)
  if valid_564657 != nil:
    section.add "webJobName", valid_564657
  var valid_564658 = path.getOrDefault("resourceGroupName")
  valid_564658 = validateParameter(valid_564658, JString, required = true,
                                 default = nil)
  if valid_564658 != nil:
    section.add "resourceGroupName", valid_564658
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564659 = query.getOrDefault("api-version")
  valid_564659 = validateParameter(valid_564659, JString, required = true,
                                 default = nil)
  if valid_564659 != nil:
    section.add "api-version", valid_564659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564660: Call_WebAppsStopContinuousWebJob_564652; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_564660.validator(path, query, header, formData, body)
  let scheme = call_564660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564660.url(scheme.get, call_564660.host, call_564660.base,
                         call_564660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564660, url, valid)

proc call*(call_564661: Call_WebAppsStopContinuousWebJob_564652;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564662 = newJObject()
  var query_564663 = newJObject()
  add(query_564663, "api-version", newJString(apiVersion))
  add(path_564662, "name", newJString(name))
  add(path_564662, "subscriptionId", newJString(subscriptionId))
  add(path_564662, "webJobName", newJString(webJobName))
  add(path_564662, "resourceGroupName", newJString(resourceGroupName))
  result = call_564661.call(path_564662, query_564663, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_564652(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_564653, base: "",
    url: url_WebAppsStopContinuousWebJob_564654, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_564664 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeployments_564666(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_564665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564667 = path.getOrDefault("name")
  valid_564667 = validateParameter(valid_564667, JString, required = true,
                                 default = nil)
  if valid_564667 != nil:
    section.add "name", valid_564667
  var valid_564668 = path.getOrDefault("subscriptionId")
  valid_564668 = validateParameter(valid_564668, JString, required = true,
                                 default = nil)
  if valid_564668 != nil:
    section.add "subscriptionId", valid_564668
  var valid_564669 = path.getOrDefault("resourceGroupName")
  valid_564669 = validateParameter(valid_564669, JString, required = true,
                                 default = nil)
  if valid_564669 != nil:
    section.add "resourceGroupName", valid_564669
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564670 = query.getOrDefault("api-version")
  valid_564670 = validateParameter(valid_564670, JString, required = true,
                                 default = nil)
  if valid_564670 != nil:
    section.add "api-version", valid_564670
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564671: Call_WebAppsListDeployments_564664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_564671.validator(path, query, header, formData, body)
  let scheme = call_564671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564671.url(scheme.get, call_564671.host, call_564671.base,
                         call_564671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564671, url, valid)

proc call*(call_564672: Call_WebAppsListDeployments_564664; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564673 = newJObject()
  var query_564674 = newJObject()
  add(query_564674, "api-version", newJString(apiVersion))
  add(path_564673, "name", newJString(name))
  add(path_564673, "subscriptionId", newJString(subscriptionId))
  add(path_564673, "resourceGroupName", newJString(resourceGroupName))
  result = call_564672.call(path_564673, query_564674, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_564664(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_564665, base: "",
    url: url_WebAppsListDeployments_564666, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_564687 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateDeployment_564689(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_564688(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564690 = path.getOrDefault("id")
  valid_564690 = validateParameter(valid_564690, JString, required = true,
                                 default = nil)
  if valid_564690 != nil:
    section.add "id", valid_564690
  var valid_564691 = path.getOrDefault("name")
  valid_564691 = validateParameter(valid_564691, JString, required = true,
                                 default = nil)
  if valid_564691 != nil:
    section.add "name", valid_564691
  var valid_564692 = path.getOrDefault("subscriptionId")
  valid_564692 = validateParameter(valid_564692, JString, required = true,
                                 default = nil)
  if valid_564692 != nil:
    section.add "subscriptionId", valid_564692
  var valid_564693 = path.getOrDefault("resourceGroupName")
  valid_564693 = validateParameter(valid_564693, JString, required = true,
                                 default = nil)
  if valid_564693 != nil:
    section.add "resourceGroupName", valid_564693
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564694 = query.getOrDefault("api-version")
  valid_564694 = validateParameter(valid_564694, JString, required = true,
                                 default = nil)
  if valid_564694 != nil:
    section.add "api-version", valid_564694
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564696: Call_WebAppsCreateDeployment_564687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_564696.validator(path, query, header, formData, body)
  let scheme = call_564696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564696.url(scheme.get, call_564696.host, call_564696.base,
                         call_564696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564696, url, valid)

proc call*(call_564697: Call_WebAppsCreateDeployment_564687; apiVersion: string;
          id: string; name: string; subscriptionId: string; deployment: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deployment: JObject (required)
  ##             : Deployment details.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564698 = newJObject()
  var query_564699 = newJObject()
  var body_564700 = newJObject()
  add(query_564699, "api-version", newJString(apiVersion))
  add(path_564698, "id", newJString(id))
  add(path_564698, "name", newJString(name))
  add(path_564698, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_564700 = deployment
  add(path_564698, "resourceGroupName", newJString(resourceGroupName))
  result = call_564697.call(path_564698, query_564699, nil, nil, body_564700)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_564687(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_564688, base: "",
    url: url_WebAppsCreateDeployment_564689, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_564675 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDeployment_564677(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_564676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564678 = path.getOrDefault("id")
  valid_564678 = validateParameter(valid_564678, JString, required = true,
                                 default = nil)
  if valid_564678 != nil:
    section.add "id", valid_564678
  var valid_564679 = path.getOrDefault("name")
  valid_564679 = validateParameter(valid_564679, JString, required = true,
                                 default = nil)
  if valid_564679 != nil:
    section.add "name", valid_564679
  var valid_564680 = path.getOrDefault("subscriptionId")
  valid_564680 = validateParameter(valid_564680, JString, required = true,
                                 default = nil)
  if valid_564680 != nil:
    section.add "subscriptionId", valid_564680
  var valid_564681 = path.getOrDefault("resourceGroupName")
  valid_564681 = validateParameter(valid_564681, JString, required = true,
                                 default = nil)
  if valid_564681 != nil:
    section.add "resourceGroupName", valid_564681
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564682 = query.getOrDefault("api-version")
  valid_564682 = validateParameter(valid_564682, JString, required = true,
                                 default = nil)
  if valid_564682 != nil:
    section.add "api-version", valid_564682
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564683: Call_WebAppsGetDeployment_564675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564683.validator(path, query, header, formData, body)
  let scheme = call_564683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564683.url(scheme.get, call_564683.host, call_564683.base,
                         call_564683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564683, url, valid)

proc call*(call_564684: Call_WebAppsGetDeployment_564675; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564685 = newJObject()
  var query_564686 = newJObject()
  add(query_564686, "api-version", newJString(apiVersion))
  add(path_564685, "id", newJString(id))
  add(path_564685, "name", newJString(name))
  add(path_564685, "subscriptionId", newJString(subscriptionId))
  add(path_564685, "resourceGroupName", newJString(resourceGroupName))
  result = call_564684.call(path_564685, query_564686, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_564675(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_564676, base: "",
    url: url_WebAppsGetDeployment_564677, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_564701 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDeployment_564703(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_564702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564704 = path.getOrDefault("id")
  valid_564704 = validateParameter(valid_564704, JString, required = true,
                                 default = nil)
  if valid_564704 != nil:
    section.add "id", valid_564704
  var valid_564705 = path.getOrDefault("name")
  valid_564705 = validateParameter(valid_564705, JString, required = true,
                                 default = nil)
  if valid_564705 != nil:
    section.add "name", valid_564705
  var valid_564706 = path.getOrDefault("subscriptionId")
  valid_564706 = validateParameter(valid_564706, JString, required = true,
                                 default = nil)
  if valid_564706 != nil:
    section.add "subscriptionId", valid_564706
  var valid_564707 = path.getOrDefault("resourceGroupName")
  valid_564707 = validateParameter(valid_564707, JString, required = true,
                                 default = nil)
  if valid_564707 != nil:
    section.add "resourceGroupName", valid_564707
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564708 = query.getOrDefault("api-version")
  valid_564708 = validateParameter(valid_564708, JString, required = true,
                                 default = nil)
  if valid_564708 != nil:
    section.add "api-version", valid_564708
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564709: Call_WebAppsDeleteDeployment_564701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564709.validator(path, query, header, formData, body)
  let scheme = call_564709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564709.url(scheme.get, call_564709.host, call_564709.base,
                         call_564709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564709, url, valid)

proc call*(call_564710: Call_WebAppsDeleteDeployment_564701; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564711 = newJObject()
  var query_564712 = newJObject()
  add(query_564712, "api-version", newJString(apiVersion))
  add(path_564711, "id", newJString(id))
  add(path_564711, "name", newJString(name))
  add(path_564711, "subscriptionId", newJString(subscriptionId))
  add(path_564711, "resourceGroupName", newJString(resourceGroupName))
  result = call_564710.call(path_564711, query_564712, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_564701(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_564702, base: "",
    url: url_WebAppsDeleteDeployment_564703, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_564713 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentLog_564715(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_564714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564716 = path.getOrDefault("id")
  valid_564716 = validateParameter(valid_564716, JString, required = true,
                                 default = nil)
  if valid_564716 != nil:
    section.add "id", valid_564716
  var valid_564717 = path.getOrDefault("name")
  valid_564717 = validateParameter(valid_564717, JString, required = true,
                                 default = nil)
  if valid_564717 != nil:
    section.add "name", valid_564717
  var valid_564718 = path.getOrDefault("subscriptionId")
  valid_564718 = validateParameter(valid_564718, JString, required = true,
                                 default = nil)
  if valid_564718 != nil:
    section.add "subscriptionId", valid_564718
  var valid_564719 = path.getOrDefault("resourceGroupName")
  valid_564719 = validateParameter(valid_564719, JString, required = true,
                                 default = nil)
  if valid_564719 != nil:
    section.add "resourceGroupName", valid_564719
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564720 = query.getOrDefault("api-version")
  valid_564720 = validateParameter(valid_564720, JString, required = true,
                                 default = nil)
  if valid_564720 != nil:
    section.add "api-version", valid_564720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564721: Call_WebAppsListDeploymentLog_564713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_564721.validator(path, query, header, formData, body)
  let scheme = call_564721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564721.url(scheme.get, call_564721.host, call_564721.base,
                         call_564721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564721, url, valid)

proc call*(call_564722: Call_WebAppsListDeploymentLog_564713; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564723 = newJObject()
  var query_564724 = newJObject()
  add(query_564724, "api-version", newJString(apiVersion))
  add(path_564723, "id", newJString(id))
  add(path_564723, "name", newJString(name))
  add(path_564723, "subscriptionId", newJString(subscriptionId))
  add(path_564723, "resourceGroupName", newJString(resourceGroupName))
  result = call_564722.call(path_564723, query_564724, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_564713(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_564714, base: "",
    url: url_WebAppsListDeploymentLog_564715, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackup_564725 = ref object of OpenApiRestCall_563564
proc url_WebAppsDiscoverBackup_564727(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackup_564726(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564728 = path.getOrDefault("name")
  valid_564728 = validateParameter(valid_564728, JString, required = true,
                                 default = nil)
  if valid_564728 != nil:
    section.add "name", valid_564728
  var valid_564729 = path.getOrDefault("subscriptionId")
  valid_564729 = validateParameter(valid_564729, JString, required = true,
                                 default = nil)
  if valid_564729 != nil:
    section.add "subscriptionId", valid_564729
  var valid_564730 = path.getOrDefault("resourceGroupName")
  valid_564730 = validateParameter(valid_564730, JString, required = true,
                                 default = nil)
  if valid_564730 != nil:
    section.add "resourceGroupName", valid_564730
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564731 = query.getOrDefault("api-version")
  valid_564731 = validateParameter(valid_564731, JString, required = true,
                                 default = nil)
  if valid_564731 != nil:
    section.add "api-version", valid_564731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564733: Call_WebAppsDiscoverBackup_564725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_564733.validator(path, query, header, formData, body)
  let scheme = call_564733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564733.url(scheme.get, call_564733.host, call_564733.base,
                         call_564733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564733, url, valid)

proc call*(call_564734: Call_WebAppsDiscoverBackup_564725; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## webAppsDiscoverBackup
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_564735 = newJObject()
  var query_564736 = newJObject()
  var body_564737 = newJObject()
  add(query_564736, "api-version", newJString(apiVersion))
  add(path_564735, "name", newJString(name))
  add(path_564735, "subscriptionId", newJString(subscriptionId))
  add(path_564735, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564737 = request
  result = call_564734.call(path_564735, query_564736, nil, nil, body_564737)

var webAppsDiscoverBackup* = Call_WebAppsDiscoverBackup_564725(
    name: "webAppsDiscoverBackup", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
    validator: validate_WebAppsDiscoverBackup_564726, base: "",
    url: url_WebAppsDiscoverBackup_564727, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_564738 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDomainOwnershipIdentifiers_564740(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_564739(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564741 = path.getOrDefault("name")
  valid_564741 = validateParameter(valid_564741, JString, required = true,
                                 default = nil)
  if valid_564741 != nil:
    section.add "name", valid_564741
  var valid_564742 = path.getOrDefault("subscriptionId")
  valid_564742 = validateParameter(valid_564742, JString, required = true,
                                 default = nil)
  if valid_564742 != nil:
    section.add "subscriptionId", valid_564742
  var valid_564743 = path.getOrDefault("resourceGroupName")
  valid_564743 = validateParameter(valid_564743, JString, required = true,
                                 default = nil)
  if valid_564743 != nil:
    section.add "resourceGroupName", valid_564743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564744 = query.getOrDefault("api-version")
  valid_564744 = validateParameter(valid_564744, JString, required = true,
                                 default = nil)
  if valid_564744 != nil:
    section.add "api-version", valid_564744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564745: Call_WebAppsListDomainOwnershipIdentifiers_564738;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_564745.validator(path, query, header, formData, body)
  let scheme = call_564745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564745.url(scheme.get, call_564745.host, call_564745.base,
                         call_564745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564745, url, valid)

proc call*(call_564746: Call_WebAppsListDomainOwnershipIdentifiers_564738;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564747 = newJObject()
  var query_564748 = newJObject()
  add(query_564748, "api-version", newJString(apiVersion))
  add(path_564747, "name", newJString(name))
  add(path_564747, "subscriptionId", newJString(subscriptionId))
  add(path_564747, "resourceGroupName", newJString(resourceGroupName))
  result = call_564746.call(path_564747, query_564748, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_564738(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_564739, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_564740, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564761 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564763(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564762(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564764 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564764 = validateParameter(valid_564764, JString, required = true,
                                 default = nil)
  if valid_564764 != nil:
    section.add "domainOwnershipIdentifierName", valid_564764
  var valid_564765 = path.getOrDefault("name")
  valid_564765 = validateParameter(valid_564765, JString, required = true,
                                 default = nil)
  if valid_564765 != nil:
    section.add "name", valid_564765
  var valid_564766 = path.getOrDefault("subscriptionId")
  valid_564766 = validateParameter(valid_564766, JString, required = true,
                                 default = nil)
  if valid_564766 != nil:
    section.add "subscriptionId", valid_564766
  var valid_564767 = path.getOrDefault("resourceGroupName")
  valid_564767 = validateParameter(valid_564767, JString, required = true,
                                 default = nil)
  if valid_564767 != nil:
    section.add "resourceGroupName", valid_564767
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564768 = query.getOrDefault("api-version")
  valid_564768 = validateParameter(valid_564768, JString, required = true,
                                 default = nil)
  if valid_564768 != nil:
    section.add "api-version", valid_564768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564770: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564761;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_564770.validator(path, query, header, formData, body)
  let scheme = call_564770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564770.url(scheme.get, call_564770.host, call_564770.base,
                         call_564770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564770, url, valid)

proc call*(call_564771: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564761;
          domainOwnershipIdentifierName: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564772 = newJObject()
  var query_564773 = newJObject()
  var body_564774 = newJObject()
  add(path_564772, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564773, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_564774 = domainOwnershipIdentifier
  add(path_564772, "name", newJString(name))
  add(path_564772, "subscriptionId", newJString(subscriptionId))
  add(path_564772, "resourceGroupName", newJString(resourceGroupName))
  result = call_564771.call(path_564772, query_564773, nil, nil, body_564774)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564761(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564762,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564763,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_564749 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDomainOwnershipIdentifier_564751(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_564750(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564752 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564752 = validateParameter(valid_564752, JString, required = true,
                                 default = nil)
  if valid_564752 != nil:
    section.add "domainOwnershipIdentifierName", valid_564752
  var valid_564753 = path.getOrDefault("name")
  valid_564753 = validateParameter(valid_564753, JString, required = true,
                                 default = nil)
  if valid_564753 != nil:
    section.add "name", valid_564753
  var valid_564754 = path.getOrDefault("subscriptionId")
  valid_564754 = validateParameter(valid_564754, JString, required = true,
                                 default = nil)
  if valid_564754 != nil:
    section.add "subscriptionId", valid_564754
  var valid_564755 = path.getOrDefault("resourceGroupName")
  valid_564755 = validateParameter(valid_564755, JString, required = true,
                                 default = nil)
  if valid_564755 != nil:
    section.add "resourceGroupName", valid_564755
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564756 = query.getOrDefault("api-version")
  valid_564756 = validateParameter(valid_564756, JString, required = true,
                                 default = nil)
  if valid_564756 != nil:
    section.add "api-version", valid_564756
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564757: Call_WebAppsGetDomainOwnershipIdentifier_564749;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_564757.validator(path, query, header, formData, body)
  let scheme = call_564757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564757.url(scheme.get, call_564757.host, call_564757.base,
                         call_564757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564757, url, valid)

proc call*(call_564758: Call_WebAppsGetDomainOwnershipIdentifier_564749;
          domainOwnershipIdentifierName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564759 = newJObject()
  var query_564760 = newJObject()
  add(path_564759, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564760, "api-version", newJString(apiVersion))
  add(path_564759, "name", newJString(name))
  add(path_564759, "subscriptionId", newJString(subscriptionId))
  add(path_564759, "resourceGroupName", newJString(resourceGroupName))
  result = call_564758.call(path_564759, query_564760, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_564749(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_564750, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_564751, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_564787 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDomainOwnershipIdentifier_564789(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_564788(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564790 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564790 = validateParameter(valid_564790, JString, required = true,
                                 default = nil)
  if valid_564790 != nil:
    section.add "domainOwnershipIdentifierName", valid_564790
  var valid_564791 = path.getOrDefault("name")
  valid_564791 = validateParameter(valid_564791, JString, required = true,
                                 default = nil)
  if valid_564791 != nil:
    section.add "name", valid_564791
  var valid_564792 = path.getOrDefault("subscriptionId")
  valid_564792 = validateParameter(valid_564792, JString, required = true,
                                 default = nil)
  if valid_564792 != nil:
    section.add "subscriptionId", valid_564792
  var valid_564793 = path.getOrDefault("resourceGroupName")
  valid_564793 = validateParameter(valid_564793, JString, required = true,
                                 default = nil)
  if valid_564793 != nil:
    section.add "resourceGroupName", valid_564793
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564794 = query.getOrDefault("api-version")
  valid_564794 = validateParameter(valid_564794, JString, required = true,
                                 default = nil)
  if valid_564794 != nil:
    section.add "api-version", valid_564794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564796: Call_WebAppsUpdateDomainOwnershipIdentifier_564787;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_564796.validator(path, query, header, formData, body)
  let scheme = call_564796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564796.url(scheme.get, call_564796.host, call_564796.base,
                         call_564796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564796, url, valid)

proc call*(call_564797: Call_WebAppsUpdateDomainOwnershipIdentifier_564787;
          domainOwnershipIdentifierName: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564798 = newJObject()
  var query_564799 = newJObject()
  var body_564800 = newJObject()
  add(path_564798, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564799, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_564800 = domainOwnershipIdentifier
  add(path_564798, "name", newJString(name))
  add(path_564798, "subscriptionId", newJString(subscriptionId))
  add(path_564798, "resourceGroupName", newJString(resourceGroupName))
  result = call_564797.call(path_564798, query_564799, nil, nil, body_564800)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_564787(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_564788, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_564789,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_564775 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDomainOwnershipIdentifier_564777(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_564776(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564778 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564778 = validateParameter(valid_564778, JString, required = true,
                                 default = nil)
  if valid_564778 != nil:
    section.add "domainOwnershipIdentifierName", valid_564778
  var valid_564779 = path.getOrDefault("name")
  valid_564779 = validateParameter(valid_564779, JString, required = true,
                                 default = nil)
  if valid_564779 != nil:
    section.add "name", valid_564779
  var valid_564780 = path.getOrDefault("subscriptionId")
  valid_564780 = validateParameter(valid_564780, JString, required = true,
                                 default = nil)
  if valid_564780 != nil:
    section.add "subscriptionId", valid_564780
  var valid_564781 = path.getOrDefault("resourceGroupName")
  valid_564781 = validateParameter(valid_564781, JString, required = true,
                                 default = nil)
  if valid_564781 != nil:
    section.add "resourceGroupName", valid_564781
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564782 = query.getOrDefault("api-version")
  valid_564782 = validateParameter(valid_564782, JString, required = true,
                                 default = nil)
  if valid_564782 != nil:
    section.add "api-version", valid_564782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564783: Call_WebAppsDeleteDomainOwnershipIdentifier_564775;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_564783.validator(path, query, header, formData, body)
  let scheme = call_564783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564783.url(scheme.get, call_564783.host, call_564783.base,
                         call_564783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564783, url, valid)

proc call*(call_564784: Call_WebAppsDeleteDomainOwnershipIdentifier_564775;
          domainOwnershipIdentifierName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564785 = newJObject()
  var query_564786 = newJObject()
  add(path_564785, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564786, "api-version", newJString(apiVersion))
  add(path_564785, "name", newJString(name))
  add(path_564785, "subscriptionId", newJString(subscriptionId))
  add(path_564785, "resourceGroupName", newJString(resourceGroupName))
  result = call_564784.call(path_564785, query_564786, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_564775(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_564776, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_564777,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_564812 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateMSDeployOperation_564814(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_564813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564815 = path.getOrDefault("name")
  valid_564815 = validateParameter(valid_564815, JString, required = true,
                                 default = nil)
  if valid_564815 != nil:
    section.add "name", valid_564815
  var valid_564816 = path.getOrDefault("subscriptionId")
  valid_564816 = validateParameter(valid_564816, JString, required = true,
                                 default = nil)
  if valid_564816 != nil:
    section.add "subscriptionId", valid_564816
  var valid_564817 = path.getOrDefault("resourceGroupName")
  valid_564817 = validateParameter(valid_564817, JString, required = true,
                                 default = nil)
  if valid_564817 != nil:
    section.add "resourceGroupName", valid_564817
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564818 = query.getOrDefault("api-version")
  valid_564818 = validateParameter(valid_564818, JString, required = true,
                                 default = nil)
  if valid_564818 != nil:
    section.add "api-version", valid_564818
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564820: Call_WebAppsCreateMSDeployOperation_564812; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_564820.validator(path, query, header, formData, body)
  let scheme = call_564820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564820.url(scheme.get, call_564820.host, call_564820.base,
                         call_564820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564820, url, valid)

proc call*(call_564821: Call_WebAppsCreateMSDeployOperation_564812;
          apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564822 = newJObject()
  var query_564823 = newJObject()
  var body_564824 = newJObject()
  add(query_564823, "api-version", newJString(apiVersion))
  add(path_564822, "name", newJString(name))
  add(path_564822, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_564824 = MSDeploy
  add(path_564822, "resourceGroupName", newJString(resourceGroupName))
  result = call_564821.call(path_564822, query_564823, nil, nil, body_564824)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_564812(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_564813, base: "",
    url: url_WebAppsCreateMSDeployOperation_564814, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_564801 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployStatus_564803(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_564802(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564804 = path.getOrDefault("name")
  valid_564804 = validateParameter(valid_564804, JString, required = true,
                                 default = nil)
  if valid_564804 != nil:
    section.add "name", valid_564804
  var valid_564805 = path.getOrDefault("subscriptionId")
  valid_564805 = validateParameter(valid_564805, JString, required = true,
                                 default = nil)
  if valid_564805 != nil:
    section.add "subscriptionId", valid_564805
  var valid_564806 = path.getOrDefault("resourceGroupName")
  valid_564806 = validateParameter(valid_564806, JString, required = true,
                                 default = nil)
  if valid_564806 != nil:
    section.add "resourceGroupName", valid_564806
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564807 = query.getOrDefault("api-version")
  valid_564807 = validateParameter(valid_564807, JString, required = true,
                                 default = nil)
  if valid_564807 != nil:
    section.add "api-version", valid_564807
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564808: Call_WebAppsGetMSDeployStatus_564801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_564808.validator(path, query, header, formData, body)
  let scheme = call_564808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564808.url(scheme.get, call_564808.host, call_564808.base,
                         call_564808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564808, url, valid)

proc call*(call_564809: Call_WebAppsGetMSDeployStatus_564801; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564810 = newJObject()
  var query_564811 = newJObject()
  add(query_564811, "api-version", newJString(apiVersion))
  add(path_564810, "name", newJString(name))
  add(path_564810, "subscriptionId", newJString(subscriptionId))
  add(path_564810, "resourceGroupName", newJString(resourceGroupName))
  result = call_564809.call(path_564810, query_564811, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_564801(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_564802, base: "",
    url: url_WebAppsGetMSDeployStatus_564803, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_564825 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployLog_564827(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_564826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564828 = path.getOrDefault("name")
  valid_564828 = validateParameter(valid_564828, JString, required = true,
                                 default = nil)
  if valid_564828 != nil:
    section.add "name", valid_564828
  var valid_564829 = path.getOrDefault("subscriptionId")
  valid_564829 = validateParameter(valid_564829, JString, required = true,
                                 default = nil)
  if valid_564829 != nil:
    section.add "subscriptionId", valid_564829
  var valid_564830 = path.getOrDefault("resourceGroupName")
  valid_564830 = validateParameter(valid_564830, JString, required = true,
                                 default = nil)
  if valid_564830 != nil:
    section.add "resourceGroupName", valid_564830
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564831 = query.getOrDefault("api-version")
  valid_564831 = validateParameter(valid_564831, JString, required = true,
                                 default = nil)
  if valid_564831 != nil:
    section.add "api-version", valid_564831
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564832: Call_WebAppsGetMSDeployLog_564825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_564832.validator(path, query, header, formData, body)
  let scheme = call_564832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564832.url(scheme.get, call_564832.host, call_564832.base,
                         call_564832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564832, url, valid)

proc call*(call_564833: Call_WebAppsGetMSDeployLog_564825; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564834 = newJObject()
  var query_564835 = newJObject()
  add(query_564835, "api-version", newJString(apiVersion))
  add(path_564834, "name", newJString(name))
  add(path_564834, "subscriptionId", newJString(subscriptionId))
  add(path_564834, "resourceGroupName", newJString(resourceGroupName))
  result = call_564833.call(path_564834, query_564835, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_564825(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_564826, base: "",
    url: url_WebAppsGetMSDeployLog_564827, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_564836 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctions_564838(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_564837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564839 = path.getOrDefault("name")
  valid_564839 = validateParameter(valid_564839, JString, required = true,
                                 default = nil)
  if valid_564839 != nil:
    section.add "name", valid_564839
  var valid_564840 = path.getOrDefault("subscriptionId")
  valid_564840 = validateParameter(valid_564840, JString, required = true,
                                 default = nil)
  if valid_564840 != nil:
    section.add "subscriptionId", valid_564840
  var valid_564841 = path.getOrDefault("resourceGroupName")
  valid_564841 = validateParameter(valid_564841, JString, required = true,
                                 default = nil)
  if valid_564841 != nil:
    section.add "resourceGroupName", valid_564841
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564842 = query.getOrDefault("api-version")
  valid_564842 = validateParameter(valid_564842, JString, required = true,
                                 default = nil)
  if valid_564842 != nil:
    section.add "api-version", valid_564842
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564843: Call_WebAppsListFunctions_564836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_564843.validator(path, query, header, formData, body)
  let scheme = call_564843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564843.url(scheme.get, call_564843.host, call_564843.base,
                         call_564843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564843, url, valid)

proc call*(call_564844: Call_WebAppsListFunctions_564836; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564845 = newJObject()
  var query_564846 = newJObject()
  add(query_564846, "api-version", newJString(apiVersion))
  add(path_564845, "name", newJString(name))
  add(path_564845, "subscriptionId", newJString(subscriptionId))
  add(path_564845, "resourceGroupName", newJString(resourceGroupName))
  result = call_564844.call(path_564845, query_564846, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_564836(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_564837, base: "",
    url: url_WebAppsListFunctions_564838, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_564847 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunctionsAdminToken_564849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_564848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564850 = path.getOrDefault("name")
  valid_564850 = validateParameter(valid_564850, JString, required = true,
                                 default = nil)
  if valid_564850 != nil:
    section.add "name", valid_564850
  var valid_564851 = path.getOrDefault("subscriptionId")
  valid_564851 = validateParameter(valid_564851, JString, required = true,
                                 default = nil)
  if valid_564851 != nil:
    section.add "subscriptionId", valid_564851
  var valid_564852 = path.getOrDefault("resourceGroupName")
  valid_564852 = validateParameter(valid_564852, JString, required = true,
                                 default = nil)
  if valid_564852 != nil:
    section.add "resourceGroupName", valid_564852
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564853 = query.getOrDefault("api-version")
  valid_564853 = validateParameter(valid_564853, JString, required = true,
                                 default = nil)
  if valid_564853 != nil:
    section.add "api-version", valid_564853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564854: Call_WebAppsGetFunctionsAdminToken_564847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_564854.validator(path, query, header, formData, body)
  let scheme = call_564854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564854.url(scheme.get, call_564854.host, call_564854.base,
                         call_564854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564854, url, valid)

proc call*(call_564855: Call_WebAppsGetFunctionsAdminToken_564847;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564856 = newJObject()
  var query_564857 = newJObject()
  add(query_564857, "api-version", newJString(apiVersion))
  add(path_564856, "name", newJString(name))
  add(path_564856, "subscriptionId", newJString(subscriptionId))
  add(path_564856, "resourceGroupName", newJString(resourceGroupName))
  result = call_564855.call(path_564856, query_564857, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_564847(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_564848, base: "",
    url: url_WebAppsGetFunctionsAdminToken_564849, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_564870 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateFunction_564872(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_564871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564873 = path.getOrDefault("functionName")
  valid_564873 = validateParameter(valid_564873, JString, required = true,
                                 default = nil)
  if valid_564873 != nil:
    section.add "functionName", valid_564873
  var valid_564874 = path.getOrDefault("name")
  valid_564874 = validateParameter(valid_564874, JString, required = true,
                                 default = nil)
  if valid_564874 != nil:
    section.add "name", valid_564874
  var valid_564875 = path.getOrDefault("subscriptionId")
  valid_564875 = validateParameter(valid_564875, JString, required = true,
                                 default = nil)
  if valid_564875 != nil:
    section.add "subscriptionId", valid_564875
  var valid_564876 = path.getOrDefault("resourceGroupName")
  valid_564876 = validateParameter(valid_564876, JString, required = true,
                                 default = nil)
  if valid_564876 != nil:
    section.add "resourceGroupName", valid_564876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564877 = query.getOrDefault("api-version")
  valid_564877 = validateParameter(valid_564877, JString, required = true,
                                 default = nil)
  if valid_564877 != nil:
    section.add "api-version", valid_564877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564879: Call_WebAppsCreateFunction_564870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_564879.validator(path, query, header, formData, body)
  let scheme = call_564879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564879.url(scheme.get, call_564879.host, call_564879.base,
                         call_564879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564879, url, valid)

proc call*(call_564880: Call_WebAppsCreateFunction_564870; functionName: string;
          apiVersion: string; name: string; functionEnvelope: JsonNode;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564881 = newJObject()
  var query_564882 = newJObject()
  var body_564883 = newJObject()
  add(path_564881, "functionName", newJString(functionName))
  add(query_564882, "api-version", newJString(apiVersion))
  add(path_564881, "name", newJString(name))
  if functionEnvelope != nil:
    body_564883 = functionEnvelope
  add(path_564881, "subscriptionId", newJString(subscriptionId))
  add(path_564881, "resourceGroupName", newJString(resourceGroupName))
  result = call_564880.call(path_564881, query_564882, nil, nil, body_564883)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_564870(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_564871, base: "",
    url: url_WebAppsCreateFunction_564872, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_564858 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunction_564860(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_564859(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564861 = path.getOrDefault("functionName")
  valid_564861 = validateParameter(valid_564861, JString, required = true,
                                 default = nil)
  if valid_564861 != nil:
    section.add "functionName", valid_564861
  var valid_564862 = path.getOrDefault("name")
  valid_564862 = validateParameter(valid_564862, JString, required = true,
                                 default = nil)
  if valid_564862 != nil:
    section.add "name", valid_564862
  var valid_564863 = path.getOrDefault("subscriptionId")
  valid_564863 = validateParameter(valid_564863, JString, required = true,
                                 default = nil)
  if valid_564863 != nil:
    section.add "subscriptionId", valid_564863
  var valid_564864 = path.getOrDefault("resourceGroupName")
  valid_564864 = validateParameter(valid_564864, JString, required = true,
                                 default = nil)
  if valid_564864 != nil:
    section.add "resourceGroupName", valid_564864
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564865 = query.getOrDefault("api-version")
  valid_564865 = validateParameter(valid_564865, JString, required = true,
                                 default = nil)
  if valid_564865 != nil:
    section.add "api-version", valid_564865
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564866: Call_WebAppsGetFunction_564858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_564866.validator(path, query, header, formData, body)
  let scheme = call_564866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564866.url(scheme.get, call_564866.host, call_564866.base,
                         call_564866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564866, url, valid)

proc call*(call_564867: Call_WebAppsGetFunction_564858; functionName: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564868 = newJObject()
  var query_564869 = newJObject()
  add(path_564868, "functionName", newJString(functionName))
  add(query_564869, "api-version", newJString(apiVersion))
  add(path_564868, "name", newJString(name))
  add(path_564868, "subscriptionId", newJString(subscriptionId))
  add(path_564868, "resourceGroupName", newJString(resourceGroupName))
  result = call_564867.call(path_564868, query_564869, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_564858(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_564859, base: "",
    url: url_WebAppsGetFunction_564860, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_564884 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteFunction_564886(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_564885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564887 = path.getOrDefault("functionName")
  valid_564887 = validateParameter(valid_564887, JString, required = true,
                                 default = nil)
  if valid_564887 != nil:
    section.add "functionName", valid_564887
  var valid_564888 = path.getOrDefault("name")
  valid_564888 = validateParameter(valid_564888, JString, required = true,
                                 default = nil)
  if valid_564888 != nil:
    section.add "name", valid_564888
  var valid_564889 = path.getOrDefault("subscriptionId")
  valid_564889 = validateParameter(valid_564889, JString, required = true,
                                 default = nil)
  if valid_564889 != nil:
    section.add "subscriptionId", valid_564889
  var valid_564890 = path.getOrDefault("resourceGroupName")
  valid_564890 = validateParameter(valid_564890, JString, required = true,
                                 default = nil)
  if valid_564890 != nil:
    section.add "resourceGroupName", valid_564890
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564891 = query.getOrDefault("api-version")
  valid_564891 = validateParameter(valid_564891, JString, required = true,
                                 default = nil)
  if valid_564891 != nil:
    section.add "api-version", valid_564891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564892: Call_WebAppsDeleteFunction_564884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_564892.validator(path, query, header, formData, body)
  let scheme = call_564892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564892.url(scheme.get, call_564892.host, call_564892.base,
                         call_564892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564892, url, valid)

proc call*(call_564893: Call_WebAppsDeleteFunction_564884; functionName: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564894 = newJObject()
  var query_564895 = newJObject()
  add(path_564894, "functionName", newJString(functionName))
  add(query_564895, "api-version", newJString(apiVersion))
  add(path_564894, "name", newJString(name))
  add(path_564894, "subscriptionId", newJString(subscriptionId))
  add(path_564894, "resourceGroupName", newJString(resourceGroupName))
  result = call_564893.call(path_564894, query_564895, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_564884(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_564885, base: "",
    url: url_WebAppsDeleteFunction_564886, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_564896 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctionSecrets_564898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_564897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564899 = path.getOrDefault("functionName")
  valid_564899 = validateParameter(valid_564899, JString, required = true,
                                 default = nil)
  if valid_564899 != nil:
    section.add "functionName", valid_564899
  var valid_564900 = path.getOrDefault("name")
  valid_564900 = validateParameter(valid_564900, JString, required = true,
                                 default = nil)
  if valid_564900 != nil:
    section.add "name", valid_564900
  var valid_564901 = path.getOrDefault("subscriptionId")
  valid_564901 = validateParameter(valid_564901, JString, required = true,
                                 default = nil)
  if valid_564901 != nil:
    section.add "subscriptionId", valid_564901
  var valid_564902 = path.getOrDefault("resourceGroupName")
  valid_564902 = validateParameter(valid_564902, JString, required = true,
                                 default = nil)
  if valid_564902 != nil:
    section.add "resourceGroupName", valid_564902
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564903 = query.getOrDefault("api-version")
  valid_564903 = validateParameter(valid_564903, JString, required = true,
                                 default = nil)
  if valid_564903 != nil:
    section.add "api-version", valid_564903
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564904: Call_WebAppsListFunctionSecrets_564896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_564904.validator(path, query, header, formData, body)
  let scheme = call_564904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564904.url(scheme.get, call_564904.host, call_564904.base,
                         call_564904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564904, url, valid)

proc call*(call_564905: Call_WebAppsListFunctionSecrets_564896;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564906 = newJObject()
  var query_564907 = newJObject()
  add(path_564906, "functionName", newJString(functionName))
  add(query_564907, "api-version", newJString(apiVersion))
  add(path_564906, "name", newJString(name))
  add(path_564906, "subscriptionId", newJString(subscriptionId))
  add(path_564906, "resourceGroupName", newJString(resourceGroupName))
  result = call_564905.call(path_564906, query_564907, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_564896(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_564897, base: "",
    url: url_WebAppsListFunctionSecrets_564898, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_564908 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHostNameBindings_564910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_564909(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564911 = path.getOrDefault("name")
  valid_564911 = validateParameter(valid_564911, JString, required = true,
                                 default = nil)
  if valid_564911 != nil:
    section.add "name", valid_564911
  var valid_564912 = path.getOrDefault("subscriptionId")
  valid_564912 = validateParameter(valid_564912, JString, required = true,
                                 default = nil)
  if valid_564912 != nil:
    section.add "subscriptionId", valid_564912
  var valid_564913 = path.getOrDefault("resourceGroupName")
  valid_564913 = validateParameter(valid_564913, JString, required = true,
                                 default = nil)
  if valid_564913 != nil:
    section.add "resourceGroupName", valid_564913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564914 = query.getOrDefault("api-version")
  valid_564914 = validateParameter(valid_564914, JString, required = true,
                                 default = nil)
  if valid_564914 != nil:
    section.add "api-version", valid_564914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564915: Call_WebAppsListHostNameBindings_564908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_564915.validator(path, query, header, formData, body)
  let scheme = call_564915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564915.url(scheme.get, call_564915.host, call_564915.base,
                         call_564915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564915, url, valid)

proc call*(call_564916: Call_WebAppsListHostNameBindings_564908;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564917 = newJObject()
  var query_564918 = newJObject()
  add(query_564918, "api-version", newJString(apiVersion))
  add(path_564917, "name", newJString(name))
  add(path_564917, "subscriptionId", newJString(subscriptionId))
  add(path_564917, "resourceGroupName", newJString(resourceGroupName))
  result = call_564916.call(path_564917, query_564918, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_564908(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_564909, base: "",
    url: url_WebAppsListHostNameBindings_564910, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_564931 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHostNameBinding_564933(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_564932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564934 = path.getOrDefault("name")
  valid_564934 = validateParameter(valid_564934, JString, required = true,
                                 default = nil)
  if valid_564934 != nil:
    section.add "name", valid_564934
  var valid_564935 = path.getOrDefault("subscriptionId")
  valid_564935 = validateParameter(valid_564935, JString, required = true,
                                 default = nil)
  if valid_564935 != nil:
    section.add "subscriptionId", valid_564935
  var valid_564936 = path.getOrDefault("resourceGroupName")
  valid_564936 = validateParameter(valid_564936, JString, required = true,
                                 default = nil)
  if valid_564936 != nil:
    section.add "resourceGroupName", valid_564936
  var valid_564937 = path.getOrDefault("hostName")
  valid_564937 = validateParameter(valid_564937, JString, required = true,
                                 default = nil)
  if valid_564937 != nil:
    section.add "hostName", valid_564937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564938 = query.getOrDefault("api-version")
  valid_564938 = validateParameter(valid_564938, JString, required = true,
                                 default = nil)
  if valid_564938 != nil:
    section.add "api-version", valid_564938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564940: Call_WebAppsCreateOrUpdateHostNameBinding_564931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_564940.validator(path, query, header, formData, body)
  let scheme = call_564940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564940.url(scheme.get, call_564940.host, call_564940.base,
                         call_564940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564940, url, valid)

proc call*(call_564941: Call_WebAppsCreateOrUpdateHostNameBinding_564931;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564942 = newJObject()
  var query_564943 = newJObject()
  var body_564944 = newJObject()
  add(query_564943, "api-version", newJString(apiVersion))
  add(path_564942, "name", newJString(name))
  add(path_564942, "subscriptionId", newJString(subscriptionId))
  add(path_564942, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_564944 = hostNameBinding
  add(path_564942, "hostName", newJString(hostName))
  result = call_564941.call(path_564942, query_564943, nil, nil, body_564944)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_564931(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_564932, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_564933, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_564919 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHostNameBinding_564921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_564920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564922 = path.getOrDefault("name")
  valid_564922 = validateParameter(valid_564922, JString, required = true,
                                 default = nil)
  if valid_564922 != nil:
    section.add "name", valid_564922
  var valid_564923 = path.getOrDefault("subscriptionId")
  valid_564923 = validateParameter(valid_564923, JString, required = true,
                                 default = nil)
  if valid_564923 != nil:
    section.add "subscriptionId", valid_564923
  var valid_564924 = path.getOrDefault("resourceGroupName")
  valid_564924 = validateParameter(valid_564924, JString, required = true,
                                 default = nil)
  if valid_564924 != nil:
    section.add "resourceGroupName", valid_564924
  var valid_564925 = path.getOrDefault("hostName")
  valid_564925 = validateParameter(valid_564925, JString, required = true,
                                 default = nil)
  if valid_564925 != nil:
    section.add "hostName", valid_564925
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564926 = query.getOrDefault("api-version")
  valid_564926 = validateParameter(valid_564926, JString, required = true,
                                 default = nil)
  if valid_564926 != nil:
    section.add "api-version", valid_564926
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564927: Call_WebAppsGetHostNameBinding_564919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_564927.validator(path, query, header, formData, body)
  let scheme = call_564927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564927.url(scheme.get, call_564927.host, call_564927.base,
                         call_564927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564927, url, valid)

proc call*(call_564928: Call_WebAppsGetHostNameBinding_564919; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564929 = newJObject()
  var query_564930 = newJObject()
  add(query_564930, "api-version", newJString(apiVersion))
  add(path_564929, "name", newJString(name))
  add(path_564929, "subscriptionId", newJString(subscriptionId))
  add(path_564929, "resourceGroupName", newJString(resourceGroupName))
  add(path_564929, "hostName", newJString(hostName))
  result = call_564928.call(path_564929, query_564930, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_564919(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_564920, base: "",
    url: url_WebAppsGetHostNameBinding_564921, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_564945 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHostNameBinding_564947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_564946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564948 = path.getOrDefault("name")
  valid_564948 = validateParameter(valid_564948, JString, required = true,
                                 default = nil)
  if valid_564948 != nil:
    section.add "name", valid_564948
  var valid_564949 = path.getOrDefault("subscriptionId")
  valid_564949 = validateParameter(valid_564949, JString, required = true,
                                 default = nil)
  if valid_564949 != nil:
    section.add "subscriptionId", valid_564949
  var valid_564950 = path.getOrDefault("resourceGroupName")
  valid_564950 = validateParameter(valid_564950, JString, required = true,
                                 default = nil)
  if valid_564950 != nil:
    section.add "resourceGroupName", valid_564950
  var valid_564951 = path.getOrDefault("hostName")
  valid_564951 = validateParameter(valid_564951, JString, required = true,
                                 default = nil)
  if valid_564951 != nil:
    section.add "hostName", valid_564951
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564952 = query.getOrDefault("api-version")
  valid_564952 = validateParameter(valid_564952, JString, required = true,
                                 default = nil)
  if valid_564952 != nil:
    section.add "api-version", valid_564952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564953: Call_WebAppsDeleteHostNameBinding_564945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_564953.validator(path, query, header, formData, body)
  let scheme = call_564953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564953.url(scheme.get, call_564953.host, call_564953.base,
                         call_564953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564953, url, valid)

proc call*(call_564954: Call_WebAppsDeleteHostNameBinding_564945;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564955 = newJObject()
  var query_564956 = newJObject()
  add(query_564956, "api-version", newJString(apiVersion))
  add(path_564955, "name", newJString(name))
  add(path_564955, "subscriptionId", newJString(subscriptionId))
  add(path_564955, "resourceGroupName", newJString(resourceGroupName))
  add(path_564955, "hostName", newJString(hostName))
  result = call_564954.call(path_564955, query_564956, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_564945(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_564946, base: "",
    url: url_WebAppsDeleteHostNameBinding_564947, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_564970 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHybridConnection_564972(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_564971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564973 = path.getOrDefault("namespaceName")
  valid_564973 = validateParameter(valid_564973, JString, required = true,
                                 default = nil)
  if valid_564973 != nil:
    section.add "namespaceName", valid_564973
  var valid_564974 = path.getOrDefault("name")
  valid_564974 = validateParameter(valid_564974, JString, required = true,
                                 default = nil)
  if valid_564974 != nil:
    section.add "name", valid_564974
  var valid_564975 = path.getOrDefault("subscriptionId")
  valid_564975 = validateParameter(valid_564975, JString, required = true,
                                 default = nil)
  if valid_564975 != nil:
    section.add "subscriptionId", valid_564975
  var valid_564976 = path.getOrDefault("resourceGroupName")
  valid_564976 = validateParameter(valid_564976, JString, required = true,
                                 default = nil)
  if valid_564976 != nil:
    section.add "resourceGroupName", valid_564976
  var valid_564977 = path.getOrDefault("relayName")
  valid_564977 = validateParameter(valid_564977, JString, required = true,
                                 default = nil)
  if valid_564977 != nil:
    section.add "relayName", valid_564977
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564978 = query.getOrDefault("api-version")
  valid_564978 = validateParameter(valid_564978, JString, required = true,
                                 default = nil)
  if valid_564978 != nil:
    section.add "api-version", valid_564978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564980: Call_WebAppsCreateOrUpdateHybridConnection_564970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_564980.validator(path, query, header, formData, body)
  let scheme = call_564980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564980.url(scheme.get, call_564980.host, call_564980.base,
                         call_564980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564980, url, valid)

proc call*(call_564981: Call_WebAppsCreateOrUpdateHybridConnection_564970;
          connectionEnvelope: JsonNode; apiVersion: string; namespaceName: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564982 = newJObject()
  var query_564983 = newJObject()
  var body_564984 = newJObject()
  if connectionEnvelope != nil:
    body_564984 = connectionEnvelope
  add(query_564983, "api-version", newJString(apiVersion))
  add(path_564982, "namespaceName", newJString(namespaceName))
  add(path_564982, "name", newJString(name))
  add(path_564982, "subscriptionId", newJString(subscriptionId))
  add(path_564982, "resourceGroupName", newJString(resourceGroupName))
  add(path_564982, "relayName", newJString(relayName))
  result = call_564981.call(path_564982, query_564983, nil, nil, body_564984)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_564970(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_564971, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_564972, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_564957 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHybridConnection_564959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_564958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564960 = path.getOrDefault("namespaceName")
  valid_564960 = validateParameter(valid_564960, JString, required = true,
                                 default = nil)
  if valid_564960 != nil:
    section.add "namespaceName", valid_564960
  var valid_564961 = path.getOrDefault("name")
  valid_564961 = validateParameter(valid_564961, JString, required = true,
                                 default = nil)
  if valid_564961 != nil:
    section.add "name", valid_564961
  var valid_564962 = path.getOrDefault("subscriptionId")
  valid_564962 = validateParameter(valid_564962, JString, required = true,
                                 default = nil)
  if valid_564962 != nil:
    section.add "subscriptionId", valid_564962
  var valid_564963 = path.getOrDefault("resourceGroupName")
  valid_564963 = validateParameter(valid_564963, JString, required = true,
                                 default = nil)
  if valid_564963 != nil:
    section.add "resourceGroupName", valid_564963
  var valid_564964 = path.getOrDefault("relayName")
  valid_564964 = validateParameter(valid_564964, JString, required = true,
                                 default = nil)
  if valid_564964 != nil:
    section.add "relayName", valid_564964
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564965 = query.getOrDefault("api-version")
  valid_564965 = validateParameter(valid_564965, JString, required = true,
                                 default = nil)
  if valid_564965 != nil:
    section.add "api-version", valid_564965
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564966: Call_WebAppsGetHybridConnection_564957; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_564966.validator(path, query, header, formData, body)
  let scheme = call_564966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564966.url(scheme.get, call_564966.host, call_564966.base,
                         call_564966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564966, url, valid)

proc call*(call_564967: Call_WebAppsGetHybridConnection_564957; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564968 = newJObject()
  var query_564969 = newJObject()
  add(query_564969, "api-version", newJString(apiVersion))
  add(path_564968, "namespaceName", newJString(namespaceName))
  add(path_564968, "name", newJString(name))
  add(path_564968, "subscriptionId", newJString(subscriptionId))
  add(path_564968, "resourceGroupName", newJString(resourceGroupName))
  add(path_564968, "relayName", newJString(relayName))
  result = call_564967.call(path_564968, query_564969, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_564957(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_564958, base: "",
    url: url_WebAppsGetHybridConnection_564959, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_564998 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateHybridConnection_565000(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_564999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_565001 = path.getOrDefault("namespaceName")
  valid_565001 = validateParameter(valid_565001, JString, required = true,
                                 default = nil)
  if valid_565001 != nil:
    section.add "namespaceName", valid_565001
  var valid_565002 = path.getOrDefault("name")
  valid_565002 = validateParameter(valid_565002, JString, required = true,
                                 default = nil)
  if valid_565002 != nil:
    section.add "name", valid_565002
  var valid_565003 = path.getOrDefault("subscriptionId")
  valid_565003 = validateParameter(valid_565003, JString, required = true,
                                 default = nil)
  if valid_565003 != nil:
    section.add "subscriptionId", valid_565003
  var valid_565004 = path.getOrDefault("resourceGroupName")
  valid_565004 = validateParameter(valid_565004, JString, required = true,
                                 default = nil)
  if valid_565004 != nil:
    section.add "resourceGroupName", valid_565004
  var valid_565005 = path.getOrDefault("relayName")
  valid_565005 = validateParameter(valid_565005, JString, required = true,
                                 default = nil)
  if valid_565005 != nil:
    section.add "relayName", valid_565005
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565006 = query.getOrDefault("api-version")
  valid_565006 = validateParameter(valid_565006, JString, required = true,
                                 default = nil)
  if valid_565006 != nil:
    section.add "api-version", valid_565006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565008: Call_WebAppsUpdateHybridConnection_564998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_565008.validator(path, query, header, formData, body)
  let scheme = call_565008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565008.url(scheme.get, call_565008.host, call_565008.base,
                         call_565008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565008, url, valid)

proc call*(call_565009: Call_WebAppsUpdateHybridConnection_564998;
          connectionEnvelope: JsonNode; apiVersion: string; namespaceName: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_565010 = newJObject()
  var query_565011 = newJObject()
  var body_565012 = newJObject()
  if connectionEnvelope != nil:
    body_565012 = connectionEnvelope
  add(query_565011, "api-version", newJString(apiVersion))
  add(path_565010, "namespaceName", newJString(namespaceName))
  add(path_565010, "name", newJString(name))
  add(path_565010, "subscriptionId", newJString(subscriptionId))
  add(path_565010, "resourceGroupName", newJString(resourceGroupName))
  add(path_565010, "relayName", newJString(relayName))
  result = call_565009.call(path_565010, query_565011, nil, nil, body_565012)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_564998(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_564999, base: "",
    url: url_WebAppsUpdateHybridConnection_565000, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_564985 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHybridConnection_564987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_564986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564988 = path.getOrDefault("namespaceName")
  valid_564988 = validateParameter(valid_564988, JString, required = true,
                                 default = nil)
  if valid_564988 != nil:
    section.add "namespaceName", valid_564988
  var valid_564989 = path.getOrDefault("name")
  valid_564989 = validateParameter(valid_564989, JString, required = true,
                                 default = nil)
  if valid_564989 != nil:
    section.add "name", valid_564989
  var valid_564990 = path.getOrDefault("subscriptionId")
  valid_564990 = validateParameter(valid_564990, JString, required = true,
                                 default = nil)
  if valid_564990 != nil:
    section.add "subscriptionId", valid_564990
  var valid_564991 = path.getOrDefault("resourceGroupName")
  valid_564991 = validateParameter(valid_564991, JString, required = true,
                                 default = nil)
  if valid_564991 != nil:
    section.add "resourceGroupName", valid_564991
  var valid_564992 = path.getOrDefault("relayName")
  valid_564992 = validateParameter(valid_564992, JString, required = true,
                                 default = nil)
  if valid_564992 != nil:
    section.add "relayName", valid_564992
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564993 = query.getOrDefault("api-version")
  valid_564993 = validateParameter(valid_564993, JString, required = true,
                                 default = nil)
  if valid_564993 != nil:
    section.add "api-version", valid_564993
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564994: Call_WebAppsDeleteHybridConnection_564985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_564994.validator(path, query, header, formData, body)
  let scheme = call_564994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564994.url(scheme.get, call_564994.host, call_564994.base,
                         call_564994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564994, url, valid)

proc call*(call_564995: Call_WebAppsDeleteHybridConnection_564985;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564996 = newJObject()
  var query_564997 = newJObject()
  add(query_564997, "api-version", newJString(apiVersion))
  add(path_564996, "namespaceName", newJString(namespaceName))
  add(path_564996, "name", newJString(name))
  add(path_564996, "subscriptionId", newJString(subscriptionId))
  add(path_564996, "resourceGroupName", newJString(resourceGroupName))
  add(path_564996, "relayName", newJString(relayName))
  result = call_564995.call(path_564996, query_564997, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_564985(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_564986, base: "",
    url: url_WebAppsDeleteHybridConnection_564987, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_565013 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionKeys_565015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_565014(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_565016 = path.getOrDefault("namespaceName")
  valid_565016 = validateParameter(valid_565016, JString, required = true,
                                 default = nil)
  if valid_565016 != nil:
    section.add "namespaceName", valid_565016
  var valid_565017 = path.getOrDefault("name")
  valid_565017 = validateParameter(valid_565017, JString, required = true,
                                 default = nil)
  if valid_565017 != nil:
    section.add "name", valid_565017
  var valid_565018 = path.getOrDefault("subscriptionId")
  valid_565018 = validateParameter(valid_565018, JString, required = true,
                                 default = nil)
  if valid_565018 != nil:
    section.add "subscriptionId", valid_565018
  var valid_565019 = path.getOrDefault("resourceGroupName")
  valid_565019 = validateParameter(valid_565019, JString, required = true,
                                 default = nil)
  if valid_565019 != nil:
    section.add "resourceGroupName", valid_565019
  var valid_565020 = path.getOrDefault("relayName")
  valid_565020 = validateParameter(valid_565020, JString, required = true,
                                 default = nil)
  if valid_565020 != nil:
    section.add "relayName", valid_565020
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565021 = query.getOrDefault("api-version")
  valid_565021 = validateParameter(valid_565021, JString, required = true,
                                 default = nil)
  if valid_565021 != nil:
    section.add "api-version", valid_565021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565022: Call_WebAppsListHybridConnectionKeys_565013;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_565022.validator(path, query, header, formData, body)
  let scheme = call_565022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565022.url(scheme.get, call_565022.host, call_565022.base,
                         call_565022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565022, url, valid)

proc call*(call_565023: Call_WebAppsListHybridConnectionKeys_565013;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_565024 = newJObject()
  var query_565025 = newJObject()
  add(query_565025, "api-version", newJString(apiVersion))
  add(path_565024, "namespaceName", newJString(namespaceName))
  add(path_565024, "name", newJString(name))
  add(path_565024, "subscriptionId", newJString(subscriptionId))
  add(path_565024, "resourceGroupName", newJString(resourceGroupName))
  add(path_565024, "relayName", newJString(relayName))
  result = call_565023.call(path_565024, query_565025, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_565013(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_565014, base: "",
    url: url_WebAppsListHybridConnectionKeys_565015, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_565026 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnections_565028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_565027(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565029 = path.getOrDefault("name")
  valid_565029 = validateParameter(valid_565029, JString, required = true,
                                 default = nil)
  if valid_565029 != nil:
    section.add "name", valid_565029
  var valid_565030 = path.getOrDefault("subscriptionId")
  valid_565030 = validateParameter(valid_565030, JString, required = true,
                                 default = nil)
  if valid_565030 != nil:
    section.add "subscriptionId", valid_565030
  var valid_565031 = path.getOrDefault("resourceGroupName")
  valid_565031 = validateParameter(valid_565031, JString, required = true,
                                 default = nil)
  if valid_565031 != nil:
    section.add "resourceGroupName", valid_565031
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565032 = query.getOrDefault("api-version")
  valid_565032 = validateParameter(valid_565032, JString, required = true,
                                 default = nil)
  if valid_565032 != nil:
    section.add "api-version", valid_565032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565033: Call_WebAppsListHybridConnections_565026; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_565033.validator(path, query, header, formData, body)
  let scheme = call_565033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565033.url(scheme.get, call_565033.host, call_565033.base,
                         call_565033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565033, url, valid)

proc call*(call_565034: Call_WebAppsListHybridConnections_565026;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565035 = newJObject()
  var query_565036 = newJObject()
  add(query_565036, "api-version", newJString(apiVersion))
  add(path_565035, "name", newJString(name))
  add(path_565035, "subscriptionId", newJString(subscriptionId))
  add(path_565035, "resourceGroupName", newJString(resourceGroupName))
  result = call_565034.call(path_565035, query_565036, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_565026(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_565027, base: "",
    url: url_WebAppsListHybridConnections_565028, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_565037 = ref object of OpenApiRestCall_563564
proc url_WebAppsListRelayServiceConnections_565039(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_565038(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565040 = path.getOrDefault("name")
  valid_565040 = validateParameter(valid_565040, JString, required = true,
                                 default = nil)
  if valid_565040 != nil:
    section.add "name", valid_565040
  var valid_565041 = path.getOrDefault("subscriptionId")
  valid_565041 = validateParameter(valid_565041, JString, required = true,
                                 default = nil)
  if valid_565041 != nil:
    section.add "subscriptionId", valid_565041
  var valid_565042 = path.getOrDefault("resourceGroupName")
  valid_565042 = validateParameter(valid_565042, JString, required = true,
                                 default = nil)
  if valid_565042 != nil:
    section.add "resourceGroupName", valid_565042
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565043 = query.getOrDefault("api-version")
  valid_565043 = validateParameter(valid_565043, JString, required = true,
                                 default = nil)
  if valid_565043 != nil:
    section.add "api-version", valid_565043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565044: Call_WebAppsListRelayServiceConnections_565037;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_565044.validator(path, query, header, formData, body)
  let scheme = call_565044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565044.url(scheme.get, call_565044.host, call_565044.base,
                         call_565044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565044, url, valid)

proc call*(call_565045: Call_WebAppsListRelayServiceConnections_565037;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565046 = newJObject()
  var query_565047 = newJObject()
  add(query_565047, "api-version", newJString(apiVersion))
  add(path_565046, "name", newJString(name))
  add(path_565046, "subscriptionId", newJString(subscriptionId))
  add(path_565046, "resourceGroupName", newJString(resourceGroupName))
  result = call_565045.call(path_565046, query_565047, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_565037(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_565038, base: "",
    url: url_WebAppsListRelayServiceConnections_565039, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_565060 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateRelayServiceConnection_565062(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_565061(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565063 = path.getOrDefault("name")
  valid_565063 = validateParameter(valid_565063, JString, required = true,
                                 default = nil)
  if valid_565063 != nil:
    section.add "name", valid_565063
  var valid_565064 = path.getOrDefault("subscriptionId")
  valid_565064 = validateParameter(valid_565064, JString, required = true,
                                 default = nil)
  if valid_565064 != nil:
    section.add "subscriptionId", valid_565064
  var valid_565065 = path.getOrDefault("resourceGroupName")
  valid_565065 = validateParameter(valid_565065, JString, required = true,
                                 default = nil)
  if valid_565065 != nil:
    section.add "resourceGroupName", valid_565065
  var valid_565066 = path.getOrDefault("entityName")
  valid_565066 = validateParameter(valid_565066, JString, required = true,
                                 default = nil)
  if valid_565066 != nil:
    section.add "entityName", valid_565066
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565067 = query.getOrDefault("api-version")
  valid_565067 = validateParameter(valid_565067, JString, required = true,
                                 default = nil)
  if valid_565067 != nil:
    section.add "api-version", valid_565067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565069: Call_WebAppsCreateOrUpdateRelayServiceConnection_565060;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_565069.validator(path, query, header, formData, body)
  let scheme = call_565069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565069.url(scheme.get, call_565069.host, call_565069.base,
                         call_565069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565069, url, valid)

proc call*(call_565070: Call_WebAppsCreateOrUpdateRelayServiceConnection_565060;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565071 = newJObject()
  var query_565072 = newJObject()
  var body_565073 = newJObject()
  if connectionEnvelope != nil:
    body_565073 = connectionEnvelope
  add(query_565072, "api-version", newJString(apiVersion))
  add(path_565071, "name", newJString(name))
  add(path_565071, "subscriptionId", newJString(subscriptionId))
  add(path_565071, "resourceGroupName", newJString(resourceGroupName))
  add(path_565071, "entityName", newJString(entityName))
  result = call_565070.call(path_565071, query_565072, nil, nil, body_565073)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_565060(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_565061,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_565062,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_565048 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetRelayServiceConnection_565050(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_565049(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565051 = path.getOrDefault("name")
  valid_565051 = validateParameter(valid_565051, JString, required = true,
                                 default = nil)
  if valid_565051 != nil:
    section.add "name", valid_565051
  var valid_565052 = path.getOrDefault("subscriptionId")
  valid_565052 = validateParameter(valid_565052, JString, required = true,
                                 default = nil)
  if valid_565052 != nil:
    section.add "subscriptionId", valid_565052
  var valid_565053 = path.getOrDefault("resourceGroupName")
  valid_565053 = validateParameter(valid_565053, JString, required = true,
                                 default = nil)
  if valid_565053 != nil:
    section.add "resourceGroupName", valid_565053
  var valid_565054 = path.getOrDefault("entityName")
  valid_565054 = validateParameter(valid_565054, JString, required = true,
                                 default = nil)
  if valid_565054 != nil:
    section.add "entityName", valid_565054
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565055 = query.getOrDefault("api-version")
  valid_565055 = validateParameter(valid_565055, JString, required = true,
                                 default = nil)
  if valid_565055 != nil:
    section.add "api-version", valid_565055
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565056: Call_WebAppsGetRelayServiceConnection_565048;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_565056.validator(path, query, header, formData, body)
  let scheme = call_565056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565056.url(scheme.get, call_565056.host, call_565056.base,
                         call_565056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565056, url, valid)

proc call*(call_565057: Call_WebAppsGetRelayServiceConnection_565048;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_565058 = newJObject()
  var query_565059 = newJObject()
  add(query_565059, "api-version", newJString(apiVersion))
  add(path_565058, "name", newJString(name))
  add(path_565058, "subscriptionId", newJString(subscriptionId))
  add(path_565058, "resourceGroupName", newJString(resourceGroupName))
  add(path_565058, "entityName", newJString(entityName))
  result = call_565057.call(path_565058, query_565059, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_565048(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_565049, base: "",
    url: url_WebAppsGetRelayServiceConnection_565050, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_565086 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateRelayServiceConnection_565088(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_565087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565089 = path.getOrDefault("name")
  valid_565089 = validateParameter(valid_565089, JString, required = true,
                                 default = nil)
  if valid_565089 != nil:
    section.add "name", valid_565089
  var valid_565090 = path.getOrDefault("subscriptionId")
  valid_565090 = validateParameter(valid_565090, JString, required = true,
                                 default = nil)
  if valid_565090 != nil:
    section.add "subscriptionId", valid_565090
  var valid_565091 = path.getOrDefault("resourceGroupName")
  valid_565091 = validateParameter(valid_565091, JString, required = true,
                                 default = nil)
  if valid_565091 != nil:
    section.add "resourceGroupName", valid_565091
  var valid_565092 = path.getOrDefault("entityName")
  valid_565092 = validateParameter(valid_565092, JString, required = true,
                                 default = nil)
  if valid_565092 != nil:
    section.add "entityName", valid_565092
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565093 = query.getOrDefault("api-version")
  valid_565093 = validateParameter(valid_565093, JString, required = true,
                                 default = nil)
  if valid_565093 != nil:
    section.add "api-version", valid_565093
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565095: Call_WebAppsUpdateRelayServiceConnection_565086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_565095.validator(path, query, header, formData, body)
  let scheme = call_565095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565095.url(scheme.get, call_565095.host, call_565095.base,
                         call_565095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565095, url, valid)

proc call*(call_565096: Call_WebAppsUpdateRelayServiceConnection_565086;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565097 = newJObject()
  var query_565098 = newJObject()
  var body_565099 = newJObject()
  if connectionEnvelope != nil:
    body_565099 = connectionEnvelope
  add(query_565098, "api-version", newJString(apiVersion))
  add(path_565097, "name", newJString(name))
  add(path_565097, "subscriptionId", newJString(subscriptionId))
  add(path_565097, "resourceGroupName", newJString(resourceGroupName))
  add(path_565097, "entityName", newJString(entityName))
  result = call_565096.call(path_565097, query_565098, nil, nil, body_565099)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_565086(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_565087, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_565088, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_565074 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteRelayServiceConnection_565076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_565075(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565077 = path.getOrDefault("name")
  valid_565077 = validateParameter(valid_565077, JString, required = true,
                                 default = nil)
  if valid_565077 != nil:
    section.add "name", valid_565077
  var valid_565078 = path.getOrDefault("subscriptionId")
  valid_565078 = validateParameter(valid_565078, JString, required = true,
                                 default = nil)
  if valid_565078 != nil:
    section.add "subscriptionId", valid_565078
  var valid_565079 = path.getOrDefault("resourceGroupName")
  valid_565079 = validateParameter(valid_565079, JString, required = true,
                                 default = nil)
  if valid_565079 != nil:
    section.add "resourceGroupName", valid_565079
  var valid_565080 = path.getOrDefault("entityName")
  valid_565080 = validateParameter(valid_565080, JString, required = true,
                                 default = nil)
  if valid_565080 != nil:
    section.add "entityName", valid_565080
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565081 = query.getOrDefault("api-version")
  valid_565081 = validateParameter(valid_565081, JString, required = true,
                                 default = nil)
  if valid_565081 != nil:
    section.add "api-version", valid_565081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565082: Call_WebAppsDeleteRelayServiceConnection_565074;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_565082.validator(path, query, header, formData, body)
  let scheme = call_565082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565082.url(scheme.get, call_565082.host, call_565082.base,
                         call_565082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565082, url, valid)

proc call*(call_565083: Call_WebAppsDeleteRelayServiceConnection_565074;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565084 = newJObject()
  var query_565085 = newJObject()
  add(query_565085, "api-version", newJString(apiVersion))
  add(path_565084, "name", newJString(name))
  add(path_565084, "subscriptionId", newJString(subscriptionId))
  add(path_565084, "resourceGroupName", newJString(resourceGroupName))
  add(path_565084, "entityName", newJString(entityName))
  result = call_565083.call(path_565084, query_565085, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_565074(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_565075, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_565076, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_565100 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceIdentifiers_565102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_565101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565103 = path.getOrDefault("name")
  valid_565103 = validateParameter(valid_565103, JString, required = true,
                                 default = nil)
  if valid_565103 != nil:
    section.add "name", valid_565103
  var valid_565104 = path.getOrDefault("subscriptionId")
  valid_565104 = validateParameter(valid_565104, JString, required = true,
                                 default = nil)
  if valid_565104 != nil:
    section.add "subscriptionId", valid_565104
  var valid_565105 = path.getOrDefault("resourceGroupName")
  valid_565105 = validateParameter(valid_565105, JString, required = true,
                                 default = nil)
  if valid_565105 != nil:
    section.add "resourceGroupName", valid_565105
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565106 = query.getOrDefault("api-version")
  valid_565106 = validateParameter(valid_565106, JString, required = true,
                                 default = nil)
  if valid_565106 != nil:
    section.add "api-version", valid_565106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565107: Call_WebAppsListInstanceIdentifiers_565100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_565107.validator(path, query, header, formData, body)
  let scheme = call_565107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565107.url(scheme.get, call_565107.host, call_565107.base,
                         call_565107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565107, url, valid)

proc call*(call_565108: Call_WebAppsListInstanceIdentifiers_565100;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565109 = newJObject()
  var query_565110 = newJObject()
  add(query_565110, "api-version", newJString(apiVersion))
  add(path_565109, "name", newJString(name))
  add(path_565109, "subscriptionId", newJString(subscriptionId))
  add(path_565109, "resourceGroupName", newJString(resourceGroupName))
  result = call_565108.call(path_565109, query_565110, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_565100(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_565101, base: "",
    url: url_WebAppsListInstanceIdentifiers_565102, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_565123 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceMSDeployOperation_565125(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_565124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565126 = path.getOrDefault("name")
  valid_565126 = validateParameter(valid_565126, JString, required = true,
                                 default = nil)
  if valid_565126 != nil:
    section.add "name", valid_565126
  var valid_565127 = path.getOrDefault("subscriptionId")
  valid_565127 = validateParameter(valid_565127, JString, required = true,
                                 default = nil)
  if valid_565127 != nil:
    section.add "subscriptionId", valid_565127
  var valid_565128 = path.getOrDefault("resourceGroupName")
  valid_565128 = validateParameter(valid_565128, JString, required = true,
                                 default = nil)
  if valid_565128 != nil:
    section.add "resourceGroupName", valid_565128
  var valid_565129 = path.getOrDefault("instanceId")
  valid_565129 = validateParameter(valid_565129, JString, required = true,
                                 default = nil)
  if valid_565129 != nil:
    section.add "instanceId", valid_565129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565130 = query.getOrDefault("api-version")
  valid_565130 = validateParameter(valid_565130, JString, required = true,
                                 default = nil)
  if valid_565130 != nil:
    section.add "api-version", valid_565130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565132: Call_WebAppsCreateInstanceMSDeployOperation_565123;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_565132.validator(path, query, header, formData, body)
  let scheme = call_565132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565132.url(scheme.get, call_565132.host, call_565132.base,
                         call_565132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565132, url, valid)

proc call*(call_565133: Call_WebAppsCreateInstanceMSDeployOperation_565123;
          apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565134 = newJObject()
  var query_565135 = newJObject()
  var body_565136 = newJObject()
  add(query_565135, "api-version", newJString(apiVersion))
  add(path_565134, "name", newJString(name))
  add(path_565134, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_565136 = MSDeploy
  add(path_565134, "resourceGroupName", newJString(resourceGroupName))
  add(path_565134, "instanceId", newJString(instanceId))
  result = call_565133.call(path_565134, query_565135, nil, nil, body_565136)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_565123(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_565124, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_565125,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_565111 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMsDeployStatus_565113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_565112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565114 = path.getOrDefault("name")
  valid_565114 = validateParameter(valid_565114, JString, required = true,
                                 default = nil)
  if valid_565114 != nil:
    section.add "name", valid_565114
  var valid_565115 = path.getOrDefault("subscriptionId")
  valid_565115 = validateParameter(valid_565115, JString, required = true,
                                 default = nil)
  if valid_565115 != nil:
    section.add "subscriptionId", valid_565115
  var valid_565116 = path.getOrDefault("resourceGroupName")
  valid_565116 = validateParameter(valid_565116, JString, required = true,
                                 default = nil)
  if valid_565116 != nil:
    section.add "resourceGroupName", valid_565116
  var valid_565117 = path.getOrDefault("instanceId")
  valid_565117 = validateParameter(valid_565117, JString, required = true,
                                 default = nil)
  if valid_565117 != nil:
    section.add "instanceId", valid_565117
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565118 = query.getOrDefault("api-version")
  valid_565118 = validateParameter(valid_565118, JString, required = true,
                                 default = nil)
  if valid_565118 != nil:
    section.add "api-version", valid_565118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565119: Call_WebAppsGetInstanceMsDeployStatus_565111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_565119.validator(path, query, header, formData, body)
  let scheme = call_565119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565119.url(scheme.get, call_565119.host, call_565119.base,
                         call_565119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565119, url, valid)

proc call*(call_565120: Call_WebAppsGetInstanceMsDeployStatus_565111;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565121 = newJObject()
  var query_565122 = newJObject()
  add(query_565122, "api-version", newJString(apiVersion))
  add(path_565121, "name", newJString(name))
  add(path_565121, "subscriptionId", newJString(subscriptionId))
  add(path_565121, "resourceGroupName", newJString(resourceGroupName))
  add(path_565121, "instanceId", newJString(instanceId))
  result = call_565120.call(path_565121, query_565122, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_565111(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_565112, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_565113, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_565137 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMSDeployLog_565139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_565138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565140 = path.getOrDefault("name")
  valid_565140 = validateParameter(valid_565140, JString, required = true,
                                 default = nil)
  if valid_565140 != nil:
    section.add "name", valid_565140
  var valid_565141 = path.getOrDefault("subscriptionId")
  valid_565141 = validateParameter(valid_565141, JString, required = true,
                                 default = nil)
  if valid_565141 != nil:
    section.add "subscriptionId", valid_565141
  var valid_565142 = path.getOrDefault("resourceGroupName")
  valid_565142 = validateParameter(valid_565142, JString, required = true,
                                 default = nil)
  if valid_565142 != nil:
    section.add "resourceGroupName", valid_565142
  var valid_565143 = path.getOrDefault("instanceId")
  valid_565143 = validateParameter(valid_565143, JString, required = true,
                                 default = nil)
  if valid_565143 != nil:
    section.add "instanceId", valid_565143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565144 = query.getOrDefault("api-version")
  valid_565144 = validateParameter(valid_565144, JString, required = true,
                                 default = nil)
  if valid_565144 != nil:
    section.add "api-version", valid_565144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565145: Call_WebAppsGetInstanceMSDeployLog_565137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_565145.validator(path, query, header, formData, body)
  let scheme = call_565145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565145.url(scheme.get, call_565145.host, call_565145.base,
                         call_565145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565145, url, valid)

proc call*(call_565146: Call_WebAppsGetInstanceMSDeployLog_565137;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565147 = newJObject()
  var query_565148 = newJObject()
  add(query_565148, "api-version", newJString(apiVersion))
  add(path_565147, "name", newJString(name))
  add(path_565147, "subscriptionId", newJString(subscriptionId))
  add(path_565147, "resourceGroupName", newJString(resourceGroupName))
  add(path_565147, "instanceId", newJString(instanceId))
  result = call_565146.call(path_565147, query_565148, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_565137(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_565138, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_565139, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_565149 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcesses_565151(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_565150(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565152 = path.getOrDefault("name")
  valid_565152 = validateParameter(valid_565152, JString, required = true,
                                 default = nil)
  if valid_565152 != nil:
    section.add "name", valid_565152
  var valid_565153 = path.getOrDefault("subscriptionId")
  valid_565153 = validateParameter(valid_565153, JString, required = true,
                                 default = nil)
  if valid_565153 != nil:
    section.add "subscriptionId", valid_565153
  var valid_565154 = path.getOrDefault("resourceGroupName")
  valid_565154 = validateParameter(valid_565154, JString, required = true,
                                 default = nil)
  if valid_565154 != nil:
    section.add "resourceGroupName", valid_565154
  var valid_565155 = path.getOrDefault("instanceId")
  valid_565155 = validateParameter(valid_565155, JString, required = true,
                                 default = nil)
  if valid_565155 != nil:
    section.add "instanceId", valid_565155
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565156 = query.getOrDefault("api-version")
  valid_565156 = validateParameter(valid_565156, JString, required = true,
                                 default = nil)
  if valid_565156 != nil:
    section.add "api-version", valid_565156
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565157: Call_WebAppsListInstanceProcesses_565149; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565157.validator(path, query, header, formData, body)
  let scheme = call_565157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565157.url(scheme.get, call_565157.host, call_565157.base,
                         call_565157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565157, url, valid)

proc call*(call_565158: Call_WebAppsListInstanceProcesses_565149;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565159 = newJObject()
  var query_565160 = newJObject()
  add(query_565160, "api-version", newJString(apiVersion))
  add(path_565159, "name", newJString(name))
  add(path_565159, "subscriptionId", newJString(subscriptionId))
  add(path_565159, "resourceGroupName", newJString(resourceGroupName))
  add(path_565159, "instanceId", newJString(instanceId))
  result = call_565158.call(path_565159, query_565160, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_565149(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_565150, base: "",
    url: url_WebAppsListInstanceProcesses_565151, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_565161 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcess_565163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_565162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565164 = path.getOrDefault("name")
  valid_565164 = validateParameter(valid_565164, JString, required = true,
                                 default = nil)
  if valid_565164 != nil:
    section.add "name", valid_565164
  var valid_565165 = path.getOrDefault("subscriptionId")
  valid_565165 = validateParameter(valid_565165, JString, required = true,
                                 default = nil)
  if valid_565165 != nil:
    section.add "subscriptionId", valid_565165
  var valid_565166 = path.getOrDefault("resourceGroupName")
  valid_565166 = validateParameter(valid_565166, JString, required = true,
                                 default = nil)
  if valid_565166 != nil:
    section.add "resourceGroupName", valid_565166
  var valid_565167 = path.getOrDefault("processId")
  valid_565167 = validateParameter(valid_565167, JString, required = true,
                                 default = nil)
  if valid_565167 != nil:
    section.add "processId", valid_565167
  var valid_565168 = path.getOrDefault("instanceId")
  valid_565168 = validateParameter(valid_565168, JString, required = true,
                                 default = nil)
  if valid_565168 != nil:
    section.add "instanceId", valid_565168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565169 = query.getOrDefault("api-version")
  valid_565169 = validateParameter(valid_565169, JString, required = true,
                                 default = nil)
  if valid_565169 != nil:
    section.add "api-version", valid_565169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565170: Call_WebAppsGetInstanceProcess_565161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565170.validator(path, query, header, formData, body)
  let scheme = call_565170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565170.url(scheme.get, call_565170.host, call_565170.base,
                         call_565170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565170, url, valid)

proc call*(call_565171: Call_WebAppsGetInstanceProcess_565161; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565172 = newJObject()
  var query_565173 = newJObject()
  add(query_565173, "api-version", newJString(apiVersion))
  add(path_565172, "name", newJString(name))
  add(path_565172, "subscriptionId", newJString(subscriptionId))
  add(path_565172, "resourceGroupName", newJString(resourceGroupName))
  add(path_565172, "processId", newJString(processId))
  add(path_565172, "instanceId", newJString(instanceId))
  result = call_565171.call(path_565172, query_565173, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_565161(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_565162, base: "",
    url: url_WebAppsGetInstanceProcess_565163, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_565174 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceProcess_565176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_565175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565177 = path.getOrDefault("name")
  valid_565177 = validateParameter(valid_565177, JString, required = true,
                                 default = nil)
  if valid_565177 != nil:
    section.add "name", valid_565177
  var valid_565178 = path.getOrDefault("subscriptionId")
  valid_565178 = validateParameter(valid_565178, JString, required = true,
                                 default = nil)
  if valid_565178 != nil:
    section.add "subscriptionId", valid_565178
  var valid_565179 = path.getOrDefault("resourceGroupName")
  valid_565179 = validateParameter(valid_565179, JString, required = true,
                                 default = nil)
  if valid_565179 != nil:
    section.add "resourceGroupName", valid_565179
  var valid_565180 = path.getOrDefault("processId")
  valid_565180 = validateParameter(valid_565180, JString, required = true,
                                 default = nil)
  if valid_565180 != nil:
    section.add "processId", valid_565180
  var valid_565181 = path.getOrDefault("instanceId")
  valid_565181 = validateParameter(valid_565181, JString, required = true,
                                 default = nil)
  if valid_565181 != nil:
    section.add "instanceId", valid_565181
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565182 = query.getOrDefault("api-version")
  valid_565182 = validateParameter(valid_565182, JString, required = true,
                                 default = nil)
  if valid_565182 != nil:
    section.add "api-version", valid_565182
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565183: Call_WebAppsDeleteInstanceProcess_565174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_565183.validator(path, query, header, formData, body)
  let scheme = call_565183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565183.url(scheme.get, call_565183.host, call_565183.base,
                         call_565183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565183, url, valid)

proc call*(call_565184: Call_WebAppsDeleteInstanceProcess_565174;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565185 = newJObject()
  var query_565186 = newJObject()
  add(query_565186, "api-version", newJString(apiVersion))
  add(path_565185, "name", newJString(name))
  add(path_565185, "subscriptionId", newJString(subscriptionId))
  add(path_565185, "resourceGroupName", newJString(resourceGroupName))
  add(path_565185, "processId", newJString(processId))
  add(path_565185, "instanceId", newJString(instanceId))
  result = call_565184.call(path_565185, query_565186, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_565174(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_565175, base: "",
    url: url_WebAppsDeleteInstanceProcess_565176, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_565187 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessDump_565189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_565188(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565190 = path.getOrDefault("name")
  valid_565190 = validateParameter(valid_565190, JString, required = true,
                                 default = nil)
  if valid_565190 != nil:
    section.add "name", valid_565190
  var valid_565191 = path.getOrDefault("subscriptionId")
  valid_565191 = validateParameter(valid_565191, JString, required = true,
                                 default = nil)
  if valid_565191 != nil:
    section.add "subscriptionId", valid_565191
  var valid_565192 = path.getOrDefault("resourceGroupName")
  valid_565192 = validateParameter(valid_565192, JString, required = true,
                                 default = nil)
  if valid_565192 != nil:
    section.add "resourceGroupName", valid_565192
  var valid_565193 = path.getOrDefault("processId")
  valid_565193 = validateParameter(valid_565193, JString, required = true,
                                 default = nil)
  if valid_565193 != nil:
    section.add "processId", valid_565193
  var valid_565194 = path.getOrDefault("instanceId")
  valid_565194 = validateParameter(valid_565194, JString, required = true,
                                 default = nil)
  if valid_565194 != nil:
    section.add "instanceId", valid_565194
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565195 = query.getOrDefault("api-version")
  valid_565195 = validateParameter(valid_565195, JString, required = true,
                                 default = nil)
  if valid_565195 != nil:
    section.add "api-version", valid_565195
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565196: Call_WebAppsGetInstanceProcessDump_565187; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565196.validator(path, query, header, formData, body)
  let scheme = call_565196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565196.url(scheme.get, call_565196.host, call_565196.base,
                         call_565196.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565196, url, valid)

proc call*(call_565197: Call_WebAppsGetInstanceProcessDump_565187;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565198 = newJObject()
  var query_565199 = newJObject()
  add(query_565199, "api-version", newJString(apiVersion))
  add(path_565198, "name", newJString(name))
  add(path_565198, "subscriptionId", newJString(subscriptionId))
  add(path_565198, "resourceGroupName", newJString(resourceGroupName))
  add(path_565198, "processId", newJString(processId))
  add(path_565198, "instanceId", newJString(instanceId))
  result = call_565197.call(path_565198, query_565199, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_565187(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_565188, base: "",
    url: url_WebAppsGetInstanceProcessDump_565189, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_565200 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessModules_565202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_565201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565203 = path.getOrDefault("name")
  valid_565203 = validateParameter(valid_565203, JString, required = true,
                                 default = nil)
  if valid_565203 != nil:
    section.add "name", valid_565203
  var valid_565204 = path.getOrDefault("subscriptionId")
  valid_565204 = validateParameter(valid_565204, JString, required = true,
                                 default = nil)
  if valid_565204 != nil:
    section.add "subscriptionId", valid_565204
  var valid_565205 = path.getOrDefault("resourceGroupName")
  valid_565205 = validateParameter(valid_565205, JString, required = true,
                                 default = nil)
  if valid_565205 != nil:
    section.add "resourceGroupName", valid_565205
  var valid_565206 = path.getOrDefault("processId")
  valid_565206 = validateParameter(valid_565206, JString, required = true,
                                 default = nil)
  if valid_565206 != nil:
    section.add "processId", valid_565206
  var valid_565207 = path.getOrDefault("instanceId")
  valid_565207 = validateParameter(valid_565207, JString, required = true,
                                 default = nil)
  if valid_565207 != nil:
    section.add "instanceId", valid_565207
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565208 = query.getOrDefault("api-version")
  valid_565208 = validateParameter(valid_565208, JString, required = true,
                                 default = nil)
  if valid_565208 != nil:
    section.add "api-version", valid_565208
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565209: Call_WebAppsListInstanceProcessModules_565200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565209.validator(path, query, header, formData, body)
  let scheme = call_565209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565209.url(scheme.get, call_565209.host, call_565209.base,
                         call_565209.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565209, url, valid)

proc call*(call_565210: Call_WebAppsListInstanceProcessModules_565200;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565211 = newJObject()
  var query_565212 = newJObject()
  add(query_565212, "api-version", newJString(apiVersion))
  add(path_565211, "name", newJString(name))
  add(path_565211, "subscriptionId", newJString(subscriptionId))
  add(path_565211, "resourceGroupName", newJString(resourceGroupName))
  add(path_565211, "processId", newJString(processId))
  add(path_565211, "instanceId", newJString(instanceId))
  result = call_565210.call(path_565211, query_565212, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_565200(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_565201, base: "",
    url: url_WebAppsListInstanceProcessModules_565202, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_565213 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessModule_565215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_565214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565216 = path.getOrDefault("name")
  valid_565216 = validateParameter(valid_565216, JString, required = true,
                                 default = nil)
  if valid_565216 != nil:
    section.add "name", valid_565216
  var valid_565217 = path.getOrDefault("subscriptionId")
  valid_565217 = validateParameter(valid_565217, JString, required = true,
                                 default = nil)
  if valid_565217 != nil:
    section.add "subscriptionId", valid_565217
  var valid_565218 = path.getOrDefault("resourceGroupName")
  valid_565218 = validateParameter(valid_565218, JString, required = true,
                                 default = nil)
  if valid_565218 != nil:
    section.add "resourceGroupName", valid_565218
  var valid_565219 = path.getOrDefault("processId")
  valid_565219 = validateParameter(valid_565219, JString, required = true,
                                 default = nil)
  if valid_565219 != nil:
    section.add "processId", valid_565219
  var valid_565220 = path.getOrDefault("baseAddress")
  valid_565220 = validateParameter(valid_565220, JString, required = true,
                                 default = nil)
  if valid_565220 != nil:
    section.add "baseAddress", valid_565220
  var valid_565221 = path.getOrDefault("instanceId")
  valid_565221 = validateParameter(valid_565221, JString, required = true,
                                 default = nil)
  if valid_565221 != nil:
    section.add "instanceId", valid_565221
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565222 = query.getOrDefault("api-version")
  valid_565222 = validateParameter(valid_565222, JString, required = true,
                                 default = nil)
  if valid_565222 != nil:
    section.add "api-version", valid_565222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565223: Call_WebAppsGetInstanceProcessModule_565213;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565223.validator(path, query, header, formData, body)
  let scheme = call_565223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565223.url(scheme.get, call_565223.host, call_565223.base,
                         call_565223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565223, url, valid)

proc call*(call_565224: Call_WebAppsGetInstanceProcessModule_565213;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565225 = newJObject()
  var query_565226 = newJObject()
  add(query_565226, "api-version", newJString(apiVersion))
  add(path_565225, "name", newJString(name))
  add(path_565225, "subscriptionId", newJString(subscriptionId))
  add(path_565225, "resourceGroupName", newJString(resourceGroupName))
  add(path_565225, "processId", newJString(processId))
  add(path_565225, "baseAddress", newJString(baseAddress))
  add(path_565225, "instanceId", newJString(instanceId))
  result = call_565224.call(path_565225, query_565226, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_565213(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_565214, base: "",
    url: url_WebAppsGetInstanceProcessModule_565215, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_565227 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessThreads_565229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_565228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565230 = path.getOrDefault("name")
  valid_565230 = validateParameter(valid_565230, JString, required = true,
                                 default = nil)
  if valid_565230 != nil:
    section.add "name", valid_565230
  var valid_565231 = path.getOrDefault("subscriptionId")
  valid_565231 = validateParameter(valid_565231, JString, required = true,
                                 default = nil)
  if valid_565231 != nil:
    section.add "subscriptionId", valid_565231
  var valid_565232 = path.getOrDefault("resourceGroupName")
  valid_565232 = validateParameter(valid_565232, JString, required = true,
                                 default = nil)
  if valid_565232 != nil:
    section.add "resourceGroupName", valid_565232
  var valid_565233 = path.getOrDefault("processId")
  valid_565233 = validateParameter(valid_565233, JString, required = true,
                                 default = nil)
  if valid_565233 != nil:
    section.add "processId", valid_565233
  var valid_565234 = path.getOrDefault("instanceId")
  valid_565234 = validateParameter(valid_565234, JString, required = true,
                                 default = nil)
  if valid_565234 != nil:
    section.add "instanceId", valid_565234
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565235 = query.getOrDefault("api-version")
  valid_565235 = validateParameter(valid_565235, JString, required = true,
                                 default = nil)
  if valid_565235 != nil:
    section.add "api-version", valid_565235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565236: Call_WebAppsListInstanceProcessThreads_565227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565236.validator(path, query, header, formData, body)
  let scheme = call_565236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565236.url(scheme.get, call_565236.host, call_565236.base,
                         call_565236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565236, url, valid)

proc call*(call_565237: Call_WebAppsListInstanceProcessThreads_565227;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565238 = newJObject()
  var query_565239 = newJObject()
  add(query_565239, "api-version", newJString(apiVersion))
  add(path_565238, "name", newJString(name))
  add(path_565238, "subscriptionId", newJString(subscriptionId))
  add(path_565238, "resourceGroupName", newJString(resourceGroupName))
  add(path_565238, "processId", newJString(processId))
  add(path_565238, "instanceId", newJString(instanceId))
  result = call_565237.call(path_565238, query_565239, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_565227(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_565228, base: "",
    url: url_WebAppsListInstanceProcessThreads_565229, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_565240 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessThread_565242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_565241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_565243 = path.getOrDefault("threadId")
  valid_565243 = validateParameter(valid_565243, JString, required = true,
                                 default = nil)
  if valid_565243 != nil:
    section.add "threadId", valid_565243
  var valid_565244 = path.getOrDefault("name")
  valid_565244 = validateParameter(valid_565244, JString, required = true,
                                 default = nil)
  if valid_565244 != nil:
    section.add "name", valid_565244
  var valid_565245 = path.getOrDefault("subscriptionId")
  valid_565245 = validateParameter(valid_565245, JString, required = true,
                                 default = nil)
  if valid_565245 != nil:
    section.add "subscriptionId", valid_565245
  var valid_565246 = path.getOrDefault("resourceGroupName")
  valid_565246 = validateParameter(valid_565246, JString, required = true,
                                 default = nil)
  if valid_565246 != nil:
    section.add "resourceGroupName", valid_565246
  var valid_565247 = path.getOrDefault("processId")
  valid_565247 = validateParameter(valid_565247, JString, required = true,
                                 default = nil)
  if valid_565247 != nil:
    section.add "processId", valid_565247
  var valid_565248 = path.getOrDefault("instanceId")
  valid_565248 = validateParameter(valid_565248, JString, required = true,
                                 default = nil)
  if valid_565248 != nil:
    section.add "instanceId", valid_565248
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565249 = query.getOrDefault("api-version")
  valid_565249 = validateParameter(valid_565249, JString, required = true,
                                 default = nil)
  if valid_565249 != nil:
    section.add "api-version", valid_565249
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565250: Call_WebAppsGetInstanceProcessThread_565240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_565250.validator(path, query, header, formData, body)
  let scheme = call_565250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565250.url(scheme.get, call_565250.host, call_565250.base,
                         call_565250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565250, url, valid)

proc call*(call_565251: Call_WebAppsGetInstanceProcessThread_565240;
          threadId: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565252 = newJObject()
  var query_565253 = newJObject()
  add(path_565252, "threadId", newJString(threadId))
  add(query_565253, "api-version", newJString(apiVersion))
  add(path_565252, "name", newJString(name))
  add(path_565252, "subscriptionId", newJString(subscriptionId))
  add(path_565252, "resourceGroupName", newJString(resourceGroupName))
  add(path_565252, "processId", newJString(processId))
  add(path_565252, "instanceId", newJString(instanceId))
  result = call_565251.call(path_565252, query_565253, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_565240(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_565241, base: "",
    url: url_WebAppsGetInstanceProcessThread_565242, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_565254 = ref object of OpenApiRestCall_563564
proc url_WebAppsIsCloneable_565256(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_565255(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565257 = path.getOrDefault("name")
  valid_565257 = validateParameter(valid_565257, JString, required = true,
                                 default = nil)
  if valid_565257 != nil:
    section.add "name", valid_565257
  var valid_565258 = path.getOrDefault("subscriptionId")
  valid_565258 = validateParameter(valid_565258, JString, required = true,
                                 default = nil)
  if valid_565258 != nil:
    section.add "subscriptionId", valid_565258
  var valid_565259 = path.getOrDefault("resourceGroupName")
  valid_565259 = validateParameter(valid_565259, JString, required = true,
                                 default = nil)
  if valid_565259 != nil:
    section.add "resourceGroupName", valid_565259
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565260 = query.getOrDefault("api-version")
  valid_565260 = validateParameter(valid_565260, JString, required = true,
                                 default = nil)
  if valid_565260 != nil:
    section.add "api-version", valid_565260
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565261: Call_WebAppsIsCloneable_565254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_565261.validator(path, query, header, formData, body)
  let scheme = call_565261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565261.url(scheme.get, call_565261.host, call_565261.base,
                         call_565261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565261, url, valid)

proc call*(call_565262: Call_WebAppsIsCloneable_565254; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565263 = newJObject()
  var query_565264 = newJObject()
  add(query_565264, "api-version", newJString(apiVersion))
  add(path_565263, "name", newJString(name))
  add(path_565263, "subscriptionId", newJString(subscriptionId))
  add(path_565263, "resourceGroupName", newJString(resourceGroupName))
  result = call_565262.call(path_565263, query_565264, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_565254(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_565255, base: "",
    url: url_WebAppsIsCloneable_565256, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_565265 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSyncFunctionTriggers_565267(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_565266(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565268 = path.getOrDefault("name")
  valid_565268 = validateParameter(valid_565268, JString, required = true,
                                 default = nil)
  if valid_565268 != nil:
    section.add "name", valid_565268
  var valid_565269 = path.getOrDefault("subscriptionId")
  valid_565269 = validateParameter(valid_565269, JString, required = true,
                                 default = nil)
  if valid_565269 != nil:
    section.add "subscriptionId", valid_565269
  var valid_565270 = path.getOrDefault("resourceGroupName")
  valid_565270 = validateParameter(valid_565270, JString, required = true,
                                 default = nil)
  if valid_565270 != nil:
    section.add "resourceGroupName", valid_565270
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565271 = query.getOrDefault("api-version")
  valid_565271 = validateParameter(valid_565271, JString, required = true,
                                 default = nil)
  if valid_565271 != nil:
    section.add "api-version", valid_565271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565272: Call_WebAppsListSyncFunctionTriggers_565265;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_565272.validator(path, query, header, formData, body)
  let scheme = call_565272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565272.url(scheme.get, call_565272.host, call_565272.base,
                         call_565272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565272, url, valid)

proc call*(call_565273: Call_WebAppsListSyncFunctionTriggers_565265;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565274 = newJObject()
  var query_565275 = newJObject()
  add(query_565275, "api-version", newJString(apiVersion))
  add(path_565274, "name", newJString(name))
  add(path_565274, "subscriptionId", newJString(subscriptionId))
  add(path_565274, "resourceGroupName", newJString(resourceGroupName))
  result = call_565273.call(path_565274, query_565275, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_565265(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_565266, base: "",
    url: url_WebAppsListSyncFunctionTriggers_565267, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_565276 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricDefinitions_565278(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_565277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565279 = path.getOrDefault("name")
  valid_565279 = validateParameter(valid_565279, JString, required = true,
                                 default = nil)
  if valid_565279 != nil:
    section.add "name", valid_565279
  var valid_565280 = path.getOrDefault("subscriptionId")
  valid_565280 = validateParameter(valid_565280, JString, required = true,
                                 default = nil)
  if valid_565280 != nil:
    section.add "subscriptionId", valid_565280
  var valid_565281 = path.getOrDefault("resourceGroupName")
  valid_565281 = validateParameter(valid_565281, JString, required = true,
                                 default = nil)
  if valid_565281 != nil:
    section.add "resourceGroupName", valid_565281
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565282 = query.getOrDefault("api-version")
  valid_565282 = validateParameter(valid_565282, JString, required = true,
                                 default = nil)
  if valid_565282 != nil:
    section.add "api-version", valid_565282
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565283: Call_WebAppsListMetricDefinitions_565276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_565283.validator(path, query, header, formData, body)
  let scheme = call_565283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565283.url(scheme.get, call_565283.host, call_565283.base,
                         call_565283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565283, url, valid)

proc call*(call_565284: Call_WebAppsListMetricDefinitions_565276;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565285 = newJObject()
  var query_565286 = newJObject()
  add(query_565286, "api-version", newJString(apiVersion))
  add(path_565285, "name", newJString(name))
  add(path_565285, "subscriptionId", newJString(subscriptionId))
  add(path_565285, "resourceGroupName", newJString(resourceGroupName))
  result = call_565284.call(path_565285, query_565286, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_565276(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_565277, base: "",
    url: url_WebAppsListMetricDefinitions_565278, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_565287 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetrics_565289(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_565288(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565291 = path.getOrDefault("name")
  valid_565291 = validateParameter(valid_565291, JString, required = true,
                                 default = nil)
  if valid_565291 != nil:
    section.add "name", valid_565291
  var valid_565292 = path.getOrDefault("subscriptionId")
  valid_565292 = validateParameter(valid_565292, JString, required = true,
                                 default = nil)
  if valid_565292 != nil:
    section.add "subscriptionId", valid_565292
  var valid_565293 = path.getOrDefault("resourceGroupName")
  valid_565293 = validateParameter(valid_565293, JString, required = true,
                                 default = nil)
  if valid_565293 != nil:
    section.add "resourceGroupName", valid_565293
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_565294 = query.getOrDefault("details")
  valid_565294 = validateParameter(valid_565294, JBool, required = false, default = nil)
  if valid_565294 != nil:
    section.add "details", valid_565294
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565295 = query.getOrDefault("api-version")
  valid_565295 = validateParameter(valid_565295, JString, required = true,
                                 default = nil)
  if valid_565295 != nil:
    section.add "api-version", valid_565295
  var valid_565296 = query.getOrDefault("$filter")
  valid_565296 = validateParameter(valid_565296, JString, required = false,
                                 default = nil)
  if valid_565296 != nil:
    section.add "$filter", valid_565296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565297: Call_WebAppsListMetrics_565287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_565297.validator(path, query, header, formData, body)
  let scheme = call_565297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565297.url(scheme.get, call_565297.host, call_565297.base,
                         call_565297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565297, url, valid)

proc call*(call_565298: Call_WebAppsListMetrics_565287; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565299 = newJObject()
  var query_565300 = newJObject()
  add(query_565300, "details", newJBool(details))
  add(query_565300, "api-version", newJString(apiVersion))
  add(path_565299, "name", newJString(name))
  add(path_565299, "subscriptionId", newJString(subscriptionId))
  add(path_565299, "resourceGroupName", newJString(resourceGroupName))
  add(query_565300, "$filter", newJString(Filter))
  result = call_565298.call(path_565299, query_565300, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_565287(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_565288, base: "",
    url: url_WebAppsListMetrics_565289, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_565301 = ref object of OpenApiRestCall_563564
proc url_WebAppsMigrateStorage_565303(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_565302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565304 = path.getOrDefault("name")
  valid_565304 = validateParameter(valid_565304, JString, required = true,
                                 default = nil)
  if valid_565304 != nil:
    section.add "name", valid_565304
  var valid_565305 = path.getOrDefault("subscriptionId")
  valid_565305 = validateParameter(valid_565305, JString, required = true,
                                 default = nil)
  if valid_565305 != nil:
    section.add "subscriptionId", valid_565305
  var valid_565306 = path.getOrDefault("resourceGroupName")
  valid_565306 = validateParameter(valid_565306, JString, required = true,
                                 default = nil)
  if valid_565306 != nil:
    section.add "resourceGroupName", valid_565306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565307 = query.getOrDefault("api-version")
  valid_565307 = validateParameter(valid_565307, JString, required = true,
                                 default = nil)
  if valid_565307 != nil:
    section.add "api-version", valid_565307
  var valid_565308 = query.getOrDefault("subscriptionName")
  valid_565308 = validateParameter(valid_565308, JString, required = true,
                                 default = nil)
  if valid_565308 != nil:
    section.add "subscriptionName", valid_565308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565310: Call_WebAppsMigrateStorage_565301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_565310.validator(path, query, header, formData, body)
  let scheme = call_565310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565310.url(scheme.get, call_565310.host, call_565310.base,
                         call_565310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565310, url, valid)

proc call*(call_565311: Call_WebAppsMigrateStorage_565301; apiVersion: string;
          migrationOptions: JsonNode; name: string; subscriptionId: string;
          subscriptionName: string; resourceGroupName: string): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565312 = newJObject()
  var query_565313 = newJObject()
  var body_565314 = newJObject()
  add(query_565313, "api-version", newJString(apiVersion))
  if migrationOptions != nil:
    body_565314 = migrationOptions
  add(path_565312, "name", newJString(name))
  add(path_565312, "subscriptionId", newJString(subscriptionId))
  add(query_565313, "subscriptionName", newJString(subscriptionName))
  add(path_565312, "resourceGroupName", newJString(resourceGroupName))
  result = call_565311.call(path_565312, query_565313, nil, nil, body_565314)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_565301(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_565302, base: "",
    url: url_WebAppsMigrateStorage_565303, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_565315 = ref object of OpenApiRestCall_563564
proc url_WebAppsMigrateMySql_565317(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_565316(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565318 = path.getOrDefault("name")
  valid_565318 = validateParameter(valid_565318, JString, required = true,
                                 default = nil)
  if valid_565318 != nil:
    section.add "name", valid_565318
  var valid_565319 = path.getOrDefault("subscriptionId")
  valid_565319 = validateParameter(valid_565319, JString, required = true,
                                 default = nil)
  if valid_565319 != nil:
    section.add "subscriptionId", valid_565319
  var valid_565320 = path.getOrDefault("resourceGroupName")
  valid_565320 = validateParameter(valid_565320, JString, required = true,
                                 default = nil)
  if valid_565320 != nil:
    section.add "resourceGroupName", valid_565320
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565321 = query.getOrDefault("api-version")
  valid_565321 = validateParameter(valid_565321, JString, required = true,
                                 default = nil)
  if valid_565321 != nil:
    section.add "api-version", valid_565321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565323: Call_WebAppsMigrateMySql_565315; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_565323.validator(path, query, header, formData, body)
  let scheme = call_565323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565323.url(scheme.get, call_565323.host, call_565323.base,
                         call_565323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565323, url, valid)

proc call*(call_565324: Call_WebAppsMigrateMySql_565315; apiVersion: string;
          name: string; subscriptionId: string; migrationRequestEnvelope: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565325 = newJObject()
  var query_565326 = newJObject()
  var body_565327 = newJObject()
  add(query_565326, "api-version", newJString(apiVersion))
  add(path_565325, "name", newJString(name))
  add(path_565325, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_565327 = migrationRequestEnvelope
  add(path_565325, "resourceGroupName", newJString(resourceGroupName))
  result = call_565324.call(path_565325, query_565326, nil, nil, body_565327)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_565315(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_565316, base: "",
    url: url_WebAppsMigrateMySql_565317, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_565328 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMigrateMySqlStatus_565330(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_565329(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565331 = path.getOrDefault("name")
  valid_565331 = validateParameter(valid_565331, JString, required = true,
                                 default = nil)
  if valid_565331 != nil:
    section.add "name", valid_565331
  var valid_565332 = path.getOrDefault("subscriptionId")
  valid_565332 = validateParameter(valid_565332, JString, required = true,
                                 default = nil)
  if valid_565332 != nil:
    section.add "subscriptionId", valid_565332
  var valid_565333 = path.getOrDefault("resourceGroupName")
  valid_565333 = validateParameter(valid_565333, JString, required = true,
                                 default = nil)
  if valid_565333 != nil:
    section.add "resourceGroupName", valid_565333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565334 = query.getOrDefault("api-version")
  valid_565334 = validateParameter(valid_565334, JString, required = true,
                                 default = nil)
  if valid_565334 != nil:
    section.add "api-version", valid_565334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565335: Call_WebAppsGetMigrateMySqlStatus_565328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_565335.validator(path, query, header, formData, body)
  let scheme = call_565335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565335.url(scheme.get, call_565335.host, call_565335.base,
                         call_565335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565335, url, valid)

proc call*(call_565336: Call_WebAppsGetMigrateMySqlStatus_565328;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565337 = newJObject()
  var query_565338 = newJObject()
  add(query_565338, "api-version", newJString(apiVersion))
  add(path_565337, "name", newJString(name))
  add(path_565337, "subscriptionId", newJString(subscriptionId))
  add(path_565337, "resourceGroupName", newJString(resourceGroupName))
  result = call_565336.call(path_565337, query_565338, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_565328(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_565329, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_565330, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565350 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565352(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565351(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565353 = path.getOrDefault("name")
  valid_565353 = validateParameter(valid_565353, JString, required = true,
                                 default = nil)
  if valid_565353 != nil:
    section.add "name", valid_565353
  var valid_565354 = path.getOrDefault("subscriptionId")
  valid_565354 = validateParameter(valid_565354, JString, required = true,
                                 default = nil)
  if valid_565354 != nil:
    section.add "subscriptionId", valid_565354
  var valid_565355 = path.getOrDefault("resourceGroupName")
  valid_565355 = validateParameter(valid_565355, JString, required = true,
                                 default = nil)
  if valid_565355 != nil:
    section.add "resourceGroupName", valid_565355
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565356 = query.getOrDefault("api-version")
  valid_565356 = validateParameter(valid_565356, JString, required = true,
                                 default = nil)
  if valid_565356 != nil:
    section.add "api-version", valid_565356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565358: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565350;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_565358.validator(path, query, header, formData, body)
  let scheme = call_565358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565358.url(scheme.get, call_565358.host, call_565358.base,
                         call_565358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565358, url, valid)

proc call*(call_565359: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565350;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565360 = newJObject()
  var query_565361 = newJObject()
  var body_565362 = newJObject()
  if connectionEnvelope != nil:
    body_565362 = connectionEnvelope
  add(query_565361, "api-version", newJString(apiVersion))
  add(path_565360, "name", newJString(name))
  add(path_565360, "subscriptionId", newJString(subscriptionId))
  add(path_565360, "resourceGroupName", newJString(resourceGroupName))
  result = call_565359.call(path_565360, query_565361, nil, nil, body_565362)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnection* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565350(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565351,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_565352,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnection_565339 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSwiftVirtualNetworkConnection_565341(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnection_565340(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565342 = path.getOrDefault("name")
  valid_565342 = validateParameter(valid_565342, JString, required = true,
                                 default = nil)
  if valid_565342 != nil:
    section.add "name", valid_565342
  var valid_565343 = path.getOrDefault("subscriptionId")
  valid_565343 = validateParameter(valid_565343, JString, required = true,
                                 default = nil)
  if valid_565343 != nil:
    section.add "subscriptionId", valid_565343
  var valid_565344 = path.getOrDefault("resourceGroupName")
  valid_565344 = validateParameter(valid_565344, JString, required = true,
                                 default = nil)
  if valid_565344 != nil:
    section.add "resourceGroupName", valid_565344
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565345 = query.getOrDefault("api-version")
  valid_565345 = validateParameter(valid_565345, JString, required = true,
                                 default = nil)
  if valid_565345 != nil:
    section.add "api-version", valid_565345
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565346: Call_WebAppsGetSwiftVirtualNetworkConnection_565339;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_565346.validator(path, query, header, formData, body)
  let scheme = call_565346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565346.url(scheme.get, call_565346.host, call_565346.base,
                         call_565346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565346, url, valid)

proc call*(call_565347: Call_WebAppsGetSwiftVirtualNetworkConnection_565339;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnection
  ## Gets a Swift Virtual Network connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565348 = newJObject()
  var query_565349 = newJObject()
  add(query_565349, "api-version", newJString(apiVersion))
  add(path_565348, "name", newJString(name))
  add(path_565348, "subscriptionId", newJString(subscriptionId))
  add(path_565348, "resourceGroupName", newJString(resourceGroupName))
  result = call_565347.call(path_565348, query_565349, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnection* = Call_WebAppsGetSwiftVirtualNetworkConnection_565339(
    name: "webAppsGetSwiftVirtualNetworkConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnection_565340, base: "",
    url: url_WebAppsGetSwiftVirtualNetworkConnection_565341,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnection_565374 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSwiftVirtualNetworkConnection_565376(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnection_565375(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565377 = path.getOrDefault("name")
  valid_565377 = validateParameter(valid_565377, JString, required = true,
                                 default = nil)
  if valid_565377 != nil:
    section.add "name", valid_565377
  var valid_565378 = path.getOrDefault("subscriptionId")
  valid_565378 = validateParameter(valid_565378, JString, required = true,
                                 default = nil)
  if valid_565378 != nil:
    section.add "subscriptionId", valid_565378
  var valid_565379 = path.getOrDefault("resourceGroupName")
  valid_565379 = validateParameter(valid_565379, JString, required = true,
                                 default = nil)
  if valid_565379 != nil:
    section.add "resourceGroupName", valid_565379
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565380 = query.getOrDefault("api-version")
  valid_565380 = validateParameter(valid_565380, JString, required = true,
                                 default = nil)
  if valid_565380 != nil:
    section.add "api-version", valid_565380
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565382: Call_WebAppsUpdateSwiftVirtualNetworkConnection_565374;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_565382.validator(path, query, header, formData, body)
  let scheme = call_565382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565382.url(scheme.get, call_565382.host, call_565382.base,
                         call_565382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565382, url, valid)

proc call*(call_565383: Call_WebAppsUpdateSwiftVirtualNetworkConnection_565374;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565384 = newJObject()
  var query_565385 = newJObject()
  var body_565386 = newJObject()
  if connectionEnvelope != nil:
    body_565386 = connectionEnvelope
  add(query_565385, "api-version", newJString(apiVersion))
  add(path_565384, "name", newJString(name))
  add(path_565384, "subscriptionId", newJString(subscriptionId))
  add(path_565384, "resourceGroupName", newJString(resourceGroupName))
  result = call_565383.call(path_565384, query_565385, nil, nil, body_565386)

var webAppsUpdateSwiftVirtualNetworkConnection* = Call_WebAppsUpdateSwiftVirtualNetworkConnection_565374(
    name: "webAppsUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnection_565375,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnection_565376,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetwork_565363 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSwiftVirtualNetwork_565365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetwork_565364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565366 = path.getOrDefault("name")
  valid_565366 = validateParameter(valid_565366, JString, required = true,
                                 default = nil)
  if valid_565366 != nil:
    section.add "name", valid_565366
  var valid_565367 = path.getOrDefault("subscriptionId")
  valid_565367 = validateParameter(valid_565367, JString, required = true,
                                 default = nil)
  if valid_565367 != nil:
    section.add "subscriptionId", valid_565367
  var valid_565368 = path.getOrDefault("resourceGroupName")
  valid_565368 = validateParameter(valid_565368, JString, required = true,
                                 default = nil)
  if valid_565368 != nil:
    section.add "resourceGroupName", valid_565368
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565369 = query.getOrDefault("api-version")
  valid_565369 = validateParameter(valid_565369, JString, required = true,
                                 default = nil)
  if valid_565369 != nil:
    section.add "api-version", valid_565369
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565370: Call_WebAppsDeleteSwiftVirtualNetwork_565363;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_565370.validator(path, query, header, formData, body)
  let scheme = call_565370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565370.url(scheme.get, call_565370.host, call_565370.base,
                         call_565370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565370, url, valid)

proc call*(call_565371: Call_WebAppsDeleteSwiftVirtualNetwork_565363;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetwork
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565372 = newJObject()
  var query_565373 = newJObject()
  add(query_565373, "api-version", newJString(apiVersion))
  add(path_565372, "name", newJString(name))
  add(path_565372, "subscriptionId", newJString(subscriptionId))
  add(path_565372, "resourceGroupName", newJString(resourceGroupName))
  result = call_565371.call(path_565372, query_565373, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetwork* = Call_WebAppsDeleteSwiftVirtualNetwork_565363(
    name: "webAppsDeleteSwiftVirtualNetwork", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetwork_565364, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetwork_565365, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_565387 = ref object of OpenApiRestCall_563564
proc url_WebAppsListNetworkFeatures_565389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_565388(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `view` field"
  var valid_565390 = path.getOrDefault("view")
  valid_565390 = validateParameter(valid_565390, JString, required = true,
                                 default = nil)
  if valid_565390 != nil:
    section.add "view", valid_565390
  var valid_565391 = path.getOrDefault("name")
  valid_565391 = validateParameter(valid_565391, JString, required = true,
                                 default = nil)
  if valid_565391 != nil:
    section.add "name", valid_565391
  var valid_565392 = path.getOrDefault("subscriptionId")
  valid_565392 = validateParameter(valid_565392, JString, required = true,
                                 default = nil)
  if valid_565392 != nil:
    section.add "subscriptionId", valid_565392
  var valid_565393 = path.getOrDefault("resourceGroupName")
  valid_565393 = validateParameter(valid_565393, JString, required = true,
                                 default = nil)
  if valid_565393 != nil:
    section.add "resourceGroupName", valid_565393
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565394 = query.getOrDefault("api-version")
  valid_565394 = validateParameter(valid_565394, JString, required = true,
                                 default = nil)
  if valid_565394 != nil:
    section.add "api-version", valid_565394
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565395: Call_WebAppsListNetworkFeatures_565387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_565395.validator(path, query, header, formData, body)
  let scheme = call_565395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565395.url(scheme.get, call_565395.host, call_565395.base,
                         call_565395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565395, url, valid)

proc call*(call_565396: Call_WebAppsListNetworkFeatures_565387; apiVersion: string;
          view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565397 = newJObject()
  var query_565398 = newJObject()
  add(query_565398, "api-version", newJString(apiVersion))
  add(path_565397, "view", newJString(view))
  add(path_565397, "name", newJString(name))
  add(path_565397, "subscriptionId", newJString(subscriptionId))
  add(path_565397, "resourceGroupName", newJString(resourceGroupName))
  result = call_565396.call(path_565397, query_565398, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_565387(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_565388, base: "",
    url: url_WebAppsListNetworkFeatures_565389, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperation_565399 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTraceOperation_565401(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperation_565400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565402 = path.getOrDefault("operationId")
  valid_565402 = validateParameter(valid_565402, JString, required = true,
                                 default = nil)
  if valid_565402 != nil:
    section.add "operationId", valid_565402
  var valid_565403 = path.getOrDefault("name")
  valid_565403 = validateParameter(valid_565403, JString, required = true,
                                 default = nil)
  if valid_565403 != nil:
    section.add "name", valid_565403
  var valid_565404 = path.getOrDefault("subscriptionId")
  valid_565404 = validateParameter(valid_565404, JString, required = true,
                                 default = nil)
  if valid_565404 != nil:
    section.add "subscriptionId", valid_565404
  var valid_565405 = path.getOrDefault("resourceGroupName")
  valid_565405 = validateParameter(valid_565405, JString, required = true,
                                 default = nil)
  if valid_565405 != nil:
    section.add "resourceGroupName", valid_565405
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565406 = query.getOrDefault("api-version")
  valid_565406 = validateParameter(valid_565406, JString, required = true,
                                 default = nil)
  if valid_565406 != nil:
    section.add "api-version", valid_565406
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565407: Call_WebAppsGetNetworkTraceOperation_565399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_565407.validator(path, query, header, formData, body)
  let scheme = call_565407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565407.url(scheme.get, call_565407.host, call_565407.base,
                         call_565407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565407, url, valid)

proc call*(call_565408: Call_WebAppsGetNetworkTraceOperation_565399;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTraceOperation
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565409 = newJObject()
  var query_565410 = newJObject()
  add(query_565410, "api-version", newJString(apiVersion))
  add(path_565409, "operationId", newJString(operationId))
  add(path_565409, "name", newJString(name))
  add(path_565409, "subscriptionId", newJString(subscriptionId))
  add(path_565409, "resourceGroupName", newJString(resourceGroupName))
  result = call_565408.call(path_565409, query_565410, nil, nil, nil)

var webAppsGetNetworkTraceOperation* = Call_WebAppsGetNetworkTraceOperation_565399(
    name: "webAppsGetNetworkTraceOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperation_565400, base: "",
    url: url_WebAppsGetNetworkTraceOperation_565401, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_565411 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTrace_565413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_565412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565414 = path.getOrDefault("name")
  valid_565414 = validateParameter(valid_565414, JString, required = true,
                                 default = nil)
  if valid_565414 != nil:
    section.add "name", valid_565414
  var valid_565415 = path.getOrDefault("subscriptionId")
  valid_565415 = validateParameter(valid_565415, JString, required = true,
                                 default = nil)
  if valid_565415 != nil:
    section.add "subscriptionId", valid_565415
  var valid_565416 = path.getOrDefault("resourceGroupName")
  valid_565416 = validateParameter(valid_565416, JString, required = true,
                                 default = nil)
  if valid_565416 != nil:
    section.add "resourceGroupName", valid_565416
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565417 = query.getOrDefault("api-version")
  valid_565417 = validateParameter(valid_565417, JString, required = true,
                                 default = nil)
  if valid_565417 != nil:
    section.add "api-version", valid_565417
  var valid_565418 = query.getOrDefault("sasUrl")
  valid_565418 = validateParameter(valid_565418, JString, required = false,
                                 default = nil)
  if valid_565418 != nil:
    section.add "sasUrl", valid_565418
  var valid_565419 = query.getOrDefault("durationInSeconds")
  valid_565419 = validateParameter(valid_565419, JInt, required = false, default = nil)
  if valid_565419 != nil:
    section.add "durationInSeconds", valid_565419
  var valid_565420 = query.getOrDefault("maxFrameLength")
  valid_565420 = validateParameter(valid_565420, JInt, required = false, default = nil)
  if valid_565420 != nil:
    section.add "maxFrameLength", valid_565420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565421: Call_WebAppsStartWebSiteNetworkTrace_565411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_565421.validator(path, query, header, formData, body)
  let scheme = call_565421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565421.url(scheme.get, call_565421.host, call_565421.base,
                         call_565421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565421, url, valid)

proc call*(call_565422: Call_WebAppsStartWebSiteNetworkTrace_565411;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site (To be deprecated).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_565423 = newJObject()
  var query_565424 = newJObject()
  add(query_565424, "api-version", newJString(apiVersion))
  add(query_565424, "sasUrl", newJString(sasUrl))
  add(path_565423, "name", newJString(name))
  add(path_565423, "subscriptionId", newJString(subscriptionId))
  add(query_565424, "durationInSeconds", newJInt(durationInSeconds))
  add(path_565423, "resourceGroupName", newJString(resourceGroupName))
  add(query_565424, "maxFrameLength", newJInt(maxFrameLength))
  result = call_565422.call(path_565423, query_565424, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_565411(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_565412, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_565413, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperation_565425 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTraceOperation_565427(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperation_565426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565428 = path.getOrDefault("name")
  valid_565428 = validateParameter(valid_565428, JString, required = true,
                                 default = nil)
  if valid_565428 != nil:
    section.add "name", valid_565428
  var valid_565429 = path.getOrDefault("subscriptionId")
  valid_565429 = validateParameter(valid_565429, JString, required = true,
                                 default = nil)
  if valid_565429 != nil:
    section.add "subscriptionId", valid_565429
  var valid_565430 = path.getOrDefault("resourceGroupName")
  valid_565430 = validateParameter(valid_565430, JString, required = true,
                                 default = nil)
  if valid_565430 != nil:
    section.add "resourceGroupName", valid_565430
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565431 = query.getOrDefault("api-version")
  valid_565431 = validateParameter(valid_565431, JString, required = true,
                                 default = nil)
  if valid_565431 != nil:
    section.add "api-version", valid_565431
  var valid_565432 = query.getOrDefault("sasUrl")
  valid_565432 = validateParameter(valid_565432, JString, required = false,
                                 default = nil)
  if valid_565432 != nil:
    section.add "sasUrl", valid_565432
  var valid_565433 = query.getOrDefault("durationInSeconds")
  valid_565433 = validateParameter(valid_565433, JInt, required = false, default = nil)
  if valid_565433 != nil:
    section.add "durationInSeconds", valid_565433
  var valid_565434 = query.getOrDefault("maxFrameLength")
  valid_565434 = validateParameter(valid_565434, JInt, required = false, default = nil)
  if valid_565434 != nil:
    section.add "maxFrameLength", valid_565434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565435: Call_WebAppsStartWebSiteNetworkTraceOperation_565425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_565435.validator(path, query, header, formData, body)
  let scheme = call_565435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565435.url(scheme.get, call_565435.host, call_565435.base,
                         call_565435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565435, url, valid)

proc call*(call_565436: Call_WebAppsStartWebSiteNetworkTraceOperation_565425;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperation
  ## Start capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_565437 = newJObject()
  var query_565438 = newJObject()
  add(query_565438, "api-version", newJString(apiVersion))
  add(query_565438, "sasUrl", newJString(sasUrl))
  add(path_565437, "name", newJString(name))
  add(path_565437, "subscriptionId", newJString(subscriptionId))
  add(query_565438, "durationInSeconds", newJInt(durationInSeconds))
  add(path_565437, "resourceGroupName", newJString(resourceGroupName))
  add(query_565438, "maxFrameLength", newJInt(maxFrameLength))
  result = call_565436.call(path_565437, query_565438, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperation* = Call_WebAppsStartWebSiteNetworkTraceOperation_565425(
    name: "webAppsStartWebSiteNetworkTraceOperation", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperation_565426, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceOperation_565427,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_565439 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopWebSiteNetworkTrace_565441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_565440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565442 = path.getOrDefault("name")
  valid_565442 = validateParameter(valid_565442, JString, required = true,
                                 default = nil)
  if valid_565442 != nil:
    section.add "name", valid_565442
  var valid_565443 = path.getOrDefault("subscriptionId")
  valid_565443 = validateParameter(valid_565443, JString, required = true,
                                 default = nil)
  if valid_565443 != nil:
    section.add "subscriptionId", valid_565443
  var valid_565444 = path.getOrDefault("resourceGroupName")
  valid_565444 = validateParameter(valid_565444, JString, required = true,
                                 default = nil)
  if valid_565444 != nil:
    section.add "resourceGroupName", valid_565444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565445 = query.getOrDefault("api-version")
  valid_565445 = validateParameter(valid_565445, JString, required = true,
                                 default = nil)
  if valid_565445 != nil:
    section.add "api-version", valid_565445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565446: Call_WebAppsStopWebSiteNetworkTrace_565439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_565446.validator(path, query, header, formData, body)
  let scheme = call_565446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565446.url(scheme.get, call_565446.host, call_565446.base,
                         call_565446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565446, url, valid)

proc call*(call_565447: Call_WebAppsStopWebSiteNetworkTrace_565439;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565448 = newJObject()
  var query_565449 = newJObject()
  add(query_565449, "api-version", newJString(apiVersion))
  add(path_565448, "name", newJString(name))
  add(path_565448, "subscriptionId", newJString(subscriptionId))
  add(path_565448, "resourceGroupName", newJString(resourceGroupName))
  result = call_565447.call(path_565448, query_565449, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_565439(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_565440, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_565441, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraces_565450 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTraces_565452(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraces_565451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565453 = path.getOrDefault("operationId")
  valid_565453 = validateParameter(valid_565453, JString, required = true,
                                 default = nil)
  if valid_565453 != nil:
    section.add "operationId", valid_565453
  var valid_565454 = path.getOrDefault("name")
  valid_565454 = validateParameter(valid_565454, JString, required = true,
                                 default = nil)
  if valid_565454 != nil:
    section.add "name", valid_565454
  var valid_565455 = path.getOrDefault("subscriptionId")
  valid_565455 = validateParameter(valid_565455, JString, required = true,
                                 default = nil)
  if valid_565455 != nil:
    section.add "subscriptionId", valid_565455
  var valid_565456 = path.getOrDefault("resourceGroupName")
  valid_565456 = validateParameter(valid_565456, JString, required = true,
                                 default = nil)
  if valid_565456 != nil:
    section.add "resourceGroupName", valid_565456
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565457 = query.getOrDefault("api-version")
  valid_565457 = validateParameter(valid_565457, JString, required = true,
                                 default = nil)
  if valid_565457 != nil:
    section.add "api-version", valid_565457
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565458: Call_WebAppsGetNetworkTraces_565450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_565458.validator(path, query, header, formData, body)
  let scheme = call_565458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565458.url(scheme.get, call_565458.host, call_565458.base,
                         call_565458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565458, url, valid)

proc call*(call_565459: Call_WebAppsGetNetworkTraces_565450; apiVersion: string;
          operationId: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTraces
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565460 = newJObject()
  var query_565461 = newJObject()
  add(query_565461, "api-version", newJString(apiVersion))
  add(path_565460, "operationId", newJString(operationId))
  add(path_565460, "name", newJString(name))
  add(path_565460, "subscriptionId", newJString(subscriptionId))
  add(path_565460, "resourceGroupName", newJString(resourceGroupName))
  result = call_565459.call(path_565460, query_565461, nil, nil, nil)

var webAppsGetNetworkTraces* = Call_WebAppsGetNetworkTraces_565450(
    name: "webAppsGetNetworkTraces", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTraces_565451, base: "",
    url: url_WebAppsGetNetworkTraces_565452, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationV2_565462 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTraceOperationV2_565464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationV2_565463(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565465 = path.getOrDefault("operationId")
  valid_565465 = validateParameter(valid_565465, JString, required = true,
                                 default = nil)
  if valid_565465 != nil:
    section.add "operationId", valid_565465
  var valid_565466 = path.getOrDefault("name")
  valid_565466 = validateParameter(valid_565466, JString, required = true,
                                 default = nil)
  if valid_565466 != nil:
    section.add "name", valid_565466
  var valid_565467 = path.getOrDefault("subscriptionId")
  valid_565467 = validateParameter(valid_565467, JString, required = true,
                                 default = nil)
  if valid_565467 != nil:
    section.add "subscriptionId", valid_565467
  var valid_565468 = path.getOrDefault("resourceGroupName")
  valid_565468 = validateParameter(valid_565468, JString, required = true,
                                 default = nil)
  if valid_565468 != nil:
    section.add "resourceGroupName", valid_565468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565469 = query.getOrDefault("api-version")
  valid_565469 = validateParameter(valid_565469, JString, required = true,
                                 default = nil)
  if valid_565469 != nil:
    section.add "api-version", valid_565469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565470: Call_WebAppsGetNetworkTraceOperationV2_565462;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_565470.validator(path, query, header, formData, body)
  let scheme = call_565470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565470.url(scheme.get, call_565470.host, call_565470.base,
                         call_565470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565470, url, valid)

proc call*(call_565471: Call_WebAppsGetNetworkTraceOperationV2_565462;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTraceOperationV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565472 = newJObject()
  var query_565473 = newJObject()
  add(query_565473, "api-version", newJString(apiVersion))
  add(path_565472, "operationId", newJString(operationId))
  add(path_565472, "name", newJString(name))
  add(path_565472, "subscriptionId", newJString(subscriptionId))
  add(path_565472, "resourceGroupName", newJString(resourceGroupName))
  result = call_565471.call(path_565472, query_565473, nil, nil, nil)

var webAppsGetNetworkTraceOperationV2* = Call_WebAppsGetNetworkTraceOperationV2_565462(
    name: "webAppsGetNetworkTraceOperationV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationV2_565463, base: "",
    url: url_WebAppsGetNetworkTraceOperationV2_565464, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesV2_565474 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTracesV2_565476(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesV2_565475(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `operationId` field"
  var valid_565477 = path.getOrDefault("operationId")
  valid_565477 = validateParameter(valid_565477, JString, required = true,
                                 default = nil)
  if valid_565477 != nil:
    section.add "operationId", valid_565477
  var valid_565478 = path.getOrDefault("name")
  valid_565478 = validateParameter(valid_565478, JString, required = true,
                                 default = nil)
  if valid_565478 != nil:
    section.add "name", valid_565478
  var valid_565479 = path.getOrDefault("subscriptionId")
  valid_565479 = validateParameter(valid_565479, JString, required = true,
                                 default = nil)
  if valid_565479 != nil:
    section.add "subscriptionId", valid_565479
  var valid_565480 = path.getOrDefault("resourceGroupName")
  valid_565480 = validateParameter(valid_565480, JString, required = true,
                                 default = nil)
  if valid_565480 != nil:
    section.add "resourceGroupName", valid_565480
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565481 = query.getOrDefault("api-version")
  valid_565481 = validateParameter(valid_565481, JString, required = true,
                                 default = nil)
  if valid_565481 != nil:
    section.add "api-version", valid_565481
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565482: Call_WebAppsGetNetworkTracesV2_565474; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_565482.validator(path, query, header, formData, body)
  let scheme = call_565482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565482.url(scheme.get, call_565482.host, call_565482.base,
                         call_565482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565482, url, valid)

proc call*(call_565483: Call_WebAppsGetNetworkTracesV2_565474; apiVersion: string;
          operationId: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTracesV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565484 = newJObject()
  var query_565485 = newJObject()
  add(query_565485, "api-version", newJString(apiVersion))
  add(path_565484, "operationId", newJString(operationId))
  add(path_565484, "name", newJString(name))
  add(path_565484, "subscriptionId", newJString(subscriptionId))
  add(path_565484, "resourceGroupName", newJString(resourceGroupName))
  result = call_565483.call(path_565484, query_565485, nil, nil, nil)

var webAppsGetNetworkTracesV2* = Call_WebAppsGetNetworkTracesV2_565474(
    name: "webAppsGetNetworkTracesV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesV2_565475, base: "",
    url: url_WebAppsGetNetworkTracesV2_565476, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_565486 = ref object of OpenApiRestCall_563564
proc url_WebAppsGenerateNewSitePublishingPassword_565488(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_565487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565489 = path.getOrDefault("name")
  valid_565489 = validateParameter(valid_565489, JString, required = true,
                                 default = nil)
  if valid_565489 != nil:
    section.add "name", valid_565489
  var valid_565490 = path.getOrDefault("subscriptionId")
  valid_565490 = validateParameter(valid_565490, JString, required = true,
                                 default = nil)
  if valid_565490 != nil:
    section.add "subscriptionId", valid_565490
  var valid_565491 = path.getOrDefault("resourceGroupName")
  valid_565491 = validateParameter(valid_565491, JString, required = true,
                                 default = nil)
  if valid_565491 != nil:
    section.add "resourceGroupName", valid_565491
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565492 = query.getOrDefault("api-version")
  valid_565492 = validateParameter(valid_565492, JString, required = true,
                                 default = nil)
  if valid_565492 != nil:
    section.add "api-version", valid_565492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565493: Call_WebAppsGenerateNewSitePublishingPassword_565486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_565493.validator(path, query, header, formData, body)
  let scheme = call_565493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565493.url(scheme.get, call_565493.host, call_565493.base,
                         call_565493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565493, url, valid)

proc call*(call_565494: Call_WebAppsGenerateNewSitePublishingPassword_565486;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565495 = newJObject()
  var query_565496 = newJObject()
  add(query_565496, "api-version", newJString(apiVersion))
  add(path_565495, "name", newJString(name))
  add(path_565495, "subscriptionId", newJString(subscriptionId))
  add(path_565495, "resourceGroupName", newJString(resourceGroupName))
  result = call_565494.call(path_565495, query_565496, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_565486(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_565487, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_565488,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_565497 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPerfMonCounters_565499(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_565498(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565500 = path.getOrDefault("name")
  valid_565500 = validateParameter(valid_565500, JString, required = true,
                                 default = nil)
  if valid_565500 != nil:
    section.add "name", valid_565500
  var valid_565501 = path.getOrDefault("subscriptionId")
  valid_565501 = validateParameter(valid_565501, JString, required = true,
                                 default = nil)
  if valid_565501 != nil:
    section.add "subscriptionId", valid_565501
  var valid_565502 = path.getOrDefault("resourceGroupName")
  valid_565502 = validateParameter(valid_565502, JString, required = true,
                                 default = nil)
  if valid_565502 != nil:
    section.add "resourceGroupName", valid_565502
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565503 = query.getOrDefault("api-version")
  valid_565503 = validateParameter(valid_565503, JString, required = true,
                                 default = nil)
  if valid_565503 != nil:
    section.add "api-version", valid_565503
  var valid_565504 = query.getOrDefault("$filter")
  valid_565504 = validateParameter(valid_565504, JString, required = false,
                                 default = nil)
  if valid_565504 != nil:
    section.add "$filter", valid_565504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565505: Call_WebAppsListPerfMonCounters_565497; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_565505.validator(path, query, header, formData, body)
  let scheme = call_565505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565505.url(scheme.get, call_565505.host, call_565505.base,
                         call_565505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565505, url, valid)

proc call*(call_565506: Call_WebAppsListPerfMonCounters_565497; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565507 = newJObject()
  var query_565508 = newJObject()
  add(query_565508, "api-version", newJString(apiVersion))
  add(path_565507, "name", newJString(name))
  add(path_565507, "subscriptionId", newJString(subscriptionId))
  add(path_565507, "resourceGroupName", newJString(resourceGroupName))
  add(query_565508, "$filter", newJString(Filter))
  result = call_565506.call(path_565507, query_565508, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_565497(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_565498, base: "",
    url: url_WebAppsListPerfMonCounters_565499, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_565509 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSitePhpErrorLogFlag_565511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_565510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565512 = path.getOrDefault("name")
  valid_565512 = validateParameter(valid_565512, JString, required = true,
                                 default = nil)
  if valid_565512 != nil:
    section.add "name", valid_565512
  var valid_565513 = path.getOrDefault("subscriptionId")
  valid_565513 = validateParameter(valid_565513, JString, required = true,
                                 default = nil)
  if valid_565513 != nil:
    section.add "subscriptionId", valid_565513
  var valid_565514 = path.getOrDefault("resourceGroupName")
  valid_565514 = validateParameter(valid_565514, JString, required = true,
                                 default = nil)
  if valid_565514 != nil:
    section.add "resourceGroupName", valid_565514
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565515 = query.getOrDefault("api-version")
  valid_565515 = validateParameter(valid_565515, JString, required = true,
                                 default = nil)
  if valid_565515 != nil:
    section.add "api-version", valid_565515
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565516: Call_WebAppsGetSitePhpErrorLogFlag_565509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_565516.validator(path, query, header, formData, body)
  let scheme = call_565516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565516.url(scheme.get, call_565516.host, call_565516.base,
                         call_565516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565516, url, valid)

proc call*(call_565517: Call_WebAppsGetSitePhpErrorLogFlag_565509;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565518 = newJObject()
  var query_565519 = newJObject()
  add(query_565519, "api-version", newJString(apiVersion))
  add(path_565518, "name", newJString(name))
  add(path_565518, "subscriptionId", newJString(subscriptionId))
  add(path_565518, "resourceGroupName", newJString(resourceGroupName))
  result = call_565517.call(path_565518, query_565519, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_565509(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_565510, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_565511, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_565520 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPremierAddOns_565522(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_565521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565523 = path.getOrDefault("name")
  valid_565523 = validateParameter(valid_565523, JString, required = true,
                                 default = nil)
  if valid_565523 != nil:
    section.add "name", valid_565523
  var valid_565524 = path.getOrDefault("subscriptionId")
  valid_565524 = validateParameter(valid_565524, JString, required = true,
                                 default = nil)
  if valid_565524 != nil:
    section.add "subscriptionId", valid_565524
  var valid_565525 = path.getOrDefault("resourceGroupName")
  valid_565525 = validateParameter(valid_565525, JString, required = true,
                                 default = nil)
  if valid_565525 != nil:
    section.add "resourceGroupName", valid_565525
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565526 = query.getOrDefault("api-version")
  valid_565526 = validateParameter(valid_565526, JString, required = true,
                                 default = nil)
  if valid_565526 != nil:
    section.add "api-version", valid_565526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565527: Call_WebAppsListPremierAddOns_565520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_565527.validator(path, query, header, formData, body)
  let scheme = call_565527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565527.url(scheme.get, call_565527.host, call_565527.base,
                         call_565527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565527, url, valid)

proc call*(call_565528: Call_WebAppsListPremierAddOns_565520; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565529 = newJObject()
  var query_565530 = newJObject()
  add(query_565530, "api-version", newJString(apiVersion))
  add(path_565529, "name", newJString(name))
  add(path_565529, "subscriptionId", newJString(subscriptionId))
  add(path_565529, "resourceGroupName", newJString(resourceGroupName))
  result = call_565528.call(path_565529, query_565530, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_565520(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_565521, base: "",
    url: url_WebAppsListPremierAddOns_565522, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_565543 = ref object of OpenApiRestCall_563564
proc url_WebAppsAddPremierAddOn_565545(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_565544(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565546 = path.getOrDefault("name")
  valid_565546 = validateParameter(valid_565546, JString, required = true,
                                 default = nil)
  if valid_565546 != nil:
    section.add "name", valid_565546
  var valid_565547 = path.getOrDefault("subscriptionId")
  valid_565547 = validateParameter(valid_565547, JString, required = true,
                                 default = nil)
  if valid_565547 != nil:
    section.add "subscriptionId", valid_565547
  var valid_565548 = path.getOrDefault("premierAddOnName")
  valid_565548 = validateParameter(valid_565548, JString, required = true,
                                 default = nil)
  if valid_565548 != nil:
    section.add "premierAddOnName", valid_565548
  var valid_565549 = path.getOrDefault("resourceGroupName")
  valid_565549 = validateParameter(valid_565549, JString, required = true,
                                 default = nil)
  if valid_565549 != nil:
    section.add "resourceGroupName", valid_565549
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565550 = query.getOrDefault("api-version")
  valid_565550 = validateParameter(valid_565550, JString, required = true,
                                 default = nil)
  if valid_565550 != nil:
    section.add "api-version", valid_565550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565552: Call_WebAppsAddPremierAddOn_565543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_565552.validator(path, query, header, formData, body)
  let scheme = call_565552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565552.url(scheme.get, call_565552.host, call_565552.base,
                         call_565552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565552, url, valid)

proc call*(call_565553: Call_WebAppsAddPremierAddOn_565543; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          premierAddOn: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565554 = newJObject()
  var query_565555 = newJObject()
  var body_565556 = newJObject()
  add(query_565555, "api-version", newJString(apiVersion))
  add(path_565554, "name", newJString(name))
  add(path_565554, "subscriptionId", newJString(subscriptionId))
  add(path_565554, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_565556 = premierAddOn
  add(path_565554, "resourceGroupName", newJString(resourceGroupName))
  result = call_565553.call(path_565554, query_565555, nil, nil, body_565556)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_565543(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_565544, base: "",
    url: url_WebAppsAddPremierAddOn_565545, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_565531 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPremierAddOn_565533(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_565532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565534 = path.getOrDefault("name")
  valid_565534 = validateParameter(valid_565534, JString, required = true,
                                 default = nil)
  if valid_565534 != nil:
    section.add "name", valid_565534
  var valid_565535 = path.getOrDefault("subscriptionId")
  valid_565535 = validateParameter(valid_565535, JString, required = true,
                                 default = nil)
  if valid_565535 != nil:
    section.add "subscriptionId", valid_565535
  var valid_565536 = path.getOrDefault("premierAddOnName")
  valid_565536 = validateParameter(valid_565536, JString, required = true,
                                 default = nil)
  if valid_565536 != nil:
    section.add "premierAddOnName", valid_565536
  var valid_565537 = path.getOrDefault("resourceGroupName")
  valid_565537 = validateParameter(valid_565537, JString, required = true,
                                 default = nil)
  if valid_565537 != nil:
    section.add "resourceGroupName", valid_565537
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565538 = query.getOrDefault("api-version")
  valid_565538 = validateParameter(valid_565538, JString, required = true,
                                 default = nil)
  if valid_565538 != nil:
    section.add "api-version", valid_565538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565539: Call_WebAppsGetPremierAddOn_565531; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_565539.validator(path, query, header, formData, body)
  let scheme = call_565539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565539.url(scheme.get, call_565539.host, call_565539.base,
                         call_565539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565539, url, valid)

proc call*(call_565540: Call_WebAppsGetPremierAddOn_565531; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565541 = newJObject()
  var query_565542 = newJObject()
  add(query_565542, "api-version", newJString(apiVersion))
  add(path_565541, "name", newJString(name))
  add(path_565541, "subscriptionId", newJString(subscriptionId))
  add(path_565541, "premierAddOnName", newJString(premierAddOnName))
  add(path_565541, "resourceGroupName", newJString(resourceGroupName))
  result = call_565540.call(path_565541, query_565542, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_565531(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_565532, base: "",
    url: url_WebAppsGetPremierAddOn_565533, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOn_565569 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdatePremierAddOn_565571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOn_565570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565572 = path.getOrDefault("name")
  valid_565572 = validateParameter(valid_565572, JString, required = true,
                                 default = nil)
  if valid_565572 != nil:
    section.add "name", valid_565572
  var valid_565573 = path.getOrDefault("subscriptionId")
  valid_565573 = validateParameter(valid_565573, JString, required = true,
                                 default = nil)
  if valid_565573 != nil:
    section.add "subscriptionId", valid_565573
  var valid_565574 = path.getOrDefault("premierAddOnName")
  valid_565574 = validateParameter(valid_565574, JString, required = true,
                                 default = nil)
  if valid_565574 != nil:
    section.add "premierAddOnName", valid_565574
  var valid_565575 = path.getOrDefault("resourceGroupName")
  valid_565575 = validateParameter(valid_565575, JString, required = true,
                                 default = nil)
  if valid_565575 != nil:
    section.add "resourceGroupName", valid_565575
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565576 = query.getOrDefault("api-version")
  valid_565576 = validateParameter(valid_565576, JString, required = true,
                                 default = nil)
  if valid_565576 != nil:
    section.add "api-version", valid_565576
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565578: Call_WebAppsUpdatePremierAddOn_565569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_565578.validator(path, query, header, formData, body)
  let scheme = call_565578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565578.url(scheme.get, call_565578.host, call_565578.base,
                         call_565578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565578, url, valid)

proc call*(call_565579: Call_WebAppsUpdatePremierAddOn_565569; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          premierAddOn: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdatePremierAddOn
  ## Updates a named add-on of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565580 = newJObject()
  var query_565581 = newJObject()
  var body_565582 = newJObject()
  add(query_565581, "api-version", newJString(apiVersion))
  add(path_565580, "name", newJString(name))
  add(path_565580, "subscriptionId", newJString(subscriptionId))
  add(path_565580, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_565582 = premierAddOn
  add(path_565580, "resourceGroupName", newJString(resourceGroupName))
  result = call_565579.call(path_565580, query_565581, nil, nil, body_565582)

var webAppsUpdatePremierAddOn* = Call_WebAppsUpdatePremierAddOn_565569(
    name: "webAppsUpdatePremierAddOn", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOn_565570, base: "",
    url: url_WebAppsUpdatePremierAddOn_565571, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_565557 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePremierAddOn_565559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_565558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565560 = path.getOrDefault("name")
  valid_565560 = validateParameter(valid_565560, JString, required = true,
                                 default = nil)
  if valid_565560 != nil:
    section.add "name", valid_565560
  var valid_565561 = path.getOrDefault("subscriptionId")
  valid_565561 = validateParameter(valid_565561, JString, required = true,
                                 default = nil)
  if valid_565561 != nil:
    section.add "subscriptionId", valid_565561
  var valid_565562 = path.getOrDefault("premierAddOnName")
  valid_565562 = validateParameter(valid_565562, JString, required = true,
                                 default = nil)
  if valid_565562 != nil:
    section.add "premierAddOnName", valid_565562
  var valid_565563 = path.getOrDefault("resourceGroupName")
  valid_565563 = validateParameter(valid_565563, JString, required = true,
                                 default = nil)
  if valid_565563 != nil:
    section.add "resourceGroupName", valid_565563
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565564 = query.getOrDefault("api-version")
  valid_565564 = validateParameter(valid_565564, JString, required = true,
                                 default = nil)
  if valid_565564 != nil:
    section.add "api-version", valid_565564
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565565: Call_WebAppsDeletePremierAddOn_565557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_565565.validator(path, query, header, formData, body)
  let scheme = call_565565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565565.url(scheme.get, call_565565.host, call_565565.base,
                         call_565565.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565565, url, valid)

proc call*(call_565566: Call_WebAppsDeletePremierAddOn_565557; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565567 = newJObject()
  var query_565568 = newJObject()
  add(query_565568, "api-version", newJString(apiVersion))
  add(path_565567, "name", newJString(name))
  add(path_565567, "subscriptionId", newJString(subscriptionId))
  add(path_565567, "premierAddOnName", newJString(premierAddOnName))
  add(path_565567, "resourceGroupName", newJString(resourceGroupName))
  result = call_565566.call(path_565567, query_565568, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_565557(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_565558, base: "",
    url: url_WebAppsDeletePremierAddOn_565559, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnet_565594 = ref object of OpenApiRestCall_563564
proc url_WebAppsPutPrivateAccessVnet_565596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnet_565595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565597 = path.getOrDefault("name")
  valid_565597 = validateParameter(valid_565597, JString, required = true,
                                 default = nil)
  if valid_565597 != nil:
    section.add "name", valid_565597
  var valid_565598 = path.getOrDefault("subscriptionId")
  valid_565598 = validateParameter(valid_565598, JString, required = true,
                                 default = nil)
  if valid_565598 != nil:
    section.add "subscriptionId", valid_565598
  var valid_565599 = path.getOrDefault("resourceGroupName")
  valid_565599 = validateParameter(valid_565599, JString, required = true,
                                 default = nil)
  if valid_565599 != nil:
    section.add "resourceGroupName", valid_565599
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565600 = query.getOrDefault("api-version")
  valid_565600 = validateParameter(valid_565600, JString, required = true,
                                 default = nil)
  if valid_565600 != nil:
    section.add "api-version", valid_565600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565602: Call_WebAppsPutPrivateAccessVnet_565594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_565602.validator(path, query, header, formData, body)
  let scheme = call_565602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565602.url(scheme.get, call_565602.host, call_565602.base,
                         call_565602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565602, url, valid)

proc call*(call_565603: Call_WebAppsPutPrivateAccessVnet_565594;
          apiVersion: string; access: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsPutPrivateAccessVnet
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   access: JObject (required)
  ##         : The information for the private access
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565604 = newJObject()
  var query_565605 = newJObject()
  var body_565606 = newJObject()
  add(query_565605, "api-version", newJString(apiVersion))
  if access != nil:
    body_565606 = access
  add(path_565604, "name", newJString(name))
  add(path_565604, "subscriptionId", newJString(subscriptionId))
  add(path_565604, "resourceGroupName", newJString(resourceGroupName))
  result = call_565603.call(path_565604, query_565605, nil, nil, body_565606)

var webAppsPutPrivateAccessVnet* = Call_WebAppsPutPrivateAccessVnet_565594(
    name: "webAppsPutPrivateAccessVnet", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnet_565595, base: "",
    url: url_WebAppsPutPrivateAccessVnet_565596, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccess_565583 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPrivateAccess_565585(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccess_565584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565586 = path.getOrDefault("name")
  valid_565586 = validateParameter(valid_565586, JString, required = true,
                                 default = nil)
  if valid_565586 != nil:
    section.add "name", valid_565586
  var valid_565587 = path.getOrDefault("subscriptionId")
  valid_565587 = validateParameter(valid_565587, JString, required = true,
                                 default = nil)
  if valid_565587 != nil:
    section.add "subscriptionId", valid_565587
  var valid_565588 = path.getOrDefault("resourceGroupName")
  valid_565588 = validateParameter(valid_565588, JString, required = true,
                                 default = nil)
  if valid_565588 != nil:
    section.add "resourceGroupName", valid_565588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565589 = query.getOrDefault("api-version")
  valid_565589 = validateParameter(valid_565589, JString, required = true,
                                 default = nil)
  if valid_565589 != nil:
    section.add "api-version", valid_565589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565590: Call_WebAppsGetPrivateAccess_565583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_565590.validator(path, query, header, formData, body)
  let scheme = call_565590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565590.url(scheme.get, call_565590.host, call_565590.base,
                         call_565590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565590, url, valid)

proc call*(call_565591: Call_WebAppsGetPrivateAccess_565583; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetPrivateAccess
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565592 = newJObject()
  var query_565593 = newJObject()
  add(query_565593, "api-version", newJString(apiVersion))
  add(path_565592, "name", newJString(name))
  add(path_565592, "subscriptionId", newJString(subscriptionId))
  add(path_565592, "resourceGroupName", newJString(resourceGroupName))
  result = call_565591.call(path_565592, query_565593, nil, nil, nil)

var webAppsGetPrivateAccess* = Call_WebAppsGetPrivateAccess_565583(
    name: "webAppsGetPrivateAccess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccess_565584, base: "",
    url: url_WebAppsGetPrivateAccess_565585, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_565607 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcesses_565609(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_565608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565610 = path.getOrDefault("name")
  valid_565610 = validateParameter(valid_565610, JString, required = true,
                                 default = nil)
  if valid_565610 != nil:
    section.add "name", valid_565610
  var valid_565611 = path.getOrDefault("subscriptionId")
  valid_565611 = validateParameter(valid_565611, JString, required = true,
                                 default = nil)
  if valid_565611 != nil:
    section.add "subscriptionId", valid_565611
  var valid_565612 = path.getOrDefault("resourceGroupName")
  valid_565612 = validateParameter(valid_565612, JString, required = true,
                                 default = nil)
  if valid_565612 != nil:
    section.add "resourceGroupName", valid_565612
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565613 = query.getOrDefault("api-version")
  valid_565613 = validateParameter(valid_565613, JString, required = true,
                                 default = nil)
  if valid_565613 != nil:
    section.add "api-version", valid_565613
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565614: Call_WebAppsListProcesses_565607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565614.validator(path, query, header, formData, body)
  let scheme = call_565614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565614.url(scheme.get, call_565614.host, call_565614.base,
                         call_565614.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565614, url, valid)

proc call*(call_565615: Call_WebAppsListProcesses_565607; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565616 = newJObject()
  var query_565617 = newJObject()
  add(query_565617, "api-version", newJString(apiVersion))
  add(path_565616, "name", newJString(name))
  add(path_565616, "subscriptionId", newJString(subscriptionId))
  add(path_565616, "resourceGroupName", newJString(resourceGroupName))
  result = call_565615.call(path_565616, query_565617, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_565607(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_565608, base: "",
    url: url_WebAppsListProcesses_565609, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_565618 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcess_565620(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_565619(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565621 = path.getOrDefault("name")
  valid_565621 = validateParameter(valid_565621, JString, required = true,
                                 default = nil)
  if valid_565621 != nil:
    section.add "name", valid_565621
  var valid_565622 = path.getOrDefault("subscriptionId")
  valid_565622 = validateParameter(valid_565622, JString, required = true,
                                 default = nil)
  if valid_565622 != nil:
    section.add "subscriptionId", valid_565622
  var valid_565623 = path.getOrDefault("resourceGroupName")
  valid_565623 = validateParameter(valid_565623, JString, required = true,
                                 default = nil)
  if valid_565623 != nil:
    section.add "resourceGroupName", valid_565623
  var valid_565624 = path.getOrDefault("processId")
  valid_565624 = validateParameter(valid_565624, JString, required = true,
                                 default = nil)
  if valid_565624 != nil:
    section.add "processId", valid_565624
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565625 = query.getOrDefault("api-version")
  valid_565625 = validateParameter(valid_565625, JString, required = true,
                                 default = nil)
  if valid_565625 != nil:
    section.add "api-version", valid_565625
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565626: Call_WebAppsGetProcess_565618; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565626.validator(path, query, header, formData, body)
  let scheme = call_565626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565626.url(scheme.get, call_565626.host, call_565626.base,
                         call_565626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565626, url, valid)

proc call*(call_565627: Call_WebAppsGetProcess_565618; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565628 = newJObject()
  var query_565629 = newJObject()
  add(query_565629, "api-version", newJString(apiVersion))
  add(path_565628, "name", newJString(name))
  add(path_565628, "subscriptionId", newJString(subscriptionId))
  add(path_565628, "resourceGroupName", newJString(resourceGroupName))
  add(path_565628, "processId", newJString(processId))
  result = call_565627.call(path_565628, query_565629, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_565618(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_565619, base: "",
    url: url_WebAppsGetProcess_565620, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_565630 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteProcess_565632(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_565631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565633 = path.getOrDefault("name")
  valid_565633 = validateParameter(valid_565633, JString, required = true,
                                 default = nil)
  if valid_565633 != nil:
    section.add "name", valid_565633
  var valid_565634 = path.getOrDefault("subscriptionId")
  valid_565634 = validateParameter(valid_565634, JString, required = true,
                                 default = nil)
  if valid_565634 != nil:
    section.add "subscriptionId", valid_565634
  var valid_565635 = path.getOrDefault("resourceGroupName")
  valid_565635 = validateParameter(valid_565635, JString, required = true,
                                 default = nil)
  if valid_565635 != nil:
    section.add "resourceGroupName", valid_565635
  var valid_565636 = path.getOrDefault("processId")
  valid_565636 = validateParameter(valid_565636, JString, required = true,
                                 default = nil)
  if valid_565636 != nil:
    section.add "processId", valid_565636
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565637 = query.getOrDefault("api-version")
  valid_565637 = validateParameter(valid_565637, JString, required = true,
                                 default = nil)
  if valid_565637 != nil:
    section.add "api-version", valid_565637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565638: Call_WebAppsDeleteProcess_565630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_565638.validator(path, query, header, formData, body)
  let scheme = call_565638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565638.url(scheme.get, call_565638.host, call_565638.base,
                         call_565638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565638, url, valid)

proc call*(call_565639: Call_WebAppsDeleteProcess_565630; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565640 = newJObject()
  var query_565641 = newJObject()
  add(query_565641, "api-version", newJString(apiVersion))
  add(path_565640, "name", newJString(name))
  add(path_565640, "subscriptionId", newJString(subscriptionId))
  add(path_565640, "resourceGroupName", newJString(resourceGroupName))
  add(path_565640, "processId", newJString(processId))
  result = call_565639.call(path_565640, query_565641, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_565630(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_565631, base: "",
    url: url_WebAppsDeleteProcess_565632, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_565642 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessDump_565644(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_565643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565645 = path.getOrDefault("name")
  valid_565645 = validateParameter(valid_565645, JString, required = true,
                                 default = nil)
  if valid_565645 != nil:
    section.add "name", valid_565645
  var valid_565646 = path.getOrDefault("subscriptionId")
  valid_565646 = validateParameter(valid_565646, JString, required = true,
                                 default = nil)
  if valid_565646 != nil:
    section.add "subscriptionId", valid_565646
  var valid_565647 = path.getOrDefault("resourceGroupName")
  valid_565647 = validateParameter(valid_565647, JString, required = true,
                                 default = nil)
  if valid_565647 != nil:
    section.add "resourceGroupName", valid_565647
  var valid_565648 = path.getOrDefault("processId")
  valid_565648 = validateParameter(valid_565648, JString, required = true,
                                 default = nil)
  if valid_565648 != nil:
    section.add "processId", valid_565648
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565649 = query.getOrDefault("api-version")
  valid_565649 = validateParameter(valid_565649, JString, required = true,
                                 default = nil)
  if valid_565649 != nil:
    section.add "api-version", valid_565649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565650: Call_WebAppsGetProcessDump_565642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565650.validator(path, query, header, formData, body)
  let scheme = call_565650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565650.url(scheme.get, call_565650.host, call_565650.base,
                         call_565650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565650, url, valid)

proc call*(call_565651: Call_WebAppsGetProcessDump_565642; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565652 = newJObject()
  var query_565653 = newJObject()
  add(query_565653, "api-version", newJString(apiVersion))
  add(path_565652, "name", newJString(name))
  add(path_565652, "subscriptionId", newJString(subscriptionId))
  add(path_565652, "resourceGroupName", newJString(resourceGroupName))
  add(path_565652, "processId", newJString(processId))
  result = call_565651.call(path_565652, query_565653, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_565642(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_565643, base: "",
    url: url_WebAppsGetProcessDump_565644, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_565654 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessModules_565656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_565655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565657 = path.getOrDefault("name")
  valid_565657 = validateParameter(valid_565657, JString, required = true,
                                 default = nil)
  if valid_565657 != nil:
    section.add "name", valid_565657
  var valid_565658 = path.getOrDefault("subscriptionId")
  valid_565658 = validateParameter(valid_565658, JString, required = true,
                                 default = nil)
  if valid_565658 != nil:
    section.add "subscriptionId", valid_565658
  var valid_565659 = path.getOrDefault("resourceGroupName")
  valid_565659 = validateParameter(valid_565659, JString, required = true,
                                 default = nil)
  if valid_565659 != nil:
    section.add "resourceGroupName", valid_565659
  var valid_565660 = path.getOrDefault("processId")
  valid_565660 = validateParameter(valid_565660, JString, required = true,
                                 default = nil)
  if valid_565660 != nil:
    section.add "processId", valid_565660
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565661 = query.getOrDefault("api-version")
  valid_565661 = validateParameter(valid_565661, JString, required = true,
                                 default = nil)
  if valid_565661 != nil:
    section.add "api-version", valid_565661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565662: Call_WebAppsListProcessModules_565654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565662.validator(path, query, header, formData, body)
  let scheme = call_565662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565662.url(scheme.get, call_565662.host, call_565662.base,
                         call_565662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565662, url, valid)

proc call*(call_565663: Call_WebAppsListProcessModules_565654; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565664 = newJObject()
  var query_565665 = newJObject()
  add(query_565665, "api-version", newJString(apiVersion))
  add(path_565664, "name", newJString(name))
  add(path_565664, "subscriptionId", newJString(subscriptionId))
  add(path_565664, "resourceGroupName", newJString(resourceGroupName))
  add(path_565664, "processId", newJString(processId))
  result = call_565663.call(path_565664, query_565665, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_565654(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_565655, base: "",
    url: url_WebAppsListProcessModules_565656, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_565666 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessModule_565668(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_565667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565669 = path.getOrDefault("name")
  valid_565669 = validateParameter(valid_565669, JString, required = true,
                                 default = nil)
  if valid_565669 != nil:
    section.add "name", valid_565669
  var valid_565670 = path.getOrDefault("subscriptionId")
  valid_565670 = validateParameter(valid_565670, JString, required = true,
                                 default = nil)
  if valid_565670 != nil:
    section.add "subscriptionId", valid_565670
  var valid_565671 = path.getOrDefault("resourceGroupName")
  valid_565671 = validateParameter(valid_565671, JString, required = true,
                                 default = nil)
  if valid_565671 != nil:
    section.add "resourceGroupName", valid_565671
  var valid_565672 = path.getOrDefault("processId")
  valid_565672 = validateParameter(valid_565672, JString, required = true,
                                 default = nil)
  if valid_565672 != nil:
    section.add "processId", valid_565672
  var valid_565673 = path.getOrDefault("baseAddress")
  valid_565673 = validateParameter(valid_565673, JString, required = true,
                                 default = nil)
  if valid_565673 != nil:
    section.add "baseAddress", valid_565673
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565674 = query.getOrDefault("api-version")
  valid_565674 = validateParameter(valid_565674, JString, required = true,
                                 default = nil)
  if valid_565674 != nil:
    section.add "api-version", valid_565674
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565675: Call_WebAppsGetProcessModule_565666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565675.validator(path, query, header, formData, body)
  let scheme = call_565675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565675.url(scheme.get, call_565675.host, call_565675.base,
                         call_565675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565675, url, valid)

proc call*(call_565676: Call_WebAppsGetProcessModule_565666; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_565677 = newJObject()
  var query_565678 = newJObject()
  add(query_565678, "api-version", newJString(apiVersion))
  add(path_565677, "name", newJString(name))
  add(path_565677, "subscriptionId", newJString(subscriptionId))
  add(path_565677, "resourceGroupName", newJString(resourceGroupName))
  add(path_565677, "processId", newJString(processId))
  add(path_565677, "baseAddress", newJString(baseAddress))
  result = call_565676.call(path_565677, query_565678, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_565666(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_565667, base: "",
    url: url_WebAppsGetProcessModule_565668, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_565679 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessThreads_565681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_565680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565682 = path.getOrDefault("name")
  valid_565682 = validateParameter(valid_565682, JString, required = true,
                                 default = nil)
  if valid_565682 != nil:
    section.add "name", valid_565682
  var valid_565683 = path.getOrDefault("subscriptionId")
  valid_565683 = validateParameter(valid_565683, JString, required = true,
                                 default = nil)
  if valid_565683 != nil:
    section.add "subscriptionId", valid_565683
  var valid_565684 = path.getOrDefault("resourceGroupName")
  valid_565684 = validateParameter(valid_565684, JString, required = true,
                                 default = nil)
  if valid_565684 != nil:
    section.add "resourceGroupName", valid_565684
  var valid_565685 = path.getOrDefault("processId")
  valid_565685 = validateParameter(valid_565685, JString, required = true,
                                 default = nil)
  if valid_565685 != nil:
    section.add "processId", valid_565685
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565686 = query.getOrDefault("api-version")
  valid_565686 = validateParameter(valid_565686, JString, required = true,
                                 default = nil)
  if valid_565686 != nil:
    section.add "api-version", valid_565686
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565687: Call_WebAppsListProcessThreads_565679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565687.validator(path, query, header, formData, body)
  let scheme = call_565687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565687.url(scheme.get, call_565687.host, call_565687.base,
                         call_565687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565687, url, valid)

proc call*(call_565688: Call_WebAppsListProcessThreads_565679; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565689 = newJObject()
  var query_565690 = newJObject()
  add(query_565690, "api-version", newJString(apiVersion))
  add(path_565689, "name", newJString(name))
  add(path_565689, "subscriptionId", newJString(subscriptionId))
  add(path_565689, "resourceGroupName", newJString(resourceGroupName))
  add(path_565689, "processId", newJString(processId))
  result = call_565688.call(path_565689, query_565690, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_565679(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_565680, base: "",
    url: url_WebAppsListProcessThreads_565681, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_565691 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessThread_565693(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_565692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_565694 = path.getOrDefault("threadId")
  valid_565694 = validateParameter(valid_565694, JString, required = true,
                                 default = nil)
  if valid_565694 != nil:
    section.add "threadId", valid_565694
  var valid_565695 = path.getOrDefault("name")
  valid_565695 = validateParameter(valid_565695, JString, required = true,
                                 default = nil)
  if valid_565695 != nil:
    section.add "name", valid_565695
  var valid_565696 = path.getOrDefault("subscriptionId")
  valid_565696 = validateParameter(valid_565696, JString, required = true,
                                 default = nil)
  if valid_565696 != nil:
    section.add "subscriptionId", valid_565696
  var valid_565697 = path.getOrDefault("resourceGroupName")
  valid_565697 = validateParameter(valid_565697, JString, required = true,
                                 default = nil)
  if valid_565697 != nil:
    section.add "resourceGroupName", valid_565697
  var valid_565698 = path.getOrDefault("processId")
  valid_565698 = validateParameter(valid_565698, JString, required = true,
                                 default = nil)
  if valid_565698 != nil:
    section.add "processId", valid_565698
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565699 = query.getOrDefault("api-version")
  valid_565699 = validateParameter(valid_565699, JString, required = true,
                                 default = nil)
  if valid_565699 != nil:
    section.add "api-version", valid_565699
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565700: Call_WebAppsGetProcessThread_565691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_565700.validator(path, query, header, formData, body)
  let scheme = call_565700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565700.url(scheme.get, call_565700.host, call_565700.base,
                         call_565700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565700, url, valid)

proc call*(call_565701: Call_WebAppsGetProcessThread_565691; threadId: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565702 = newJObject()
  var query_565703 = newJObject()
  add(path_565702, "threadId", newJString(threadId))
  add(query_565703, "api-version", newJString(apiVersion))
  add(path_565702, "name", newJString(name))
  add(path_565702, "subscriptionId", newJString(subscriptionId))
  add(path_565702, "resourceGroupName", newJString(resourceGroupName))
  add(path_565702, "processId", newJString(processId))
  result = call_565701.call(path_565702, query_565703, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_565691(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_565692, base: "",
    url: url_WebAppsGetProcessThread_565693, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_565704 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublicCertificates_565706(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_565705(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565707 = path.getOrDefault("name")
  valid_565707 = validateParameter(valid_565707, JString, required = true,
                                 default = nil)
  if valid_565707 != nil:
    section.add "name", valid_565707
  var valid_565708 = path.getOrDefault("subscriptionId")
  valid_565708 = validateParameter(valid_565708, JString, required = true,
                                 default = nil)
  if valid_565708 != nil:
    section.add "subscriptionId", valid_565708
  var valid_565709 = path.getOrDefault("resourceGroupName")
  valid_565709 = validateParameter(valid_565709, JString, required = true,
                                 default = nil)
  if valid_565709 != nil:
    section.add "resourceGroupName", valid_565709
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565710 = query.getOrDefault("api-version")
  valid_565710 = validateParameter(valid_565710, JString, required = true,
                                 default = nil)
  if valid_565710 != nil:
    section.add "api-version", valid_565710
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565711: Call_WebAppsListPublicCertificates_565704; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_565711.validator(path, query, header, formData, body)
  let scheme = call_565711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565711.url(scheme.get, call_565711.host, call_565711.base,
                         call_565711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565711, url, valid)

proc call*(call_565712: Call_WebAppsListPublicCertificates_565704;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565713 = newJObject()
  var query_565714 = newJObject()
  add(query_565714, "api-version", newJString(apiVersion))
  add(path_565713, "name", newJString(name))
  add(path_565713, "subscriptionId", newJString(subscriptionId))
  add(path_565713, "resourceGroupName", newJString(resourceGroupName))
  result = call_565712.call(path_565713, query_565714, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_565704(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_565705, base: "",
    url: url_WebAppsListPublicCertificates_565706, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_565727 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdatePublicCertificate_565729(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_565728(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565730 = path.getOrDefault("name")
  valid_565730 = validateParameter(valid_565730, JString, required = true,
                                 default = nil)
  if valid_565730 != nil:
    section.add "name", valid_565730
  var valid_565731 = path.getOrDefault("subscriptionId")
  valid_565731 = validateParameter(valid_565731, JString, required = true,
                                 default = nil)
  if valid_565731 != nil:
    section.add "subscriptionId", valid_565731
  var valid_565732 = path.getOrDefault("publicCertificateName")
  valid_565732 = validateParameter(valid_565732, JString, required = true,
                                 default = nil)
  if valid_565732 != nil:
    section.add "publicCertificateName", valid_565732
  var valid_565733 = path.getOrDefault("resourceGroupName")
  valid_565733 = validateParameter(valid_565733, JString, required = true,
                                 default = nil)
  if valid_565733 != nil:
    section.add "resourceGroupName", valid_565733
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565734 = query.getOrDefault("api-version")
  valid_565734 = validateParameter(valid_565734, JString, required = true,
                                 default = nil)
  if valid_565734 != nil:
    section.add "api-version", valid_565734
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565736: Call_WebAppsCreateOrUpdatePublicCertificate_565727;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_565736.validator(path, query, header, formData, body)
  let scheme = call_565736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565736.url(scheme.get, call_565736.host, call_565736.base,
                         call_565736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565736, url, valid)

proc call*(call_565737: Call_WebAppsCreateOrUpdatePublicCertificate_565727;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_565738 = newJObject()
  var query_565739 = newJObject()
  var body_565740 = newJObject()
  add(query_565739, "api-version", newJString(apiVersion))
  add(path_565738, "name", newJString(name))
  add(path_565738, "subscriptionId", newJString(subscriptionId))
  add(path_565738, "publicCertificateName", newJString(publicCertificateName))
  add(path_565738, "resourceGroupName", newJString(resourceGroupName))
  if publicCertificate != nil:
    body_565740 = publicCertificate
  result = call_565737.call(path_565738, query_565739, nil, nil, body_565740)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_565727(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_565728, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_565729,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_565715 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPublicCertificate_565717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_565716(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565718 = path.getOrDefault("name")
  valid_565718 = validateParameter(valid_565718, JString, required = true,
                                 default = nil)
  if valid_565718 != nil:
    section.add "name", valid_565718
  var valid_565719 = path.getOrDefault("subscriptionId")
  valid_565719 = validateParameter(valid_565719, JString, required = true,
                                 default = nil)
  if valid_565719 != nil:
    section.add "subscriptionId", valid_565719
  var valid_565720 = path.getOrDefault("publicCertificateName")
  valid_565720 = validateParameter(valid_565720, JString, required = true,
                                 default = nil)
  if valid_565720 != nil:
    section.add "publicCertificateName", valid_565720
  var valid_565721 = path.getOrDefault("resourceGroupName")
  valid_565721 = validateParameter(valid_565721, JString, required = true,
                                 default = nil)
  if valid_565721 != nil:
    section.add "resourceGroupName", valid_565721
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565722 = query.getOrDefault("api-version")
  valid_565722 = validateParameter(valid_565722, JString, required = true,
                                 default = nil)
  if valid_565722 != nil:
    section.add "api-version", valid_565722
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565723: Call_WebAppsGetPublicCertificate_565715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_565723.validator(path, query, header, formData, body)
  let scheme = call_565723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565723.url(scheme.get, call_565723.host, call_565723.base,
                         call_565723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565723, url, valid)

proc call*(call_565724: Call_WebAppsGetPublicCertificate_565715;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565725 = newJObject()
  var query_565726 = newJObject()
  add(query_565726, "api-version", newJString(apiVersion))
  add(path_565725, "name", newJString(name))
  add(path_565725, "subscriptionId", newJString(subscriptionId))
  add(path_565725, "publicCertificateName", newJString(publicCertificateName))
  add(path_565725, "resourceGroupName", newJString(resourceGroupName))
  result = call_565724.call(path_565725, query_565726, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_565715(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_565716, base: "",
    url: url_WebAppsGetPublicCertificate_565717, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_565741 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePublicCertificate_565743(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_565742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565744 = path.getOrDefault("name")
  valid_565744 = validateParameter(valid_565744, JString, required = true,
                                 default = nil)
  if valid_565744 != nil:
    section.add "name", valid_565744
  var valid_565745 = path.getOrDefault("subscriptionId")
  valid_565745 = validateParameter(valid_565745, JString, required = true,
                                 default = nil)
  if valid_565745 != nil:
    section.add "subscriptionId", valid_565745
  var valid_565746 = path.getOrDefault("publicCertificateName")
  valid_565746 = validateParameter(valid_565746, JString, required = true,
                                 default = nil)
  if valid_565746 != nil:
    section.add "publicCertificateName", valid_565746
  var valid_565747 = path.getOrDefault("resourceGroupName")
  valid_565747 = validateParameter(valid_565747, JString, required = true,
                                 default = nil)
  if valid_565747 != nil:
    section.add "resourceGroupName", valid_565747
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565748 = query.getOrDefault("api-version")
  valid_565748 = validateParameter(valid_565748, JString, required = true,
                                 default = nil)
  if valid_565748 != nil:
    section.add "api-version", valid_565748
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565749: Call_WebAppsDeletePublicCertificate_565741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_565749.validator(path, query, header, formData, body)
  let scheme = call_565749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565749.url(scheme.get, call_565749.host, call_565749.base,
                         call_565749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565749, url, valid)

proc call*(call_565750: Call_WebAppsDeletePublicCertificate_565741;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565751 = newJObject()
  var query_565752 = newJObject()
  add(query_565752, "api-version", newJString(apiVersion))
  add(path_565751, "name", newJString(name))
  add(path_565751, "subscriptionId", newJString(subscriptionId))
  add(path_565751, "publicCertificateName", newJString(publicCertificateName))
  add(path_565751, "resourceGroupName", newJString(resourceGroupName))
  result = call_565750.call(path_565751, query_565752, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_565741(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_565742, base: "",
    url: url_WebAppsDeletePublicCertificate_565743, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_565753 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingProfileXmlWithSecrets_565755(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_565754(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565756 = path.getOrDefault("name")
  valid_565756 = validateParameter(valid_565756, JString, required = true,
                                 default = nil)
  if valid_565756 != nil:
    section.add "name", valid_565756
  var valid_565757 = path.getOrDefault("subscriptionId")
  valid_565757 = validateParameter(valid_565757, JString, required = true,
                                 default = nil)
  if valid_565757 != nil:
    section.add "subscriptionId", valid_565757
  var valid_565758 = path.getOrDefault("resourceGroupName")
  valid_565758 = validateParameter(valid_565758, JString, required = true,
                                 default = nil)
  if valid_565758 != nil:
    section.add "resourceGroupName", valid_565758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565759 = query.getOrDefault("api-version")
  valid_565759 = validateParameter(valid_565759, JString, required = true,
                                 default = nil)
  if valid_565759 != nil:
    section.add "api-version", valid_565759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565761: Call_WebAppsListPublishingProfileXmlWithSecrets_565753;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_565761.validator(path, query, header, formData, body)
  let scheme = call_565761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565761.url(scheme.get, call_565761.host, call_565761.base,
                         call_565761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565761, url, valid)

proc call*(call_565762: Call_WebAppsListPublishingProfileXmlWithSecrets_565753;
          apiVersion: string; publishingProfileOptions: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565763 = newJObject()
  var query_565764 = newJObject()
  var body_565765 = newJObject()
  add(query_565764, "api-version", newJString(apiVersion))
  if publishingProfileOptions != nil:
    body_565765 = publishingProfileOptions
  add(path_565763, "name", newJString(name))
  add(path_565763, "subscriptionId", newJString(subscriptionId))
  add(path_565763, "resourceGroupName", newJString(resourceGroupName))
  result = call_565762.call(path_565763, query_565764, nil, nil, body_565765)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_565753(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_565754,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_565755,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_565766 = ref object of OpenApiRestCall_563564
proc url_WebAppsResetProductionSlotConfig_565768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_565767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565769 = path.getOrDefault("name")
  valid_565769 = validateParameter(valid_565769, JString, required = true,
                                 default = nil)
  if valid_565769 != nil:
    section.add "name", valid_565769
  var valid_565770 = path.getOrDefault("subscriptionId")
  valid_565770 = validateParameter(valid_565770, JString, required = true,
                                 default = nil)
  if valid_565770 != nil:
    section.add "subscriptionId", valid_565770
  var valid_565771 = path.getOrDefault("resourceGroupName")
  valid_565771 = validateParameter(valid_565771, JString, required = true,
                                 default = nil)
  if valid_565771 != nil:
    section.add "resourceGroupName", valid_565771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565772 = query.getOrDefault("api-version")
  valid_565772 = validateParameter(valid_565772, JString, required = true,
                                 default = nil)
  if valid_565772 != nil:
    section.add "api-version", valid_565772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565773: Call_WebAppsResetProductionSlotConfig_565766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_565773.validator(path, query, header, formData, body)
  let scheme = call_565773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565773.url(scheme.get, call_565773.host, call_565773.base,
                         call_565773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565773, url, valid)

proc call*(call_565774: Call_WebAppsResetProductionSlotConfig_565766;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565775 = newJObject()
  var query_565776 = newJObject()
  add(query_565776, "api-version", newJString(apiVersion))
  add(path_565775, "name", newJString(name))
  add(path_565775, "subscriptionId", newJString(subscriptionId))
  add(path_565775, "resourceGroupName", newJString(resourceGroupName))
  result = call_565774.call(path_565775, query_565776, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_565766(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_565767, base: "",
    url: url_WebAppsResetProductionSlotConfig_565768, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_565777 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestart_565779(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_565778(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565780 = path.getOrDefault("name")
  valid_565780 = validateParameter(valid_565780, JString, required = true,
                                 default = nil)
  if valid_565780 != nil:
    section.add "name", valid_565780
  var valid_565781 = path.getOrDefault("subscriptionId")
  valid_565781 = validateParameter(valid_565781, JString, required = true,
                                 default = nil)
  if valid_565781 != nil:
    section.add "subscriptionId", valid_565781
  var valid_565782 = path.getOrDefault("resourceGroupName")
  valid_565782 = validateParameter(valid_565782, JString, required = true,
                                 default = nil)
  if valid_565782 != nil:
    section.add "resourceGroupName", valid_565782
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  var valid_565783 = query.getOrDefault("synchronous")
  valid_565783 = validateParameter(valid_565783, JBool, required = false, default = nil)
  if valid_565783 != nil:
    section.add "synchronous", valid_565783
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565784 = query.getOrDefault("api-version")
  valid_565784 = validateParameter(valid_565784, JString, required = true,
                                 default = nil)
  if valid_565784 != nil:
    section.add "api-version", valid_565784
  var valid_565785 = query.getOrDefault("softRestart")
  valid_565785 = validateParameter(valid_565785, JBool, required = false, default = nil)
  if valid_565785 != nil:
    section.add "softRestart", valid_565785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565786: Call_WebAppsRestart_565777; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_565786.validator(path, query, header, formData, body)
  let scheme = call_565786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565786.url(scheme.get, call_565786.host, call_565786.base,
                         call_565786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565786, url, valid)

proc call*(call_565787: Call_WebAppsRestart_565777; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_565788 = newJObject()
  var query_565789 = newJObject()
  add(query_565789, "synchronous", newJBool(synchronous))
  add(query_565789, "api-version", newJString(apiVersion))
  add(path_565788, "name", newJString(name))
  add(path_565788, "subscriptionId", newJString(subscriptionId))
  add(path_565788, "resourceGroupName", newJString(resourceGroupName))
  add(query_565789, "softRestart", newJBool(softRestart))
  result = call_565787.call(path_565788, query_565789, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_565777(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_565778, base: "", url: url_WebAppsRestart_565779,
    schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlob_565790 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreFromBackupBlob_565792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlob_565791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565793 = path.getOrDefault("name")
  valid_565793 = validateParameter(valid_565793, JString, required = true,
                                 default = nil)
  if valid_565793 != nil:
    section.add "name", valid_565793
  var valid_565794 = path.getOrDefault("subscriptionId")
  valid_565794 = validateParameter(valid_565794, JString, required = true,
                                 default = nil)
  if valid_565794 != nil:
    section.add "subscriptionId", valid_565794
  var valid_565795 = path.getOrDefault("resourceGroupName")
  valid_565795 = validateParameter(valid_565795, JString, required = true,
                                 default = nil)
  if valid_565795 != nil:
    section.add "resourceGroupName", valid_565795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565796 = query.getOrDefault("api-version")
  valid_565796 = validateParameter(valid_565796, JString, required = true,
                                 default = nil)
  if valid_565796 != nil:
    section.add "api-version", valid_565796
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565798: Call_WebAppsRestoreFromBackupBlob_565790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_565798.validator(path, query, header, formData, body)
  let scheme = call_565798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565798.url(scheme.get, call_565798.host, call_565798.base,
                         call_565798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565798, url, valid)

proc call*(call_565799: Call_WebAppsRestoreFromBackupBlob_565790;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlob
  ## Restores an app from a backup blob in Azure Storage.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_565800 = newJObject()
  var query_565801 = newJObject()
  var body_565802 = newJObject()
  add(query_565801, "api-version", newJString(apiVersion))
  add(path_565800, "name", newJString(name))
  add(path_565800, "subscriptionId", newJString(subscriptionId))
  add(path_565800, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565802 = request
  result = call_565799.call(path_565800, query_565801, nil, nil, body_565802)

var webAppsRestoreFromBackupBlob* = Call_WebAppsRestoreFromBackupBlob_565790(
    name: "webAppsRestoreFromBackupBlob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlob_565791, base: "",
    url: url_WebAppsRestoreFromBackupBlob_565792, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedApp_565803 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreFromDeletedApp_565805(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedApp_565804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565806 = path.getOrDefault("name")
  valid_565806 = validateParameter(valid_565806, JString, required = true,
                                 default = nil)
  if valid_565806 != nil:
    section.add "name", valid_565806
  var valid_565807 = path.getOrDefault("subscriptionId")
  valid_565807 = validateParameter(valid_565807, JString, required = true,
                                 default = nil)
  if valid_565807 != nil:
    section.add "subscriptionId", valid_565807
  var valid_565808 = path.getOrDefault("resourceGroupName")
  valid_565808 = validateParameter(valid_565808, JString, required = true,
                                 default = nil)
  if valid_565808 != nil:
    section.add "resourceGroupName", valid_565808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565809 = query.getOrDefault("api-version")
  valid_565809 = validateParameter(valid_565809, JString, required = true,
                                 default = nil)
  if valid_565809 != nil:
    section.add "api-version", valid_565809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565811: Call_WebAppsRestoreFromDeletedApp_565803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_565811.validator(path, query, header, formData, body)
  let scheme = call_565811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565811.url(scheme.get, call_565811.host, call_565811.base,
                         call_565811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565811, url, valid)

proc call*(call_565812: Call_WebAppsRestoreFromDeletedApp_565803;
          restoreRequest: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRestoreFromDeletedApp
  ## Restores a deleted web app to this web app.
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565813 = newJObject()
  var query_565814 = newJObject()
  var body_565815 = newJObject()
  if restoreRequest != nil:
    body_565815 = restoreRequest
  add(query_565814, "api-version", newJString(apiVersion))
  add(path_565813, "name", newJString(name))
  add(path_565813, "subscriptionId", newJString(subscriptionId))
  add(path_565813, "resourceGroupName", newJString(resourceGroupName))
  result = call_565812.call(path_565813, query_565814, nil, nil, body_565815)

var webAppsRestoreFromDeletedApp* = Call_WebAppsRestoreFromDeletedApp_565803(
    name: "webAppsRestoreFromDeletedApp", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedApp_565804, base: "",
    url: url_WebAppsRestoreFromDeletedApp_565805, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshot_565816 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreSnapshot_565818(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshot_565817(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565819 = path.getOrDefault("name")
  valid_565819 = validateParameter(valid_565819, JString, required = true,
                                 default = nil)
  if valid_565819 != nil:
    section.add "name", valid_565819
  var valid_565820 = path.getOrDefault("subscriptionId")
  valid_565820 = validateParameter(valid_565820, JString, required = true,
                                 default = nil)
  if valid_565820 != nil:
    section.add "subscriptionId", valid_565820
  var valid_565821 = path.getOrDefault("resourceGroupName")
  valid_565821 = validateParameter(valid_565821, JString, required = true,
                                 default = nil)
  if valid_565821 != nil:
    section.add "resourceGroupName", valid_565821
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565822 = query.getOrDefault("api-version")
  valid_565822 = validateParameter(valid_565822, JString, required = true,
                                 default = nil)
  if valid_565822 != nil:
    section.add "api-version", valid_565822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565824: Call_WebAppsRestoreSnapshot_565816; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_565824.validator(path, query, header, formData, body)
  let scheme = call_565824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565824.url(scheme.get, call_565824.host, call_565824.base,
                         call_565824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565824, url, valid)

proc call*(call_565825: Call_WebAppsRestoreSnapshot_565816;
          restoreRequest: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRestoreSnapshot
  ## Restores a web app from a snapshot.
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565826 = newJObject()
  var query_565827 = newJObject()
  var body_565828 = newJObject()
  if restoreRequest != nil:
    body_565828 = restoreRequest
  add(query_565827, "api-version", newJString(apiVersion))
  add(path_565826, "name", newJString(name))
  add(path_565826, "subscriptionId", newJString(subscriptionId))
  add(path_565826, "resourceGroupName", newJString(resourceGroupName))
  result = call_565825.call(path_565826, query_565827, nil, nil, body_565828)

var webAppsRestoreSnapshot* = Call_WebAppsRestoreSnapshot_565816(
    name: "webAppsRestoreSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshot_565817, base: "",
    url: url_WebAppsRestoreSnapshot_565818, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_565829 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSiteExtensions_565831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_565830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565832 = path.getOrDefault("name")
  valid_565832 = validateParameter(valid_565832, JString, required = true,
                                 default = nil)
  if valid_565832 != nil:
    section.add "name", valid_565832
  var valid_565833 = path.getOrDefault("subscriptionId")
  valid_565833 = validateParameter(valid_565833, JString, required = true,
                                 default = nil)
  if valid_565833 != nil:
    section.add "subscriptionId", valid_565833
  var valid_565834 = path.getOrDefault("resourceGroupName")
  valid_565834 = validateParameter(valid_565834, JString, required = true,
                                 default = nil)
  if valid_565834 != nil:
    section.add "resourceGroupName", valid_565834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565835 = query.getOrDefault("api-version")
  valid_565835 = validateParameter(valid_565835, JString, required = true,
                                 default = nil)
  if valid_565835 != nil:
    section.add "api-version", valid_565835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565836: Call_WebAppsListSiteExtensions_565829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_565836.validator(path, query, header, formData, body)
  let scheme = call_565836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565836.url(scheme.get, call_565836.host, call_565836.base,
                         call_565836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565836, url, valid)

proc call*(call_565837: Call_WebAppsListSiteExtensions_565829; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565838 = newJObject()
  var query_565839 = newJObject()
  add(query_565839, "api-version", newJString(apiVersion))
  add(path_565838, "name", newJString(name))
  add(path_565838, "subscriptionId", newJString(subscriptionId))
  add(path_565838, "resourceGroupName", newJString(resourceGroupName))
  result = call_565837.call(path_565838, query_565839, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_565829(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_565830, base: "",
    url: url_WebAppsListSiteExtensions_565831, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_565852 = ref object of OpenApiRestCall_563564
proc url_WebAppsInstallSiteExtension_565854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_565853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565855 = path.getOrDefault("name")
  valid_565855 = validateParameter(valid_565855, JString, required = true,
                                 default = nil)
  if valid_565855 != nil:
    section.add "name", valid_565855
  var valid_565856 = path.getOrDefault("subscriptionId")
  valid_565856 = validateParameter(valid_565856, JString, required = true,
                                 default = nil)
  if valid_565856 != nil:
    section.add "subscriptionId", valid_565856
  var valid_565857 = path.getOrDefault("resourceGroupName")
  valid_565857 = validateParameter(valid_565857, JString, required = true,
                                 default = nil)
  if valid_565857 != nil:
    section.add "resourceGroupName", valid_565857
  var valid_565858 = path.getOrDefault("siteExtensionId")
  valid_565858 = validateParameter(valid_565858, JString, required = true,
                                 default = nil)
  if valid_565858 != nil:
    section.add "siteExtensionId", valid_565858
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565859 = query.getOrDefault("api-version")
  valid_565859 = validateParameter(valid_565859, JString, required = true,
                                 default = nil)
  if valid_565859 != nil:
    section.add "api-version", valid_565859
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565860: Call_WebAppsInstallSiteExtension_565852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_565860.validator(path, query, header, formData, body)
  let scheme = call_565860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565860.url(scheme.get, call_565860.host, call_565860.base,
                         call_565860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565860, url, valid)

proc call*(call_565861: Call_WebAppsInstallSiteExtension_565852;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565862 = newJObject()
  var query_565863 = newJObject()
  add(query_565863, "api-version", newJString(apiVersion))
  add(path_565862, "name", newJString(name))
  add(path_565862, "subscriptionId", newJString(subscriptionId))
  add(path_565862, "resourceGroupName", newJString(resourceGroupName))
  add(path_565862, "siteExtensionId", newJString(siteExtensionId))
  result = call_565861.call(path_565862, query_565863, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_565852(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_565853, base: "",
    url: url_WebAppsInstallSiteExtension_565854, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_565840 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSiteExtension_565842(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_565841(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565843 = path.getOrDefault("name")
  valid_565843 = validateParameter(valid_565843, JString, required = true,
                                 default = nil)
  if valid_565843 != nil:
    section.add "name", valid_565843
  var valid_565844 = path.getOrDefault("subscriptionId")
  valid_565844 = validateParameter(valid_565844, JString, required = true,
                                 default = nil)
  if valid_565844 != nil:
    section.add "subscriptionId", valid_565844
  var valid_565845 = path.getOrDefault("resourceGroupName")
  valid_565845 = validateParameter(valid_565845, JString, required = true,
                                 default = nil)
  if valid_565845 != nil:
    section.add "resourceGroupName", valid_565845
  var valid_565846 = path.getOrDefault("siteExtensionId")
  valid_565846 = validateParameter(valid_565846, JString, required = true,
                                 default = nil)
  if valid_565846 != nil:
    section.add "siteExtensionId", valid_565846
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565847 = query.getOrDefault("api-version")
  valid_565847 = validateParameter(valid_565847, JString, required = true,
                                 default = nil)
  if valid_565847 != nil:
    section.add "api-version", valid_565847
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565848: Call_WebAppsGetSiteExtension_565840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_565848.validator(path, query, header, formData, body)
  let scheme = call_565848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565848.url(scheme.get, call_565848.host, call_565848.base,
                         call_565848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565848, url, valid)

proc call*(call_565849: Call_WebAppsGetSiteExtension_565840; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565850 = newJObject()
  var query_565851 = newJObject()
  add(query_565851, "api-version", newJString(apiVersion))
  add(path_565850, "name", newJString(name))
  add(path_565850, "subscriptionId", newJString(subscriptionId))
  add(path_565850, "resourceGroupName", newJString(resourceGroupName))
  add(path_565850, "siteExtensionId", newJString(siteExtensionId))
  result = call_565849.call(path_565850, query_565851, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_565840(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_565841, base: "",
    url: url_WebAppsGetSiteExtension_565842, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_565864 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSiteExtension_565866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_565865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565867 = path.getOrDefault("name")
  valid_565867 = validateParameter(valid_565867, JString, required = true,
                                 default = nil)
  if valid_565867 != nil:
    section.add "name", valid_565867
  var valid_565868 = path.getOrDefault("subscriptionId")
  valid_565868 = validateParameter(valid_565868, JString, required = true,
                                 default = nil)
  if valid_565868 != nil:
    section.add "subscriptionId", valid_565868
  var valid_565869 = path.getOrDefault("resourceGroupName")
  valid_565869 = validateParameter(valid_565869, JString, required = true,
                                 default = nil)
  if valid_565869 != nil:
    section.add "resourceGroupName", valid_565869
  var valid_565870 = path.getOrDefault("siteExtensionId")
  valid_565870 = validateParameter(valid_565870, JString, required = true,
                                 default = nil)
  if valid_565870 != nil:
    section.add "siteExtensionId", valid_565870
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565871 = query.getOrDefault("api-version")
  valid_565871 = validateParameter(valid_565871, JString, required = true,
                                 default = nil)
  if valid_565871 != nil:
    section.add "api-version", valid_565871
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565872: Call_WebAppsDeleteSiteExtension_565864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_565872.validator(path, query, header, formData, body)
  let scheme = call_565872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565872.url(scheme.get, call_565872.host, call_565872.base,
                         call_565872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565872, url, valid)

proc call*(call_565873: Call_WebAppsDeleteSiteExtension_565864; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565874 = newJObject()
  var query_565875 = newJObject()
  add(query_565875, "api-version", newJString(apiVersion))
  add(path_565874, "name", newJString(name))
  add(path_565874, "subscriptionId", newJString(subscriptionId))
  add(path_565874, "resourceGroupName", newJString(resourceGroupName))
  add(path_565874, "siteExtensionId", newJString(siteExtensionId))
  result = call_565873.call(path_565874, query_565875, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_565864(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_565865, base: "",
    url: url_WebAppsDeleteSiteExtension_565866, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_565876 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlots_565878(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_565877(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565879 = path.getOrDefault("name")
  valid_565879 = validateParameter(valid_565879, JString, required = true,
                                 default = nil)
  if valid_565879 != nil:
    section.add "name", valid_565879
  var valid_565880 = path.getOrDefault("subscriptionId")
  valid_565880 = validateParameter(valid_565880, JString, required = true,
                                 default = nil)
  if valid_565880 != nil:
    section.add "subscriptionId", valid_565880
  var valid_565881 = path.getOrDefault("resourceGroupName")
  valid_565881 = validateParameter(valid_565881, JString, required = true,
                                 default = nil)
  if valid_565881 != nil:
    section.add "resourceGroupName", valid_565881
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565882 = query.getOrDefault("api-version")
  valid_565882 = validateParameter(valid_565882, JString, required = true,
                                 default = nil)
  if valid_565882 != nil:
    section.add "api-version", valid_565882
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565883: Call_WebAppsListSlots_565876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_565883.validator(path, query, header, formData, body)
  let scheme = call_565883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565883.url(scheme.get, call_565883.host, call_565883.base,
                         call_565883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565883, url, valid)

proc call*(call_565884: Call_WebAppsListSlots_565876; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565885 = newJObject()
  var query_565886 = newJObject()
  add(query_565886, "api-version", newJString(apiVersion))
  add(path_565885, "name", newJString(name))
  add(path_565885, "subscriptionId", newJString(subscriptionId))
  add(path_565885, "resourceGroupName", newJString(resourceGroupName))
  result = call_565884.call(path_565885, query_565886, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_565876(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_565877, base: "",
    url: url_WebAppsListSlots_565878, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_565899 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSlot_565901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_565900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565902 = path.getOrDefault("slot")
  valid_565902 = validateParameter(valid_565902, JString, required = true,
                                 default = nil)
  if valid_565902 != nil:
    section.add "slot", valid_565902
  var valid_565903 = path.getOrDefault("name")
  valid_565903 = validateParameter(valid_565903, JString, required = true,
                                 default = nil)
  if valid_565903 != nil:
    section.add "name", valid_565903
  var valid_565904 = path.getOrDefault("subscriptionId")
  valid_565904 = validateParameter(valid_565904, JString, required = true,
                                 default = nil)
  if valid_565904 != nil:
    section.add "subscriptionId", valid_565904
  var valid_565905 = path.getOrDefault("resourceGroupName")
  valid_565905 = validateParameter(valid_565905, JString, required = true,
                                 default = nil)
  if valid_565905 != nil:
    section.add "resourceGroupName", valid_565905
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565906 = query.getOrDefault("api-version")
  valid_565906 = validateParameter(valid_565906, JString, required = true,
                                 default = nil)
  if valid_565906 != nil:
    section.add "api-version", valid_565906
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565908: Call_WebAppsCreateOrUpdateSlot_565899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_565908.validator(path, query, header, formData, body)
  let scheme = call_565908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565908.url(scheme.get, call_565908.host, call_565908.base,
                         call_565908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565908, url, valid)

proc call*(call_565909: Call_WebAppsCreateOrUpdateSlot_565899; slot: string;
          apiVersion: string; siteEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565910 = newJObject()
  var query_565911 = newJObject()
  var body_565912 = newJObject()
  add(path_565910, "slot", newJString(slot))
  add(query_565911, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_565912 = siteEnvelope
  add(path_565910, "name", newJString(name))
  add(path_565910, "subscriptionId", newJString(subscriptionId))
  add(path_565910, "resourceGroupName", newJString(resourceGroupName))
  result = call_565909.call(path_565910, query_565911, nil, nil, body_565912)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_565899(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_565900, base: "",
    url: url_WebAppsCreateOrUpdateSlot_565901, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_565887 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSlot_565889(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_565888(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565890 = path.getOrDefault("slot")
  valid_565890 = validateParameter(valid_565890, JString, required = true,
                                 default = nil)
  if valid_565890 != nil:
    section.add "slot", valid_565890
  var valid_565891 = path.getOrDefault("name")
  valid_565891 = validateParameter(valid_565891, JString, required = true,
                                 default = nil)
  if valid_565891 != nil:
    section.add "name", valid_565891
  var valid_565892 = path.getOrDefault("subscriptionId")
  valid_565892 = validateParameter(valid_565892, JString, required = true,
                                 default = nil)
  if valid_565892 != nil:
    section.add "subscriptionId", valid_565892
  var valid_565893 = path.getOrDefault("resourceGroupName")
  valid_565893 = validateParameter(valid_565893, JString, required = true,
                                 default = nil)
  if valid_565893 != nil:
    section.add "resourceGroupName", valid_565893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565894 = query.getOrDefault("api-version")
  valid_565894 = validateParameter(valid_565894, JString, required = true,
                                 default = nil)
  if valid_565894 != nil:
    section.add "api-version", valid_565894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565895: Call_WebAppsGetSlot_565887; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_565895.validator(path, query, header, formData, body)
  let scheme = call_565895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565895.url(scheme.get, call_565895.host, call_565895.base,
                         call_565895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565895, url, valid)

proc call*(call_565896: Call_WebAppsGetSlot_565887; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565897 = newJObject()
  var query_565898 = newJObject()
  add(path_565897, "slot", newJString(slot))
  add(query_565898, "api-version", newJString(apiVersion))
  add(path_565897, "name", newJString(name))
  add(path_565897, "subscriptionId", newJString(subscriptionId))
  add(path_565897, "resourceGroupName", newJString(resourceGroupName))
  result = call_565896.call(path_565897, query_565898, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_565887(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_565888, base: "", url: url_WebAppsGetSlot_565889,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_565927 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSlot_565929(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_565928(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565930 = path.getOrDefault("slot")
  valid_565930 = validateParameter(valid_565930, JString, required = true,
                                 default = nil)
  if valid_565930 != nil:
    section.add "slot", valid_565930
  var valid_565931 = path.getOrDefault("name")
  valid_565931 = validateParameter(valid_565931, JString, required = true,
                                 default = nil)
  if valid_565931 != nil:
    section.add "name", valid_565931
  var valid_565932 = path.getOrDefault("subscriptionId")
  valid_565932 = validateParameter(valid_565932, JString, required = true,
                                 default = nil)
  if valid_565932 != nil:
    section.add "subscriptionId", valid_565932
  var valid_565933 = path.getOrDefault("resourceGroupName")
  valid_565933 = validateParameter(valid_565933, JString, required = true,
                                 default = nil)
  if valid_565933 != nil:
    section.add "resourceGroupName", valid_565933
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565934 = query.getOrDefault("api-version")
  valid_565934 = validateParameter(valid_565934, JString, required = true,
                                 default = nil)
  if valid_565934 != nil:
    section.add "api-version", valid_565934
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565936: Call_WebAppsUpdateSlot_565927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_565936.validator(path, query, header, formData, body)
  let scheme = call_565936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565936.url(scheme.get, call_565936.host, call_565936.base,
                         call_565936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565936, url, valid)

proc call*(call_565937: Call_WebAppsUpdateSlot_565927; slot: string;
          apiVersion: string; siteEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565938 = newJObject()
  var query_565939 = newJObject()
  var body_565940 = newJObject()
  add(path_565938, "slot", newJString(slot))
  add(query_565939, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_565940 = siteEnvelope
  add(path_565938, "name", newJString(name))
  add(path_565938, "subscriptionId", newJString(subscriptionId))
  add(path_565938, "resourceGroupName", newJString(resourceGroupName))
  result = call_565937.call(path_565938, query_565939, nil, nil, body_565940)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_565927(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_565928, base: "",
    url: url_WebAppsUpdateSlot_565929, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_565913 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSlot_565915(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_565914(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565916 = path.getOrDefault("slot")
  valid_565916 = validateParameter(valid_565916, JString, required = true,
                                 default = nil)
  if valid_565916 != nil:
    section.add "slot", valid_565916
  var valid_565917 = path.getOrDefault("name")
  valid_565917 = validateParameter(valid_565917, JString, required = true,
                                 default = nil)
  if valid_565917 != nil:
    section.add "name", valid_565917
  var valid_565918 = path.getOrDefault("subscriptionId")
  valid_565918 = validateParameter(valid_565918, JString, required = true,
                                 default = nil)
  if valid_565918 != nil:
    section.add "subscriptionId", valid_565918
  var valid_565919 = path.getOrDefault("resourceGroupName")
  valid_565919 = validateParameter(valid_565919, JString, required = true,
                                 default = nil)
  if valid_565919 != nil:
    section.add "resourceGroupName", valid_565919
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565920 = query.getOrDefault("api-version")
  valid_565920 = validateParameter(valid_565920, JString, required = true,
                                 default = nil)
  if valid_565920 != nil:
    section.add "api-version", valid_565920
  var valid_565921 = query.getOrDefault("deleteEmptyServerFarm")
  valid_565921 = validateParameter(valid_565921, JBool, required = false, default = nil)
  if valid_565921 != nil:
    section.add "deleteEmptyServerFarm", valid_565921
  var valid_565922 = query.getOrDefault("deleteMetrics")
  valid_565922 = validateParameter(valid_565922, JBool, required = false, default = nil)
  if valid_565922 != nil:
    section.add "deleteMetrics", valid_565922
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565923: Call_WebAppsDeleteSlot_565913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_565923.validator(path, query, header, formData, body)
  let scheme = call_565923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565923.url(scheme.get, call_565923.host, call_565923.base,
                         call_565923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565923, url, valid)

proc call*(call_565924: Call_WebAppsDeleteSlot_565913; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; deleteEmptyServerFarm: bool = false;
          deleteMetrics: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565925 = newJObject()
  var query_565926 = newJObject()
  add(path_565925, "slot", newJString(slot))
  add(query_565926, "api-version", newJString(apiVersion))
  add(query_565926, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  add(path_565925, "name", newJString(name))
  add(path_565925, "subscriptionId", newJString(subscriptionId))
  add(query_565926, "deleteMetrics", newJBool(deleteMetrics))
  add(path_565925, "resourceGroupName", newJString(resourceGroupName))
  result = call_565924.call(path_565925, query_565926, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_565913(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_565914, base: "",
    url: url_WebAppsDeleteSlot_565915, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_565941 = ref object of OpenApiRestCall_563564
proc url_WebAppsAnalyzeCustomHostnameSlot_565943(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_565942(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565944 = path.getOrDefault("slot")
  valid_565944 = validateParameter(valid_565944, JString, required = true,
                                 default = nil)
  if valid_565944 != nil:
    section.add "slot", valid_565944
  var valid_565945 = path.getOrDefault("name")
  valid_565945 = validateParameter(valid_565945, JString, required = true,
                                 default = nil)
  if valid_565945 != nil:
    section.add "name", valid_565945
  var valid_565946 = path.getOrDefault("subscriptionId")
  valid_565946 = validateParameter(valid_565946, JString, required = true,
                                 default = nil)
  if valid_565946 != nil:
    section.add "subscriptionId", valid_565946
  var valid_565947 = path.getOrDefault("resourceGroupName")
  valid_565947 = validateParameter(valid_565947, JString, required = true,
                                 default = nil)
  if valid_565947 != nil:
    section.add "resourceGroupName", valid_565947
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565948 = query.getOrDefault("api-version")
  valid_565948 = validateParameter(valid_565948, JString, required = true,
                                 default = nil)
  if valid_565948 != nil:
    section.add "api-version", valid_565948
  var valid_565949 = query.getOrDefault("hostName")
  valid_565949 = validateParameter(valid_565949, JString, required = false,
                                 default = nil)
  if valid_565949 != nil:
    section.add "hostName", valid_565949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565950: Call_WebAppsAnalyzeCustomHostnameSlot_565941;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_565950.validator(path, query, header, formData, body)
  let scheme = call_565950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565950.url(scheme.get, call_565950.host, call_565950.base,
                         call_565950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565950, url, valid)

proc call*(call_565951: Call_WebAppsAnalyzeCustomHostnameSlot_565941; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string
  ##           : Custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565952 = newJObject()
  var query_565953 = newJObject()
  add(path_565952, "slot", newJString(slot))
  add(query_565953, "api-version", newJString(apiVersion))
  add(path_565952, "name", newJString(name))
  add(path_565952, "subscriptionId", newJString(subscriptionId))
  add(query_565953, "hostName", newJString(hostName))
  add(path_565952, "resourceGroupName", newJString(resourceGroupName))
  result = call_565951.call(path_565952, query_565953, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_565941(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_565942, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_565943, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_565954 = ref object of OpenApiRestCall_563564
proc url_WebAppsApplySlotConfigurationSlot_565956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_565955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565957 = path.getOrDefault("slot")
  valid_565957 = validateParameter(valid_565957, JString, required = true,
                                 default = nil)
  if valid_565957 != nil:
    section.add "slot", valid_565957
  var valid_565958 = path.getOrDefault("name")
  valid_565958 = validateParameter(valid_565958, JString, required = true,
                                 default = nil)
  if valid_565958 != nil:
    section.add "name", valid_565958
  var valid_565959 = path.getOrDefault("subscriptionId")
  valid_565959 = validateParameter(valid_565959, JString, required = true,
                                 default = nil)
  if valid_565959 != nil:
    section.add "subscriptionId", valid_565959
  var valid_565960 = path.getOrDefault("resourceGroupName")
  valid_565960 = validateParameter(valid_565960, JString, required = true,
                                 default = nil)
  if valid_565960 != nil:
    section.add "resourceGroupName", valid_565960
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565961 = query.getOrDefault("api-version")
  valid_565961 = validateParameter(valid_565961, JString, required = true,
                                 default = nil)
  if valid_565961 != nil:
    section.add "api-version", valid_565961
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565963: Call_WebAppsApplySlotConfigurationSlot_565954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_565963.validator(path, query, header, formData, body)
  let scheme = call_565963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565963.url(scheme.get, call_565963.host, call_565963.base,
                         call_565963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565963, url, valid)

proc call*(call_565964: Call_WebAppsApplySlotConfigurationSlot_565954;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565965 = newJObject()
  var query_565966 = newJObject()
  var body_565967 = newJObject()
  add(path_565965, "slot", newJString(slot))
  add(query_565966, "api-version", newJString(apiVersion))
  add(path_565965, "name", newJString(name))
  add(path_565965, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_565967 = slotSwapEntity
  add(path_565965, "resourceGroupName", newJString(resourceGroupName))
  result = call_565964.call(path_565965, query_565966, nil, nil, body_565967)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_565954(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_565955, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_565956, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_565968 = ref object of OpenApiRestCall_563564
proc url_WebAppsBackupSlot_565970(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_565969(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565971 = path.getOrDefault("slot")
  valid_565971 = validateParameter(valid_565971, JString, required = true,
                                 default = nil)
  if valid_565971 != nil:
    section.add "slot", valid_565971
  var valid_565972 = path.getOrDefault("name")
  valid_565972 = validateParameter(valid_565972, JString, required = true,
                                 default = nil)
  if valid_565972 != nil:
    section.add "name", valid_565972
  var valid_565973 = path.getOrDefault("subscriptionId")
  valid_565973 = validateParameter(valid_565973, JString, required = true,
                                 default = nil)
  if valid_565973 != nil:
    section.add "subscriptionId", valid_565973
  var valid_565974 = path.getOrDefault("resourceGroupName")
  valid_565974 = validateParameter(valid_565974, JString, required = true,
                                 default = nil)
  if valid_565974 != nil:
    section.add "resourceGroupName", valid_565974
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565975 = query.getOrDefault("api-version")
  valid_565975 = validateParameter(valid_565975, JString, required = true,
                                 default = nil)
  if valid_565975 != nil:
    section.add "api-version", valid_565975
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565977: Call_WebAppsBackupSlot_565968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_565977.validator(path, query, header, formData, body)
  let scheme = call_565977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565977.url(scheme.get, call_565977.host, call_565977.base,
                         call_565977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565977, url, valid)

proc call*(call_565978: Call_WebAppsBackupSlot_565968; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_565979 = newJObject()
  var query_565980 = newJObject()
  var body_565981 = newJObject()
  add(path_565979, "slot", newJString(slot))
  add(query_565980, "api-version", newJString(apiVersion))
  add(path_565979, "name", newJString(name))
  add(path_565979, "subscriptionId", newJString(subscriptionId))
  add(path_565979, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565981 = request
  result = call_565978.call(path_565979, query_565980, nil, nil, body_565981)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_565968(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_565969, base: "",
    url: url_WebAppsBackupSlot_565970, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_565982 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupsSlot_565984(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_565983(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565985 = path.getOrDefault("slot")
  valid_565985 = validateParameter(valid_565985, JString, required = true,
                                 default = nil)
  if valid_565985 != nil:
    section.add "slot", valid_565985
  var valid_565986 = path.getOrDefault("name")
  valid_565986 = validateParameter(valid_565986, JString, required = true,
                                 default = nil)
  if valid_565986 != nil:
    section.add "name", valid_565986
  var valid_565987 = path.getOrDefault("subscriptionId")
  valid_565987 = validateParameter(valid_565987, JString, required = true,
                                 default = nil)
  if valid_565987 != nil:
    section.add "subscriptionId", valid_565987
  var valid_565988 = path.getOrDefault("resourceGroupName")
  valid_565988 = validateParameter(valid_565988, JString, required = true,
                                 default = nil)
  if valid_565988 != nil:
    section.add "resourceGroupName", valid_565988
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565989 = query.getOrDefault("api-version")
  valid_565989 = validateParameter(valid_565989, JString, required = true,
                                 default = nil)
  if valid_565989 != nil:
    section.add "api-version", valid_565989
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565990: Call_WebAppsListBackupsSlot_565982; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_565990.validator(path, query, header, formData, body)
  let scheme = call_565990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565990.url(scheme.get, call_565990.host, call_565990.base,
                         call_565990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565990, url, valid)

proc call*(call_565991: Call_WebAppsListBackupsSlot_565982; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565992 = newJObject()
  var query_565993 = newJObject()
  add(path_565992, "slot", newJString(slot))
  add(query_565993, "api-version", newJString(apiVersion))
  add(path_565992, "name", newJString(name))
  add(path_565992, "subscriptionId", newJString(subscriptionId))
  add(path_565992, "resourceGroupName", newJString(resourceGroupName))
  result = call_565991.call(path_565992, query_565993, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_565982(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_565983, base: "",
    url: url_WebAppsListBackupsSlot_565984, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_565994 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupStatusSlot_565996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_565995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565997 = path.getOrDefault("slot")
  valid_565997 = validateParameter(valid_565997, JString, required = true,
                                 default = nil)
  if valid_565997 != nil:
    section.add "slot", valid_565997
  var valid_565998 = path.getOrDefault("name")
  valid_565998 = validateParameter(valid_565998, JString, required = true,
                                 default = nil)
  if valid_565998 != nil:
    section.add "name", valid_565998
  var valid_565999 = path.getOrDefault("subscriptionId")
  valid_565999 = validateParameter(valid_565999, JString, required = true,
                                 default = nil)
  if valid_565999 != nil:
    section.add "subscriptionId", valid_565999
  var valid_566000 = path.getOrDefault("backupId")
  valid_566000 = validateParameter(valid_566000, JString, required = true,
                                 default = nil)
  if valid_566000 != nil:
    section.add "backupId", valid_566000
  var valid_566001 = path.getOrDefault("resourceGroupName")
  valid_566001 = validateParameter(valid_566001, JString, required = true,
                                 default = nil)
  if valid_566001 != nil:
    section.add "resourceGroupName", valid_566001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566002 = query.getOrDefault("api-version")
  valid_566002 = validateParameter(valid_566002, JString, required = true,
                                 default = nil)
  if valid_566002 != nil:
    section.add "api-version", valid_566002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566003: Call_WebAppsGetBackupStatusSlot_565994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_566003.validator(path, query, header, formData, body)
  let scheme = call_566003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566003.url(scheme.get, call_566003.host, call_566003.base,
                         call_566003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566003, url, valid)

proc call*(call_566004: Call_WebAppsGetBackupStatusSlot_565994; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566005 = newJObject()
  var query_566006 = newJObject()
  add(path_566005, "slot", newJString(slot))
  add(query_566006, "api-version", newJString(apiVersion))
  add(path_566005, "name", newJString(name))
  add(path_566005, "subscriptionId", newJString(subscriptionId))
  add(path_566005, "backupId", newJString(backupId))
  add(path_566005, "resourceGroupName", newJString(resourceGroupName))
  result = call_566004.call(path_566005, query_566006, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_565994(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_565995, base: "",
    url: url_WebAppsGetBackupStatusSlot_565996, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_566007 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupSlot_566009(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_566008(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566010 = path.getOrDefault("slot")
  valid_566010 = validateParameter(valid_566010, JString, required = true,
                                 default = nil)
  if valid_566010 != nil:
    section.add "slot", valid_566010
  var valid_566011 = path.getOrDefault("name")
  valid_566011 = validateParameter(valid_566011, JString, required = true,
                                 default = nil)
  if valid_566011 != nil:
    section.add "name", valid_566011
  var valid_566012 = path.getOrDefault("subscriptionId")
  valid_566012 = validateParameter(valid_566012, JString, required = true,
                                 default = nil)
  if valid_566012 != nil:
    section.add "subscriptionId", valid_566012
  var valid_566013 = path.getOrDefault("backupId")
  valid_566013 = validateParameter(valid_566013, JString, required = true,
                                 default = nil)
  if valid_566013 != nil:
    section.add "backupId", valid_566013
  var valid_566014 = path.getOrDefault("resourceGroupName")
  valid_566014 = validateParameter(valid_566014, JString, required = true,
                                 default = nil)
  if valid_566014 != nil:
    section.add "resourceGroupName", valid_566014
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566015 = query.getOrDefault("api-version")
  valid_566015 = validateParameter(valid_566015, JString, required = true,
                                 default = nil)
  if valid_566015 != nil:
    section.add "api-version", valid_566015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566016: Call_WebAppsDeleteBackupSlot_566007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_566016.validator(path, query, header, formData, body)
  let scheme = call_566016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566016.url(scheme.get, call_566016.host, call_566016.base,
                         call_566016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566016, url, valid)

proc call*(call_566017: Call_WebAppsDeleteBackupSlot_566007; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566018 = newJObject()
  var query_566019 = newJObject()
  add(path_566018, "slot", newJString(slot))
  add(query_566019, "api-version", newJString(apiVersion))
  add(path_566018, "name", newJString(name))
  add(path_566018, "subscriptionId", newJString(subscriptionId))
  add(path_566018, "backupId", newJString(backupId))
  add(path_566018, "resourceGroupName", newJString(resourceGroupName))
  result = call_566017.call(path_566018, query_566019, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_566007(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_566008, base: "",
    url: url_WebAppsDeleteBackupSlot_566009, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_566020 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupStatusSecretsSlot_566022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_566021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566023 = path.getOrDefault("slot")
  valid_566023 = validateParameter(valid_566023, JString, required = true,
                                 default = nil)
  if valid_566023 != nil:
    section.add "slot", valid_566023
  var valid_566024 = path.getOrDefault("name")
  valid_566024 = validateParameter(valid_566024, JString, required = true,
                                 default = nil)
  if valid_566024 != nil:
    section.add "name", valid_566024
  var valid_566025 = path.getOrDefault("subscriptionId")
  valid_566025 = validateParameter(valid_566025, JString, required = true,
                                 default = nil)
  if valid_566025 != nil:
    section.add "subscriptionId", valid_566025
  var valid_566026 = path.getOrDefault("backupId")
  valid_566026 = validateParameter(valid_566026, JString, required = true,
                                 default = nil)
  if valid_566026 != nil:
    section.add "backupId", valid_566026
  var valid_566027 = path.getOrDefault("resourceGroupName")
  valid_566027 = validateParameter(valid_566027, JString, required = true,
                                 default = nil)
  if valid_566027 != nil:
    section.add "resourceGroupName", valid_566027
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566028 = query.getOrDefault("api-version")
  valid_566028 = validateParameter(valid_566028, JString, required = true,
                                 default = nil)
  if valid_566028 != nil:
    section.add "api-version", valid_566028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566030: Call_WebAppsListBackupStatusSecretsSlot_566020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_566030.validator(path, query, header, formData, body)
  let scheme = call_566030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566030.url(scheme.get, call_566030.host, call_566030.base,
                         call_566030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566030, url, valid)

proc call*(call_566031: Call_WebAppsListBackupStatusSecretsSlot_566020;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          backupId: string; resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on backup request.
  var path_566032 = newJObject()
  var query_566033 = newJObject()
  var body_566034 = newJObject()
  add(path_566032, "slot", newJString(slot))
  add(query_566033, "api-version", newJString(apiVersion))
  add(path_566032, "name", newJString(name))
  add(path_566032, "subscriptionId", newJString(subscriptionId))
  add(path_566032, "backupId", newJString(backupId))
  add(path_566032, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566034 = request
  result = call_566031.call(path_566032, query_566033, nil, nil, body_566034)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_566020(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_566021, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_566022, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_566035 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreSlot_566037(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_566036(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566038 = path.getOrDefault("slot")
  valid_566038 = validateParameter(valid_566038, JString, required = true,
                                 default = nil)
  if valid_566038 != nil:
    section.add "slot", valid_566038
  var valid_566039 = path.getOrDefault("name")
  valid_566039 = validateParameter(valid_566039, JString, required = true,
                                 default = nil)
  if valid_566039 != nil:
    section.add "name", valid_566039
  var valid_566040 = path.getOrDefault("subscriptionId")
  valid_566040 = validateParameter(valid_566040, JString, required = true,
                                 default = nil)
  if valid_566040 != nil:
    section.add "subscriptionId", valid_566040
  var valid_566041 = path.getOrDefault("backupId")
  valid_566041 = validateParameter(valid_566041, JString, required = true,
                                 default = nil)
  if valid_566041 != nil:
    section.add "backupId", valid_566041
  var valid_566042 = path.getOrDefault("resourceGroupName")
  valid_566042 = validateParameter(valid_566042, JString, required = true,
                                 default = nil)
  if valid_566042 != nil:
    section.add "resourceGroupName", valid_566042
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566043 = query.getOrDefault("api-version")
  valid_566043 = validateParameter(valid_566043, JString, required = true,
                                 default = nil)
  if valid_566043 != nil:
    section.add "api-version", valid_566043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566045: Call_WebAppsRestoreSlot_566035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_566045.validator(path, query, header, formData, body)
  let scheme = call_566045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566045.url(scheme.get, call_566045.host, call_566045.base,
                         call_566045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566045, url, valid)

proc call*(call_566046: Call_WebAppsRestoreSlot_566035; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_566047 = newJObject()
  var query_566048 = newJObject()
  var body_566049 = newJObject()
  add(path_566047, "slot", newJString(slot))
  add(query_566048, "api-version", newJString(apiVersion))
  add(path_566047, "name", newJString(name))
  add(path_566047, "subscriptionId", newJString(subscriptionId))
  add(path_566047, "backupId", newJString(backupId))
  add(path_566047, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566049 = request
  result = call_566046.call(path_566047, query_566048, nil, nil, body_566049)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_566035(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_566036, base: "",
    url: url_WebAppsRestoreSlot_566037, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_566050 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationsSlot_566052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_566051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566053 = path.getOrDefault("slot")
  valid_566053 = validateParameter(valid_566053, JString, required = true,
                                 default = nil)
  if valid_566053 != nil:
    section.add "slot", valid_566053
  var valid_566054 = path.getOrDefault("name")
  valid_566054 = validateParameter(valid_566054, JString, required = true,
                                 default = nil)
  if valid_566054 != nil:
    section.add "name", valid_566054
  var valid_566055 = path.getOrDefault("subscriptionId")
  valid_566055 = validateParameter(valid_566055, JString, required = true,
                                 default = nil)
  if valid_566055 != nil:
    section.add "subscriptionId", valid_566055
  var valid_566056 = path.getOrDefault("resourceGroupName")
  valid_566056 = validateParameter(valid_566056, JString, required = true,
                                 default = nil)
  if valid_566056 != nil:
    section.add "resourceGroupName", valid_566056
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566057 = query.getOrDefault("api-version")
  valid_566057 = validateParameter(valid_566057, JString, required = true,
                                 default = nil)
  if valid_566057 != nil:
    section.add "api-version", valid_566057
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566058: Call_WebAppsListConfigurationsSlot_566050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_566058.validator(path, query, header, formData, body)
  let scheme = call_566058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566058.url(scheme.get, call_566058.host, call_566058.base,
                         call_566058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566058, url, valid)

proc call*(call_566059: Call_WebAppsListConfigurationsSlot_566050; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566060 = newJObject()
  var query_566061 = newJObject()
  add(path_566060, "slot", newJString(slot))
  add(query_566061, "api-version", newJString(apiVersion))
  add(path_566060, "name", newJString(name))
  add(path_566060, "subscriptionId", newJString(subscriptionId))
  add(path_566060, "resourceGroupName", newJString(resourceGroupName))
  result = call_566059.call(path_566060, query_566061, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_566050(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_566051, base: "",
    url: url_WebAppsListConfigurationsSlot_566052, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_566062 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateApplicationSettingsSlot_566064(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_566063(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566065 = path.getOrDefault("slot")
  valid_566065 = validateParameter(valid_566065, JString, required = true,
                                 default = nil)
  if valid_566065 != nil:
    section.add "slot", valid_566065
  var valid_566066 = path.getOrDefault("name")
  valid_566066 = validateParameter(valid_566066, JString, required = true,
                                 default = nil)
  if valid_566066 != nil:
    section.add "name", valid_566066
  var valid_566067 = path.getOrDefault("subscriptionId")
  valid_566067 = validateParameter(valid_566067, JString, required = true,
                                 default = nil)
  if valid_566067 != nil:
    section.add "subscriptionId", valid_566067
  var valid_566068 = path.getOrDefault("resourceGroupName")
  valid_566068 = validateParameter(valid_566068, JString, required = true,
                                 default = nil)
  if valid_566068 != nil:
    section.add "resourceGroupName", valid_566068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566069 = query.getOrDefault("api-version")
  valid_566069 = validateParameter(valid_566069, JString, required = true,
                                 default = nil)
  if valid_566069 != nil:
    section.add "api-version", valid_566069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566071: Call_WebAppsUpdateApplicationSettingsSlot_566062;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_566071.validator(path, query, header, formData, body)
  let scheme = call_566071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566071.url(scheme.get, call_566071.host, call_566071.base,
                         call_566071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566071, url, valid)

proc call*(call_566072: Call_WebAppsUpdateApplicationSettingsSlot_566062;
          appSettings: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566073 = newJObject()
  var query_566074 = newJObject()
  var body_566075 = newJObject()
  if appSettings != nil:
    body_566075 = appSettings
  add(path_566073, "slot", newJString(slot))
  add(query_566074, "api-version", newJString(apiVersion))
  add(path_566073, "name", newJString(name))
  add(path_566073, "subscriptionId", newJString(subscriptionId))
  add(path_566073, "resourceGroupName", newJString(resourceGroupName))
  result = call_566072.call(path_566073, query_566074, nil, nil, body_566075)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_566062(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_566063, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_566064, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_566076 = ref object of OpenApiRestCall_563564
proc url_WebAppsListApplicationSettingsSlot_566078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_566077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566079 = path.getOrDefault("slot")
  valid_566079 = validateParameter(valid_566079, JString, required = true,
                                 default = nil)
  if valid_566079 != nil:
    section.add "slot", valid_566079
  var valid_566080 = path.getOrDefault("name")
  valid_566080 = validateParameter(valid_566080, JString, required = true,
                                 default = nil)
  if valid_566080 != nil:
    section.add "name", valid_566080
  var valid_566081 = path.getOrDefault("subscriptionId")
  valid_566081 = validateParameter(valid_566081, JString, required = true,
                                 default = nil)
  if valid_566081 != nil:
    section.add "subscriptionId", valid_566081
  var valid_566082 = path.getOrDefault("resourceGroupName")
  valid_566082 = validateParameter(valid_566082, JString, required = true,
                                 default = nil)
  if valid_566082 != nil:
    section.add "resourceGroupName", valid_566082
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566083 = query.getOrDefault("api-version")
  valid_566083 = validateParameter(valid_566083, JString, required = true,
                                 default = nil)
  if valid_566083 != nil:
    section.add "api-version", valid_566083
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566084: Call_WebAppsListApplicationSettingsSlot_566076;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_566084.validator(path, query, header, formData, body)
  let scheme = call_566084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566084.url(scheme.get, call_566084.host, call_566084.base,
                         call_566084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566084, url, valid)

proc call*(call_566085: Call_WebAppsListApplicationSettingsSlot_566076;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566086 = newJObject()
  var query_566087 = newJObject()
  add(path_566086, "slot", newJString(slot))
  add(query_566087, "api-version", newJString(apiVersion))
  add(path_566086, "name", newJString(name))
  add(path_566086, "subscriptionId", newJString(subscriptionId))
  add(path_566086, "resourceGroupName", newJString(resourceGroupName))
  result = call_566085.call(path_566086, query_566087, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_566076(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_566077, base: "",
    url: url_WebAppsListApplicationSettingsSlot_566078, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_566088 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAuthSettingsSlot_566090(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_566089(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566091 = path.getOrDefault("slot")
  valid_566091 = validateParameter(valid_566091, JString, required = true,
                                 default = nil)
  if valid_566091 != nil:
    section.add "slot", valid_566091
  var valid_566092 = path.getOrDefault("name")
  valid_566092 = validateParameter(valid_566092, JString, required = true,
                                 default = nil)
  if valid_566092 != nil:
    section.add "name", valid_566092
  var valid_566093 = path.getOrDefault("subscriptionId")
  valid_566093 = validateParameter(valid_566093, JString, required = true,
                                 default = nil)
  if valid_566093 != nil:
    section.add "subscriptionId", valid_566093
  var valid_566094 = path.getOrDefault("resourceGroupName")
  valid_566094 = validateParameter(valid_566094, JString, required = true,
                                 default = nil)
  if valid_566094 != nil:
    section.add "resourceGroupName", valid_566094
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566095 = query.getOrDefault("api-version")
  valid_566095 = validateParameter(valid_566095, JString, required = true,
                                 default = nil)
  if valid_566095 != nil:
    section.add "api-version", valid_566095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566097: Call_WebAppsUpdateAuthSettingsSlot_566088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_566097.validator(path, query, header, formData, body)
  let scheme = call_566097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566097.url(scheme.get, call_566097.host, call_566097.base,
                         call_566097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566097, url, valid)

proc call*(call_566098: Call_WebAppsUpdateAuthSettingsSlot_566088; slot: string;
          apiVersion: string; siteAuthSettings: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566099 = newJObject()
  var query_566100 = newJObject()
  var body_566101 = newJObject()
  add(path_566099, "slot", newJString(slot))
  add(query_566100, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_566101 = siteAuthSettings
  add(path_566099, "name", newJString(name))
  add(path_566099, "subscriptionId", newJString(subscriptionId))
  add(path_566099, "resourceGroupName", newJString(resourceGroupName))
  result = call_566098.call(path_566099, query_566100, nil, nil, body_566101)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_566088(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_566089, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_566090, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_566102 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetAuthSettingsSlot_566104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_566103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566105 = path.getOrDefault("slot")
  valid_566105 = validateParameter(valid_566105, JString, required = true,
                                 default = nil)
  if valid_566105 != nil:
    section.add "slot", valid_566105
  var valid_566106 = path.getOrDefault("name")
  valid_566106 = validateParameter(valid_566106, JString, required = true,
                                 default = nil)
  if valid_566106 != nil:
    section.add "name", valid_566106
  var valid_566107 = path.getOrDefault("subscriptionId")
  valid_566107 = validateParameter(valid_566107, JString, required = true,
                                 default = nil)
  if valid_566107 != nil:
    section.add "subscriptionId", valid_566107
  var valid_566108 = path.getOrDefault("resourceGroupName")
  valid_566108 = validateParameter(valid_566108, JString, required = true,
                                 default = nil)
  if valid_566108 != nil:
    section.add "resourceGroupName", valid_566108
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566109 = query.getOrDefault("api-version")
  valid_566109 = validateParameter(valid_566109, JString, required = true,
                                 default = nil)
  if valid_566109 != nil:
    section.add "api-version", valid_566109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566110: Call_WebAppsGetAuthSettingsSlot_566102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_566110.validator(path, query, header, formData, body)
  let scheme = call_566110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566110.url(scheme.get, call_566110.host, call_566110.base,
                         call_566110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566110, url, valid)

proc call*(call_566111: Call_WebAppsGetAuthSettingsSlot_566102; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566112 = newJObject()
  var query_566113 = newJObject()
  add(path_566112, "slot", newJString(slot))
  add(query_566113, "api-version", newJString(apiVersion))
  add(path_566112, "name", newJString(name))
  add(path_566112, "subscriptionId", newJString(subscriptionId))
  add(path_566112, "resourceGroupName", newJString(resourceGroupName))
  result = call_566111.call(path_566112, query_566113, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_566102(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_566103, base: "",
    url: url_WebAppsGetAuthSettingsSlot_566104, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccountsSlot_566114 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAzureStorageAccountsSlot_566116(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccountsSlot_566115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566117 = path.getOrDefault("slot")
  valid_566117 = validateParameter(valid_566117, JString, required = true,
                                 default = nil)
  if valid_566117 != nil:
    section.add "slot", valid_566117
  var valid_566118 = path.getOrDefault("name")
  valid_566118 = validateParameter(valid_566118, JString, required = true,
                                 default = nil)
  if valid_566118 != nil:
    section.add "name", valid_566118
  var valid_566119 = path.getOrDefault("subscriptionId")
  valid_566119 = validateParameter(valid_566119, JString, required = true,
                                 default = nil)
  if valid_566119 != nil:
    section.add "subscriptionId", valid_566119
  var valid_566120 = path.getOrDefault("resourceGroupName")
  valid_566120 = validateParameter(valid_566120, JString, required = true,
                                 default = nil)
  if valid_566120 != nil:
    section.add "resourceGroupName", valid_566120
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566121 = query.getOrDefault("api-version")
  valid_566121 = validateParameter(valid_566121, JString, required = true,
                                 default = nil)
  if valid_566121 != nil:
    section.add "api-version", valid_566121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566123: Call_WebAppsUpdateAzureStorageAccountsSlot_566114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_566123.validator(path, query, header, formData, body)
  let scheme = call_566123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566123.url(scheme.get, call_566123.host, call_566123.base,
                         call_566123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566123, url, valid)

proc call*(call_566124: Call_WebAppsUpdateAzureStorageAccountsSlot_566114;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; azureStorageAccounts: JsonNode): Recallable =
  ## webAppsUpdateAzureStorageAccountsSlot
  ## Updates the Azure storage account configurations of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  var path_566125 = newJObject()
  var query_566126 = newJObject()
  var body_566127 = newJObject()
  add(path_566125, "slot", newJString(slot))
  add(query_566126, "api-version", newJString(apiVersion))
  add(path_566125, "name", newJString(name))
  add(path_566125, "subscriptionId", newJString(subscriptionId))
  add(path_566125, "resourceGroupName", newJString(resourceGroupName))
  if azureStorageAccounts != nil:
    body_566127 = azureStorageAccounts
  result = call_566124.call(path_566125, query_566126, nil, nil, body_566127)

var webAppsUpdateAzureStorageAccountsSlot* = Call_WebAppsUpdateAzureStorageAccountsSlot_566114(
    name: "webAppsUpdateAzureStorageAccountsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccountsSlot_566115, base: "",
    url: url_WebAppsUpdateAzureStorageAccountsSlot_566116, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccountsSlot_566128 = ref object of OpenApiRestCall_563564
proc url_WebAppsListAzureStorageAccountsSlot_566130(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccountsSlot_566129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566131 = path.getOrDefault("slot")
  valid_566131 = validateParameter(valid_566131, JString, required = true,
                                 default = nil)
  if valid_566131 != nil:
    section.add "slot", valid_566131
  var valid_566132 = path.getOrDefault("name")
  valid_566132 = validateParameter(valid_566132, JString, required = true,
                                 default = nil)
  if valid_566132 != nil:
    section.add "name", valid_566132
  var valid_566133 = path.getOrDefault("subscriptionId")
  valid_566133 = validateParameter(valid_566133, JString, required = true,
                                 default = nil)
  if valid_566133 != nil:
    section.add "subscriptionId", valid_566133
  var valid_566134 = path.getOrDefault("resourceGroupName")
  valid_566134 = validateParameter(valid_566134, JString, required = true,
                                 default = nil)
  if valid_566134 != nil:
    section.add "resourceGroupName", valid_566134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566135 = query.getOrDefault("api-version")
  valid_566135 = validateParameter(valid_566135, JString, required = true,
                                 default = nil)
  if valid_566135 != nil:
    section.add "api-version", valid_566135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566136: Call_WebAppsListAzureStorageAccountsSlot_566128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_566136.validator(path, query, header, formData, body)
  let scheme = call_566136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566136.url(scheme.get, call_566136.host, call_566136.base,
                         call_566136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566136, url, valid)

proc call*(call_566137: Call_WebAppsListAzureStorageAccountsSlot_566128;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListAzureStorageAccountsSlot
  ## Gets the Azure storage account configurations of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566138 = newJObject()
  var query_566139 = newJObject()
  add(path_566138, "slot", newJString(slot))
  add(query_566139, "api-version", newJString(apiVersion))
  add(path_566138, "name", newJString(name))
  add(path_566138, "subscriptionId", newJString(subscriptionId))
  add(path_566138, "resourceGroupName", newJString(resourceGroupName))
  result = call_566137.call(path_566138, query_566139, nil, nil, nil)

var webAppsListAzureStorageAccountsSlot* = Call_WebAppsListAzureStorageAccountsSlot_566128(
    name: "webAppsListAzureStorageAccountsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccountsSlot_566129, base: "",
    url: url_WebAppsListAzureStorageAccountsSlot_566130, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_566140 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateBackupConfigurationSlot_566142(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_566141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566143 = path.getOrDefault("slot")
  valid_566143 = validateParameter(valid_566143, JString, required = true,
                                 default = nil)
  if valid_566143 != nil:
    section.add "slot", valid_566143
  var valid_566144 = path.getOrDefault("name")
  valid_566144 = validateParameter(valid_566144, JString, required = true,
                                 default = nil)
  if valid_566144 != nil:
    section.add "name", valid_566144
  var valid_566145 = path.getOrDefault("subscriptionId")
  valid_566145 = validateParameter(valid_566145, JString, required = true,
                                 default = nil)
  if valid_566145 != nil:
    section.add "subscriptionId", valid_566145
  var valid_566146 = path.getOrDefault("resourceGroupName")
  valid_566146 = validateParameter(valid_566146, JString, required = true,
                                 default = nil)
  if valid_566146 != nil:
    section.add "resourceGroupName", valid_566146
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566147 = query.getOrDefault("api-version")
  valid_566147 = validateParameter(valid_566147, JString, required = true,
                                 default = nil)
  if valid_566147 != nil:
    section.add "api-version", valid_566147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566149: Call_WebAppsUpdateBackupConfigurationSlot_566140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_566149.validator(path, query, header, formData, body)
  let scheme = call_566149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566149.url(scheme.get, call_566149.host, call_566149.base,
                         call_566149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566149, url, valid)

proc call*(call_566150: Call_WebAppsUpdateBackupConfigurationSlot_566140;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_566151 = newJObject()
  var query_566152 = newJObject()
  var body_566153 = newJObject()
  add(path_566151, "slot", newJString(slot))
  add(query_566152, "api-version", newJString(apiVersion))
  add(path_566151, "name", newJString(name))
  add(path_566151, "subscriptionId", newJString(subscriptionId))
  add(path_566151, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566153 = request
  result = call_566150.call(path_566151, query_566152, nil, nil, body_566153)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_566140(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_566141, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_566142, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_566154 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupConfigurationSlot_566156(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_566155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566157 = path.getOrDefault("slot")
  valid_566157 = validateParameter(valid_566157, JString, required = true,
                                 default = nil)
  if valid_566157 != nil:
    section.add "slot", valid_566157
  var valid_566158 = path.getOrDefault("name")
  valid_566158 = validateParameter(valid_566158, JString, required = true,
                                 default = nil)
  if valid_566158 != nil:
    section.add "name", valid_566158
  var valid_566159 = path.getOrDefault("subscriptionId")
  valid_566159 = validateParameter(valid_566159, JString, required = true,
                                 default = nil)
  if valid_566159 != nil:
    section.add "subscriptionId", valid_566159
  var valid_566160 = path.getOrDefault("resourceGroupName")
  valid_566160 = validateParameter(valid_566160, JString, required = true,
                                 default = nil)
  if valid_566160 != nil:
    section.add "resourceGroupName", valid_566160
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566161 = query.getOrDefault("api-version")
  valid_566161 = validateParameter(valid_566161, JString, required = true,
                                 default = nil)
  if valid_566161 != nil:
    section.add "api-version", valid_566161
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566162: Call_WebAppsDeleteBackupConfigurationSlot_566154;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_566162.validator(path, query, header, formData, body)
  let scheme = call_566162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566162.url(scheme.get, call_566162.host, call_566162.base,
                         call_566162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566162, url, valid)

proc call*(call_566163: Call_WebAppsDeleteBackupConfigurationSlot_566154;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566164 = newJObject()
  var query_566165 = newJObject()
  add(path_566164, "slot", newJString(slot))
  add(query_566165, "api-version", newJString(apiVersion))
  add(path_566164, "name", newJString(name))
  add(path_566164, "subscriptionId", newJString(subscriptionId))
  add(path_566164, "resourceGroupName", newJString(resourceGroupName))
  result = call_566163.call(path_566164, query_566165, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_566154(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_566155, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_566156, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_566166 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupConfigurationSlot_566168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_566167(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566169 = path.getOrDefault("slot")
  valid_566169 = validateParameter(valid_566169, JString, required = true,
                                 default = nil)
  if valid_566169 != nil:
    section.add "slot", valid_566169
  var valid_566170 = path.getOrDefault("name")
  valid_566170 = validateParameter(valid_566170, JString, required = true,
                                 default = nil)
  if valid_566170 != nil:
    section.add "name", valid_566170
  var valid_566171 = path.getOrDefault("subscriptionId")
  valid_566171 = validateParameter(valid_566171, JString, required = true,
                                 default = nil)
  if valid_566171 != nil:
    section.add "subscriptionId", valid_566171
  var valid_566172 = path.getOrDefault("resourceGroupName")
  valid_566172 = validateParameter(valid_566172, JString, required = true,
                                 default = nil)
  if valid_566172 != nil:
    section.add "resourceGroupName", valid_566172
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566173 = query.getOrDefault("api-version")
  valid_566173 = validateParameter(valid_566173, JString, required = true,
                                 default = nil)
  if valid_566173 != nil:
    section.add "api-version", valid_566173
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566174: Call_WebAppsGetBackupConfigurationSlot_566166;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_566174.validator(path, query, header, formData, body)
  let scheme = call_566174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566174.url(scheme.get, call_566174.host, call_566174.base,
                         call_566174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566174, url, valid)

proc call*(call_566175: Call_WebAppsGetBackupConfigurationSlot_566166;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566176 = newJObject()
  var query_566177 = newJObject()
  add(path_566176, "slot", newJString(slot))
  add(query_566177, "api-version", newJString(apiVersion))
  add(path_566176, "name", newJString(name))
  add(path_566176, "subscriptionId", newJString(subscriptionId))
  add(path_566176, "resourceGroupName", newJString(resourceGroupName))
  result = call_566175.call(path_566176, query_566177, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_566166(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_566167, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_566168, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_566178 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConnectionStringsSlot_566180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_566179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566181 = path.getOrDefault("slot")
  valid_566181 = validateParameter(valid_566181, JString, required = true,
                                 default = nil)
  if valid_566181 != nil:
    section.add "slot", valid_566181
  var valid_566182 = path.getOrDefault("name")
  valid_566182 = validateParameter(valid_566182, JString, required = true,
                                 default = nil)
  if valid_566182 != nil:
    section.add "name", valid_566182
  var valid_566183 = path.getOrDefault("subscriptionId")
  valid_566183 = validateParameter(valid_566183, JString, required = true,
                                 default = nil)
  if valid_566183 != nil:
    section.add "subscriptionId", valid_566183
  var valid_566184 = path.getOrDefault("resourceGroupName")
  valid_566184 = validateParameter(valid_566184, JString, required = true,
                                 default = nil)
  if valid_566184 != nil:
    section.add "resourceGroupName", valid_566184
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566185 = query.getOrDefault("api-version")
  valid_566185 = validateParameter(valid_566185, JString, required = true,
                                 default = nil)
  if valid_566185 != nil:
    section.add "api-version", valid_566185
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566187: Call_WebAppsUpdateConnectionStringsSlot_566178;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_566187.validator(path, query, header, formData, body)
  let scheme = call_566187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566187.url(scheme.get, call_566187.host, call_566187.base,
                         call_566187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566187, url, valid)

proc call*(call_566188: Call_WebAppsUpdateConnectionStringsSlot_566178;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  var path_566189 = newJObject()
  var query_566190 = newJObject()
  var body_566191 = newJObject()
  add(path_566189, "slot", newJString(slot))
  add(query_566190, "api-version", newJString(apiVersion))
  add(path_566189, "name", newJString(name))
  add(path_566189, "subscriptionId", newJString(subscriptionId))
  add(path_566189, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_566191 = connectionStrings
  result = call_566188.call(path_566189, query_566190, nil, nil, body_566191)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_566178(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_566179, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_566180, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_566192 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConnectionStringsSlot_566194(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_566193(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566195 = path.getOrDefault("slot")
  valid_566195 = validateParameter(valid_566195, JString, required = true,
                                 default = nil)
  if valid_566195 != nil:
    section.add "slot", valid_566195
  var valid_566196 = path.getOrDefault("name")
  valid_566196 = validateParameter(valid_566196, JString, required = true,
                                 default = nil)
  if valid_566196 != nil:
    section.add "name", valid_566196
  var valid_566197 = path.getOrDefault("subscriptionId")
  valid_566197 = validateParameter(valid_566197, JString, required = true,
                                 default = nil)
  if valid_566197 != nil:
    section.add "subscriptionId", valid_566197
  var valid_566198 = path.getOrDefault("resourceGroupName")
  valid_566198 = validateParameter(valid_566198, JString, required = true,
                                 default = nil)
  if valid_566198 != nil:
    section.add "resourceGroupName", valid_566198
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566199 = query.getOrDefault("api-version")
  valid_566199 = validateParameter(valid_566199, JString, required = true,
                                 default = nil)
  if valid_566199 != nil:
    section.add "api-version", valid_566199
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566200: Call_WebAppsListConnectionStringsSlot_566192;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_566200.validator(path, query, header, formData, body)
  let scheme = call_566200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566200.url(scheme.get, call_566200.host, call_566200.base,
                         call_566200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566200, url, valid)

proc call*(call_566201: Call_WebAppsListConnectionStringsSlot_566192; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566202 = newJObject()
  var query_566203 = newJObject()
  add(path_566202, "slot", newJString(slot))
  add(query_566203, "api-version", newJString(apiVersion))
  add(path_566202, "name", newJString(name))
  add(path_566202, "subscriptionId", newJString(subscriptionId))
  add(path_566202, "resourceGroupName", newJString(resourceGroupName))
  result = call_566201.call(path_566202, query_566203, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_566192(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_566193, base: "",
    url: url_WebAppsListConnectionStringsSlot_566194, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_566216 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_566218(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_566217(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566219 = path.getOrDefault("slot")
  valid_566219 = validateParameter(valid_566219, JString, required = true,
                                 default = nil)
  if valid_566219 != nil:
    section.add "slot", valid_566219
  var valid_566220 = path.getOrDefault("name")
  valid_566220 = validateParameter(valid_566220, JString, required = true,
                                 default = nil)
  if valid_566220 != nil:
    section.add "name", valid_566220
  var valid_566221 = path.getOrDefault("subscriptionId")
  valid_566221 = validateParameter(valid_566221, JString, required = true,
                                 default = nil)
  if valid_566221 != nil:
    section.add "subscriptionId", valid_566221
  var valid_566222 = path.getOrDefault("resourceGroupName")
  valid_566222 = validateParameter(valid_566222, JString, required = true,
                                 default = nil)
  if valid_566222 != nil:
    section.add "resourceGroupName", valid_566222
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566223 = query.getOrDefault("api-version")
  valid_566223 = validateParameter(valid_566223, JString, required = true,
                                 default = nil)
  if valid_566223 != nil:
    section.add "api-version", valid_566223
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566225: Call_WebAppsUpdateDiagnosticLogsConfigSlot_566216;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_566225.validator(path, query, header, formData, body)
  let scheme = call_566225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566225.url(scheme.get, call_566225.host, call_566225.base,
                         call_566225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566225, url, valid)

proc call*(call_566226: Call_WebAppsUpdateDiagnosticLogsConfigSlot_566216;
          slot: string; apiVersion: string; siteLogsConfig: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566227 = newJObject()
  var query_566228 = newJObject()
  var body_566229 = newJObject()
  add(path_566227, "slot", newJString(slot))
  add(query_566228, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_566229 = siteLogsConfig
  add(path_566227, "name", newJString(name))
  add(path_566227, "subscriptionId", newJString(subscriptionId))
  add(path_566227, "resourceGroupName", newJString(resourceGroupName))
  result = call_566226.call(path_566227, query_566228, nil, nil, body_566229)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_566216(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_566217, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_566218, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_566204 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_566206(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_566205(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566207 = path.getOrDefault("slot")
  valid_566207 = validateParameter(valid_566207, JString, required = true,
                                 default = nil)
  if valid_566207 != nil:
    section.add "slot", valid_566207
  var valid_566208 = path.getOrDefault("name")
  valid_566208 = validateParameter(valid_566208, JString, required = true,
                                 default = nil)
  if valid_566208 != nil:
    section.add "name", valid_566208
  var valid_566209 = path.getOrDefault("subscriptionId")
  valid_566209 = validateParameter(valid_566209, JString, required = true,
                                 default = nil)
  if valid_566209 != nil:
    section.add "subscriptionId", valid_566209
  var valid_566210 = path.getOrDefault("resourceGroupName")
  valid_566210 = validateParameter(valid_566210, JString, required = true,
                                 default = nil)
  if valid_566210 != nil:
    section.add "resourceGroupName", valid_566210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566211 = query.getOrDefault("api-version")
  valid_566211 = validateParameter(valid_566211, JString, required = true,
                                 default = nil)
  if valid_566211 != nil:
    section.add "api-version", valid_566211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566212: Call_WebAppsGetDiagnosticLogsConfigurationSlot_566204;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_566212.validator(path, query, header, formData, body)
  let scheme = call_566212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566212.url(scheme.get, call_566212.host, call_566212.base,
                         call_566212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566212, url, valid)

proc call*(call_566213: Call_WebAppsGetDiagnosticLogsConfigurationSlot_566204;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566214 = newJObject()
  var query_566215 = newJObject()
  add(path_566214, "slot", newJString(slot))
  add(query_566215, "api-version", newJString(apiVersion))
  add(path_566214, "name", newJString(name))
  add(path_566214, "subscriptionId", newJString(subscriptionId))
  add(path_566214, "resourceGroupName", newJString(resourceGroupName))
  result = call_566213.call(path_566214, query_566215, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_566204(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_566205,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_566206,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_566230 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateMetadataSlot_566232(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_566231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566233 = path.getOrDefault("slot")
  valid_566233 = validateParameter(valid_566233, JString, required = true,
                                 default = nil)
  if valid_566233 != nil:
    section.add "slot", valid_566233
  var valid_566234 = path.getOrDefault("name")
  valid_566234 = validateParameter(valid_566234, JString, required = true,
                                 default = nil)
  if valid_566234 != nil:
    section.add "name", valid_566234
  var valid_566235 = path.getOrDefault("subscriptionId")
  valid_566235 = validateParameter(valid_566235, JString, required = true,
                                 default = nil)
  if valid_566235 != nil:
    section.add "subscriptionId", valid_566235
  var valid_566236 = path.getOrDefault("resourceGroupName")
  valid_566236 = validateParameter(valid_566236, JString, required = true,
                                 default = nil)
  if valid_566236 != nil:
    section.add "resourceGroupName", valid_566236
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566237 = query.getOrDefault("api-version")
  valid_566237 = validateParameter(valid_566237, JString, required = true,
                                 default = nil)
  if valid_566237 != nil:
    section.add "api-version", valid_566237
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566239: Call_WebAppsUpdateMetadataSlot_566230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_566239.validator(path, query, header, formData, body)
  let scheme = call_566239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566239.url(scheme.get, call_566239.host, call_566239.base,
                         call_566239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566239, url, valid)

proc call*(call_566240: Call_WebAppsUpdateMetadataSlot_566230; metadata: JsonNode;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566241 = newJObject()
  var query_566242 = newJObject()
  var body_566243 = newJObject()
  if metadata != nil:
    body_566243 = metadata
  add(path_566241, "slot", newJString(slot))
  add(query_566242, "api-version", newJString(apiVersion))
  add(path_566241, "name", newJString(name))
  add(path_566241, "subscriptionId", newJString(subscriptionId))
  add(path_566241, "resourceGroupName", newJString(resourceGroupName))
  result = call_566240.call(path_566241, query_566242, nil, nil, body_566243)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_566230(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_566231, base: "",
    url: url_WebAppsUpdateMetadataSlot_566232, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_566244 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetadataSlot_566246(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_566245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566247 = path.getOrDefault("slot")
  valid_566247 = validateParameter(valid_566247, JString, required = true,
                                 default = nil)
  if valid_566247 != nil:
    section.add "slot", valid_566247
  var valid_566248 = path.getOrDefault("name")
  valid_566248 = validateParameter(valid_566248, JString, required = true,
                                 default = nil)
  if valid_566248 != nil:
    section.add "name", valid_566248
  var valid_566249 = path.getOrDefault("subscriptionId")
  valid_566249 = validateParameter(valid_566249, JString, required = true,
                                 default = nil)
  if valid_566249 != nil:
    section.add "subscriptionId", valid_566249
  var valid_566250 = path.getOrDefault("resourceGroupName")
  valid_566250 = validateParameter(valid_566250, JString, required = true,
                                 default = nil)
  if valid_566250 != nil:
    section.add "resourceGroupName", valid_566250
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566251 = query.getOrDefault("api-version")
  valid_566251 = validateParameter(valid_566251, JString, required = true,
                                 default = nil)
  if valid_566251 != nil:
    section.add "api-version", valid_566251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566252: Call_WebAppsListMetadataSlot_566244; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_566252.validator(path, query, header, formData, body)
  let scheme = call_566252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566252.url(scheme.get, call_566252.host, call_566252.base,
                         call_566252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566252, url, valid)

proc call*(call_566253: Call_WebAppsListMetadataSlot_566244; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566254 = newJObject()
  var query_566255 = newJObject()
  add(path_566254, "slot", newJString(slot))
  add(query_566255, "api-version", newJString(apiVersion))
  add(path_566254, "name", newJString(name))
  add(path_566254, "subscriptionId", newJString(subscriptionId))
  add(path_566254, "resourceGroupName", newJString(resourceGroupName))
  result = call_566253.call(path_566254, query_566255, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_566244(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_566245, base: "",
    url: url_WebAppsListMetadataSlot_566246, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_566256 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingCredentialsSlot_566258(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_566257(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566259 = path.getOrDefault("slot")
  valid_566259 = validateParameter(valid_566259, JString, required = true,
                                 default = nil)
  if valid_566259 != nil:
    section.add "slot", valid_566259
  var valid_566260 = path.getOrDefault("name")
  valid_566260 = validateParameter(valid_566260, JString, required = true,
                                 default = nil)
  if valid_566260 != nil:
    section.add "name", valid_566260
  var valid_566261 = path.getOrDefault("subscriptionId")
  valid_566261 = validateParameter(valid_566261, JString, required = true,
                                 default = nil)
  if valid_566261 != nil:
    section.add "subscriptionId", valid_566261
  var valid_566262 = path.getOrDefault("resourceGroupName")
  valid_566262 = validateParameter(valid_566262, JString, required = true,
                                 default = nil)
  if valid_566262 != nil:
    section.add "resourceGroupName", valid_566262
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566263 = query.getOrDefault("api-version")
  valid_566263 = validateParameter(valid_566263, JString, required = true,
                                 default = nil)
  if valid_566263 != nil:
    section.add "api-version", valid_566263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566264: Call_WebAppsListPublishingCredentialsSlot_566256;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_566264.validator(path, query, header, formData, body)
  let scheme = call_566264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566264.url(scheme.get, call_566264.host, call_566264.base,
                         call_566264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566264, url, valid)

proc call*(call_566265: Call_WebAppsListPublishingCredentialsSlot_566256;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566266 = newJObject()
  var query_566267 = newJObject()
  add(path_566266, "slot", newJString(slot))
  add(query_566267, "api-version", newJString(apiVersion))
  add(path_566266, "name", newJString(name))
  add(path_566266, "subscriptionId", newJString(subscriptionId))
  add(path_566266, "resourceGroupName", newJString(resourceGroupName))
  result = call_566265.call(path_566266, query_566267, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_566256(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_566257, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_566258, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_566268 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSitePushSettingsSlot_566270(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_566269(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566271 = path.getOrDefault("slot")
  valid_566271 = validateParameter(valid_566271, JString, required = true,
                                 default = nil)
  if valid_566271 != nil:
    section.add "slot", valid_566271
  var valid_566272 = path.getOrDefault("name")
  valid_566272 = validateParameter(valid_566272, JString, required = true,
                                 default = nil)
  if valid_566272 != nil:
    section.add "name", valid_566272
  var valid_566273 = path.getOrDefault("subscriptionId")
  valid_566273 = validateParameter(valid_566273, JString, required = true,
                                 default = nil)
  if valid_566273 != nil:
    section.add "subscriptionId", valid_566273
  var valid_566274 = path.getOrDefault("resourceGroupName")
  valid_566274 = validateParameter(valid_566274, JString, required = true,
                                 default = nil)
  if valid_566274 != nil:
    section.add "resourceGroupName", valid_566274
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566275 = query.getOrDefault("api-version")
  valid_566275 = validateParameter(valid_566275, JString, required = true,
                                 default = nil)
  if valid_566275 != nil:
    section.add "api-version", valid_566275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566277: Call_WebAppsUpdateSitePushSettingsSlot_566268;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_566277.validator(path, query, header, formData, body)
  let scheme = call_566277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566277.url(scheme.get, call_566277.host, call_566277.base,
                         call_566277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566277, url, valid)

proc call*(call_566278: Call_WebAppsUpdateSitePushSettingsSlot_566268;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          pushSettings: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566279 = newJObject()
  var query_566280 = newJObject()
  var body_566281 = newJObject()
  add(path_566279, "slot", newJString(slot))
  add(query_566280, "api-version", newJString(apiVersion))
  add(path_566279, "name", newJString(name))
  add(path_566279, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_566281 = pushSettings
  add(path_566279, "resourceGroupName", newJString(resourceGroupName))
  result = call_566278.call(path_566279, query_566280, nil, nil, body_566281)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_566268(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_566269, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_566270, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_566282 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSitePushSettingsSlot_566284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_566283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566285 = path.getOrDefault("slot")
  valid_566285 = validateParameter(valid_566285, JString, required = true,
                                 default = nil)
  if valid_566285 != nil:
    section.add "slot", valid_566285
  var valid_566286 = path.getOrDefault("name")
  valid_566286 = validateParameter(valid_566286, JString, required = true,
                                 default = nil)
  if valid_566286 != nil:
    section.add "name", valid_566286
  var valid_566287 = path.getOrDefault("subscriptionId")
  valid_566287 = validateParameter(valid_566287, JString, required = true,
                                 default = nil)
  if valid_566287 != nil:
    section.add "subscriptionId", valid_566287
  var valid_566288 = path.getOrDefault("resourceGroupName")
  valid_566288 = validateParameter(valid_566288, JString, required = true,
                                 default = nil)
  if valid_566288 != nil:
    section.add "resourceGroupName", valid_566288
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566289 = query.getOrDefault("api-version")
  valid_566289 = validateParameter(valid_566289, JString, required = true,
                                 default = nil)
  if valid_566289 != nil:
    section.add "api-version", valid_566289
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566290: Call_WebAppsListSitePushSettingsSlot_566282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_566290.validator(path, query, header, formData, body)
  let scheme = call_566290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566290.url(scheme.get, call_566290.host, call_566290.base,
                         call_566290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566290, url, valid)

proc call*(call_566291: Call_WebAppsListSitePushSettingsSlot_566282; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566292 = newJObject()
  var query_566293 = newJObject()
  add(path_566292, "slot", newJString(slot))
  add(query_566293, "api-version", newJString(apiVersion))
  add(path_566292, "name", newJString(name))
  add(path_566292, "subscriptionId", newJString(subscriptionId))
  add(path_566292, "resourceGroupName", newJString(resourceGroupName))
  result = call_566291.call(path_566292, query_566293, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_566282(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_566283, base: "",
    url: url_WebAppsListSitePushSettingsSlot_566284, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_566306 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateConfigurationSlot_566308(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_566307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566309 = path.getOrDefault("slot")
  valid_566309 = validateParameter(valid_566309, JString, required = true,
                                 default = nil)
  if valid_566309 != nil:
    section.add "slot", valid_566309
  var valid_566310 = path.getOrDefault("name")
  valid_566310 = validateParameter(valid_566310, JString, required = true,
                                 default = nil)
  if valid_566310 != nil:
    section.add "name", valid_566310
  var valid_566311 = path.getOrDefault("subscriptionId")
  valid_566311 = validateParameter(valid_566311, JString, required = true,
                                 default = nil)
  if valid_566311 != nil:
    section.add "subscriptionId", valid_566311
  var valid_566312 = path.getOrDefault("resourceGroupName")
  valid_566312 = validateParameter(valid_566312, JString, required = true,
                                 default = nil)
  if valid_566312 != nil:
    section.add "resourceGroupName", valid_566312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566313 = query.getOrDefault("api-version")
  valid_566313 = validateParameter(valid_566313, JString, required = true,
                                 default = nil)
  if valid_566313 != nil:
    section.add "api-version", valid_566313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566315: Call_WebAppsCreateOrUpdateConfigurationSlot_566306;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_566315.validator(path, query, header, formData, body)
  let scheme = call_566315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566315.url(scheme.get, call_566315.host, call_566315.base,
                         call_566315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566315, url, valid)

proc call*(call_566316: Call_WebAppsCreateOrUpdateConfigurationSlot_566306;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566317 = newJObject()
  var query_566318 = newJObject()
  var body_566319 = newJObject()
  add(path_566317, "slot", newJString(slot))
  add(query_566318, "api-version", newJString(apiVersion))
  add(path_566317, "name", newJString(name))
  add(path_566317, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566319 = siteConfig
  add(path_566317, "resourceGroupName", newJString(resourceGroupName))
  result = call_566316.call(path_566317, query_566318, nil, nil, body_566319)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_566306(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_566307, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_566308,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_566294 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSlot_566296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_566295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566297 = path.getOrDefault("slot")
  valid_566297 = validateParameter(valid_566297, JString, required = true,
                                 default = nil)
  if valid_566297 != nil:
    section.add "slot", valid_566297
  var valid_566298 = path.getOrDefault("name")
  valid_566298 = validateParameter(valid_566298, JString, required = true,
                                 default = nil)
  if valid_566298 != nil:
    section.add "name", valid_566298
  var valid_566299 = path.getOrDefault("subscriptionId")
  valid_566299 = validateParameter(valid_566299, JString, required = true,
                                 default = nil)
  if valid_566299 != nil:
    section.add "subscriptionId", valid_566299
  var valid_566300 = path.getOrDefault("resourceGroupName")
  valid_566300 = validateParameter(valid_566300, JString, required = true,
                                 default = nil)
  if valid_566300 != nil:
    section.add "resourceGroupName", valid_566300
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566301 = query.getOrDefault("api-version")
  valid_566301 = validateParameter(valid_566301, JString, required = true,
                                 default = nil)
  if valid_566301 != nil:
    section.add "api-version", valid_566301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566302: Call_WebAppsGetConfigurationSlot_566294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_566302.validator(path, query, header, formData, body)
  let scheme = call_566302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566302.url(scheme.get, call_566302.host, call_566302.base,
                         call_566302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566302, url, valid)

proc call*(call_566303: Call_WebAppsGetConfigurationSlot_566294; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566304 = newJObject()
  var query_566305 = newJObject()
  add(path_566304, "slot", newJString(slot))
  add(query_566305, "api-version", newJString(apiVersion))
  add(path_566304, "name", newJString(name))
  add(path_566304, "subscriptionId", newJString(subscriptionId))
  add(path_566304, "resourceGroupName", newJString(resourceGroupName))
  result = call_566303.call(path_566304, query_566305, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_566294(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_566295, base: "",
    url: url_WebAppsGetConfigurationSlot_566296, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_566320 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConfigurationSlot_566322(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_566321(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566323 = path.getOrDefault("slot")
  valid_566323 = validateParameter(valid_566323, JString, required = true,
                                 default = nil)
  if valid_566323 != nil:
    section.add "slot", valid_566323
  var valid_566324 = path.getOrDefault("name")
  valid_566324 = validateParameter(valid_566324, JString, required = true,
                                 default = nil)
  if valid_566324 != nil:
    section.add "name", valid_566324
  var valid_566325 = path.getOrDefault("subscriptionId")
  valid_566325 = validateParameter(valid_566325, JString, required = true,
                                 default = nil)
  if valid_566325 != nil:
    section.add "subscriptionId", valid_566325
  var valid_566326 = path.getOrDefault("resourceGroupName")
  valid_566326 = validateParameter(valid_566326, JString, required = true,
                                 default = nil)
  if valid_566326 != nil:
    section.add "resourceGroupName", valid_566326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566327 = query.getOrDefault("api-version")
  valid_566327 = validateParameter(valid_566327, JString, required = true,
                                 default = nil)
  if valid_566327 != nil:
    section.add "api-version", valid_566327
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566329: Call_WebAppsUpdateConfigurationSlot_566320; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_566329.validator(path, query, header, formData, body)
  let scheme = call_566329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566329.url(scheme.get, call_566329.host, call_566329.base,
                         call_566329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566329, url, valid)

proc call*(call_566330: Call_WebAppsUpdateConfigurationSlot_566320; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566331 = newJObject()
  var query_566332 = newJObject()
  var body_566333 = newJObject()
  add(path_566331, "slot", newJString(slot))
  add(query_566332, "api-version", newJString(apiVersion))
  add(path_566331, "name", newJString(name))
  add(path_566331, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566333 = siteConfig
  add(path_566331, "resourceGroupName", newJString(resourceGroupName))
  result = call_566330.call(path_566331, query_566332, nil, nil, body_566333)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_566320(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_566321, base: "",
    url: url_WebAppsUpdateConfigurationSlot_566322, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_566334 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationSnapshotInfoSlot_566336(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_566335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566337 = path.getOrDefault("slot")
  valid_566337 = validateParameter(valid_566337, JString, required = true,
                                 default = nil)
  if valid_566337 != nil:
    section.add "slot", valid_566337
  var valid_566338 = path.getOrDefault("name")
  valid_566338 = validateParameter(valid_566338, JString, required = true,
                                 default = nil)
  if valid_566338 != nil:
    section.add "name", valid_566338
  var valid_566339 = path.getOrDefault("subscriptionId")
  valid_566339 = validateParameter(valid_566339, JString, required = true,
                                 default = nil)
  if valid_566339 != nil:
    section.add "subscriptionId", valid_566339
  var valid_566340 = path.getOrDefault("resourceGroupName")
  valid_566340 = validateParameter(valid_566340, JString, required = true,
                                 default = nil)
  if valid_566340 != nil:
    section.add "resourceGroupName", valid_566340
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566341 = query.getOrDefault("api-version")
  valid_566341 = validateParameter(valid_566341, JString, required = true,
                                 default = nil)
  if valid_566341 != nil:
    section.add "api-version", valid_566341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566342: Call_WebAppsListConfigurationSnapshotInfoSlot_566334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_566342.validator(path, query, header, formData, body)
  let scheme = call_566342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566342.url(scheme.get, call_566342.host, call_566342.base,
                         call_566342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566342, url, valid)

proc call*(call_566343: Call_WebAppsListConfigurationSnapshotInfoSlot_566334;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566344 = newJObject()
  var query_566345 = newJObject()
  add(path_566344, "slot", newJString(slot))
  add(query_566345, "api-version", newJString(apiVersion))
  add(path_566344, "name", newJString(name))
  add(path_566344, "subscriptionId", newJString(subscriptionId))
  add(path_566344, "resourceGroupName", newJString(resourceGroupName))
  result = call_566343.call(path_566344, query_566345, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_566334(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_566335, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_566336,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_566346 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSnapshotSlot_566348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_566347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_566349 = path.getOrDefault("snapshotId")
  valid_566349 = validateParameter(valid_566349, JString, required = true,
                                 default = nil)
  if valid_566349 != nil:
    section.add "snapshotId", valid_566349
  var valid_566350 = path.getOrDefault("slot")
  valid_566350 = validateParameter(valid_566350, JString, required = true,
                                 default = nil)
  if valid_566350 != nil:
    section.add "slot", valid_566350
  var valid_566351 = path.getOrDefault("name")
  valid_566351 = validateParameter(valid_566351, JString, required = true,
                                 default = nil)
  if valid_566351 != nil:
    section.add "name", valid_566351
  var valid_566352 = path.getOrDefault("subscriptionId")
  valid_566352 = validateParameter(valid_566352, JString, required = true,
                                 default = nil)
  if valid_566352 != nil:
    section.add "subscriptionId", valid_566352
  var valid_566353 = path.getOrDefault("resourceGroupName")
  valid_566353 = validateParameter(valid_566353, JString, required = true,
                                 default = nil)
  if valid_566353 != nil:
    section.add "resourceGroupName", valid_566353
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566354 = query.getOrDefault("api-version")
  valid_566354 = validateParameter(valid_566354, JString, required = true,
                                 default = nil)
  if valid_566354 != nil:
    section.add "api-version", valid_566354
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566355: Call_WebAppsGetConfigurationSnapshotSlot_566346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_566355.validator(path, query, header, formData, body)
  let scheme = call_566355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566355.url(scheme.get, call_566355.host, call_566355.base,
                         call_566355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566355, url, valid)

proc call*(call_566356: Call_WebAppsGetConfigurationSnapshotSlot_566346;
          snapshotId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566357 = newJObject()
  var query_566358 = newJObject()
  add(path_566357, "snapshotId", newJString(snapshotId))
  add(path_566357, "slot", newJString(slot))
  add(query_566358, "api-version", newJString(apiVersion))
  add(path_566357, "name", newJString(name))
  add(path_566357, "subscriptionId", newJString(subscriptionId))
  add(path_566357, "resourceGroupName", newJString(resourceGroupName))
  result = call_566356.call(path_566357, query_566358, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_566346(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_566347, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_566348, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566359 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_566361(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_566360(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_566362 = path.getOrDefault("snapshotId")
  valid_566362 = validateParameter(valid_566362, JString, required = true,
                                 default = nil)
  if valid_566362 != nil:
    section.add "snapshotId", valid_566362
  var valid_566363 = path.getOrDefault("slot")
  valid_566363 = validateParameter(valid_566363, JString, required = true,
                                 default = nil)
  if valid_566363 != nil:
    section.add "slot", valid_566363
  var valid_566364 = path.getOrDefault("name")
  valid_566364 = validateParameter(valid_566364, JString, required = true,
                                 default = nil)
  if valid_566364 != nil:
    section.add "name", valid_566364
  var valid_566365 = path.getOrDefault("subscriptionId")
  valid_566365 = validateParameter(valid_566365, JString, required = true,
                                 default = nil)
  if valid_566365 != nil:
    section.add "subscriptionId", valid_566365
  var valid_566366 = path.getOrDefault("resourceGroupName")
  valid_566366 = validateParameter(valid_566366, JString, required = true,
                                 default = nil)
  if valid_566366 != nil:
    section.add "resourceGroupName", valid_566366
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566367 = query.getOrDefault("api-version")
  valid_566367 = validateParameter(valid_566367, JString, required = true,
                                 default = nil)
  if valid_566367 != nil:
    section.add "api-version", valid_566367
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566368: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566359;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_566368.validator(path, query, header, formData, body)
  let scheme = call_566368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566368.url(scheme.get, call_566368.host, call_566368.base,
                         call_566368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566368, url, valid)

proc call*(call_566369: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566359;
          snapshotId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566370 = newJObject()
  var query_566371 = newJObject()
  add(path_566370, "snapshotId", newJString(snapshotId))
  add(path_566370, "slot", newJString(slot))
  add(query_566371, "api-version", newJString(apiVersion))
  add(path_566370, "name", newJString(name))
  add(path_566370, "subscriptionId", newJString(subscriptionId))
  add(path_566370, "resourceGroupName", newJString(resourceGroupName))
  result = call_566369.call(path_566370, query_566371, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566359(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_566360,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_566361,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_566372 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogsSlot_566374(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_566373(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566375 = path.getOrDefault("slot")
  valid_566375 = validateParameter(valid_566375, JString, required = true,
                                 default = nil)
  if valid_566375 != nil:
    section.add "slot", valid_566375
  var valid_566376 = path.getOrDefault("name")
  valid_566376 = validateParameter(valid_566376, JString, required = true,
                                 default = nil)
  if valid_566376 != nil:
    section.add "name", valid_566376
  var valid_566377 = path.getOrDefault("subscriptionId")
  valid_566377 = validateParameter(valid_566377, JString, required = true,
                                 default = nil)
  if valid_566377 != nil:
    section.add "subscriptionId", valid_566377
  var valid_566378 = path.getOrDefault("resourceGroupName")
  valid_566378 = validateParameter(valid_566378, JString, required = true,
                                 default = nil)
  if valid_566378 != nil:
    section.add "resourceGroupName", valid_566378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566379 = query.getOrDefault("api-version")
  valid_566379 = validateParameter(valid_566379, JString, required = true,
                                 default = nil)
  if valid_566379 != nil:
    section.add "api-version", valid_566379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566380: Call_WebAppsGetWebSiteContainerLogsSlot_566372;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_566380.validator(path, query, header, formData, body)
  let scheme = call_566380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566380.url(scheme.get, call_566380.host, call_566380.base,
                         call_566380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566380, url, valid)

proc call*(call_566381: Call_WebAppsGetWebSiteContainerLogsSlot_566372;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566382 = newJObject()
  var query_566383 = newJObject()
  add(path_566382, "slot", newJString(slot))
  add(query_566383, "api-version", newJString(apiVersion))
  add(path_566382, "name", newJString(name))
  add(path_566382, "subscriptionId", newJString(subscriptionId))
  add(path_566382, "resourceGroupName", newJString(resourceGroupName))
  result = call_566381.call(path_566382, query_566383, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_566372(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_566373, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_566374, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZipSlot_566384 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContainerLogsZipSlot_566386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZipSlot_566385(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566387 = path.getOrDefault("slot")
  valid_566387 = validateParameter(valid_566387, JString, required = true,
                                 default = nil)
  if valid_566387 != nil:
    section.add "slot", valid_566387
  var valid_566388 = path.getOrDefault("name")
  valid_566388 = validateParameter(valid_566388, JString, required = true,
                                 default = nil)
  if valid_566388 != nil:
    section.add "name", valid_566388
  var valid_566389 = path.getOrDefault("subscriptionId")
  valid_566389 = validateParameter(valid_566389, JString, required = true,
                                 default = nil)
  if valid_566389 != nil:
    section.add "subscriptionId", valid_566389
  var valid_566390 = path.getOrDefault("resourceGroupName")
  valid_566390 = validateParameter(valid_566390, JString, required = true,
                                 default = nil)
  if valid_566390 != nil:
    section.add "resourceGroupName", valid_566390
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566391 = query.getOrDefault("api-version")
  valid_566391 = validateParameter(valid_566391, JString, required = true,
                                 default = nil)
  if valid_566391 != nil:
    section.add "api-version", valid_566391
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566392: Call_WebAppsGetContainerLogsZipSlot_566384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_566392.validator(path, query, header, formData, body)
  let scheme = call_566392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566392.url(scheme.get, call_566392.host, call_566392.base,
                         call_566392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566392, url, valid)

proc call*(call_566393: Call_WebAppsGetContainerLogsZipSlot_566384; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566394 = newJObject()
  var query_566395 = newJObject()
  add(path_566394, "slot", newJString(slot))
  add(query_566395, "api-version", newJString(apiVersion))
  add(path_566394, "name", newJString(name))
  add(path_566394, "subscriptionId", newJString(subscriptionId))
  add(path_566394, "resourceGroupName", newJString(resourceGroupName))
  result = call_566393.call(path_566394, query_566395, nil, nil, nil)

var webAppsGetContainerLogsZipSlot* = Call_WebAppsGetContainerLogsZipSlot_566384(
    name: "webAppsGetContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZipSlot_566385, base: "",
    url: url_WebAppsGetContainerLogsZipSlot_566386, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_566396 = ref object of OpenApiRestCall_563564
proc url_WebAppsListContinuousWebJobsSlot_566398(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_566397(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566399 = path.getOrDefault("slot")
  valid_566399 = validateParameter(valid_566399, JString, required = true,
                                 default = nil)
  if valid_566399 != nil:
    section.add "slot", valid_566399
  var valid_566400 = path.getOrDefault("name")
  valid_566400 = validateParameter(valid_566400, JString, required = true,
                                 default = nil)
  if valid_566400 != nil:
    section.add "name", valid_566400
  var valid_566401 = path.getOrDefault("subscriptionId")
  valid_566401 = validateParameter(valid_566401, JString, required = true,
                                 default = nil)
  if valid_566401 != nil:
    section.add "subscriptionId", valid_566401
  var valid_566402 = path.getOrDefault("resourceGroupName")
  valid_566402 = validateParameter(valid_566402, JString, required = true,
                                 default = nil)
  if valid_566402 != nil:
    section.add "resourceGroupName", valid_566402
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566403 = query.getOrDefault("api-version")
  valid_566403 = validateParameter(valid_566403, JString, required = true,
                                 default = nil)
  if valid_566403 != nil:
    section.add "api-version", valid_566403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566404: Call_WebAppsListContinuousWebJobsSlot_566396;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_566404.validator(path, query, header, formData, body)
  let scheme = call_566404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566404.url(scheme.get, call_566404.host, call_566404.base,
                         call_566404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566404, url, valid)

proc call*(call_566405: Call_WebAppsListContinuousWebJobsSlot_566396; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566406 = newJObject()
  var query_566407 = newJObject()
  add(path_566406, "slot", newJString(slot))
  add(query_566407, "api-version", newJString(apiVersion))
  add(path_566406, "name", newJString(name))
  add(path_566406, "subscriptionId", newJString(subscriptionId))
  add(path_566406, "resourceGroupName", newJString(resourceGroupName))
  result = call_566405.call(path_566406, query_566407, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_566396(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_566397, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_566398, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_566408 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContinuousWebJobSlot_566410(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_566409(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566411 = path.getOrDefault("slot")
  valid_566411 = validateParameter(valid_566411, JString, required = true,
                                 default = nil)
  if valid_566411 != nil:
    section.add "slot", valid_566411
  var valid_566412 = path.getOrDefault("name")
  valid_566412 = validateParameter(valid_566412, JString, required = true,
                                 default = nil)
  if valid_566412 != nil:
    section.add "name", valid_566412
  var valid_566413 = path.getOrDefault("subscriptionId")
  valid_566413 = validateParameter(valid_566413, JString, required = true,
                                 default = nil)
  if valid_566413 != nil:
    section.add "subscriptionId", valid_566413
  var valid_566414 = path.getOrDefault("webJobName")
  valid_566414 = validateParameter(valid_566414, JString, required = true,
                                 default = nil)
  if valid_566414 != nil:
    section.add "webJobName", valid_566414
  var valid_566415 = path.getOrDefault("resourceGroupName")
  valid_566415 = validateParameter(valid_566415, JString, required = true,
                                 default = nil)
  if valid_566415 != nil:
    section.add "resourceGroupName", valid_566415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566416 = query.getOrDefault("api-version")
  valid_566416 = validateParameter(valid_566416, JString, required = true,
                                 default = nil)
  if valid_566416 != nil:
    section.add "api-version", valid_566416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566417: Call_WebAppsGetContinuousWebJobSlot_566408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566417.validator(path, query, header, formData, body)
  let scheme = call_566417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566417.url(scheme.get, call_566417.host, call_566417.base,
                         call_566417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566417, url, valid)

proc call*(call_566418: Call_WebAppsGetContinuousWebJobSlot_566408; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566419 = newJObject()
  var query_566420 = newJObject()
  add(path_566419, "slot", newJString(slot))
  add(query_566420, "api-version", newJString(apiVersion))
  add(path_566419, "name", newJString(name))
  add(path_566419, "subscriptionId", newJString(subscriptionId))
  add(path_566419, "webJobName", newJString(webJobName))
  add(path_566419, "resourceGroupName", newJString(resourceGroupName))
  result = call_566418.call(path_566419, query_566420, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_566408(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_566409, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_566410, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_566421 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteContinuousWebJobSlot_566423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_566422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566424 = path.getOrDefault("slot")
  valid_566424 = validateParameter(valid_566424, JString, required = true,
                                 default = nil)
  if valid_566424 != nil:
    section.add "slot", valid_566424
  var valid_566425 = path.getOrDefault("name")
  valid_566425 = validateParameter(valid_566425, JString, required = true,
                                 default = nil)
  if valid_566425 != nil:
    section.add "name", valid_566425
  var valid_566426 = path.getOrDefault("subscriptionId")
  valid_566426 = validateParameter(valid_566426, JString, required = true,
                                 default = nil)
  if valid_566426 != nil:
    section.add "subscriptionId", valid_566426
  var valid_566427 = path.getOrDefault("webJobName")
  valid_566427 = validateParameter(valid_566427, JString, required = true,
                                 default = nil)
  if valid_566427 != nil:
    section.add "webJobName", valid_566427
  var valid_566428 = path.getOrDefault("resourceGroupName")
  valid_566428 = validateParameter(valid_566428, JString, required = true,
                                 default = nil)
  if valid_566428 != nil:
    section.add "resourceGroupName", valid_566428
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566429 = query.getOrDefault("api-version")
  valid_566429 = validateParameter(valid_566429, JString, required = true,
                                 default = nil)
  if valid_566429 != nil:
    section.add "api-version", valid_566429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566430: Call_WebAppsDeleteContinuousWebJobSlot_566421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566430.validator(path, query, header, formData, body)
  let scheme = call_566430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566430.url(scheme.get, call_566430.host, call_566430.base,
                         call_566430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566430, url, valid)

proc call*(call_566431: Call_WebAppsDeleteContinuousWebJobSlot_566421;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566432 = newJObject()
  var query_566433 = newJObject()
  add(path_566432, "slot", newJString(slot))
  add(query_566433, "api-version", newJString(apiVersion))
  add(path_566432, "name", newJString(name))
  add(path_566432, "subscriptionId", newJString(subscriptionId))
  add(path_566432, "webJobName", newJString(webJobName))
  add(path_566432, "resourceGroupName", newJString(resourceGroupName))
  result = call_566431.call(path_566432, query_566433, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_566421(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_566422, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_566423, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_566434 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartContinuousWebJobSlot_566436(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_566435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566437 = path.getOrDefault("slot")
  valid_566437 = validateParameter(valid_566437, JString, required = true,
                                 default = nil)
  if valid_566437 != nil:
    section.add "slot", valid_566437
  var valid_566438 = path.getOrDefault("name")
  valid_566438 = validateParameter(valid_566438, JString, required = true,
                                 default = nil)
  if valid_566438 != nil:
    section.add "name", valid_566438
  var valid_566439 = path.getOrDefault("subscriptionId")
  valid_566439 = validateParameter(valid_566439, JString, required = true,
                                 default = nil)
  if valid_566439 != nil:
    section.add "subscriptionId", valid_566439
  var valid_566440 = path.getOrDefault("webJobName")
  valid_566440 = validateParameter(valid_566440, JString, required = true,
                                 default = nil)
  if valid_566440 != nil:
    section.add "webJobName", valid_566440
  var valid_566441 = path.getOrDefault("resourceGroupName")
  valid_566441 = validateParameter(valid_566441, JString, required = true,
                                 default = nil)
  if valid_566441 != nil:
    section.add "resourceGroupName", valid_566441
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566442 = query.getOrDefault("api-version")
  valid_566442 = validateParameter(valid_566442, JString, required = true,
                                 default = nil)
  if valid_566442 != nil:
    section.add "api-version", valid_566442
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566443: Call_WebAppsStartContinuousWebJobSlot_566434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_566443.validator(path, query, header, formData, body)
  let scheme = call_566443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566443.url(scheme.get, call_566443.host, call_566443.base,
                         call_566443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566443, url, valid)

proc call*(call_566444: Call_WebAppsStartContinuousWebJobSlot_566434; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566445 = newJObject()
  var query_566446 = newJObject()
  add(path_566445, "slot", newJString(slot))
  add(query_566446, "api-version", newJString(apiVersion))
  add(path_566445, "name", newJString(name))
  add(path_566445, "subscriptionId", newJString(subscriptionId))
  add(path_566445, "webJobName", newJString(webJobName))
  add(path_566445, "resourceGroupName", newJString(resourceGroupName))
  result = call_566444.call(path_566445, query_566446, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_566434(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_566435, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_566436, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_566447 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopContinuousWebJobSlot_566449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_566448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566450 = path.getOrDefault("slot")
  valid_566450 = validateParameter(valid_566450, JString, required = true,
                                 default = nil)
  if valid_566450 != nil:
    section.add "slot", valid_566450
  var valid_566451 = path.getOrDefault("name")
  valid_566451 = validateParameter(valid_566451, JString, required = true,
                                 default = nil)
  if valid_566451 != nil:
    section.add "name", valid_566451
  var valid_566452 = path.getOrDefault("subscriptionId")
  valid_566452 = validateParameter(valid_566452, JString, required = true,
                                 default = nil)
  if valid_566452 != nil:
    section.add "subscriptionId", valid_566452
  var valid_566453 = path.getOrDefault("webJobName")
  valid_566453 = validateParameter(valid_566453, JString, required = true,
                                 default = nil)
  if valid_566453 != nil:
    section.add "webJobName", valid_566453
  var valid_566454 = path.getOrDefault("resourceGroupName")
  valid_566454 = validateParameter(valid_566454, JString, required = true,
                                 default = nil)
  if valid_566454 != nil:
    section.add "resourceGroupName", valid_566454
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566455 = query.getOrDefault("api-version")
  valid_566455 = validateParameter(valid_566455, JString, required = true,
                                 default = nil)
  if valid_566455 != nil:
    section.add "api-version", valid_566455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566456: Call_WebAppsStopContinuousWebJobSlot_566447;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_566456.validator(path, query, header, formData, body)
  let scheme = call_566456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566456.url(scheme.get, call_566456.host, call_566456.base,
                         call_566456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566456, url, valid)

proc call*(call_566457: Call_WebAppsStopContinuousWebJobSlot_566447; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566458 = newJObject()
  var query_566459 = newJObject()
  add(path_566458, "slot", newJString(slot))
  add(query_566459, "api-version", newJString(apiVersion))
  add(path_566458, "name", newJString(name))
  add(path_566458, "subscriptionId", newJString(subscriptionId))
  add(path_566458, "webJobName", newJString(webJobName))
  add(path_566458, "resourceGroupName", newJString(resourceGroupName))
  result = call_566457.call(path_566458, query_566459, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_566447(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_566448, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_566449, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_566460 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentsSlot_566462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_566461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566463 = path.getOrDefault("slot")
  valid_566463 = validateParameter(valid_566463, JString, required = true,
                                 default = nil)
  if valid_566463 != nil:
    section.add "slot", valid_566463
  var valid_566464 = path.getOrDefault("name")
  valid_566464 = validateParameter(valid_566464, JString, required = true,
                                 default = nil)
  if valid_566464 != nil:
    section.add "name", valid_566464
  var valid_566465 = path.getOrDefault("subscriptionId")
  valid_566465 = validateParameter(valid_566465, JString, required = true,
                                 default = nil)
  if valid_566465 != nil:
    section.add "subscriptionId", valid_566465
  var valid_566466 = path.getOrDefault("resourceGroupName")
  valid_566466 = validateParameter(valid_566466, JString, required = true,
                                 default = nil)
  if valid_566466 != nil:
    section.add "resourceGroupName", valid_566466
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566467 = query.getOrDefault("api-version")
  valid_566467 = validateParameter(valid_566467, JString, required = true,
                                 default = nil)
  if valid_566467 != nil:
    section.add "api-version", valid_566467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566468: Call_WebAppsListDeploymentsSlot_566460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_566468.validator(path, query, header, formData, body)
  let scheme = call_566468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566468.url(scheme.get, call_566468.host, call_566468.base,
                         call_566468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566468, url, valid)

proc call*(call_566469: Call_WebAppsListDeploymentsSlot_566460; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566470 = newJObject()
  var query_566471 = newJObject()
  add(path_566470, "slot", newJString(slot))
  add(query_566471, "api-version", newJString(apiVersion))
  add(path_566470, "name", newJString(name))
  add(path_566470, "subscriptionId", newJString(subscriptionId))
  add(path_566470, "resourceGroupName", newJString(resourceGroupName))
  result = call_566469.call(path_566470, query_566471, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_566460(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_566461, base: "",
    url: url_WebAppsListDeploymentsSlot_566462, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_566485 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateDeploymentSlot_566487(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_566486(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566488 = path.getOrDefault("slot")
  valid_566488 = validateParameter(valid_566488, JString, required = true,
                                 default = nil)
  if valid_566488 != nil:
    section.add "slot", valid_566488
  var valid_566489 = path.getOrDefault("id")
  valid_566489 = validateParameter(valid_566489, JString, required = true,
                                 default = nil)
  if valid_566489 != nil:
    section.add "id", valid_566489
  var valid_566490 = path.getOrDefault("name")
  valid_566490 = validateParameter(valid_566490, JString, required = true,
                                 default = nil)
  if valid_566490 != nil:
    section.add "name", valid_566490
  var valid_566491 = path.getOrDefault("subscriptionId")
  valid_566491 = validateParameter(valid_566491, JString, required = true,
                                 default = nil)
  if valid_566491 != nil:
    section.add "subscriptionId", valid_566491
  var valid_566492 = path.getOrDefault("resourceGroupName")
  valid_566492 = validateParameter(valid_566492, JString, required = true,
                                 default = nil)
  if valid_566492 != nil:
    section.add "resourceGroupName", valid_566492
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566493 = query.getOrDefault("api-version")
  valid_566493 = validateParameter(valid_566493, JString, required = true,
                                 default = nil)
  if valid_566493 != nil:
    section.add "api-version", valid_566493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566495: Call_WebAppsCreateDeploymentSlot_566485; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_566495.validator(path, query, header, formData, body)
  let scheme = call_566495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566495.url(scheme.get, call_566495.host, call_566495.base,
                         call_566495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566495, url, valid)

proc call*(call_566496: Call_WebAppsCreateDeploymentSlot_566485; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          deployment: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deployment: JObject (required)
  ##             : Deployment details.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566497 = newJObject()
  var query_566498 = newJObject()
  var body_566499 = newJObject()
  add(path_566497, "slot", newJString(slot))
  add(query_566498, "api-version", newJString(apiVersion))
  add(path_566497, "id", newJString(id))
  add(path_566497, "name", newJString(name))
  add(path_566497, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_566499 = deployment
  add(path_566497, "resourceGroupName", newJString(resourceGroupName))
  result = call_566496.call(path_566497, query_566498, nil, nil, body_566499)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_566485(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_566486, base: "",
    url: url_WebAppsCreateDeploymentSlot_566487, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_566472 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDeploymentSlot_566474(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_566473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566475 = path.getOrDefault("slot")
  valid_566475 = validateParameter(valid_566475, JString, required = true,
                                 default = nil)
  if valid_566475 != nil:
    section.add "slot", valid_566475
  var valid_566476 = path.getOrDefault("id")
  valid_566476 = validateParameter(valid_566476, JString, required = true,
                                 default = nil)
  if valid_566476 != nil:
    section.add "id", valid_566476
  var valid_566477 = path.getOrDefault("name")
  valid_566477 = validateParameter(valid_566477, JString, required = true,
                                 default = nil)
  if valid_566477 != nil:
    section.add "name", valid_566477
  var valid_566478 = path.getOrDefault("subscriptionId")
  valid_566478 = validateParameter(valid_566478, JString, required = true,
                                 default = nil)
  if valid_566478 != nil:
    section.add "subscriptionId", valid_566478
  var valid_566479 = path.getOrDefault("resourceGroupName")
  valid_566479 = validateParameter(valid_566479, JString, required = true,
                                 default = nil)
  if valid_566479 != nil:
    section.add "resourceGroupName", valid_566479
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566480 = query.getOrDefault("api-version")
  valid_566480 = validateParameter(valid_566480, JString, required = true,
                                 default = nil)
  if valid_566480 != nil:
    section.add "api-version", valid_566480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566481: Call_WebAppsGetDeploymentSlot_566472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566481.validator(path, query, header, formData, body)
  let scheme = call_566481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566481.url(scheme.get, call_566481.host, call_566481.base,
                         call_566481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566481, url, valid)

proc call*(call_566482: Call_WebAppsGetDeploymentSlot_566472; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566483 = newJObject()
  var query_566484 = newJObject()
  add(path_566483, "slot", newJString(slot))
  add(query_566484, "api-version", newJString(apiVersion))
  add(path_566483, "id", newJString(id))
  add(path_566483, "name", newJString(name))
  add(path_566483, "subscriptionId", newJString(subscriptionId))
  add(path_566483, "resourceGroupName", newJString(resourceGroupName))
  result = call_566482.call(path_566483, query_566484, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_566472(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_566473, base: "",
    url: url_WebAppsGetDeploymentSlot_566474, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_566500 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDeploymentSlot_566502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_566501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566503 = path.getOrDefault("slot")
  valid_566503 = validateParameter(valid_566503, JString, required = true,
                                 default = nil)
  if valid_566503 != nil:
    section.add "slot", valid_566503
  var valid_566504 = path.getOrDefault("id")
  valid_566504 = validateParameter(valid_566504, JString, required = true,
                                 default = nil)
  if valid_566504 != nil:
    section.add "id", valid_566504
  var valid_566505 = path.getOrDefault("name")
  valid_566505 = validateParameter(valid_566505, JString, required = true,
                                 default = nil)
  if valid_566505 != nil:
    section.add "name", valid_566505
  var valid_566506 = path.getOrDefault("subscriptionId")
  valid_566506 = validateParameter(valid_566506, JString, required = true,
                                 default = nil)
  if valid_566506 != nil:
    section.add "subscriptionId", valid_566506
  var valid_566507 = path.getOrDefault("resourceGroupName")
  valid_566507 = validateParameter(valid_566507, JString, required = true,
                                 default = nil)
  if valid_566507 != nil:
    section.add "resourceGroupName", valid_566507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566508 = query.getOrDefault("api-version")
  valid_566508 = validateParameter(valid_566508, JString, required = true,
                                 default = nil)
  if valid_566508 != nil:
    section.add "api-version", valid_566508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566509: Call_WebAppsDeleteDeploymentSlot_566500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566509.validator(path, query, header, formData, body)
  let scheme = call_566509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566509.url(scheme.get, call_566509.host, call_566509.base,
                         call_566509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566509, url, valid)

proc call*(call_566510: Call_WebAppsDeleteDeploymentSlot_566500; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566511 = newJObject()
  var query_566512 = newJObject()
  add(path_566511, "slot", newJString(slot))
  add(query_566512, "api-version", newJString(apiVersion))
  add(path_566511, "id", newJString(id))
  add(path_566511, "name", newJString(name))
  add(path_566511, "subscriptionId", newJString(subscriptionId))
  add(path_566511, "resourceGroupName", newJString(resourceGroupName))
  result = call_566510.call(path_566511, query_566512, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_566500(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_566501, base: "",
    url: url_WebAppsDeleteDeploymentSlot_566502, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_566513 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentLogSlot_566515(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_566514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566516 = path.getOrDefault("slot")
  valid_566516 = validateParameter(valid_566516, JString, required = true,
                                 default = nil)
  if valid_566516 != nil:
    section.add "slot", valid_566516
  var valid_566517 = path.getOrDefault("id")
  valid_566517 = validateParameter(valid_566517, JString, required = true,
                                 default = nil)
  if valid_566517 != nil:
    section.add "id", valid_566517
  var valid_566518 = path.getOrDefault("name")
  valid_566518 = validateParameter(valid_566518, JString, required = true,
                                 default = nil)
  if valid_566518 != nil:
    section.add "name", valid_566518
  var valid_566519 = path.getOrDefault("subscriptionId")
  valid_566519 = validateParameter(valid_566519, JString, required = true,
                                 default = nil)
  if valid_566519 != nil:
    section.add "subscriptionId", valid_566519
  var valid_566520 = path.getOrDefault("resourceGroupName")
  valid_566520 = validateParameter(valid_566520, JString, required = true,
                                 default = nil)
  if valid_566520 != nil:
    section.add "resourceGroupName", valid_566520
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566521 = query.getOrDefault("api-version")
  valid_566521 = validateParameter(valid_566521, JString, required = true,
                                 default = nil)
  if valid_566521 != nil:
    section.add "api-version", valid_566521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566522: Call_WebAppsListDeploymentLogSlot_566513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_566522.validator(path, query, header, formData, body)
  let scheme = call_566522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566522.url(scheme.get, call_566522.host, call_566522.base,
                         call_566522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566522, url, valid)

proc call*(call_566523: Call_WebAppsListDeploymentLogSlot_566513; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566524 = newJObject()
  var query_566525 = newJObject()
  add(path_566524, "slot", newJString(slot))
  add(query_566525, "api-version", newJString(apiVersion))
  add(path_566524, "id", newJString(id))
  add(path_566524, "name", newJString(name))
  add(path_566524, "subscriptionId", newJString(subscriptionId))
  add(path_566524, "resourceGroupName", newJString(resourceGroupName))
  result = call_566523.call(path_566524, query_566525, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_566513(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_566514, base: "",
    url: url_WebAppsListDeploymentLogSlot_566515, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackupSlot_566526 = ref object of OpenApiRestCall_563564
proc url_WebAppsDiscoverBackupSlot_566528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackupSlot_566527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566529 = path.getOrDefault("slot")
  valid_566529 = validateParameter(valid_566529, JString, required = true,
                                 default = nil)
  if valid_566529 != nil:
    section.add "slot", valid_566529
  var valid_566530 = path.getOrDefault("name")
  valid_566530 = validateParameter(valid_566530, JString, required = true,
                                 default = nil)
  if valid_566530 != nil:
    section.add "name", valid_566530
  var valid_566531 = path.getOrDefault("subscriptionId")
  valid_566531 = validateParameter(valid_566531, JString, required = true,
                                 default = nil)
  if valid_566531 != nil:
    section.add "subscriptionId", valid_566531
  var valid_566532 = path.getOrDefault("resourceGroupName")
  valid_566532 = validateParameter(valid_566532, JString, required = true,
                                 default = nil)
  if valid_566532 != nil:
    section.add "resourceGroupName", valid_566532
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566533 = query.getOrDefault("api-version")
  valid_566533 = validateParameter(valid_566533, JString, required = true,
                                 default = nil)
  if valid_566533 != nil:
    section.add "api-version", valid_566533
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566535: Call_WebAppsDiscoverBackupSlot_566526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_566535.validator(path, query, header, formData, body)
  let scheme = call_566535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566535.url(scheme.get, call_566535.host, call_566535.base,
                         call_566535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566535, url, valid)

proc call*(call_566536: Call_WebAppsDiscoverBackupSlot_566526; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsDiscoverBackupSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_566537 = newJObject()
  var query_566538 = newJObject()
  var body_566539 = newJObject()
  add(path_566537, "slot", newJString(slot))
  add(query_566538, "api-version", newJString(apiVersion))
  add(path_566537, "name", newJString(name))
  add(path_566537, "subscriptionId", newJString(subscriptionId))
  add(path_566537, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_566539 = request
  result = call_566536.call(path_566537, query_566538, nil, nil, body_566539)

var webAppsDiscoverBackupSlot* = Call_WebAppsDiscoverBackupSlot_566526(
    name: "webAppsDiscoverBackupSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
    validator: validate_WebAppsDiscoverBackupSlot_566527, base: "",
    url: url_WebAppsDiscoverBackupSlot_566528, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_566540 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDomainOwnershipIdentifiersSlot_566542(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_566541(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566543 = path.getOrDefault("slot")
  valid_566543 = validateParameter(valid_566543, JString, required = true,
                                 default = nil)
  if valid_566543 != nil:
    section.add "slot", valid_566543
  var valid_566544 = path.getOrDefault("name")
  valid_566544 = validateParameter(valid_566544, JString, required = true,
                                 default = nil)
  if valid_566544 != nil:
    section.add "name", valid_566544
  var valid_566545 = path.getOrDefault("subscriptionId")
  valid_566545 = validateParameter(valid_566545, JString, required = true,
                                 default = nil)
  if valid_566545 != nil:
    section.add "subscriptionId", valid_566545
  var valid_566546 = path.getOrDefault("resourceGroupName")
  valid_566546 = validateParameter(valid_566546, JString, required = true,
                                 default = nil)
  if valid_566546 != nil:
    section.add "resourceGroupName", valid_566546
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566547 = query.getOrDefault("api-version")
  valid_566547 = validateParameter(valid_566547, JString, required = true,
                                 default = nil)
  if valid_566547 != nil:
    section.add "api-version", valid_566547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566548: Call_WebAppsListDomainOwnershipIdentifiersSlot_566540;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_566548.validator(path, query, header, formData, body)
  let scheme = call_566548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566548.url(scheme.get, call_566548.host, call_566548.base,
                         call_566548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566548, url, valid)

proc call*(call_566549: Call_WebAppsListDomainOwnershipIdentifiersSlot_566540;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566550 = newJObject()
  var query_566551 = newJObject()
  add(path_566550, "slot", newJString(slot))
  add(query_566551, "api-version", newJString(apiVersion))
  add(path_566550, "name", newJString(name))
  add(path_566550, "subscriptionId", newJString(subscriptionId))
  add(path_566550, "resourceGroupName", newJString(resourceGroupName))
  result = call_566549.call(path_566550, query_566551, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_566540(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_566541,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_566542,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566565 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566567(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566566(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566568 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566568 = validateParameter(valid_566568, JString, required = true,
                                 default = nil)
  if valid_566568 != nil:
    section.add "domainOwnershipIdentifierName", valid_566568
  var valid_566569 = path.getOrDefault("slot")
  valid_566569 = validateParameter(valid_566569, JString, required = true,
                                 default = nil)
  if valid_566569 != nil:
    section.add "slot", valid_566569
  var valid_566570 = path.getOrDefault("name")
  valid_566570 = validateParameter(valid_566570, JString, required = true,
                                 default = nil)
  if valid_566570 != nil:
    section.add "name", valid_566570
  var valid_566571 = path.getOrDefault("subscriptionId")
  valid_566571 = validateParameter(valid_566571, JString, required = true,
                                 default = nil)
  if valid_566571 != nil:
    section.add "subscriptionId", valid_566571
  var valid_566572 = path.getOrDefault("resourceGroupName")
  valid_566572 = validateParameter(valid_566572, JString, required = true,
                                 default = nil)
  if valid_566572 != nil:
    section.add "resourceGroupName", valid_566572
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566573 = query.getOrDefault("api-version")
  valid_566573 = validateParameter(valid_566573, JString, required = true,
                                 default = nil)
  if valid_566573 != nil:
    section.add "api-version", valid_566573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566575: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566565;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_566575.validator(path, query, header, formData, body)
  let scheme = call_566575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566575.url(scheme.get, call_566575.host, call_566575.base,
                         call_566575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566575, url, valid)

proc call*(call_566576: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566565;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566577 = newJObject()
  var query_566578 = newJObject()
  var body_566579 = newJObject()
  add(path_566577, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566577, "slot", newJString(slot))
  add(query_566578, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_566579 = domainOwnershipIdentifier
  add(path_566577, "name", newJString(name))
  add(path_566577, "subscriptionId", newJString(subscriptionId))
  add(path_566577, "resourceGroupName", newJString(resourceGroupName))
  result = call_566576.call(path_566577, query_566578, nil, nil, body_566579)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566565(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566566,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566567,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_566552 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDomainOwnershipIdentifierSlot_566554(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_566553(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566555 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566555 = validateParameter(valid_566555, JString, required = true,
                                 default = nil)
  if valid_566555 != nil:
    section.add "domainOwnershipIdentifierName", valid_566555
  var valid_566556 = path.getOrDefault("slot")
  valid_566556 = validateParameter(valid_566556, JString, required = true,
                                 default = nil)
  if valid_566556 != nil:
    section.add "slot", valid_566556
  var valid_566557 = path.getOrDefault("name")
  valid_566557 = validateParameter(valid_566557, JString, required = true,
                                 default = nil)
  if valid_566557 != nil:
    section.add "name", valid_566557
  var valid_566558 = path.getOrDefault("subscriptionId")
  valid_566558 = validateParameter(valid_566558, JString, required = true,
                                 default = nil)
  if valid_566558 != nil:
    section.add "subscriptionId", valid_566558
  var valid_566559 = path.getOrDefault("resourceGroupName")
  valid_566559 = validateParameter(valid_566559, JString, required = true,
                                 default = nil)
  if valid_566559 != nil:
    section.add "resourceGroupName", valid_566559
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566560 = query.getOrDefault("api-version")
  valid_566560 = validateParameter(valid_566560, JString, required = true,
                                 default = nil)
  if valid_566560 != nil:
    section.add "api-version", valid_566560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566561: Call_WebAppsGetDomainOwnershipIdentifierSlot_566552;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_566561.validator(path, query, header, formData, body)
  let scheme = call_566561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566561.url(scheme.get, call_566561.host, call_566561.base,
                         call_566561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566561, url, valid)

proc call*(call_566562: Call_WebAppsGetDomainOwnershipIdentifierSlot_566552;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566563 = newJObject()
  var query_566564 = newJObject()
  add(path_566563, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566563, "slot", newJString(slot))
  add(query_566564, "api-version", newJString(apiVersion))
  add(path_566563, "name", newJString(name))
  add(path_566563, "subscriptionId", newJString(subscriptionId))
  add(path_566563, "resourceGroupName", newJString(resourceGroupName))
  result = call_566562.call(path_566563, query_566564, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_566552(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_566553, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_566554,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566593 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_566595(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_566594(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566596 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566596 = validateParameter(valid_566596, JString, required = true,
                                 default = nil)
  if valid_566596 != nil:
    section.add "domainOwnershipIdentifierName", valid_566596
  var valid_566597 = path.getOrDefault("slot")
  valid_566597 = validateParameter(valid_566597, JString, required = true,
                                 default = nil)
  if valid_566597 != nil:
    section.add "slot", valid_566597
  var valid_566598 = path.getOrDefault("name")
  valid_566598 = validateParameter(valid_566598, JString, required = true,
                                 default = nil)
  if valid_566598 != nil:
    section.add "name", valid_566598
  var valid_566599 = path.getOrDefault("subscriptionId")
  valid_566599 = validateParameter(valid_566599, JString, required = true,
                                 default = nil)
  if valid_566599 != nil:
    section.add "subscriptionId", valid_566599
  var valid_566600 = path.getOrDefault("resourceGroupName")
  valid_566600 = validateParameter(valid_566600, JString, required = true,
                                 default = nil)
  if valid_566600 != nil:
    section.add "resourceGroupName", valid_566600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566601 = query.getOrDefault("api-version")
  valid_566601 = validateParameter(valid_566601, JString, required = true,
                                 default = nil)
  if valid_566601 != nil:
    section.add "api-version", valid_566601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566603: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566593;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_566603.validator(path, query, header, formData, body)
  let scheme = call_566603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566603.url(scheme.get, call_566603.host, call_566603.base,
                         call_566603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566603, url, valid)

proc call*(call_566604: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566593;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566605 = newJObject()
  var query_566606 = newJObject()
  var body_566607 = newJObject()
  add(path_566605, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566605, "slot", newJString(slot))
  add(query_566606, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_566607 = domainOwnershipIdentifier
  add(path_566605, "name", newJString(name))
  add(path_566605, "subscriptionId", newJString(subscriptionId))
  add(path_566605, "resourceGroupName", newJString(resourceGroupName))
  result = call_566604.call(path_566605, query_566606, nil, nil, body_566607)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566593(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_566594,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_566595,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566580 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_566582(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_566581(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566583 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566583 = validateParameter(valid_566583, JString, required = true,
                                 default = nil)
  if valid_566583 != nil:
    section.add "domainOwnershipIdentifierName", valid_566583
  var valid_566584 = path.getOrDefault("slot")
  valid_566584 = validateParameter(valid_566584, JString, required = true,
                                 default = nil)
  if valid_566584 != nil:
    section.add "slot", valid_566584
  var valid_566585 = path.getOrDefault("name")
  valid_566585 = validateParameter(valid_566585, JString, required = true,
                                 default = nil)
  if valid_566585 != nil:
    section.add "name", valid_566585
  var valid_566586 = path.getOrDefault("subscriptionId")
  valid_566586 = validateParameter(valid_566586, JString, required = true,
                                 default = nil)
  if valid_566586 != nil:
    section.add "subscriptionId", valid_566586
  var valid_566587 = path.getOrDefault("resourceGroupName")
  valid_566587 = validateParameter(valid_566587, JString, required = true,
                                 default = nil)
  if valid_566587 != nil:
    section.add "resourceGroupName", valid_566587
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566588 = query.getOrDefault("api-version")
  valid_566588 = validateParameter(valid_566588, JString, required = true,
                                 default = nil)
  if valid_566588 != nil:
    section.add "api-version", valid_566588
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566589: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566580;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_566589.validator(path, query, header, formData, body)
  let scheme = call_566589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566589.url(scheme.get, call_566589.host, call_566589.base,
                         call_566589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566589, url, valid)

proc call*(call_566590: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566580;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566591 = newJObject()
  var query_566592 = newJObject()
  add(path_566591, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566591, "slot", newJString(slot))
  add(query_566592, "api-version", newJString(apiVersion))
  add(path_566591, "name", newJString(name))
  add(path_566591, "subscriptionId", newJString(subscriptionId))
  add(path_566591, "resourceGroupName", newJString(resourceGroupName))
  result = call_566590.call(path_566591, query_566592, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566580(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_566581,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_566582,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_566620 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateMSDeployOperationSlot_566622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_566621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566623 = path.getOrDefault("slot")
  valid_566623 = validateParameter(valid_566623, JString, required = true,
                                 default = nil)
  if valid_566623 != nil:
    section.add "slot", valid_566623
  var valid_566624 = path.getOrDefault("name")
  valid_566624 = validateParameter(valid_566624, JString, required = true,
                                 default = nil)
  if valid_566624 != nil:
    section.add "name", valid_566624
  var valid_566625 = path.getOrDefault("subscriptionId")
  valid_566625 = validateParameter(valid_566625, JString, required = true,
                                 default = nil)
  if valid_566625 != nil:
    section.add "subscriptionId", valid_566625
  var valid_566626 = path.getOrDefault("resourceGroupName")
  valid_566626 = validateParameter(valid_566626, JString, required = true,
                                 default = nil)
  if valid_566626 != nil:
    section.add "resourceGroupName", valid_566626
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566627 = query.getOrDefault("api-version")
  valid_566627 = validateParameter(valid_566627, JString, required = true,
                                 default = nil)
  if valid_566627 != nil:
    section.add "api-version", valid_566627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566629: Call_WebAppsCreateMSDeployOperationSlot_566620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_566629.validator(path, query, header, formData, body)
  let scheme = call_566629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566629.url(scheme.get, call_566629.host, call_566629.base,
                         call_566629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566629, url, valid)

proc call*(call_566630: Call_WebAppsCreateMSDeployOperationSlot_566620;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566631 = newJObject()
  var query_566632 = newJObject()
  var body_566633 = newJObject()
  add(path_566631, "slot", newJString(slot))
  add(query_566632, "api-version", newJString(apiVersion))
  add(path_566631, "name", newJString(name))
  add(path_566631, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_566633 = MSDeploy
  add(path_566631, "resourceGroupName", newJString(resourceGroupName))
  result = call_566630.call(path_566631, query_566632, nil, nil, body_566633)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_566620(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_566621, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_566622, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_566608 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployStatusSlot_566610(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_566609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566611 = path.getOrDefault("slot")
  valid_566611 = validateParameter(valid_566611, JString, required = true,
                                 default = nil)
  if valid_566611 != nil:
    section.add "slot", valid_566611
  var valid_566612 = path.getOrDefault("name")
  valid_566612 = validateParameter(valid_566612, JString, required = true,
                                 default = nil)
  if valid_566612 != nil:
    section.add "name", valid_566612
  var valid_566613 = path.getOrDefault("subscriptionId")
  valid_566613 = validateParameter(valid_566613, JString, required = true,
                                 default = nil)
  if valid_566613 != nil:
    section.add "subscriptionId", valid_566613
  var valid_566614 = path.getOrDefault("resourceGroupName")
  valid_566614 = validateParameter(valid_566614, JString, required = true,
                                 default = nil)
  if valid_566614 != nil:
    section.add "resourceGroupName", valid_566614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566615 = query.getOrDefault("api-version")
  valid_566615 = validateParameter(valid_566615, JString, required = true,
                                 default = nil)
  if valid_566615 != nil:
    section.add "api-version", valid_566615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566616: Call_WebAppsGetMSDeployStatusSlot_566608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_566616.validator(path, query, header, formData, body)
  let scheme = call_566616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566616.url(scheme.get, call_566616.host, call_566616.base,
                         call_566616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566616, url, valid)

proc call*(call_566617: Call_WebAppsGetMSDeployStatusSlot_566608; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566618 = newJObject()
  var query_566619 = newJObject()
  add(path_566618, "slot", newJString(slot))
  add(query_566619, "api-version", newJString(apiVersion))
  add(path_566618, "name", newJString(name))
  add(path_566618, "subscriptionId", newJString(subscriptionId))
  add(path_566618, "resourceGroupName", newJString(resourceGroupName))
  result = call_566617.call(path_566618, query_566619, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_566608(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_566609, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_566610, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_566634 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployLogSlot_566636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_566635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566637 = path.getOrDefault("slot")
  valid_566637 = validateParameter(valid_566637, JString, required = true,
                                 default = nil)
  if valid_566637 != nil:
    section.add "slot", valid_566637
  var valid_566638 = path.getOrDefault("name")
  valid_566638 = validateParameter(valid_566638, JString, required = true,
                                 default = nil)
  if valid_566638 != nil:
    section.add "name", valid_566638
  var valid_566639 = path.getOrDefault("subscriptionId")
  valid_566639 = validateParameter(valid_566639, JString, required = true,
                                 default = nil)
  if valid_566639 != nil:
    section.add "subscriptionId", valid_566639
  var valid_566640 = path.getOrDefault("resourceGroupName")
  valid_566640 = validateParameter(valid_566640, JString, required = true,
                                 default = nil)
  if valid_566640 != nil:
    section.add "resourceGroupName", valid_566640
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566641 = query.getOrDefault("api-version")
  valid_566641 = validateParameter(valid_566641, JString, required = true,
                                 default = nil)
  if valid_566641 != nil:
    section.add "api-version", valid_566641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566642: Call_WebAppsGetMSDeployLogSlot_566634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_566642.validator(path, query, header, formData, body)
  let scheme = call_566642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566642.url(scheme.get, call_566642.host, call_566642.base,
                         call_566642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566642, url, valid)

proc call*(call_566643: Call_WebAppsGetMSDeployLogSlot_566634; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566644 = newJObject()
  var query_566645 = newJObject()
  add(path_566644, "slot", newJString(slot))
  add(query_566645, "api-version", newJString(apiVersion))
  add(path_566644, "name", newJString(name))
  add(path_566644, "subscriptionId", newJString(subscriptionId))
  add(path_566644, "resourceGroupName", newJString(resourceGroupName))
  result = call_566643.call(path_566644, query_566645, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_566634(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_566635, base: "",
    url: url_WebAppsGetMSDeployLogSlot_566636, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_566646 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceFunctionsSlot_566648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_566647(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566649 = path.getOrDefault("slot")
  valid_566649 = validateParameter(valid_566649, JString, required = true,
                                 default = nil)
  if valid_566649 != nil:
    section.add "slot", valid_566649
  var valid_566650 = path.getOrDefault("name")
  valid_566650 = validateParameter(valid_566650, JString, required = true,
                                 default = nil)
  if valid_566650 != nil:
    section.add "name", valid_566650
  var valid_566651 = path.getOrDefault("subscriptionId")
  valid_566651 = validateParameter(valid_566651, JString, required = true,
                                 default = nil)
  if valid_566651 != nil:
    section.add "subscriptionId", valid_566651
  var valid_566652 = path.getOrDefault("resourceGroupName")
  valid_566652 = validateParameter(valid_566652, JString, required = true,
                                 default = nil)
  if valid_566652 != nil:
    section.add "resourceGroupName", valid_566652
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566653 = query.getOrDefault("api-version")
  valid_566653 = validateParameter(valid_566653, JString, required = true,
                                 default = nil)
  if valid_566653 != nil:
    section.add "api-version", valid_566653
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566654: Call_WebAppsListInstanceFunctionsSlot_566646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_566654.validator(path, query, header, formData, body)
  let scheme = call_566654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566654.url(scheme.get, call_566654.host, call_566654.base,
                         call_566654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566654, url, valid)

proc call*(call_566655: Call_WebAppsListInstanceFunctionsSlot_566646; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566656 = newJObject()
  var query_566657 = newJObject()
  add(path_566656, "slot", newJString(slot))
  add(query_566657, "api-version", newJString(apiVersion))
  add(path_566656, "name", newJString(name))
  add(path_566656, "subscriptionId", newJString(subscriptionId))
  add(path_566656, "resourceGroupName", newJString(resourceGroupName))
  result = call_566655.call(path_566656, query_566657, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_566646(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_566647, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_566648, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_566658 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunctionsAdminTokenSlot_566660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_566659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566661 = path.getOrDefault("slot")
  valid_566661 = validateParameter(valid_566661, JString, required = true,
                                 default = nil)
  if valid_566661 != nil:
    section.add "slot", valid_566661
  var valid_566662 = path.getOrDefault("name")
  valid_566662 = validateParameter(valid_566662, JString, required = true,
                                 default = nil)
  if valid_566662 != nil:
    section.add "name", valid_566662
  var valid_566663 = path.getOrDefault("subscriptionId")
  valid_566663 = validateParameter(valid_566663, JString, required = true,
                                 default = nil)
  if valid_566663 != nil:
    section.add "subscriptionId", valid_566663
  var valid_566664 = path.getOrDefault("resourceGroupName")
  valid_566664 = validateParameter(valid_566664, JString, required = true,
                                 default = nil)
  if valid_566664 != nil:
    section.add "resourceGroupName", valid_566664
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566665 = query.getOrDefault("api-version")
  valid_566665 = validateParameter(valid_566665, JString, required = true,
                                 default = nil)
  if valid_566665 != nil:
    section.add "api-version", valid_566665
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566666: Call_WebAppsGetFunctionsAdminTokenSlot_566658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_566666.validator(path, query, header, formData, body)
  let scheme = call_566666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566666.url(scheme.get, call_566666.host, call_566666.base,
                         call_566666.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566666, url, valid)

proc call*(call_566667: Call_WebAppsGetFunctionsAdminTokenSlot_566658;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566668 = newJObject()
  var query_566669 = newJObject()
  add(path_566668, "slot", newJString(slot))
  add(query_566669, "api-version", newJString(apiVersion))
  add(path_566668, "name", newJString(name))
  add(path_566668, "subscriptionId", newJString(subscriptionId))
  add(path_566668, "resourceGroupName", newJString(resourceGroupName))
  result = call_566667.call(path_566668, query_566669, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_566658(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_566659, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_566660, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_566683 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceFunctionSlot_566685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_566684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566686 = path.getOrDefault("slot")
  valid_566686 = validateParameter(valid_566686, JString, required = true,
                                 default = nil)
  if valid_566686 != nil:
    section.add "slot", valid_566686
  var valid_566687 = path.getOrDefault("functionName")
  valid_566687 = validateParameter(valid_566687, JString, required = true,
                                 default = nil)
  if valid_566687 != nil:
    section.add "functionName", valid_566687
  var valid_566688 = path.getOrDefault("name")
  valid_566688 = validateParameter(valid_566688, JString, required = true,
                                 default = nil)
  if valid_566688 != nil:
    section.add "name", valid_566688
  var valid_566689 = path.getOrDefault("subscriptionId")
  valid_566689 = validateParameter(valid_566689, JString, required = true,
                                 default = nil)
  if valid_566689 != nil:
    section.add "subscriptionId", valid_566689
  var valid_566690 = path.getOrDefault("resourceGroupName")
  valid_566690 = validateParameter(valid_566690, JString, required = true,
                                 default = nil)
  if valid_566690 != nil:
    section.add "resourceGroupName", valid_566690
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566691 = query.getOrDefault("api-version")
  valid_566691 = validateParameter(valid_566691, JString, required = true,
                                 default = nil)
  if valid_566691 != nil:
    section.add "api-version", valid_566691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566693: Call_WebAppsCreateInstanceFunctionSlot_566683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_566693.validator(path, query, header, formData, body)
  let scheme = call_566693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566693.url(scheme.get, call_566693.host, call_566693.base,
                         call_566693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566693, url, valid)

proc call*(call_566694: Call_WebAppsCreateInstanceFunctionSlot_566683;
          slot: string; functionName: string; apiVersion: string; name: string;
          functionEnvelope: JsonNode; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566695 = newJObject()
  var query_566696 = newJObject()
  var body_566697 = newJObject()
  add(path_566695, "slot", newJString(slot))
  add(path_566695, "functionName", newJString(functionName))
  add(query_566696, "api-version", newJString(apiVersion))
  add(path_566695, "name", newJString(name))
  if functionEnvelope != nil:
    body_566697 = functionEnvelope
  add(path_566695, "subscriptionId", newJString(subscriptionId))
  add(path_566695, "resourceGroupName", newJString(resourceGroupName))
  result = call_566694.call(path_566695, query_566696, nil, nil, body_566697)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_566683(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_566684, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_566685, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_566670 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceFunctionSlot_566672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_566671(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566673 = path.getOrDefault("slot")
  valid_566673 = validateParameter(valid_566673, JString, required = true,
                                 default = nil)
  if valid_566673 != nil:
    section.add "slot", valid_566673
  var valid_566674 = path.getOrDefault("functionName")
  valid_566674 = validateParameter(valid_566674, JString, required = true,
                                 default = nil)
  if valid_566674 != nil:
    section.add "functionName", valid_566674
  var valid_566675 = path.getOrDefault("name")
  valid_566675 = validateParameter(valid_566675, JString, required = true,
                                 default = nil)
  if valid_566675 != nil:
    section.add "name", valid_566675
  var valid_566676 = path.getOrDefault("subscriptionId")
  valid_566676 = validateParameter(valid_566676, JString, required = true,
                                 default = nil)
  if valid_566676 != nil:
    section.add "subscriptionId", valid_566676
  var valid_566677 = path.getOrDefault("resourceGroupName")
  valid_566677 = validateParameter(valid_566677, JString, required = true,
                                 default = nil)
  if valid_566677 != nil:
    section.add "resourceGroupName", valid_566677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566678 = query.getOrDefault("api-version")
  valid_566678 = validateParameter(valid_566678, JString, required = true,
                                 default = nil)
  if valid_566678 != nil:
    section.add "api-version", valid_566678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566679: Call_WebAppsGetInstanceFunctionSlot_566670; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_566679.validator(path, query, header, formData, body)
  let scheme = call_566679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566679.url(scheme.get, call_566679.host, call_566679.base,
                         call_566679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566679, url, valid)

proc call*(call_566680: Call_WebAppsGetInstanceFunctionSlot_566670; slot: string;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566681 = newJObject()
  var query_566682 = newJObject()
  add(path_566681, "slot", newJString(slot))
  add(path_566681, "functionName", newJString(functionName))
  add(query_566682, "api-version", newJString(apiVersion))
  add(path_566681, "name", newJString(name))
  add(path_566681, "subscriptionId", newJString(subscriptionId))
  add(path_566681, "resourceGroupName", newJString(resourceGroupName))
  result = call_566680.call(path_566681, query_566682, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_566670(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_566671, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_566672, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_566698 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceFunctionSlot_566700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_566699(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566701 = path.getOrDefault("slot")
  valid_566701 = validateParameter(valid_566701, JString, required = true,
                                 default = nil)
  if valid_566701 != nil:
    section.add "slot", valid_566701
  var valid_566702 = path.getOrDefault("functionName")
  valid_566702 = validateParameter(valid_566702, JString, required = true,
                                 default = nil)
  if valid_566702 != nil:
    section.add "functionName", valid_566702
  var valid_566703 = path.getOrDefault("name")
  valid_566703 = validateParameter(valid_566703, JString, required = true,
                                 default = nil)
  if valid_566703 != nil:
    section.add "name", valid_566703
  var valid_566704 = path.getOrDefault("subscriptionId")
  valid_566704 = validateParameter(valid_566704, JString, required = true,
                                 default = nil)
  if valid_566704 != nil:
    section.add "subscriptionId", valid_566704
  var valid_566705 = path.getOrDefault("resourceGroupName")
  valid_566705 = validateParameter(valid_566705, JString, required = true,
                                 default = nil)
  if valid_566705 != nil:
    section.add "resourceGroupName", valid_566705
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566706 = query.getOrDefault("api-version")
  valid_566706 = validateParameter(valid_566706, JString, required = true,
                                 default = nil)
  if valid_566706 != nil:
    section.add "api-version", valid_566706
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566707: Call_WebAppsDeleteInstanceFunctionSlot_566698;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_566707.validator(path, query, header, formData, body)
  let scheme = call_566707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566707.url(scheme.get, call_566707.host, call_566707.base,
                         call_566707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566707, url, valid)

proc call*(call_566708: Call_WebAppsDeleteInstanceFunctionSlot_566698;
          slot: string; functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566709 = newJObject()
  var query_566710 = newJObject()
  add(path_566709, "slot", newJString(slot))
  add(path_566709, "functionName", newJString(functionName))
  add(query_566710, "api-version", newJString(apiVersion))
  add(path_566709, "name", newJString(name))
  add(path_566709, "subscriptionId", newJString(subscriptionId))
  add(path_566709, "resourceGroupName", newJString(resourceGroupName))
  result = call_566708.call(path_566709, query_566710, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_566698(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_566699, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_566700, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_566711 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctionSecretsSlot_566713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_566712(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566714 = path.getOrDefault("slot")
  valid_566714 = validateParameter(valid_566714, JString, required = true,
                                 default = nil)
  if valid_566714 != nil:
    section.add "slot", valid_566714
  var valid_566715 = path.getOrDefault("functionName")
  valid_566715 = validateParameter(valid_566715, JString, required = true,
                                 default = nil)
  if valid_566715 != nil:
    section.add "functionName", valid_566715
  var valid_566716 = path.getOrDefault("name")
  valid_566716 = validateParameter(valid_566716, JString, required = true,
                                 default = nil)
  if valid_566716 != nil:
    section.add "name", valid_566716
  var valid_566717 = path.getOrDefault("subscriptionId")
  valid_566717 = validateParameter(valid_566717, JString, required = true,
                                 default = nil)
  if valid_566717 != nil:
    section.add "subscriptionId", valid_566717
  var valid_566718 = path.getOrDefault("resourceGroupName")
  valid_566718 = validateParameter(valid_566718, JString, required = true,
                                 default = nil)
  if valid_566718 != nil:
    section.add "resourceGroupName", valid_566718
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566719 = query.getOrDefault("api-version")
  valid_566719 = validateParameter(valid_566719, JString, required = true,
                                 default = nil)
  if valid_566719 != nil:
    section.add "api-version", valid_566719
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566720: Call_WebAppsListFunctionSecretsSlot_566711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_566720.validator(path, query, header, formData, body)
  let scheme = call_566720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566720.url(scheme.get, call_566720.host, call_566720.base,
                         call_566720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566720, url, valid)

proc call*(call_566721: Call_WebAppsListFunctionSecretsSlot_566711; slot: string;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566722 = newJObject()
  var query_566723 = newJObject()
  add(path_566722, "slot", newJString(slot))
  add(path_566722, "functionName", newJString(functionName))
  add(query_566723, "api-version", newJString(apiVersion))
  add(path_566722, "name", newJString(name))
  add(path_566722, "subscriptionId", newJString(subscriptionId))
  add(path_566722, "resourceGroupName", newJString(resourceGroupName))
  result = call_566721.call(path_566722, query_566723, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_566711(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_566712, base: "",
    url: url_WebAppsListFunctionSecretsSlot_566713, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_566724 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHostNameBindingsSlot_566726(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_566725(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566727 = path.getOrDefault("slot")
  valid_566727 = validateParameter(valid_566727, JString, required = true,
                                 default = nil)
  if valid_566727 != nil:
    section.add "slot", valid_566727
  var valid_566728 = path.getOrDefault("name")
  valid_566728 = validateParameter(valid_566728, JString, required = true,
                                 default = nil)
  if valid_566728 != nil:
    section.add "name", valid_566728
  var valid_566729 = path.getOrDefault("subscriptionId")
  valid_566729 = validateParameter(valid_566729, JString, required = true,
                                 default = nil)
  if valid_566729 != nil:
    section.add "subscriptionId", valid_566729
  var valid_566730 = path.getOrDefault("resourceGroupName")
  valid_566730 = validateParameter(valid_566730, JString, required = true,
                                 default = nil)
  if valid_566730 != nil:
    section.add "resourceGroupName", valid_566730
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566731 = query.getOrDefault("api-version")
  valid_566731 = validateParameter(valid_566731, JString, required = true,
                                 default = nil)
  if valid_566731 != nil:
    section.add "api-version", valid_566731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566732: Call_WebAppsListHostNameBindingsSlot_566724;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_566732.validator(path, query, header, formData, body)
  let scheme = call_566732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566732.url(scheme.get, call_566732.host, call_566732.base,
                         call_566732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566732, url, valid)

proc call*(call_566733: Call_WebAppsListHostNameBindingsSlot_566724; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566734 = newJObject()
  var query_566735 = newJObject()
  add(path_566734, "slot", newJString(slot))
  add(query_566735, "api-version", newJString(apiVersion))
  add(path_566734, "name", newJString(name))
  add(path_566734, "subscriptionId", newJString(subscriptionId))
  add(path_566734, "resourceGroupName", newJString(resourceGroupName))
  result = call_566733.call(path_566734, query_566735, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_566724(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_566725, base: "",
    url: url_WebAppsListHostNameBindingsSlot_566726, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_566749 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_566751(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_566750(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566752 = path.getOrDefault("slot")
  valid_566752 = validateParameter(valid_566752, JString, required = true,
                                 default = nil)
  if valid_566752 != nil:
    section.add "slot", valid_566752
  var valid_566753 = path.getOrDefault("name")
  valid_566753 = validateParameter(valid_566753, JString, required = true,
                                 default = nil)
  if valid_566753 != nil:
    section.add "name", valid_566753
  var valid_566754 = path.getOrDefault("subscriptionId")
  valid_566754 = validateParameter(valid_566754, JString, required = true,
                                 default = nil)
  if valid_566754 != nil:
    section.add "subscriptionId", valid_566754
  var valid_566755 = path.getOrDefault("resourceGroupName")
  valid_566755 = validateParameter(valid_566755, JString, required = true,
                                 default = nil)
  if valid_566755 != nil:
    section.add "resourceGroupName", valid_566755
  var valid_566756 = path.getOrDefault("hostName")
  valid_566756 = validateParameter(valid_566756, JString, required = true,
                                 default = nil)
  if valid_566756 != nil:
    section.add "hostName", valid_566756
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566757 = query.getOrDefault("api-version")
  valid_566757 = validateParameter(valid_566757, JString, required = true,
                                 default = nil)
  if valid_566757 != nil:
    section.add "api-version", valid_566757
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566759: Call_WebAppsCreateOrUpdateHostNameBindingSlot_566749;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_566759.validator(path, query, header, formData, body)
  let scheme = call_566759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566759.url(scheme.get, call_566759.host, call_566759.base,
                         call_566759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566759, url, valid)

proc call*(call_566760: Call_WebAppsCreateOrUpdateHostNameBindingSlot_566749;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566761 = newJObject()
  var query_566762 = newJObject()
  var body_566763 = newJObject()
  add(path_566761, "slot", newJString(slot))
  add(query_566762, "api-version", newJString(apiVersion))
  add(path_566761, "name", newJString(name))
  add(path_566761, "subscriptionId", newJString(subscriptionId))
  add(path_566761, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_566763 = hostNameBinding
  add(path_566761, "hostName", newJString(hostName))
  result = call_566760.call(path_566761, query_566762, nil, nil, body_566763)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_566749(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_566750, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_566751,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_566736 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHostNameBindingSlot_566738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_566737(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566739 = path.getOrDefault("slot")
  valid_566739 = validateParameter(valid_566739, JString, required = true,
                                 default = nil)
  if valid_566739 != nil:
    section.add "slot", valid_566739
  var valid_566740 = path.getOrDefault("name")
  valid_566740 = validateParameter(valid_566740, JString, required = true,
                                 default = nil)
  if valid_566740 != nil:
    section.add "name", valid_566740
  var valid_566741 = path.getOrDefault("subscriptionId")
  valid_566741 = validateParameter(valid_566741, JString, required = true,
                                 default = nil)
  if valid_566741 != nil:
    section.add "subscriptionId", valid_566741
  var valid_566742 = path.getOrDefault("resourceGroupName")
  valid_566742 = validateParameter(valid_566742, JString, required = true,
                                 default = nil)
  if valid_566742 != nil:
    section.add "resourceGroupName", valid_566742
  var valid_566743 = path.getOrDefault("hostName")
  valid_566743 = validateParameter(valid_566743, JString, required = true,
                                 default = nil)
  if valid_566743 != nil:
    section.add "hostName", valid_566743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566744 = query.getOrDefault("api-version")
  valid_566744 = validateParameter(valid_566744, JString, required = true,
                                 default = nil)
  if valid_566744 != nil:
    section.add "api-version", valid_566744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566745: Call_WebAppsGetHostNameBindingSlot_566736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_566745.validator(path, query, header, formData, body)
  let scheme = call_566745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566745.url(scheme.get, call_566745.host, call_566745.base,
                         call_566745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566745, url, valid)

proc call*(call_566746: Call_WebAppsGetHostNameBindingSlot_566736; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566747 = newJObject()
  var query_566748 = newJObject()
  add(path_566747, "slot", newJString(slot))
  add(query_566748, "api-version", newJString(apiVersion))
  add(path_566747, "name", newJString(name))
  add(path_566747, "subscriptionId", newJString(subscriptionId))
  add(path_566747, "resourceGroupName", newJString(resourceGroupName))
  add(path_566747, "hostName", newJString(hostName))
  result = call_566746.call(path_566747, query_566748, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_566736(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_566737, base: "",
    url: url_WebAppsGetHostNameBindingSlot_566738, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_566764 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHostNameBindingSlot_566766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_566765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566767 = path.getOrDefault("slot")
  valid_566767 = validateParameter(valid_566767, JString, required = true,
                                 default = nil)
  if valid_566767 != nil:
    section.add "slot", valid_566767
  var valid_566768 = path.getOrDefault("name")
  valid_566768 = validateParameter(valid_566768, JString, required = true,
                                 default = nil)
  if valid_566768 != nil:
    section.add "name", valid_566768
  var valid_566769 = path.getOrDefault("subscriptionId")
  valid_566769 = validateParameter(valid_566769, JString, required = true,
                                 default = nil)
  if valid_566769 != nil:
    section.add "subscriptionId", valid_566769
  var valid_566770 = path.getOrDefault("resourceGroupName")
  valid_566770 = validateParameter(valid_566770, JString, required = true,
                                 default = nil)
  if valid_566770 != nil:
    section.add "resourceGroupName", valid_566770
  var valid_566771 = path.getOrDefault("hostName")
  valid_566771 = validateParameter(valid_566771, JString, required = true,
                                 default = nil)
  if valid_566771 != nil:
    section.add "hostName", valid_566771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566772 = query.getOrDefault("api-version")
  valid_566772 = validateParameter(valid_566772, JString, required = true,
                                 default = nil)
  if valid_566772 != nil:
    section.add "api-version", valid_566772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566773: Call_WebAppsDeleteHostNameBindingSlot_566764;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_566773.validator(path, query, header, formData, body)
  let scheme = call_566773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566773.url(scheme.get, call_566773.host, call_566773.base,
                         call_566773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566773, url, valid)

proc call*(call_566774: Call_WebAppsDeleteHostNameBindingSlot_566764; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566775 = newJObject()
  var query_566776 = newJObject()
  add(path_566775, "slot", newJString(slot))
  add(query_566776, "api-version", newJString(apiVersion))
  add(path_566775, "name", newJString(name))
  add(path_566775, "subscriptionId", newJString(subscriptionId))
  add(path_566775, "resourceGroupName", newJString(resourceGroupName))
  add(path_566775, "hostName", newJString(hostName))
  result = call_566774.call(path_566775, query_566776, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_566764(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_566765, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_566766, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_566791 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_566793(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_566792(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566794 = path.getOrDefault("slot")
  valid_566794 = validateParameter(valid_566794, JString, required = true,
                                 default = nil)
  if valid_566794 != nil:
    section.add "slot", valid_566794
  var valid_566795 = path.getOrDefault("namespaceName")
  valid_566795 = validateParameter(valid_566795, JString, required = true,
                                 default = nil)
  if valid_566795 != nil:
    section.add "namespaceName", valid_566795
  var valid_566796 = path.getOrDefault("name")
  valid_566796 = validateParameter(valid_566796, JString, required = true,
                                 default = nil)
  if valid_566796 != nil:
    section.add "name", valid_566796
  var valid_566797 = path.getOrDefault("subscriptionId")
  valid_566797 = validateParameter(valid_566797, JString, required = true,
                                 default = nil)
  if valid_566797 != nil:
    section.add "subscriptionId", valid_566797
  var valid_566798 = path.getOrDefault("resourceGroupName")
  valid_566798 = validateParameter(valid_566798, JString, required = true,
                                 default = nil)
  if valid_566798 != nil:
    section.add "resourceGroupName", valid_566798
  var valid_566799 = path.getOrDefault("relayName")
  valid_566799 = validateParameter(valid_566799, JString, required = true,
                                 default = nil)
  if valid_566799 != nil:
    section.add "relayName", valid_566799
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566800 = query.getOrDefault("api-version")
  valid_566800 = validateParameter(valid_566800, JString, required = true,
                                 default = nil)
  if valid_566800 != nil:
    section.add "api-version", valid_566800
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566802: Call_WebAppsCreateOrUpdateHybridConnectionSlot_566791;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_566802.validator(path, query, header, formData, body)
  let scheme = call_566802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566802.url(scheme.get, call_566802.host, call_566802.base,
                         call_566802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566802, url, valid)

proc call*(call_566803: Call_WebAppsCreateOrUpdateHybridConnectionSlot_566791;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566804 = newJObject()
  var query_566805 = newJObject()
  var body_566806 = newJObject()
  add(path_566804, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566806 = connectionEnvelope
  add(query_566805, "api-version", newJString(apiVersion))
  add(path_566804, "namespaceName", newJString(namespaceName))
  add(path_566804, "name", newJString(name))
  add(path_566804, "subscriptionId", newJString(subscriptionId))
  add(path_566804, "resourceGroupName", newJString(resourceGroupName))
  add(path_566804, "relayName", newJString(relayName))
  result = call_566803.call(path_566804, query_566805, nil, nil, body_566806)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_566791(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_566792,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_566793,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_566777 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHybridConnectionSlot_566779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_566778(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566780 = path.getOrDefault("slot")
  valid_566780 = validateParameter(valid_566780, JString, required = true,
                                 default = nil)
  if valid_566780 != nil:
    section.add "slot", valid_566780
  var valid_566781 = path.getOrDefault("namespaceName")
  valid_566781 = validateParameter(valid_566781, JString, required = true,
                                 default = nil)
  if valid_566781 != nil:
    section.add "namespaceName", valid_566781
  var valid_566782 = path.getOrDefault("name")
  valid_566782 = validateParameter(valid_566782, JString, required = true,
                                 default = nil)
  if valid_566782 != nil:
    section.add "name", valid_566782
  var valid_566783 = path.getOrDefault("subscriptionId")
  valid_566783 = validateParameter(valid_566783, JString, required = true,
                                 default = nil)
  if valid_566783 != nil:
    section.add "subscriptionId", valid_566783
  var valid_566784 = path.getOrDefault("resourceGroupName")
  valid_566784 = validateParameter(valid_566784, JString, required = true,
                                 default = nil)
  if valid_566784 != nil:
    section.add "resourceGroupName", valid_566784
  var valid_566785 = path.getOrDefault("relayName")
  valid_566785 = validateParameter(valid_566785, JString, required = true,
                                 default = nil)
  if valid_566785 != nil:
    section.add "relayName", valid_566785
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566786 = query.getOrDefault("api-version")
  valid_566786 = validateParameter(valid_566786, JString, required = true,
                                 default = nil)
  if valid_566786 != nil:
    section.add "api-version", valid_566786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566787: Call_WebAppsGetHybridConnectionSlot_566777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_566787.validator(path, query, header, formData, body)
  let scheme = call_566787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566787.url(scheme.get, call_566787.host, call_566787.base,
                         call_566787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566787, url, valid)

proc call*(call_566788: Call_WebAppsGetHybridConnectionSlot_566777; slot: string;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566789 = newJObject()
  var query_566790 = newJObject()
  add(path_566789, "slot", newJString(slot))
  add(query_566790, "api-version", newJString(apiVersion))
  add(path_566789, "namespaceName", newJString(namespaceName))
  add(path_566789, "name", newJString(name))
  add(path_566789, "subscriptionId", newJString(subscriptionId))
  add(path_566789, "resourceGroupName", newJString(resourceGroupName))
  add(path_566789, "relayName", newJString(relayName))
  result = call_566788.call(path_566789, query_566790, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_566777(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_566778, base: "",
    url: url_WebAppsGetHybridConnectionSlot_566779, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_566821 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateHybridConnectionSlot_566823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_566822(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566824 = path.getOrDefault("slot")
  valid_566824 = validateParameter(valid_566824, JString, required = true,
                                 default = nil)
  if valid_566824 != nil:
    section.add "slot", valid_566824
  var valid_566825 = path.getOrDefault("namespaceName")
  valid_566825 = validateParameter(valid_566825, JString, required = true,
                                 default = nil)
  if valid_566825 != nil:
    section.add "namespaceName", valid_566825
  var valid_566826 = path.getOrDefault("name")
  valid_566826 = validateParameter(valid_566826, JString, required = true,
                                 default = nil)
  if valid_566826 != nil:
    section.add "name", valid_566826
  var valid_566827 = path.getOrDefault("subscriptionId")
  valid_566827 = validateParameter(valid_566827, JString, required = true,
                                 default = nil)
  if valid_566827 != nil:
    section.add "subscriptionId", valid_566827
  var valid_566828 = path.getOrDefault("resourceGroupName")
  valid_566828 = validateParameter(valid_566828, JString, required = true,
                                 default = nil)
  if valid_566828 != nil:
    section.add "resourceGroupName", valid_566828
  var valid_566829 = path.getOrDefault("relayName")
  valid_566829 = validateParameter(valid_566829, JString, required = true,
                                 default = nil)
  if valid_566829 != nil:
    section.add "relayName", valid_566829
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566830 = query.getOrDefault("api-version")
  valid_566830 = validateParameter(valid_566830, JString, required = true,
                                 default = nil)
  if valid_566830 != nil:
    section.add "api-version", valid_566830
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566832: Call_WebAppsUpdateHybridConnectionSlot_566821;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_566832.validator(path, query, header, formData, body)
  let scheme = call_566832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566832.url(scheme.get, call_566832.host, call_566832.base,
                         call_566832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566832, url, valid)

proc call*(call_566833: Call_WebAppsUpdateHybridConnectionSlot_566821;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566834 = newJObject()
  var query_566835 = newJObject()
  var body_566836 = newJObject()
  add(path_566834, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566836 = connectionEnvelope
  add(query_566835, "api-version", newJString(apiVersion))
  add(path_566834, "namespaceName", newJString(namespaceName))
  add(path_566834, "name", newJString(name))
  add(path_566834, "subscriptionId", newJString(subscriptionId))
  add(path_566834, "resourceGroupName", newJString(resourceGroupName))
  add(path_566834, "relayName", newJString(relayName))
  result = call_566833.call(path_566834, query_566835, nil, nil, body_566836)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_566821(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_566822, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_566823, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_566807 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHybridConnectionSlot_566809(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_566808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566810 = path.getOrDefault("slot")
  valid_566810 = validateParameter(valid_566810, JString, required = true,
                                 default = nil)
  if valid_566810 != nil:
    section.add "slot", valid_566810
  var valid_566811 = path.getOrDefault("namespaceName")
  valid_566811 = validateParameter(valid_566811, JString, required = true,
                                 default = nil)
  if valid_566811 != nil:
    section.add "namespaceName", valid_566811
  var valid_566812 = path.getOrDefault("name")
  valid_566812 = validateParameter(valid_566812, JString, required = true,
                                 default = nil)
  if valid_566812 != nil:
    section.add "name", valid_566812
  var valid_566813 = path.getOrDefault("subscriptionId")
  valid_566813 = validateParameter(valid_566813, JString, required = true,
                                 default = nil)
  if valid_566813 != nil:
    section.add "subscriptionId", valid_566813
  var valid_566814 = path.getOrDefault("resourceGroupName")
  valid_566814 = validateParameter(valid_566814, JString, required = true,
                                 default = nil)
  if valid_566814 != nil:
    section.add "resourceGroupName", valid_566814
  var valid_566815 = path.getOrDefault("relayName")
  valid_566815 = validateParameter(valid_566815, JString, required = true,
                                 default = nil)
  if valid_566815 != nil:
    section.add "relayName", valid_566815
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566816 = query.getOrDefault("api-version")
  valid_566816 = validateParameter(valid_566816, JString, required = true,
                                 default = nil)
  if valid_566816 != nil:
    section.add "api-version", valid_566816
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566817: Call_WebAppsDeleteHybridConnectionSlot_566807;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_566817.validator(path, query, header, formData, body)
  let scheme = call_566817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566817.url(scheme.get, call_566817.host, call_566817.base,
                         call_566817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566817, url, valid)

proc call*(call_566818: Call_WebAppsDeleteHybridConnectionSlot_566807;
          slot: string; apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566819 = newJObject()
  var query_566820 = newJObject()
  add(path_566819, "slot", newJString(slot))
  add(query_566820, "api-version", newJString(apiVersion))
  add(path_566819, "namespaceName", newJString(namespaceName))
  add(path_566819, "name", newJString(name))
  add(path_566819, "subscriptionId", newJString(subscriptionId))
  add(path_566819, "resourceGroupName", newJString(resourceGroupName))
  add(path_566819, "relayName", newJString(relayName))
  result = call_566818.call(path_566819, query_566820, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_566807(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_566808, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_566809, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_566837 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionKeysSlot_566839(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_566838(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566840 = path.getOrDefault("slot")
  valid_566840 = validateParameter(valid_566840, JString, required = true,
                                 default = nil)
  if valid_566840 != nil:
    section.add "slot", valid_566840
  var valid_566841 = path.getOrDefault("namespaceName")
  valid_566841 = validateParameter(valid_566841, JString, required = true,
                                 default = nil)
  if valid_566841 != nil:
    section.add "namespaceName", valid_566841
  var valid_566842 = path.getOrDefault("name")
  valid_566842 = validateParameter(valid_566842, JString, required = true,
                                 default = nil)
  if valid_566842 != nil:
    section.add "name", valid_566842
  var valid_566843 = path.getOrDefault("subscriptionId")
  valid_566843 = validateParameter(valid_566843, JString, required = true,
                                 default = nil)
  if valid_566843 != nil:
    section.add "subscriptionId", valid_566843
  var valid_566844 = path.getOrDefault("resourceGroupName")
  valid_566844 = validateParameter(valid_566844, JString, required = true,
                                 default = nil)
  if valid_566844 != nil:
    section.add "resourceGroupName", valid_566844
  var valid_566845 = path.getOrDefault("relayName")
  valid_566845 = validateParameter(valid_566845, JString, required = true,
                                 default = nil)
  if valid_566845 != nil:
    section.add "relayName", valid_566845
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566846 = query.getOrDefault("api-version")
  valid_566846 = validateParameter(valid_566846, JString, required = true,
                                 default = nil)
  if valid_566846 != nil:
    section.add "api-version", valid_566846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566847: Call_WebAppsListHybridConnectionKeysSlot_566837;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_566847.validator(path, query, header, formData, body)
  let scheme = call_566847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566847.url(scheme.get, call_566847.host, call_566847.base,
                         call_566847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566847, url, valid)

proc call*(call_566848: Call_WebAppsListHybridConnectionKeysSlot_566837;
          slot: string; apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566849 = newJObject()
  var query_566850 = newJObject()
  add(path_566849, "slot", newJString(slot))
  add(query_566850, "api-version", newJString(apiVersion))
  add(path_566849, "namespaceName", newJString(namespaceName))
  add(path_566849, "name", newJString(name))
  add(path_566849, "subscriptionId", newJString(subscriptionId))
  add(path_566849, "resourceGroupName", newJString(resourceGroupName))
  add(path_566849, "relayName", newJString(relayName))
  result = call_566848.call(path_566849, query_566850, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_566837(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_566838, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_566839, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_566851 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionsSlot_566853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_566852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566854 = path.getOrDefault("slot")
  valid_566854 = validateParameter(valid_566854, JString, required = true,
                                 default = nil)
  if valid_566854 != nil:
    section.add "slot", valid_566854
  var valid_566855 = path.getOrDefault("name")
  valid_566855 = validateParameter(valid_566855, JString, required = true,
                                 default = nil)
  if valid_566855 != nil:
    section.add "name", valid_566855
  var valid_566856 = path.getOrDefault("subscriptionId")
  valid_566856 = validateParameter(valid_566856, JString, required = true,
                                 default = nil)
  if valid_566856 != nil:
    section.add "subscriptionId", valid_566856
  var valid_566857 = path.getOrDefault("resourceGroupName")
  valid_566857 = validateParameter(valid_566857, JString, required = true,
                                 default = nil)
  if valid_566857 != nil:
    section.add "resourceGroupName", valid_566857
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566858 = query.getOrDefault("api-version")
  valid_566858 = validateParameter(valid_566858, JString, required = true,
                                 default = nil)
  if valid_566858 != nil:
    section.add "api-version", valid_566858
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566859: Call_WebAppsListHybridConnectionsSlot_566851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_566859.validator(path, query, header, formData, body)
  let scheme = call_566859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566859.url(scheme.get, call_566859.host, call_566859.base,
                         call_566859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566859, url, valid)

proc call*(call_566860: Call_WebAppsListHybridConnectionsSlot_566851; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566861 = newJObject()
  var query_566862 = newJObject()
  add(path_566861, "slot", newJString(slot))
  add(query_566862, "api-version", newJString(apiVersion))
  add(path_566861, "name", newJString(name))
  add(path_566861, "subscriptionId", newJString(subscriptionId))
  add(path_566861, "resourceGroupName", newJString(resourceGroupName))
  result = call_566860.call(path_566861, query_566862, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_566851(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_566852, base: "",
    url: url_WebAppsListHybridConnectionsSlot_566853, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_566863 = ref object of OpenApiRestCall_563564
proc url_WebAppsListRelayServiceConnectionsSlot_566865(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_566864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566866 = path.getOrDefault("slot")
  valid_566866 = validateParameter(valid_566866, JString, required = true,
                                 default = nil)
  if valid_566866 != nil:
    section.add "slot", valid_566866
  var valid_566867 = path.getOrDefault("name")
  valid_566867 = validateParameter(valid_566867, JString, required = true,
                                 default = nil)
  if valid_566867 != nil:
    section.add "name", valid_566867
  var valid_566868 = path.getOrDefault("subscriptionId")
  valid_566868 = validateParameter(valid_566868, JString, required = true,
                                 default = nil)
  if valid_566868 != nil:
    section.add "subscriptionId", valid_566868
  var valid_566869 = path.getOrDefault("resourceGroupName")
  valid_566869 = validateParameter(valid_566869, JString, required = true,
                                 default = nil)
  if valid_566869 != nil:
    section.add "resourceGroupName", valid_566869
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566870 = query.getOrDefault("api-version")
  valid_566870 = validateParameter(valid_566870, JString, required = true,
                                 default = nil)
  if valid_566870 != nil:
    section.add "api-version", valid_566870
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566871: Call_WebAppsListRelayServiceConnectionsSlot_566863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_566871.validator(path, query, header, formData, body)
  let scheme = call_566871.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566871.url(scheme.get, call_566871.host, call_566871.base,
                         call_566871.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566871, url, valid)

proc call*(call_566872: Call_WebAppsListRelayServiceConnectionsSlot_566863;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566873 = newJObject()
  var query_566874 = newJObject()
  add(path_566873, "slot", newJString(slot))
  add(query_566874, "api-version", newJString(apiVersion))
  add(path_566873, "name", newJString(name))
  add(path_566873, "subscriptionId", newJString(subscriptionId))
  add(path_566873, "resourceGroupName", newJString(resourceGroupName))
  result = call_566872.call(path_566873, query_566874, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_566863(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_566864, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_566865,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566888 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566890(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566889(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566891 = path.getOrDefault("slot")
  valid_566891 = validateParameter(valid_566891, JString, required = true,
                                 default = nil)
  if valid_566891 != nil:
    section.add "slot", valid_566891
  var valid_566892 = path.getOrDefault("name")
  valid_566892 = validateParameter(valid_566892, JString, required = true,
                                 default = nil)
  if valid_566892 != nil:
    section.add "name", valid_566892
  var valid_566893 = path.getOrDefault("subscriptionId")
  valid_566893 = validateParameter(valid_566893, JString, required = true,
                                 default = nil)
  if valid_566893 != nil:
    section.add "subscriptionId", valid_566893
  var valid_566894 = path.getOrDefault("resourceGroupName")
  valid_566894 = validateParameter(valid_566894, JString, required = true,
                                 default = nil)
  if valid_566894 != nil:
    section.add "resourceGroupName", valid_566894
  var valid_566895 = path.getOrDefault("entityName")
  valid_566895 = validateParameter(valid_566895, JString, required = true,
                                 default = nil)
  if valid_566895 != nil:
    section.add "entityName", valid_566895
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566896 = query.getOrDefault("api-version")
  valid_566896 = validateParameter(valid_566896, JString, required = true,
                                 default = nil)
  if valid_566896 != nil:
    section.add "api-version", valid_566896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566898: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566888;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_566898.validator(path, query, header, formData, body)
  let scheme = call_566898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566898.url(scheme.get, call_566898.host, call_566898.base,
                         call_566898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566898, url, valid)

proc call*(call_566899: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566888;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566900 = newJObject()
  var query_566901 = newJObject()
  var body_566902 = newJObject()
  add(path_566900, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566902 = connectionEnvelope
  add(query_566901, "api-version", newJString(apiVersion))
  add(path_566900, "name", newJString(name))
  add(path_566900, "subscriptionId", newJString(subscriptionId))
  add(path_566900, "resourceGroupName", newJString(resourceGroupName))
  add(path_566900, "entityName", newJString(entityName))
  result = call_566899.call(path_566900, query_566901, nil, nil, body_566902)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566888(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566889,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566890,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_566875 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetRelayServiceConnectionSlot_566877(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_566876(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566878 = path.getOrDefault("slot")
  valid_566878 = validateParameter(valid_566878, JString, required = true,
                                 default = nil)
  if valid_566878 != nil:
    section.add "slot", valid_566878
  var valid_566879 = path.getOrDefault("name")
  valid_566879 = validateParameter(valid_566879, JString, required = true,
                                 default = nil)
  if valid_566879 != nil:
    section.add "name", valid_566879
  var valid_566880 = path.getOrDefault("subscriptionId")
  valid_566880 = validateParameter(valid_566880, JString, required = true,
                                 default = nil)
  if valid_566880 != nil:
    section.add "subscriptionId", valid_566880
  var valid_566881 = path.getOrDefault("resourceGroupName")
  valid_566881 = validateParameter(valid_566881, JString, required = true,
                                 default = nil)
  if valid_566881 != nil:
    section.add "resourceGroupName", valid_566881
  var valid_566882 = path.getOrDefault("entityName")
  valid_566882 = validateParameter(valid_566882, JString, required = true,
                                 default = nil)
  if valid_566882 != nil:
    section.add "entityName", valid_566882
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566883 = query.getOrDefault("api-version")
  valid_566883 = validateParameter(valid_566883, JString, required = true,
                                 default = nil)
  if valid_566883 != nil:
    section.add "api-version", valid_566883
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566884: Call_WebAppsGetRelayServiceConnectionSlot_566875;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_566884.validator(path, query, header, formData, body)
  let scheme = call_566884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566884.url(scheme.get, call_566884.host, call_566884.base,
                         call_566884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566884, url, valid)

proc call*(call_566885: Call_WebAppsGetRelayServiceConnectionSlot_566875;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_566886 = newJObject()
  var query_566887 = newJObject()
  add(path_566886, "slot", newJString(slot))
  add(query_566887, "api-version", newJString(apiVersion))
  add(path_566886, "name", newJString(name))
  add(path_566886, "subscriptionId", newJString(subscriptionId))
  add(path_566886, "resourceGroupName", newJString(resourceGroupName))
  add(path_566886, "entityName", newJString(entityName))
  result = call_566885.call(path_566886, query_566887, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_566875(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_566876, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_566877, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_566916 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateRelayServiceConnectionSlot_566918(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_566917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566919 = path.getOrDefault("slot")
  valid_566919 = validateParameter(valid_566919, JString, required = true,
                                 default = nil)
  if valid_566919 != nil:
    section.add "slot", valid_566919
  var valid_566920 = path.getOrDefault("name")
  valid_566920 = validateParameter(valid_566920, JString, required = true,
                                 default = nil)
  if valid_566920 != nil:
    section.add "name", valid_566920
  var valid_566921 = path.getOrDefault("subscriptionId")
  valid_566921 = validateParameter(valid_566921, JString, required = true,
                                 default = nil)
  if valid_566921 != nil:
    section.add "subscriptionId", valid_566921
  var valid_566922 = path.getOrDefault("resourceGroupName")
  valid_566922 = validateParameter(valid_566922, JString, required = true,
                                 default = nil)
  if valid_566922 != nil:
    section.add "resourceGroupName", valid_566922
  var valid_566923 = path.getOrDefault("entityName")
  valid_566923 = validateParameter(valid_566923, JString, required = true,
                                 default = nil)
  if valid_566923 != nil:
    section.add "entityName", valid_566923
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566924 = query.getOrDefault("api-version")
  valid_566924 = validateParameter(valid_566924, JString, required = true,
                                 default = nil)
  if valid_566924 != nil:
    section.add "api-version", valid_566924
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566926: Call_WebAppsUpdateRelayServiceConnectionSlot_566916;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_566926.validator(path, query, header, formData, body)
  let scheme = call_566926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566926.url(scheme.get, call_566926.host, call_566926.base,
                         call_566926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566926, url, valid)

proc call*(call_566927: Call_WebAppsUpdateRelayServiceConnectionSlot_566916;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566928 = newJObject()
  var query_566929 = newJObject()
  var body_566930 = newJObject()
  add(path_566928, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566930 = connectionEnvelope
  add(query_566929, "api-version", newJString(apiVersion))
  add(path_566928, "name", newJString(name))
  add(path_566928, "subscriptionId", newJString(subscriptionId))
  add(path_566928, "resourceGroupName", newJString(resourceGroupName))
  add(path_566928, "entityName", newJString(entityName))
  result = call_566927.call(path_566928, query_566929, nil, nil, body_566930)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_566916(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_566917, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_566918,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_566903 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteRelayServiceConnectionSlot_566905(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_566904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566906 = path.getOrDefault("slot")
  valid_566906 = validateParameter(valid_566906, JString, required = true,
                                 default = nil)
  if valid_566906 != nil:
    section.add "slot", valid_566906
  var valid_566907 = path.getOrDefault("name")
  valid_566907 = validateParameter(valid_566907, JString, required = true,
                                 default = nil)
  if valid_566907 != nil:
    section.add "name", valid_566907
  var valid_566908 = path.getOrDefault("subscriptionId")
  valid_566908 = validateParameter(valid_566908, JString, required = true,
                                 default = nil)
  if valid_566908 != nil:
    section.add "subscriptionId", valid_566908
  var valid_566909 = path.getOrDefault("resourceGroupName")
  valid_566909 = validateParameter(valid_566909, JString, required = true,
                                 default = nil)
  if valid_566909 != nil:
    section.add "resourceGroupName", valid_566909
  var valid_566910 = path.getOrDefault("entityName")
  valid_566910 = validateParameter(valid_566910, JString, required = true,
                                 default = nil)
  if valid_566910 != nil:
    section.add "entityName", valid_566910
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566911 = query.getOrDefault("api-version")
  valid_566911 = validateParameter(valid_566911, JString, required = true,
                                 default = nil)
  if valid_566911 != nil:
    section.add "api-version", valid_566911
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566912: Call_WebAppsDeleteRelayServiceConnectionSlot_566903;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_566912.validator(path, query, header, formData, body)
  let scheme = call_566912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566912.url(scheme.get, call_566912.host, call_566912.base,
                         call_566912.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566912, url, valid)

proc call*(call_566913: Call_WebAppsDeleteRelayServiceConnectionSlot_566903;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566914 = newJObject()
  var query_566915 = newJObject()
  add(path_566914, "slot", newJString(slot))
  add(query_566915, "api-version", newJString(apiVersion))
  add(path_566914, "name", newJString(name))
  add(path_566914, "subscriptionId", newJString(subscriptionId))
  add(path_566914, "resourceGroupName", newJString(resourceGroupName))
  add(path_566914, "entityName", newJString(entityName))
  result = call_566913.call(path_566914, query_566915, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_566903(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_566904, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_566905,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_566931 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceIdentifiersSlot_566933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_566932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566934 = path.getOrDefault("slot")
  valid_566934 = validateParameter(valid_566934, JString, required = true,
                                 default = nil)
  if valid_566934 != nil:
    section.add "slot", valid_566934
  var valid_566935 = path.getOrDefault("name")
  valid_566935 = validateParameter(valid_566935, JString, required = true,
                                 default = nil)
  if valid_566935 != nil:
    section.add "name", valid_566935
  var valid_566936 = path.getOrDefault("subscriptionId")
  valid_566936 = validateParameter(valid_566936, JString, required = true,
                                 default = nil)
  if valid_566936 != nil:
    section.add "subscriptionId", valid_566936
  var valid_566937 = path.getOrDefault("resourceGroupName")
  valid_566937 = validateParameter(valid_566937, JString, required = true,
                                 default = nil)
  if valid_566937 != nil:
    section.add "resourceGroupName", valid_566937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566938 = query.getOrDefault("api-version")
  valid_566938 = validateParameter(valid_566938, JString, required = true,
                                 default = nil)
  if valid_566938 != nil:
    section.add "api-version", valid_566938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566939: Call_WebAppsListInstanceIdentifiersSlot_566931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_566939.validator(path, query, header, formData, body)
  let scheme = call_566939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566939.url(scheme.get, call_566939.host, call_566939.base,
                         call_566939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566939, url, valid)

proc call*(call_566940: Call_WebAppsListInstanceIdentifiersSlot_566931;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566941 = newJObject()
  var query_566942 = newJObject()
  add(path_566941, "slot", newJString(slot))
  add(query_566942, "api-version", newJString(apiVersion))
  add(path_566941, "name", newJString(name))
  add(path_566941, "subscriptionId", newJString(subscriptionId))
  add(path_566941, "resourceGroupName", newJString(resourceGroupName))
  result = call_566940.call(path_566941, query_566942, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_566931(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_566932, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_566933, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_566956 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceMSDeployOperationSlot_566958(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_566957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566959 = path.getOrDefault("slot")
  valid_566959 = validateParameter(valid_566959, JString, required = true,
                                 default = nil)
  if valid_566959 != nil:
    section.add "slot", valid_566959
  var valid_566960 = path.getOrDefault("name")
  valid_566960 = validateParameter(valid_566960, JString, required = true,
                                 default = nil)
  if valid_566960 != nil:
    section.add "name", valid_566960
  var valid_566961 = path.getOrDefault("subscriptionId")
  valid_566961 = validateParameter(valid_566961, JString, required = true,
                                 default = nil)
  if valid_566961 != nil:
    section.add "subscriptionId", valid_566961
  var valid_566962 = path.getOrDefault("resourceGroupName")
  valid_566962 = validateParameter(valid_566962, JString, required = true,
                                 default = nil)
  if valid_566962 != nil:
    section.add "resourceGroupName", valid_566962
  var valid_566963 = path.getOrDefault("instanceId")
  valid_566963 = validateParameter(valid_566963, JString, required = true,
                                 default = nil)
  if valid_566963 != nil:
    section.add "instanceId", valid_566963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566964 = query.getOrDefault("api-version")
  valid_566964 = validateParameter(valid_566964, JString, required = true,
                                 default = nil)
  if valid_566964 != nil:
    section.add "api-version", valid_566964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566966: Call_WebAppsCreateInstanceMSDeployOperationSlot_566956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_566966.validator(path, query, header, formData, body)
  let scheme = call_566966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566966.url(scheme.get, call_566966.host, call_566966.base,
                         call_566966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566966, url, valid)

proc call*(call_566967: Call_WebAppsCreateInstanceMSDeployOperationSlot_566956;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566968 = newJObject()
  var query_566969 = newJObject()
  var body_566970 = newJObject()
  add(path_566968, "slot", newJString(slot))
  add(query_566969, "api-version", newJString(apiVersion))
  add(path_566968, "name", newJString(name))
  add(path_566968, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_566970 = MSDeploy
  add(path_566968, "resourceGroupName", newJString(resourceGroupName))
  add(path_566968, "instanceId", newJString(instanceId))
  result = call_566967.call(path_566968, query_566969, nil, nil, body_566970)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_566956(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_566957,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_566958,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_566943 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMsDeployStatusSlot_566945(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_566944(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566946 = path.getOrDefault("slot")
  valid_566946 = validateParameter(valid_566946, JString, required = true,
                                 default = nil)
  if valid_566946 != nil:
    section.add "slot", valid_566946
  var valid_566947 = path.getOrDefault("name")
  valid_566947 = validateParameter(valid_566947, JString, required = true,
                                 default = nil)
  if valid_566947 != nil:
    section.add "name", valid_566947
  var valid_566948 = path.getOrDefault("subscriptionId")
  valid_566948 = validateParameter(valid_566948, JString, required = true,
                                 default = nil)
  if valid_566948 != nil:
    section.add "subscriptionId", valid_566948
  var valid_566949 = path.getOrDefault("resourceGroupName")
  valid_566949 = validateParameter(valid_566949, JString, required = true,
                                 default = nil)
  if valid_566949 != nil:
    section.add "resourceGroupName", valid_566949
  var valid_566950 = path.getOrDefault("instanceId")
  valid_566950 = validateParameter(valid_566950, JString, required = true,
                                 default = nil)
  if valid_566950 != nil:
    section.add "instanceId", valid_566950
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566951 = query.getOrDefault("api-version")
  valid_566951 = validateParameter(valid_566951, JString, required = true,
                                 default = nil)
  if valid_566951 != nil:
    section.add "api-version", valid_566951
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566952: Call_WebAppsGetInstanceMsDeployStatusSlot_566943;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_566952.validator(path, query, header, formData, body)
  let scheme = call_566952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566952.url(scheme.get, call_566952.host, call_566952.base,
                         call_566952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566952, url, valid)

proc call*(call_566953: Call_WebAppsGetInstanceMsDeployStatusSlot_566943;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566954 = newJObject()
  var query_566955 = newJObject()
  add(path_566954, "slot", newJString(slot))
  add(query_566955, "api-version", newJString(apiVersion))
  add(path_566954, "name", newJString(name))
  add(path_566954, "subscriptionId", newJString(subscriptionId))
  add(path_566954, "resourceGroupName", newJString(resourceGroupName))
  add(path_566954, "instanceId", newJString(instanceId))
  result = call_566953.call(path_566954, query_566955, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_566943(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_566944, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_566945, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_566971 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMSDeployLogSlot_566973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_566972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566974 = path.getOrDefault("slot")
  valid_566974 = validateParameter(valid_566974, JString, required = true,
                                 default = nil)
  if valid_566974 != nil:
    section.add "slot", valid_566974
  var valid_566975 = path.getOrDefault("name")
  valid_566975 = validateParameter(valid_566975, JString, required = true,
                                 default = nil)
  if valid_566975 != nil:
    section.add "name", valid_566975
  var valid_566976 = path.getOrDefault("subscriptionId")
  valid_566976 = validateParameter(valid_566976, JString, required = true,
                                 default = nil)
  if valid_566976 != nil:
    section.add "subscriptionId", valid_566976
  var valid_566977 = path.getOrDefault("resourceGroupName")
  valid_566977 = validateParameter(valid_566977, JString, required = true,
                                 default = nil)
  if valid_566977 != nil:
    section.add "resourceGroupName", valid_566977
  var valid_566978 = path.getOrDefault("instanceId")
  valid_566978 = validateParameter(valid_566978, JString, required = true,
                                 default = nil)
  if valid_566978 != nil:
    section.add "instanceId", valid_566978
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566979 = query.getOrDefault("api-version")
  valid_566979 = validateParameter(valid_566979, JString, required = true,
                                 default = nil)
  if valid_566979 != nil:
    section.add "api-version", valid_566979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566980: Call_WebAppsGetInstanceMSDeployLogSlot_566971;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_566980.validator(path, query, header, formData, body)
  let scheme = call_566980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566980.url(scheme.get, call_566980.host, call_566980.base,
                         call_566980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566980, url, valid)

proc call*(call_566981: Call_WebAppsGetInstanceMSDeployLogSlot_566971;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566982 = newJObject()
  var query_566983 = newJObject()
  add(path_566982, "slot", newJString(slot))
  add(query_566983, "api-version", newJString(apiVersion))
  add(path_566982, "name", newJString(name))
  add(path_566982, "subscriptionId", newJString(subscriptionId))
  add(path_566982, "resourceGroupName", newJString(resourceGroupName))
  add(path_566982, "instanceId", newJString(instanceId))
  result = call_566981.call(path_566982, query_566983, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_566971(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_566972, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_566973, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_566984 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessesSlot_566986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_566985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566987 = path.getOrDefault("slot")
  valid_566987 = validateParameter(valid_566987, JString, required = true,
                                 default = nil)
  if valid_566987 != nil:
    section.add "slot", valid_566987
  var valid_566988 = path.getOrDefault("name")
  valid_566988 = validateParameter(valid_566988, JString, required = true,
                                 default = nil)
  if valid_566988 != nil:
    section.add "name", valid_566988
  var valid_566989 = path.getOrDefault("subscriptionId")
  valid_566989 = validateParameter(valid_566989, JString, required = true,
                                 default = nil)
  if valid_566989 != nil:
    section.add "subscriptionId", valid_566989
  var valid_566990 = path.getOrDefault("resourceGroupName")
  valid_566990 = validateParameter(valid_566990, JString, required = true,
                                 default = nil)
  if valid_566990 != nil:
    section.add "resourceGroupName", valid_566990
  var valid_566991 = path.getOrDefault("instanceId")
  valid_566991 = validateParameter(valid_566991, JString, required = true,
                                 default = nil)
  if valid_566991 != nil:
    section.add "instanceId", valid_566991
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566992 = query.getOrDefault("api-version")
  valid_566992 = validateParameter(valid_566992, JString, required = true,
                                 default = nil)
  if valid_566992 != nil:
    section.add "api-version", valid_566992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566993: Call_WebAppsListInstanceProcessesSlot_566984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566993.validator(path, query, header, formData, body)
  let scheme = call_566993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566993.url(scheme.get, call_566993.host, call_566993.base,
                         call_566993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566993, url, valid)

proc call*(call_566994: Call_WebAppsListInstanceProcessesSlot_566984; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566995 = newJObject()
  var query_566996 = newJObject()
  add(path_566995, "slot", newJString(slot))
  add(query_566996, "api-version", newJString(apiVersion))
  add(path_566995, "name", newJString(name))
  add(path_566995, "subscriptionId", newJString(subscriptionId))
  add(path_566995, "resourceGroupName", newJString(resourceGroupName))
  add(path_566995, "instanceId", newJString(instanceId))
  result = call_566994.call(path_566995, query_566996, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_566984(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_566985, base: "",
    url: url_WebAppsListInstanceProcessesSlot_566986, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_566997 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessSlot_566999(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_566998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567000 = path.getOrDefault("slot")
  valid_567000 = validateParameter(valid_567000, JString, required = true,
                                 default = nil)
  if valid_567000 != nil:
    section.add "slot", valid_567000
  var valid_567001 = path.getOrDefault("name")
  valid_567001 = validateParameter(valid_567001, JString, required = true,
                                 default = nil)
  if valid_567001 != nil:
    section.add "name", valid_567001
  var valid_567002 = path.getOrDefault("subscriptionId")
  valid_567002 = validateParameter(valid_567002, JString, required = true,
                                 default = nil)
  if valid_567002 != nil:
    section.add "subscriptionId", valid_567002
  var valid_567003 = path.getOrDefault("resourceGroupName")
  valid_567003 = validateParameter(valid_567003, JString, required = true,
                                 default = nil)
  if valid_567003 != nil:
    section.add "resourceGroupName", valid_567003
  var valid_567004 = path.getOrDefault("processId")
  valid_567004 = validateParameter(valid_567004, JString, required = true,
                                 default = nil)
  if valid_567004 != nil:
    section.add "processId", valid_567004
  var valid_567005 = path.getOrDefault("instanceId")
  valid_567005 = validateParameter(valid_567005, JString, required = true,
                                 default = nil)
  if valid_567005 != nil:
    section.add "instanceId", valid_567005
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567006 = query.getOrDefault("api-version")
  valid_567006 = validateParameter(valid_567006, JString, required = true,
                                 default = nil)
  if valid_567006 != nil:
    section.add "api-version", valid_567006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567007: Call_WebAppsGetInstanceProcessSlot_566997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567007.validator(path, query, header, formData, body)
  let scheme = call_567007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567007.url(scheme.get, call_567007.host, call_567007.base,
                         call_567007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567007, url, valid)

proc call*(call_567008: Call_WebAppsGetInstanceProcessSlot_566997; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567009 = newJObject()
  var query_567010 = newJObject()
  add(path_567009, "slot", newJString(slot))
  add(query_567010, "api-version", newJString(apiVersion))
  add(path_567009, "name", newJString(name))
  add(path_567009, "subscriptionId", newJString(subscriptionId))
  add(path_567009, "resourceGroupName", newJString(resourceGroupName))
  add(path_567009, "processId", newJString(processId))
  add(path_567009, "instanceId", newJString(instanceId))
  result = call_567008.call(path_567009, query_567010, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_566997(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_566998, base: "",
    url: url_WebAppsGetInstanceProcessSlot_566999, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_567011 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceProcessSlot_567013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_567012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567014 = path.getOrDefault("slot")
  valid_567014 = validateParameter(valid_567014, JString, required = true,
                                 default = nil)
  if valid_567014 != nil:
    section.add "slot", valid_567014
  var valid_567015 = path.getOrDefault("name")
  valid_567015 = validateParameter(valid_567015, JString, required = true,
                                 default = nil)
  if valid_567015 != nil:
    section.add "name", valid_567015
  var valid_567016 = path.getOrDefault("subscriptionId")
  valid_567016 = validateParameter(valid_567016, JString, required = true,
                                 default = nil)
  if valid_567016 != nil:
    section.add "subscriptionId", valid_567016
  var valid_567017 = path.getOrDefault("resourceGroupName")
  valid_567017 = validateParameter(valid_567017, JString, required = true,
                                 default = nil)
  if valid_567017 != nil:
    section.add "resourceGroupName", valid_567017
  var valid_567018 = path.getOrDefault("processId")
  valid_567018 = validateParameter(valid_567018, JString, required = true,
                                 default = nil)
  if valid_567018 != nil:
    section.add "processId", valid_567018
  var valid_567019 = path.getOrDefault("instanceId")
  valid_567019 = validateParameter(valid_567019, JString, required = true,
                                 default = nil)
  if valid_567019 != nil:
    section.add "instanceId", valid_567019
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567020 = query.getOrDefault("api-version")
  valid_567020 = validateParameter(valid_567020, JString, required = true,
                                 default = nil)
  if valid_567020 != nil:
    section.add "api-version", valid_567020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567021: Call_WebAppsDeleteInstanceProcessSlot_567011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_567021.validator(path, query, header, formData, body)
  let scheme = call_567021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567021.url(scheme.get, call_567021.host, call_567021.base,
                         call_567021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567021, url, valid)

proc call*(call_567022: Call_WebAppsDeleteInstanceProcessSlot_567011; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567023 = newJObject()
  var query_567024 = newJObject()
  add(path_567023, "slot", newJString(slot))
  add(query_567024, "api-version", newJString(apiVersion))
  add(path_567023, "name", newJString(name))
  add(path_567023, "subscriptionId", newJString(subscriptionId))
  add(path_567023, "resourceGroupName", newJString(resourceGroupName))
  add(path_567023, "processId", newJString(processId))
  add(path_567023, "instanceId", newJString(instanceId))
  result = call_567022.call(path_567023, query_567024, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_567011(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_567012, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_567013, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_567025 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessDumpSlot_567027(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_567026(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567028 = path.getOrDefault("slot")
  valid_567028 = validateParameter(valid_567028, JString, required = true,
                                 default = nil)
  if valid_567028 != nil:
    section.add "slot", valid_567028
  var valid_567029 = path.getOrDefault("name")
  valid_567029 = validateParameter(valid_567029, JString, required = true,
                                 default = nil)
  if valid_567029 != nil:
    section.add "name", valid_567029
  var valid_567030 = path.getOrDefault("subscriptionId")
  valid_567030 = validateParameter(valid_567030, JString, required = true,
                                 default = nil)
  if valid_567030 != nil:
    section.add "subscriptionId", valid_567030
  var valid_567031 = path.getOrDefault("resourceGroupName")
  valid_567031 = validateParameter(valid_567031, JString, required = true,
                                 default = nil)
  if valid_567031 != nil:
    section.add "resourceGroupName", valid_567031
  var valid_567032 = path.getOrDefault("processId")
  valid_567032 = validateParameter(valid_567032, JString, required = true,
                                 default = nil)
  if valid_567032 != nil:
    section.add "processId", valid_567032
  var valid_567033 = path.getOrDefault("instanceId")
  valid_567033 = validateParameter(valid_567033, JString, required = true,
                                 default = nil)
  if valid_567033 != nil:
    section.add "instanceId", valid_567033
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567034 = query.getOrDefault("api-version")
  valid_567034 = validateParameter(valid_567034, JString, required = true,
                                 default = nil)
  if valid_567034 != nil:
    section.add "api-version", valid_567034
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567035: Call_WebAppsGetInstanceProcessDumpSlot_567025;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567035.validator(path, query, header, formData, body)
  let scheme = call_567035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567035.url(scheme.get, call_567035.host, call_567035.base,
                         call_567035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567035, url, valid)

proc call*(call_567036: Call_WebAppsGetInstanceProcessDumpSlot_567025;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567037 = newJObject()
  var query_567038 = newJObject()
  add(path_567037, "slot", newJString(slot))
  add(query_567038, "api-version", newJString(apiVersion))
  add(path_567037, "name", newJString(name))
  add(path_567037, "subscriptionId", newJString(subscriptionId))
  add(path_567037, "resourceGroupName", newJString(resourceGroupName))
  add(path_567037, "processId", newJString(processId))
  add(path_567037, "instanceId", newJString(instanceId))
  result = call_567036.call(path_567037, query_567038, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_567025(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_567026, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_567027, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_567039 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessModulesSlot_567041(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_567040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567042 = path.getOrDefault("slot")
  valid_567042 = validateParameter(valid_567042, JString, required = true,
                                 default = nil)
  if valid_567042 != nil:
    section.add "slot", valid_567042
  var valid_567043 = path.getOrDefault("name")
  valid_567043 = validateParameter(valid_567043, JString, required = true,
                                 default = nil)
  if valid_567043 != nil:
    section.add "name", valid_567043
  var valid_567044 = path.getOrDefault("subscriptionId")
  valid_567044 = validateParameter(valid_567044, JString, required = true,
                                 default = nil)
  if valid_567044 != nil:
    section.add "subscriptionId", valid_567044
  var valid_567045 = path.getOrDefault("resourceGroupName")
  valid_567045 = validateParameter(valid_567045, JString, required = true,
                                 default = nil)
  if valid_567045 != nil:
    section.add "resourceGroupName", valid_567045
  var valid_567046 = path.getOrDefault("processId")
  valid_567046 = validateParameter(valid_567046, JString, required = true,
                                 default = nil)
  if valid_567046 != nil:
    section.add "processId", valid_567046
  var valid_567047 = path.getOrDefault("instanceId")
  valid_567047 = validateParameter(valid_567047, JString, required = true,
                                 default = nil)
  if valid_567047 != nil:
    section.add "instanceId", valid_567047
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567048 = query.getOrDefault("api-version")
  valid_567048 = validateParameter(valid_567048, JString, required = true,
                                 default = nil)
  if valid_567048 != nil:
    section.add "api-version", valid_567048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567049: Call_WebAppsListInstanceProcessModulesSlot_567039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567049.validator(path, query, header, formData, body)
  let scheme = call_567049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567049.url(scheme.get, call_567049.host, call_567049.base,
                         call_567049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567049, url, valid)

proc call*(call_567050: Call_WebAppsListInstanceProcessModulesSlot_567039;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567051 = newJObject()
  var query_567052 = newJObject()
  add(path_567051, "slot", newJString(slot))
  add(query_567052, "api-version", newJString(apiVersion))
  add(path_567051, "name", newJString(name))
  add(path_567051, "subscriptionId", newJString(subscriptionId))
  add(path_567051, "resourceGroupName", newJString(resourceGroupName))
  add(path_567051, "processId", newJString(processId))
  add(path_567051, "instanceId", newJString(instanceId))
  result = call_567050.call(path_567051, query_567052, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_567039(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_567040, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_567041, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_567053 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessModuleSlot_567055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_567054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567056 = path.getOrDefault("slot")
  valid_567056 = validateParameter(valid_567056, JString, required = true,
                                 default = nil)
  if valid_567056 != nil:
    section.add "slot", valid_567056
  var valid_567057 = path.getOrDefault("name")
  valid_567057 = validateParameter(valid_567057, JString, required = true,
                                 default = nil)
  if valid_567057 != nil:
    section.add "name", valid_567057
  var valid_567058 = path.getOrDefault("subscriptionId")
  valid_567058 = validateParameter(valid_567058, JString, required = true,
                                 default = nil)
  if valid_567058 != nil:
    section.add "subscriptionId", valid_567058
  var valid_567059 = path.getOrDefault("resourceGroupName")
  valid_567059 = validateParameter(valid_567059, JString, required = true,
                                 default = nil)
  if valid_567059 != nil:
    section.add "resourceGroupName", valid_567059
  var valid_567060 = path.getOrDefault("processId")
  valid_567060 = validateParameter(valid_567060, JString, required = true,
                                 default = nil)
  if valid_567060 != nil:
    section.add "processId", valid_567060
  var valid_567061 = path.getOrDefault("baseAddress")
  valid_567061 = validateParameter(valid_567061, JString, required = true,
                                 default = nil)
  if valid_567061 != nil:
    section.add "baseAddress", valid_567061
  var valid_567062 = path.getOrDefault("instanceId")
  valid_567062 = validateParameter(valid_567062, JString, required = true,
                                 default = nil)
  if valid_567062 != nil:
    section.add "instanceId", valid_567062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567063 = query.getOrDefault("api-version")
  valid_567063 = validateParameter(valid_567063, JString, required = true,
                                 default = nil)
  if valid_567063 != nil:
    section.add "api-version", valid_567063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567064: Call_WebAppsGetInstanceProcessModuleSlot_567053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567064.validator(path, query, header, formData, body)
  let scheme = call_567064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567064.url(scheme.get, call_567064.host, call_567064.base,
                         call_567064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567064, url, valid)

proc call*(call_567065: Call_WebAppsGetInstanceProcessModuleSlot_567053;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567066 = newJObject()
  var query_567067 = newJObject()
  add(path_567066, "slot", newJString(slot))
  add(query_567067, "api-version", newJString(apiVersion))
  add(path_567066, "name", newJString(name))
  add(path_567066, "subscriptionId", newJString(subscriptionId))
  add(path_567066, "resourceGroupName", newJString(resourceGroupName))
  add(path_567066, "processId", newJString(processId))
  add(path_567066, "baseAddress", newJString(baseAddress))
  add(path_567066, "instanceId", newJString(instanceId))
  result = call_567065.call(path_567066, query_567067, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_567053(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_567054, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_567055, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_567068 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessThreadsSlot_567070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_567069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567071 = path.getOrDefault("slot")
  valid_567071 = validateParameter(valid_567071, JString, required = true,
                                 default = nil)
  if valid_567071 != nil:
    section.add "slot", valid_567071
  var valid_567072 = path.getOrDefault("name")
  valid_567072 = validateParameter(valid_567072, JString, required = true,
                                 default = nil)
  if valid_567072 != nil:
    section.add "name", valid_567072
  var valid_567073 = path.getOrDefault("subscriptionId")
  valid_567073 = validateParameter(valid_567073, JString, required = true,
                                 default = nil)
  if valid_567073 != nil:
    section.add "subscriptionId", valid_567073
  var valid_567074 = path.getOrDefault("resourceGroupName")
  valid_567074 = validateParameter(valid_567074, JString, required = true,
                                 default = nil)
  if valid_567074 != nil:
    section.add "resourceGroupName", valid_567074
  var valid_567075 = path.getOrDefault("processId")
  valid_567075 = validateParameter(valid_567075, JString, required = true,
                                 default = nil)
  if valid_567075 != nil:
    section.add "processId", valid_567075
  var valid_567076 = path.getOrDefault("instanceId")
  valid_567076 = validateParameter(valid_567076, JString, required = true,
                                 default = nil)
  if valid_567076 != nil:
    section.add "instanceId", valid_567076
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567077 = query.getOrDefault("api-version")
  valid_567077 = validateParameter(valid_567077, JString, required = true,
                                 default = nil)
  if valid_567077 != nil:
    section.add "api-version", valid_567077
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567078: Call_WebAppsListInstanceProcessThreadsSlot_567068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567078.validator(path, query, header, formData, body)
  let scheme = call_567078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567078.url(scheme.get, call_567078.host, call_567078.base,
                         call_567078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567078, url, valid)

proc call*(call_567079: Call_WebAppsListInstanceProcessThreadsSlot_567068;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567080 = newJObject()
  var query_567081 = newJObject()
  add(path_567080, "slot", newJString(slot))
  add(query_567081, "api-version", newJString(apiVersion))
  add(path_567080, "name", newJString(name))
  add(path_567080, "subscriptionId", newJString(subscriptionId))
  add(path_567080, "resourceGroupName", newJString(resourceGroupName))
  add(path_567080, "processId", newJString(processId))
  add(path_567080, "instanceId", newJString(instanceId))
  result = call_567079.call(path_567080, query_567081, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_567068(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_567069, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_567070, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_567082 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessThreadSlot_567084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_567083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_567085 = path.getOrDefault("threadId")
  valid_567085 = validateParameter(valid_567085, JString, required = true,
                                 default = nil)
  if valid_567085 != nil:
    section.add "threadId", valid_567085
  var valid_567086 = path.getOrDefault("slot")
  valid_567086 = validateParameter(valid_567086, JString, required = true,
                                 default = nil)
  if valid_567086 != nil:
    section.add "slot", valid_567086
  var valid_567087 = path.getOrDefault("name")
  valid_567087 = validateParameter(valid_567087, JString, required = true,
                                 default = nil)
  if valid_567087 != nil:
    section.add "name", valid_567087
  var valid_567088 = path.getOrDefault("subscriptionId")
  valid_567088 = validateParameter(valid_567088, JString, required = true,
                                 default = nil)
  if valid_567088 != nil:
    section.add "subscriptionId", valid_567088
  var valid_567089 = path.getOrDefault("resourceGroupName")
  valid_567089 = validateParameter(valid_567089, JString, required = true,
                                 default = nil)
  if valid_567089 != nil:
    section.add "resourceGroupName", valid_567089
  var valid_567090 = path.getOrDefault("processId")
  valid_567090 = validateParameter(valid_567090, JString, required = true,
                                 default = nil)
  if valid_567090 != nil:
    section.add "processId", valid_567090
  var valid_567091 = path.getOrDefault("instanceId")
  valid_567091 = validateParameter(valid_567091, JString, required = true,
                                 default = nil)
  if valid_567091 != nil:
    section.add "instanceId", valid_567091
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567092 = query.getOrDefault("api-version")
  valid_567092 = validateParameter(valid_567092, JString, required = true,
                                 default = nil)
  if valid_567092 != nil:
    section.add "api-version", valid_567092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567093: Call_WebAppsGetInstanceProcessThreadSlot_567082;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_567093.validator(path, query, header, formData, body)
  let scheme = call_567093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567093.url(scheme.get, call_567093.host, call_567093.base,
                         call_567093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567093, url, valid)

proc call*(call_567094: Call_WebAppsGetInstanceProcessThreadSlot_567082;
          threadId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; processId: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_567095 = newJObject()
  var query_567096 = newJObject()
  add(path_567095, "threadId", newJString(threadId))
  add(path_567095, "slot", newJString(slot))
  add(query_567096, "api-version", newJString(apiVersion))
  add(path_567095, "name", newJString(name))
  add(path_567095, "subscriptionId", newJString(subscriptionId))
  add(path_567095, "resourceGroupName", newJString(resourceGroupName))
  add(path_567095, "processId", newJString(processId))
  add(path_567095, "instanceId", newJString(instanceId))
  result = call_567094.call(path_567095, query_567096, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_567082(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_567083, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_567084, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_567097 = ref object of OpenApiRestCall_563564
proc url_WebAppsIsCloneableSlot_567099(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_567098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567100 = path.getOrDefault("slot")
  valid_567100 = validateParameter(valid_567100, JString, required = true,
                                 default = nil)
  if valid_567100 != nil:
    section.add "slot", valid_567100
  var valid_567101 = path.getOrDefault("name")
  valid_567101 = validateParameter(valid_567101, JString, required = true,
                                 default = nil)
  if valid_567101 != nil:
    section.add "name", valid_567101
  var valid_567102 = path.getOrDefault("subscriptionId")
  valid_567102 = validateParameter(valid_567102, JString, required = true,
                                 default = nil)
  if valid_567102 != nil:
    section.add "subscriptionId", valid_567102
  var valid_567103 = path.getOrDefault("resourceGroupName")
  valid_567103 = validateParameter(valid_567103, JString, required = true,
                                 default = nil)
  if valid_567103 != nil:
    section.add "resourceGroupName", valid_567103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567104 = query.getOrDefault("api-version")
  valid_567104 = validateParameter(valid_567104, JString, required = true,
                                 default = nil)
  if valid_567104 != nil:
    section.add "api-version", valid_567104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567105: Call_WebAppsIsCloneableSlot_567097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_567105.validator(path, query, header, formData, body)
  let scheme = call_567105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567105.url(scheme.get, call_567105.host, call_567105.base,
                         call_567105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567105, url, valid)

proc call*(call_567106: Call_WebAppsIsCloneableSlot_567097; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567107 = newJObject()
  var query_567108 = newJObject()
  add(path_567107, "slot", newJString(slot))
  add(query_567108, "api-version", newJString(apiVersion))
  add(path_567107, "name", newJString(name))
  add(path_567107, "subscriptionId", newJString(subscriptionId))
  add(path_567107, "resourceGroupName", newJString(resourceGroupName))
  result = call_567106.call(path_567107, query_567108, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_567097(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_567098, base: "",
    url: url_WebAppsIsCloneableSlot_567099, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_567109 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSyncFunctionTriggersSlot_567111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_567110(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567112 = path.getOrDefault("slot")
  valid_567112 = validateParameter(valid_567112, JString, required = true,
                                 default = nil)
  if valid_567112 != nil:
    section.add "slot", valid_567112
  var valid_567113 = path.getOrDefault("name")
  valid_567113 = validateParameter(valid_567113, JString, required = true,
                                 default = nil)
  if valid_567113 != nil:
    section.add "name", valid_567113
  var valid_567114 = path.getOrDefault("subscriptionId")
  valid_567114 = validateParameter(valid_567114, JString, required = true,
                                 default = nil)
  if valid_567114 != nil:
    section.add "subscriptionId", valid_567114
  var valid_567115 = path.getOrDefault("resourceGroupName")
  valid_567115 = validateParameter(valid_567115, JString, required = true,
                                 default = nil)
  if valid_567115 != nil:
    section.add "resourceGroupName", valid_567115
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567116 = query.getOrDefault("api-version")
  valid_567116 = validateParameter(valid_567116, JString, required = true,
                                 default = nil)
  if valid_567116 != nil:
    section.add "api-version", valid_567116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567117: Call_WebAppsListSyncFunctionTriggersSlot_567109;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_567117.validator(path, query, header, formData, body)
  let scheme = call_567117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567117.url(scheme.get, call_567117.host, call_567117.base,
                         call_567117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567117, url, valid)

proc call*(call_567118: Call_WebAppsListSyncFunctionTriggersSlot_567109;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567119 = newJObject()
  var query_567120 = newJObject()
  add(path_567119, "slot", newJString(slot))
  add(query_567120, "api-version", newJString(apiVersion))
  add(path_567119, "name", newJString(name))
  add(path_567119, "subscriptionId", newJString(subscriptionId))
  add(path_567119, "resourceGroupName", newJString(resourceGroupName))
  result = call_567118.call(path_567119, query_567120, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_567109(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_567110, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_567111, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_567121 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricDefinitionsSlot_567123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_567122(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567124 = path.getOrDefault("slot")
  valid_567124 = validateParameter(valid_567124, JString, required = true,
                                 default = nil)
  if valid_567124 != nil:
    section.add "slot", valid_567124
  var valid_567125 = path.getOrDefault("name")
  valid_567125 = validateParameter(valid_567125, JString, required = true,
                                 default = nil)
  if valid_567125 != nil:
    section.add "name", valid_567125
  var valid_567126 = path.getOrDefault("subscriptionId")
  valid_567126 = validateParameter(valid_567126, JString, required = true,
                                 default = nil)
  if valid_567126 != nil:
    section.add "subscriptionId", valid_567126
  var valid_567127 = path.getOrDefault("resourceGroupName")
  valid_567127 = validateParameter(valid_567127, JString, required = true,
                                 default = nil)
  if valid_567127 != nil:
    section.add "resourceGroupName", valid_567127
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567128 = query.getOrDefault("api-version")
  valid_567128 = validateParameter(valid_567128, JString, required = true,
                                 default = nil)
  if valid_567128 != nil:
    section.add "api-version", valid_567128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567129: Call_WebAppsListMetricDefinitionsSlot_567121;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_567129.validator(path, query, header, formData, body)
  let scheme = call_567129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567129.url(scheme.get, call_567129.host, call_567129.base,
                         call_567129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567129, url, valid)

proc call*(call_567130: Call_WebAppsListMetricDefinitionsSlot_567121; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567131 = newJObject()
  var query_567132 = newJObject()
  add(path_567131, "slot", newJString(slot))
  add(query_567132, "api-version", newJString(apiVersion))
  add(path_567131, "name", newJString(name))
  add(path_567131, "subscriptionId", newJString(subscriptionId))
  add(path_567131, "resourceGroupName", newJString(resourceGroupName))
  result = call_567130.call(path_567131, query_567132, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_567121(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_567122, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_567123, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_567133 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricsSlot_567135(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_567134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567136 = path.getOrDefault("slot")
  valid_567136 = validateParameter(valid_567136, JString, required = true,
                                 default = nil)
  if valid_567136 != nil:
    section.add "slot", valid_567136
  var valid_567137 = path.getOrDefault("name")
  valid_567137 = validateParameter(valid_567137, JString, required = true,
                                 default = nil)
  if valid_567137 != nil:
    section.add "name", valid_567137
  var valid_567138 = path.getOrDefault("subscriptionId")
  valid_567138 = validateParameter(valid_567138, JString, required = true,
                                 default = nil)
  if valid_567138 != nil:
    section.add "subscriptionId", valid_567138
  var valid_567139 = path.getOrDefault("resourceGroupName")
  valid_567139 = validateParameter(valid_567139, JString, required = true,
                                 default = nil)
  if valid_567139 != nil:
    section.add "resourceGroupName", valid_567139
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_567140 = query.getOrDefault("details")
  valid_567140 = validateParameter(valid_567140, JBool, required = false, default = nil)
  if valid_567140 != nil:
    section.add "details", valid_567140
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567141 = query.getOrDefault("api-version")
  valid_567141 = validateParameter(valid_567141, JString, required = true,
                                 default = nil)
  if valid_567141 != nil:
    section.add "api-version", valid_567141
  var valid_567142 = query.getOrDefault("$filter")
  valid_567142 = validateParameter(valid_567142, JString, required = false,
                                 default = nil)
  if valid_567142 != nil:
    section.add "$filter", valid_567142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567143: Call_WebAppsListMetricsSlot_567133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_567143.validator(path, query, header, formData, body)
  let scheme = call_567143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567143.url(scheme.get, call_567143.host, call_567143.base,
                         call_567143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567143, url, valid)

proc call*(call_567144: Call_WebAppsListMetricsSlot_567133; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567145 = newJObject()
  var query_567146 = newJObject()
  add(query_567146, "details", newJBool(details))
  add(path_567145, "slot", newJString(slot))
  add(query_567146, "api-version", newJString(apiVersion))
  add(path_567145, "name", newJString(name))
  add(path_567145, "subscriptionId", newJString(subscriptionId))
  add(path_567145, "resourceGroupName", newJString(resourceGroupName))
  add(query_567146, "$filter", newJString(Filter))
  result = call_567144.call(path_567145, query_567146, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_567133(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_567134, base: "",
    url: url_WebAppsListMetricsSlot_567135, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_567147 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMigrateMySqlStatusSlot_567149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_567148(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567150 = path.getOrDefault("slot")
  valid_567150 = validateParameter(valid_567150, JString, required = true,
                                 default = nil)
  if valid_567150 != nil:
    section.add "slot", valid_567150
  var valid_567151 = path.getOrDefault("name")
  valid_567151 = validateParameter(valid_567151, JString, required = true,
                                 default = nil)
  if valid_567151 != nil:
    section.add "name", valid_567151
  var valid_567152 = path.getOrDefault("subscriptionId")
  valid_567152 = validateParameter(valid_567152, JString, required = true,
                                 default = nil)
  if valid_567152 != nil:
    section.add "subscriptionId", valid_567152
  var valid_567153 = path.getOrDefault("resourceGroupName")
  valid_567153 = validateParameter(valid_567153, JString, required = true,
                                 default = nil)
  if valid_567153 != nil:
    section.add "resourceGroupName", valid_567153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567154 = query.getOrDefault("api-version")
  valid_567154 = validateParameter(valid_567154, JString, required = true,
                                 default = nil)
  if valid_567154 != nil:
    section.add "api-version", valid_567154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567155: Call_WebAppsGetMigrateMySqlStatusSlot_567147;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_567155.validator(path, query, header, formData, body)
  let scheme = call_567155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567155.url(scheme.get, call_567155.host, call_567155.base,
                         call_567155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567155, url, valid)

proc call*(call_567156: Call_WebAppsGetMigrateMySqlStatusSlot_567147; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567157 = newJObject()
  var query_567158 = newJObject()
  add(path_567157, "slot", newJString(slot))
  add(query_567158, "api-version", newJString(apiVersion))
  add(path_567157, "name", newJString(name))
  add(path_567157, "subscriptionId", newJString(subscriptionId))
  add(path_567157, "resourceGroupName", newJString(resourceGroupName))
  result = call_567156.call(path_567157, query_567158, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_567147(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_567148, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_567149, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567171 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567173(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567172(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567174 = path.getOrDefault("slot")
  valid_567174 = validateParameter(valid_567174, JString, required = true,
                                 default = nil)
  if valid_567174 != nil:
    section.add "slot", valid_567174
  var valid_567175 = path.getOrDefault("name")
  valid_567175 = validateParameter(valid_567175, JString, required = true,
                                 default = nil)
  if valid_567175 != nil:
    section.add "name", valid_567175
  var valid_567176 = path.getOrDefault("subscriptionId")
  valid_567176 = validateParameter(valid_567176, JString, required = true,
                                 default = nil)
  if valid_567176 != nil:
    section.add "subscriptionId", valid_567176
  var valid_567177 = path.getOrDefault("resourceGroupName")
  valid_567177 = validateParameter(valid_567177, JString, required = true,
                                 default = nil)
  if valid_567177 != nil:
    section.add "resourceGroupName", valid_567177
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567178 = query.getOrDefault("api-version")
  valid_567178 = validateParameter(valid_567178, JString, required = true,
                                 default = nil)
  if valid_567178 != nil:
    section.add "api-version", valid_567178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567180: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_567180.validator(path, query, header, formData, body)
  let scheme = call_567180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567180.url(scheme.get, call_567180.host, call_567180.base,
                         call_567180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567180, url, valid)

proc call*(call_567181: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567171;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567182 = newJObject()
  var query_567183 = newJObject()
  var body_567184 = newJObject()
  add(path_567182, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567184 = connectionEnvelope
  add(query_567183, "api-version", newJString(apiVersion))
  add(path_567182, "name", newJString(name))
  add(path_567182, "subscriptionId", newJString(subscriptionId))
  add(path_567182, "resourceGroupName", newJString(resourceGroupName))
  result = call_567181.call(path_567182, query_567183, nil, nil, body_567184)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567171(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567172,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_567173,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_567159 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSwiftVirtualNetworkConnectionSlot_567161(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_567160(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567162 = path.getOrDefault("slot")
  valid_567162 = validateParameter(valid_567162, JString, required = true,
                                 default = nil)
  if valid_567162 != nil:
    section.add "slot", valid_567162
  var valid_567163 = path.getOrDefault("name")
  valid_567163 = validateParameter(valid_567163, JString, required = true,
                                 default = nil)
  if valid_567163 != nil:
    section.add "name", valid_567163
  var valid_567164 = path.getOrDefault("subscriptionId")
  valid_567164 = validateParameter(valid_567164, JString, required = true,
                                 default = nil)
  if valid_567164 != nil:
    section.add "subscriptionId", valid_567164
  var valid_567165 = path.getOrDefault("resourceGroupName")
  valid_567165 = validateParameter(valid_567165, JString, required = true,
                                 default = nil)
  if valid_567165 != nil:
    section.add "resourceGroupName", valid_567165
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567166 = query.getOrDefault("api-version")
  valid_567166 = validateParameter(valid_567166, JString, required = true,
                                 default = nil)
  if valid_567166 != nil:
    section.add "api-version", valid_567166
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567167: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_567159;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_567167.validator(path, query, header, formData, body)
  let scheme = call_567167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567167.url(scheme.get, call_567167.host, call_567167.base,
                         call_567167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567167, url, valid)

proc call*(call_567168: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_567159;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnectionSlot
  ## Gets a Swift Virtual Network connection.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567169 = newJObject()
  var query_567170 = newJObject()
  add(path_567169, "slot", newJString(slot))
  add(query_567170, "api-version", newJString(apiVersion))
  add(path_567169, "name", newJString(name))
  add(path_567169, "subscriptionId", newJString(subscriptionId))
  add(path_567169, "resourceGroupName", newJString(resourceGroupName))
  result = call_567168.call(path_567169, query_567170, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnectionSlot* = Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_567159(
    name: "webAppsGetSwiftVirtualNetworkConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_567160,
    base: "", url: url_WebAppsGetSwiftVirtualNetworkConnectionSlot_567161,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567197 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567199(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567198(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567200 = path.getOrDefault("slot")
  valid_567200 = validateParameter(valid_567200, JString, required = true,
                                 default = nil)
  if valid_567200 != nil:
    section.add "slot", valid_567200
  var valid_567201 = path.getOrDefault("name")
  valid_567201 = validateParameter(valid_567201, JString, required = true,
                                 default = nil)
  if valid_567201 != nil:
    section.add "name", valid_567201
  var valid_567202 = path.getOrDefault("subscriptionId")
  valid_567202 = validateParameter(valid_567202, JString, required = true,
                                 default = nil)
  if valid_567202 != nil:
    section.add "subscriptionId", valid_567202
  var valid_567203 = path.getOrDefault("resourceGroupName")
  valid_567203 = validateParameter(valid_567203, JString, required = true,
                                 default = nil)
  if valid_567203 != nil:
    section.add "resourceGroupName", valid_567203
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567204 = query.getOrDefault("api-version")
  valid_567204 = validateParameter(valid_567204, JString, required = true,
                                 default = nil)
  if valid_567204 != nil:
    section.add "api-version", valid_567204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567206: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_567206.validator(path, query, header, formData, body)
  let scheme = call_567206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567206.url(scheme.get, call_567206.host, call_567206.base,
                         call_567206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567206, url, valid)

proc call*(call_567207: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567197;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567208 = newJObject()
  var query_567209 = newJObject()
  var body_567210 = newJObject()
  add(path_567208, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567210 = connectionEnvelope
  add(query_567209, "api-version", newJString(apiVersion))
  add(path_567208, "name", newJString(name))
  add(path_567208, "subscriptionId", newJString(subscriptionId))
  add(path_567208, "resourceGroupName", newJString(resourceGroupName))
  result = call_567207.call(path_567208, query_567209, nil, nil, body_567210)

var webAppsUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567197(
    name: "webAppsUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567198,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_567199,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetworkSlot_567185 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSwiftVirtualNetworkSlot_567187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetworkSlot_567186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567188 = path.getOrDefault("slot")
  valid_567188 = validateParameter(valid_567188, JString, required = true,
                                 default = nil)
  if valid_567188 != nil:
    section.add "slot", valid_567188
  var valid_567189 = path.getOrDefault("name")
  valid_567189 = validateParameter(valid_567189, JString, required = true,
                                 default = nil)
  if valid_567189 != nil:
    section.add "name", valid_567189
  var valid_567190 = path.getOrDefault("subscriptionId")
  valid_567190 = validateParameter(valid_567190, JString, required = true,
                                 default = nil)
  if valid_567190 != nil:
    section.add "subscriptionId", valid_567190
  var valid_567191 = path.getOrDefault("resourceGroupName")
  valid_567191 = validateParameter(valid_567191, JString, required = true,
                                 default = nil)
  if valid_567191 != nil:
    section.add "resourceGroupName", valid_567191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567192 = query.getOrDefault("api-version")
  valid_567192 = validateParameter(valid_567192, JString, required = true,
                                 default = nil)
  if valid_567192 != nil:
    section.add "api-version", valid_567192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567193: Call_WebAppsDeleteSwiftVirtualNetworkSlot_567185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_567193.validator(path, query, header, formData, body)
  let scheme = call_567193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567193.url(scheme.get, call_567193.host, call_567193.base,
                         call_567193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567193, url, valid)

proc call*(call_567194: Call_WebAppsDeleteSwiftVirtualNetworkSlot_567185;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetworkSlot
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567195 = newJObject()
  var query_567196 = newJObject()
  add(path_567195, "slot", newJString(slot))
  add(query_567196, "api-version", newJString(apiVersion))
  add(path_567195, "name", newJString(name))
  add(path_567195, "subscriptionId", newJString(subscriptionId))
  add(path_567195, "resourceGroupName", newJString(resourceGroupName))
  result = call_567194.call(path_567195, query_567196, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetworkSlot* = Call_WebAppsDeleteSwiftVirtualNetworkSlot_567185(
    name: "webAppsDeleteSwiftVirtualNetworkSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetworkSlot_567186, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetworkSlot_567187, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_567211 = ref object of OpenApiRestCall_563564
proc url_WebAppsListNetworkFeaturesSlot_567213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_567212(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567214 = path.getOrDefault("slot")
  valid_567214 = validateParameter(valid_567214, JString, required = true,
                                 default = nil)
  if valid_567214 != nil:
    section.add "slot", valid_567214
  var valid_567215 = path.getOrDefault("view")
  valid_567215 = validateParameter(valid_567215, JString, required = true,
                                 default = nil)
  if valid_567215 != nil:
    section.add "view", valid_567215
  var valid_567216 = path.getOrDefault("name")
  valid_567216 = validateParameter(valid_567216, JString, required = true,
                                 default = nil)
  if valid_567216 != nil:
    section.add "name", valid_567216
  var valid_567217 = path.getOrDefault("subscriptionId")
  valid_567217 = validateParameter(valid_567217, JString, required = true,
                                 default = nil)
  if valid_567217 != nil:
    section.add "subscriptionId", valid_567217
  var valid_567218 = path.getOrDefault("resourceGroupName")
  valid_567218 = validateParameter(valid_567218, JString, required = true,
                                 default = nil)
  if valid_567218 != nil:
    section.add "resourceGroupName", valid_567218
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567219 = query.getOrDefault("api-version")
  valid_567219 = validateParameter(valid_567219, JString, required = true,
                                 default = nil)
  if valid_567219 != nil:
    section.add "api-version", valid_567219
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567220: Call_WebAppsListNetworkFeaturesSlot_567211; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_567220.validator(path, query, header, formData, body)
  let scheme = call_567220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567220.url(scheme.get, call_567220.host, call_567220.base,
                         call_567220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567220, url, valid)

proc call*(call_567221: Call_WebAppsListNetworkFeaturesSlot_567211; slot: string;
          apiVersion: string; view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567222 = newJObject()
  var query_567223 = newJObject()
  add(path_567222, "slot", newJString(slot))
  add(query_567223, "api-version", newJString(apiVersion))
  add(path_567222, "view", newJString(view))
  add(path_567222, "name", newJString(name))
  add(path_567222, "subscriptionId", newJString(subscriptionId))
  add(path_567222, "resourceGroupName", newJString(resourceGroupName))
  result = call_567221.call(path_567222, query_567223, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_567211(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_567212, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_567213, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlot_567224 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTraceOperationSlot_567226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlot_567225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567227 = path.getOrDefault("slot")
  valid_567227 = validateParameter(valid_567227, JString, required = true,
                                 default = nil)
  if valid_567227 != nil:
    section.add "slot", valid_567227
  var valid_567228 = path.getOrDefault("operationId")
  valid_567228 = validateParameter(valid_567228, JString, required = true,
                                 default = nil)
  if valid_567228 != nil:
    section.add "operationId", valid_567228
  var valid_567229 = path.getOrDefault("name")
  valid_567229 = validateParameter(valid_567229, JString, required = true,
                                 default = nil)
  if valid_567229 != nil:
    section.add "name", valid_567229
  var valid_567230 = path.getOrDefault("subscriptionId")
  valid_567230 = validateParameter(valid_567230, JString, required = true,
                                 default = nil)
  if valid_567230 != nil:
    section.add "subscriptionId", valid_567230
  var valid_567231 = path.getOrDefault("resourceGroupName")
  valid_567231 = validateParameter(valid_567231, JString, required = true,
                                 default = nil)
  if valid_567231 != nil:
    section.add "resourceGroupName", valid_567231
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567232 = query.getOrDefault("api-version")
  valid_567232 = validateParameter(valid_567232, JString, required = true,
                                 default = nil)
  if valid_567232 != nil:
    section.add "api-version", valid_567232
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567233: Call_WebAppsGetNetworkTraceOperationSlot_567224;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_567233.validator(path, query, header, formData, body)
  let scheme = call_567233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567233.url(scheme.get, call_567233.host, call_567233.base,
                         call_567233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567233, url, valid)

proc call*(call_567234: Call_WebAppsGetNetworkTraceOperationSlot_567224;
          slot: string; apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567235 = newJObject()
  var query_567236 = newJObject()
  add(path_567235, "slot", newJString(slot))
  add(query_567236, "api-version", newJString(apiVersion))
  add(path_567235, "operationId", newJString(operationId))
  add(path_567235, "name", newJString(name))
  add(path_567235, "subscriptionId", newJString(subscriptionId))
  add(path_567235, "resourceGroupName", newJString(resourceGroupName))
  result = call_567234.call(path_567235, query_567236, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlot* = Call_WebAppsGetNetworkTraceOperationSlot_567224(
    name: "webAppsGetNetworkTraceOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlot_567225, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlot_567226, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_567237 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTraceSlot_567239(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_567238(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567240 = path.getOrDefault("slot")
  valid_567240 = validateParameter(valid_567240, JString, required = true,
                                 default = nil)
  if valid_567240 != nil:
    section.add "slot", valid_567240
  var valid_567241 = path.getOrDefault("name")
  valid_567241 = validateParameter(valid_567241, JString, required = true,
                                 default = nil)
  if valid_567241 != nil:
    section.add "name", valid_567241
  var valid_567242 = path.getOrDefault("subscriptionId")
  valid_567242 = validateParameter(valid_567242, JString, required = true,
                                 default = nil)
  if valid_567242 != nil:
    section.add "subscriptionId", valid_567242
  var valid_567243 = path.getOrDefault("resourceGroupName")
  valid_567243 = validateParameter(valid_567243, JString, required = true,
                                 default = nil)
  if valid_567243 != nil:
    section.add "resourceGroupName", valid_567243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567244 = query.getOrDefault("api-version")
  valid_567244 = validateParameter(valid_567244, JString, required = true,
                                 default = nil)
  if valid_567244 != nil:
    section.add "api-version", valid_567244
  var valid_567245 = query.getOrDefault("sasUrl")
  valid_567245 = validateParameter(valid_567245, JString, required = false,
                                 default = nil)
  if valid_567245 != nil:
    section.add "sasUrl", valid_567245
  var valid_567246 = query.getOrDefault("durationInSeconds")
  valid_567246 = validateParameter(valid_567246, JInt, required = false, default = nil)
  if valid_567246 != nil:
    section.add "durationInSeconds", valid_567246
  var valid_567247 = query.getOrDefault("maxFrameLength")
  valid_567247 = validateParameter(valid_567247, JInt, required = false, default = nil)
  if valid_567247 != nil:
    section.add "maxFrameLength", valid_567247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567248: Call_WebAppsStartWebSiteNetworkTraceSlot_567237;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_567248.validator(path, query, header, formData, body)
  let scheme = call_567248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567248.url(scheme.get, call_567248.host, call_567248.base,
                         call_567248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567248, url, valid)

proc call*(call_567249: Call_WebAppsStartWebSiteNetworkTraceSlot_567237;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site (To be deprecated).
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_567250 = newJObject()
  var query_567251 = newJObject()
  add(path_567250, "slot", newJString(slot))
  add(query_567251, "api-version", newJString(apiVersion))
  add(query_567251, "sasUrl", newJString(sasUrl))
  add(path_567250, "name", newJString(name))
  add(path_567250, "subscriptionId", newJString(subscriptionId))
  add(query_567251, "durationInSeconds", newJInt(durationInSeconds))
  add(path_567250, "resourceGroupName", newJString(resourceGroupName))
  add(query_567251, "maxFrameLength", newJInt(maxFrameLength))
  result = call_567249.call(path_567250, query_567251, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_567237(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_567238, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_567239, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperationSlot_567252 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTraceOperationSlot_567254(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperationSlot_567253(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567255 = path.getOrDefault("slot")
  valid_567255 = validateParameter(valid_567255, JString, required = true,
                                 default = nil)
  if valid_567255 != nil:
    section.add "slot", valid_567255
  var valid_567256 = path.getOrDefault("name")
  valid_567256 = validateParameter(valid_567256, JString, required = true,
                                 default = nil)
  if valid_567256 != nil:
    section.add "name", valid_567256
  var valid_567257 = path.getOrDefault("subscriptionId")
  valid_567257 = validateParameter(valid_567257, JString, required = true,
                                 default = nil)
  if valid_567257 != nil:
    section.add "subscriptionId", valid_567257
  var valid_567258 = path.getOrDefault("resourceGroupName")
  valid_567258 = validateParameter(valid_567258, JString, required = true,
                                 default = nil)
  if valid_567258 != nil:
    section.add "resourceGroupName", valid_567258
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567259 = query.getOrDefault("api-version")
  valid_567259 = validateParameter(valid_567259, JString, required = true,
                                 default = nil)
  if valid_567259 != nil:
    section.add "api-version", valid_567259
  var valid_567260 = query.getOrDefault("sasUrl")
  valid_567260 = validateParameter(valid_567260, JString, required = false,
                                 default = nil)
  if valid_567260 != nil:
    section.add "sasUrl", valid_567260
  var valid_567261 = query.getOrDefault("durationInSeconds")
  valid_567261 = validateParameter(valid_567261, JInt, required = false, default = nil)
  if valid_567261 != nil:
    section.add "durationInSeconds", valid_567261
  var valid_567262 = query.getOrDefault("maxFrameLength")
  valid_567262 = validateParameter(valid_567262, JInt, required = false, default = nil)
  if valid_567262 != nil:
    section.add "maxFrameLength", valid_567262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567263: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_567252;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_567263.validator(path, query, header, formData, body)
  let scheme = call_567263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567263.url(scheme.get, call_567263.host, call_567263.base,
                         call_567263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567263, url, valid)

proc call*(call_567264: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_567252;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperationSlot
  ## Start capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_567265 = newJObject()
  var query_567266 = newJObject()
  add(path_567265, "slot", newJString(slot))
  add(query_567266, "api-version", newJString(apiVersion))
  add(query_567266, "sasUrl", newJString(sasUrl))
  add(path_567265, "name", newJString(name))
  add(path_567265, "subscriptionId", newJString(subscriptionId))
  add(query_567266, "durationInSeconds", newJInt(durationInSeconds))
  add(path_567265, "resourceGroupName", newJString(resourceGroupName))
  add(query_567266, "maxFrameLength", newJInt(maxFrameLength))
  result = call_567264.call(path_567265, query_567266, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperationSlot* = Call_WebAppsStartWebSiteNetworkTraceOperationSlot_567252(
    name: "webAppsStartWebSiteNetworkTraceOperationSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperationSlot_567253,
    base: "", url: url_WebAppsStartWebSiteNetworkTraceOperationSlot_567254,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_567267 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopWebSiteNetworkTraceSlot_567269(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_567268(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567270 = path.getOrDefault("slot")
  valid_567270 = validateParameter(valid_567270, JString, required = true,
                                 default = nil)
  if valid_567270 != nil:
    section.add "slot", valid_567270
  var valid_567271 = path.getOrDefault("name")
  valid_567271 = validateParameter(valid_567271, JString, required = true,
                                 default = nil)
  if valid_567271 != nil:
    section.add "name", valid_567271
  var valid_567272 = path.getOrDefault("subscriptionId")
  valid_567272 = validateParameter(valid_567272, JString, required = true,
                                 default = nil)
  if valid_567272 != nil:
    section.add "subscriptionId", valid_567272
  var valid_567273 = path.getOrDefault("resourceGroupName")
  valid_567273 = validateParameter(valid_567273, JString, required = true,
                                 default = nil)
  if valid_567273 != nil:
    section.add "resourceGroupName", valid_567273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567274 = query.getOrDefault("api-version")
  valid_567274 = validateParameter(valid_567274, JString, required = true,
                                 default = nil)
  if valid_567274 != nil:
    section.add "api-version", valid_567274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567275: Call_WebAppsStopWebSiteNetworkTraceSlot_567267;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_567275.validator(path, query, header, formData, body)
  let scheme = call_567275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567275.url(scheme.get, call_567275.host, call_567275.base,
                         call_567275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567275, url, valid)

proc call*(call_567276: Call_WebAppsStopWebSiteNetworkTraceSlot_567267;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567277 = newJObject()
  var query_567278 = newJObject()
  add(path_567277, "slot", newJString(slot))
  add(query_567278, "api-version", newJString(apiVersion))
  add(path_567277, "name", newJString(name))
  add(path_567277, "subscriptionId", newJString(subscriptionId))
  add(path_567277, "resourceGroupName", newJString(resourceGroupName))
  result = call_567276.call(path_567277, query_567278, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_567267(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_567268, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_567269, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlot_567279 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTracesSlot_567281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlot_567280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567282 = path.getOrDefault("slot")
  valid_567282 = validateParameter(valid_567282, JString, required = true,
                                 default = nil)
  if valid_567282 != nil:
    section.add "slot", valid_567282
  var valid_567283 = path.getOrDefault("operationId")
  valid_567283 = validateParameter(valid_567283, JString, required = true,
                                 default = nil)
  if valid_567283 != nil:
    section.add "operationId", valid_567283
  var valid_567284 = path.getOrDefault("name")
  valid_567284 = validateParameter(valid_567284, JString, required = true,
                                 default = nil)
  if valid_567284 != nil:
    section.add "name", valid_567284
  var valid_567285 = path.getOrDefault("subscriptionId")
  valid_567285 = validateParameter(valid_567285, JString, required = true,
                                 default = nil)
  if valid_567285 != nil:
    section.add "subscriptionId", valid_567285
  var valid_567286 = path.getOrDefault("resourceGroupName")
  valid_567286 = validateParameter(valid_567286, JString, required = true,
                                 default = nil)
  if valid_567286 != nil:
    section.add "resourceGroupName", valid_567286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567287 = query.getOrDefault("api-version")
  valid_567287 = validateParameter(valid_567287, JString, required = true,
                                 default = nil)
  if valid_567287 != nil:
    section.add "api-version", valid_567287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567288: Call_WebAppsGetNetworkTracesSlot_567279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_567288.validator(path, query, header, formData, body)
  let scheme = call_567288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567288.url(scheme.get, call_567288.host, call_567288.base,
                         call_567288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567288, url, valid)

proc call*(call_567289: Call_WebAppsGetNetworkTracesSlot_567279; slot: string;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTracesSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567290 = newJObject()
  var query_567291 = newJObject()
  add(path_567290, "slot", newJString(slot))
  add(query_567291, "api-version", newJString(apiVersion))
  add(path_567290, "operationId", newJString(operationId))
  add(path_567290, "name", newJString(name))
  add(path_567290, "subscriptionId", newJString(subscriptionId))
  add(path_567290, "resourceGroupName", newJString(resourceGroupName))
  result = call_567289.call(path_567290, query_567291, nil, nil, nil)

var webAppsGetNetworkTracesSlot* = Call_WebAppsGetNetworkTracesSlot_567279(
    name: "webAppsGetNetworkTracesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlot_567280, base: "",
    url: url_WebAppsGetNetworkTracesSlot_567281, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlotV2_567292 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTraceOperationSlotV2_567294(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlotV2_567293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567295 = path.getOrDefault("slot")
  valid_567295 = validateParameter(valid_567295, JString, required = true,
                                 default = nil)
  if valid_567295 != nil:
    section.add "slot", valid_567295
  var valid_567296 = path.getOrDefault("operationId")
  valid_567296 = validateParameter(valid_567296, JString, required = true,
                                 default = nil)
  if valid_567296 != nil:
    section.add "operationId", valid_567296
  var valid_567297 = path.getOrDefault("name")
  valid_567297 = validateParameter(valid_567297, JString, required = true,
                                 default = nil)
  if valid_567297 != nil:
    section.add "name", valid_567297
  var valid_567298 = path.getOrDefault("subscriptionId")
  valid_567298 = validateParameter(valid_567298, JString, required = true,
                                 default = nil)
  if valid_567298 != nil:
    section.add "subscriptionId", valid_567298
  var valid_567299 = path.getOrDefault("resourceGroupName")
  valid_567299 = validateParameter(valid_567299, JString, required = true,
                                 default = nil)
  if valid_567299 != nil:
    section.add "resourceGroupName", valid_567299
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567300 = query.getOrDefault("api-version")
  valid_567300 = validateParameter(valid_567300, JString, required = true,
                                 default = nil)
  if valid_567300 != nil:
    section.add "api-version", valid_567300
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567301: Call_WebAppsGetNetworkTraceOperationSlotV2_567292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_567301.validator(path, query, header, formData, body)
  let scheme = call_567301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567301.url(scheme.get, call_567301.host, call_567301.base,
                         call_567301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567301, url, valid)

proc call*(call_567302: Call_WebAppsGetNetworkTraceOperationSlotV2_567292;
          slot: string; apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567303 = newJObject()
  var query_567304 = newJObject()
  add(path_567303, "slot", newJString(slot))
  add(query_567304, "api-version", newJString(apiVersion))
  add(path_567303, "operationId", newJString(operationId))
  add(path_567303, "name", newJString(name))
  add(path_567303, "subscriptionId", newJString(subscriptionId))
  add(path_567303, "resourceGroupName", newJString(resourceGroupName))
  result = call_567302.call(path_567303, query_567304, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlotV2* = Call_WebAppsGetNetworkTraceOperationSlotV2_567292(
    name: "webAppsGetNetworkTraceOperationSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlotV2_567293, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlotV2_567294, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlotV2_567305 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetNetworkTracesSlotV2_567307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlotV2_567306(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567308 = path.getOrDefault("slot")
  valid_567308 = validateParameter(valid_567308, JString, required = true,
                                 default = nil)
  if valid_567308 != nil:
    section.add "slot", valid_567308
  var valid_567309 = path.getOrDefault("operationId")
  valid_567309 = validateParameter(valid_567309, JString, required = true,
                                 default = nil)
  if valid_567309 != nil:
    section.add "operationId", valid_567309
  var valid_567310 = path.getOrDefault("name")
  valid_567310 = validateParameter(valid_567310, JString, required = true,
                                 default = nil)
  if valid_567310 != nil:
    section.add "name", valid_567310
  var valid_567311 = path.getOrDefault("subscriptionId")
  valid_567311 = validateParameter(valid_567311, JString, required = true,
                                 default = nil)
  if valid_567311 != nil:
    section.add "subscriptionId", valid_567311
  var valid_567312 = path.getOrDefault("resourceGroupName")
  valid_567312 = validateParameter(valid_567312, JString, required = true,
                                 default = nil)
  if valid_567312 != nil:
    section.add "resourceGroupName", valid_567312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567313 = query.getOrDefault("api-version")
  valid_567313 = validateParameter(valid_567313, JString, required = true,
                                 default = nil)
  if valid_567313 != nil:
    section.add "api-version", valid_567313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567314: Call_WebAppsGetNetworkTracesSlotV2_567305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_567314.validator(path, query, header, formData, body)
  let scheme = call_567314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567314.url(scheme.get, call_567314.host, call_567314.base,
                         call_567314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567314, url, valid)

proc call*(call_567315: Call_WebAppsGetNetworkTracesSlotV2_567305; slot: string;
          apiVersion: string; operationId: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetNetworkTracesSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   operationId: string (required)
  ##              : GUID of the operation.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567316 = newJObject()
  var query_567317 = newJObject()
  add(path_567316, "slot", newJString(slot))
  add(query_567317, "api-version", newJString(apiVersion))
  add(path_567316, "operationId", newJString(operationId))
  add(path_567316, "name", newJString(name))
  add(path_567316, "subscriptionId", newJString(subscriptionId))
  add(path_567316, "resourceGroupName", newJString(resourceGroupName))
  result = call_567315.call(path_567316, query_567317, nil, nil, nil)

var webAppsGetNetworkTracesSlotV2* = Call_WebAppsGetNetworkTracesSlotV2_567305(
    name: "webAppsGetNetworkTracesSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlotV2_567306, base: "",
    url: url_WebAppsGetNetworkTracesSlotV2_567307, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_567318 = ref object of OpenApiRestCall_563564
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_567320(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_567319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567321 = path.getOrDefault("slot")
  valid_567321 = validateParameter(valid_567321, JString, required = true,
                                 default = nil)
  if valid_567321 != nil:
    section.add "slot", valid_567321
  var valid_567322 = path.getOrDefault("name")
  valid_567322 = validateParameter(valid_567322, JString, required = true,
                                 default = nil)
  if valid_567322 != nil:
    section.add "name", valid_567322
  var valid_567323 = path.getOrDefault("subscriptionId")
  valid_567323 = validateParameter(valid_567323, JString, required = true,
                                 default = nil)
  if valid_567323 != nil:
    section.add "subscriptionId", valid_567323
  var valid_567324 = path.getOrDefault("resourceGroupName")
  valid_567324 = validateParameter(valid_567324, JString, required = true,
                                 default = nil)
  if valid_567324 != nil:
    section.add "resourceGroupName", valid_567324
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567325 = query.getOrDefault("api-version")
  valid_567325 = validateParameter(valid_567325, JString, required = true,
                                 default = nil)
  if valid_567325 != nil:
    section.add "api-version", valid_567325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567326: Call_WebAppsGenerateNewSitePublishingPasswordSlot_567318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_567326.validator(path, query, header, formData, body)
  let scheme = call_567326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567326.url(scheme.get, call_567326.host, call_567326.base,
                         call_567326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567326, url, valid)

proc call*(call_567327: Call_WebAppsGenerateNewSitePublishingPasswordSlot_567318;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567328 = newJObject()
  var query_567329 = newJObject()
  add(path_567328, "slot", newJString(slot))
  add(query_567329, "api-version", newJString(apiVersion))
  add(path_567328, "name", newJString(name))
  add(path_567328, "subscriptionId", newJString(subscriptionId))
  add(path_567328, "resourceGroupName", newJString(resourceGroupName))
  result = call_567327.call(path_567328, query_567329, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_567318(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_567319,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_567320,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_567330 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPerfMonCountersSlot_567332(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_567331(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567333 = path.getOrDefault("slot")
  valid_567333 = validateParameter(valid_567333, JString, required = true,
                                 default = nil)
  if valid_567333 != nil:
    section.add "slot", valid_567333
  var valid_567334 = path.getOrDefault("name")
  valid_567334 = validateParameter(valid_567334, JString, required = true,
                                 default = nil)
  if valid_567334 != nil:
    section.add "name", valid_567334
  var valid_567335 = path.getOrDefault("subscriptionId")
  valid_567335 = validateParameter(valid_567335, JString, required = true,
                                 default = nil)
  if valid_567335 != nil:
    section.add "subscriptionId", valid_567335
  var valid_567336 = path.getOrDefault("resourceGroupName")
  valid_567336 = validateParameter(valid_567336, JString, required = true,
                                 default = nil)
  if valid_567336 != nil:
    section.add "resourceGroupName", valid_567336
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567337 = query.getOrDefault("api-version")
  valid_567337 = validateParameter(valid_567337, JString, required = true,
                                 default = nil)
  if valid_567337 != nil:
    section.add "api-version", valid_567337
  var valid_567338 = query.getOrDefault("$filter")
  valid_567338 = validateParameter(valid_567338, JString, required = false,
                                 default = nil)
  if valid_567338 != nil:
    section.add "$filter", valid_567338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567339: Call_WebAppsListPerfMonCountersSlot_567330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_567339.validator(path, query, header, formData, body)
  let scheme = call_567339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567339.url(scheme.get, call_567339.host, call_567339.base,
                         call_567339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567339, url, valid)

proc call*(call_567340: Call_WebAppsListPerfMonCountersSlot_567330; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567341 = newJObject()
  var query_567342 = newJObject()
  add(path_567341, "slot", newJString(slot))
  add(query_567342, "api-version", newJString(apiVersion))
  add(path_567341, "name", newJString(name))
  add(path_567341, "subscriptionId", newJString(subscriptionId))
  add(path_567341, "resourceGroupName", newJString(resourceGroupName))
  add(query_567342, "$filter", newJString(Filter))
  result = call_567340.call(path_567341, query_567342, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_567330(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_567331, base: "",
    url: url_WebAppsListPerfMonCountersSlot_567332, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_567343 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSitePhpErrorLogFlagSlot_567345(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_567344(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567346 = path.getOrDefault("slot")
  valid_567346 = validateParameter(valid_567346, JString, required = true,
                                 default = nil)
  if valid_567346 != nil:
    section.add "slot", valid_567346
  var valid_567347 = path.getOrDefault("name")
  valid_567347 = validateParameter(valid_567347, JString, required = true,
                                 default = nil)
  if valid_567347 != nil:
    section.add "name", valid_567347
  var valid_567348 = path.getOrDefault("subscriptionId")
  valid_567348 = validateParameter(valid_567348, JString, required = true,
                                 default = nil)
  if valid_567348 != nil:
    section.add "subscriptionId", valid_567348
  var valid_567349 = path.getOrDefault("resourceGroupName")
  valid_567349 = validateParameter(valid_567349, JString, required = true,
                                 default = nil)
  if valid_567349 != nil:
    section.add "resourceGroupName", valid_567349
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567350 = query.getOrDefault("api-version")
  valid_567350 = validateParameter(valid_567350, JString, required = true,
                                 default = nil)
  if valid_567350 != nil:
    section.add "api-version", valid_567350
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567351: Call_WebAppsGetSitePhpErrorLogFlagSlot_567343;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_567351.validator(path, query, header, formData, body)
  let scheme = call_567351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567351.url(scheme.get, call_567351.host, call_567351.base,
                         call_567351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567351, url, valid)

proc call*(call_567352: Call_WebAppsGetSitePhpErrorLogFlagSlot_567343;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567353 = newJObject()
  var query_567354 = newJObject()
  add(path_567353, "slot", newJString(slot))
  add(query_567354, "api-version", newJString(apiVersion))
  add(path_567353, "name", newJString(name))
  add(path_567353, "subscriptionId", newJString(subscriptionId))
  add(path_567353, "resourceGroupName", newJString(resourceGroupName))
  result = call_567352.call(path_567353, query_567354, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_567343(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_567344, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_567345, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_567355 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPremierAddOnsSlot_567357(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_567356(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567358 = path.getOrDefault("slot")
  valid_567358 = validateParameter(valid_567358, JString, required = true,
                                 default = nil)
  if valid_567358 != nil:
    section.add "slot", valid_567358
  var valid_567359 = path.getOrDefault("name")
  valid_567359 = validateParameter(valid_567359, JString, required = true,
                                 default = nil)
  if valid_567359 != nil:
    section.add "name", valid_567359
  var valid_567360 = path.getOrDefault("subscriptionId")
  valid_567360 = validateParameter(valid_567360, JString, required = true,
                                 default = nil)
  if valid_567360 != nil:
    section.add "subscriptionId", valid_567360
  var valid_567361 = path.getOrDefault("resourceGroupName")
  valid_567361 = validateParameter(valid_567361, JString, required = true,
                                 default = nil)
  if valid_567361 != nil:
    section.add "resourceGroupName", valid_567361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567362 = query.getOrDefault("api-version")
  valid_567362 = validateParameter(valid_567362, JString, required = true,
                                 default = nil)
  if valid_567362 != nil:
    section.add "api-version", valid_567362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567363: Call_WebAppsListPremierAddOnsSlot_567355; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_567363.validator(path, query, header, formData, body)
  let scheme = call_567363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567363.url(scheme.get, call_567363.host, call_567363.base,
                         call_567363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567363, url, valid)

proc call*(call_567364: Call_WebAppsListPremierAddOnsSlot_567355; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567365 = newJObject()
  var query_567366 = newJObject()
  add(path_567365, "slot", newJString(slot))
  add(query_567366, "api-version", newJString(apiVersion))
  add(path_567365, "name", newJString(name))
  add(path_567365, "subscriptionId", newJString(subscriptionId))
  add(path_567365, "resourceGroupName", newJString(resourceGroupName))
  result = call_567364.call(path_567365, query_567366, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_567355(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_567356, base: "",
    url: url_WebAppsListPremierAddOnsSlot_567357, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_567380 = ref object of OpenApiRestCall_563564
proc url_WebAppsAddPremierAddOnSlot_567382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_567381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567383 = path.getOrDefault("slot")
  valid_567383 = validateParameter(valid_567383, JString, required = true,
                                 default = nil)
  if valid_567383 != nil:
    section.add "slot", valid_567383
  var valid_567384 = path.getOrDefault("name")
  valid_567384 = validateParameter(valid_567384, JString, required = true,
                                 default = nil)
  if valid_567384 != nil:
    section.add "name", valid_567384
  var valid_567385 = path.getOrDefault("subscriptionId")
  valid_567385 = validateParameter(valid_567385, JString, required = true,
                                 default = nil)
  if valid_567385 != nil:
    section.add "subscriptionId", valid_567385
  var valid_567386 = path.getOrDefault("premierAddOnName")
  valid_567386 = validateParameter(valid_567386, JString, required = true,
                                 default = nil)
  if valid_567386 != nil:
    section.add "premierAddOnName", valid_567386
  var valid_567387 = path.getOrDefault("resourceGroupName")
  valid_567387 = validateParameter(valid_567387, JString, required = true,
                                 default = nil)
  if valid_567387 != nil:
    section.add "resourceGroupName", valid_567387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567388 = query.getOrDefault("api-version")
  valid_567388 = validateParameter(valid_567388, JString, required = true,
                                 default = nil)
  if valid_567388 != nil:
    section.add "api-version", valid_567388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567390: Call_WebAppsAddPremierAddOnSlot_567380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_567390.validator(path, query, header, formData, body)
  let scheme = call_567390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567390.url(scheme.get, call_567390.host, call_567390.base,
                         call_567390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567390, url, valid)

proc call*(call_567391: Call_WebAppsAddPremierAddOnSlot_567380; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; premierAddOn: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567392 = newJObject()
  var query_567393 = newJObject()
  var body_567394 = newJObject()
  add(path_567392, "slot", newJString(slot))
  add(query_567393, "api-version", newJString(apiVersion))
  add(path_567392, "name", newJString(name))
  add(path_567392, "subscriptionId", newJString(subscriptionId))
  add(path_567392, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_567394 = premierAddOn
  add(path_567392, "resourceGroupName", newJString(resourceGroupName))
  result = call_567391.call(path_567392, query_567393, nil, nil, body_567394)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_567380(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_567381, base: "",
    url: url_WebAppsAddPremierAddOnSlot_567382, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_567367 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPremierAddOnSlot_567369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_567368(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567370 = path.getOrDefault("slot")
  valid_567370 = validateParameter(valid_567370, JString, required = true,
                                 default = nil)
  if valid_567370 != nil:
    section.add "slot", valid_567370
  var valid_567371 = path.getOrDefault("name")
  valid_567371 = validateParameter(valid_567371, JString, required = true,
                                 default = nil)
  if valid_567371 != nil:
    section.add "name", valid_567371
  var valid_567372 = path.getOrDefault("subscriptionId")
  valid_567372 = validateParameter(valid_567372, JString, required = true,
                                 default = nil)
  if valid_567372 != nil:
    section.add "subscriptionId", valid_567372
  var valid_567373 = path.getOrDefault("premierAddOnName")
  valid_567373 = validateParameter(valid_567373, JString, required = true,
                                 default = nil)
  if valid_567373 != nil:
    section.add "premierAddOnName", valid_567373
  var valid_567374 = path.getOrDefault("resourceGroupName")
  valid_567374 = validateParameter(valid_567374, JString, required = true,
                                 default = nil)
  if valid_567374 != nil:
    section.add "resourceGroupName", valid_567374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567375 = query.getOrDefault("api-version")
  valid_567375 = validateParameter(valid_567375, JString, required = true,
                                 default = nil)
  if valid_567375 != nil:
    section.add "api-version", valid_567375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567376: Call_WebAppsGetPremierAddOnSlot_567367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_567376.validator(path, query, header, formData, body)
  let scheme = call_567376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567376.url(scheme.get, call_567376.host, call_567376.base,
                         call_567376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567376, url, valid)

proc call*(call_567377: Call_WebAppsGetPremierAddOnSlot_567367; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567378 = newJObject()
  var query_567379 = newJObject()
  add(path_567378, "slot", newJString(slot))
  add(query_567379, "api-version", newJString(apiVersion))
  add(path_567378, "name", newJString(name))
  add(path_567378, "subscriptionId", newJString(subscriptionId))
  add(path_567378, "premierAddOnName", newJString(premierAddOnName))
  add(path_567378, "resourceGroupName", newJString(resourceGroupName))
  result = call_567377.call(path_567378, query_567379, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_567367(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_567368, base: "",
    url: url_WebAppsGetPremierAddOnSlot_567369, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOnSlot_567408 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdatePremierAddOnSlot_567410(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOnSlot_567409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567411 = path.getOrDefault("slot")
  valid_567411 = validateParameter(valid_567411, JString, required = true,
                                 default = nil)
  if valid_567411 != nil:
    section.add "slot", valid_567411
  var valid_567412 = path.getOrDefault("name")
  valid_567412 = validateParameter(valid_567412, JString, required = true,
                                 default = nil)
  if valid_567412 != nil:
    section.add "name", valid_567412
  var valid_567413 = path.getOrDefault("subscriptionId")
  valid_567413 = validateParameter(valid_567413, JString, required = true,
                                 default = nil)
  if valid_567413 != nil:
    section.add "subscriptionId", valid_567413
  var valid_567414 = path.getOrDefault("premierAddOnName")
  valid_567414 = validateParameter(valid_567414, JString, required = true,
                                 default = nil)
  if valid_567414 != nil:
    section.add "premierAddOnName", valid_567414
  var valid_567415 = path.getOrDefault("resourceGroupName")
  valid_567415 = validateParameter(valid_567415, JString, required = true,
                                 default = nil)
  if valid_567415 != nil:
    section.add "resourceGroupName", valid_567415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567416 = query.getOrDefault("api-version")
  valid_567416 = validateParameter(valid_567416, JString, required = true,
                                 default = nil)
  if valid_567416 != nil:
    section.add "api-version", valid_567416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567418: Call_WebAppsUpdatePremierAddOnSlot_567408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_567418.validator(path, query, header, formData, body)
  let scheme = call_567418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567418.url(scheme.get, call_567418.host, call_567418.base,
                         call_567418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567418, url, valid)

proc call*(call_567419: Call_WebAppsUpdatePremierAddOnSlot_567408; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; premierAddOn: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsUpdatePremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567420 = newJObject()
  var query_567421 = newJObject()
  var body_567422 = newJObject()
  add(path_567420, "slot", newJString(slot))
  add(query_567421, "api-version", newJString(apiVersion))
  add(path_567420, "name", newJString(name))
  add(path_567420, "subscriptionId", newJString(subscriptionId))
  add(path_567420, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_567422 = premierAddOn
  add(path_567420, "resourceGroupName", newJString(resourceGroupName))
  result = call_567419.call(path_567420, query_567421, nil, nil, body_567422)

var webAppsUpdatePremierAddOnSlot* = Call_WebAppsUpdatePremierAddOnSlot_567408(
    name: "webAppsUpdatePremierAddOnSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOnSlot_567409, base: "",
    url: url_WebAppsUpdatePremierAddOnSlot_567410, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_567395 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePremierAddOnSlot_567397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_567396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567398 = path.getOrDefault("slot")
  valid_567398 = validateParameter(valid_567398, JString, required = true,
                                 default = nil)
  if valid_567398 != nil:
    section.add "slot", valid_567398
  var valid_567399 = path.getOrDefault("name")
  valid_567399 = validateParameter(valid_567399, JString, required = true,
                                 default = nil)
  if valid_567399 != nil:
    section.add "name", valid_567399
  var valid_567400 = path.getOrDefault("subscriptionId")
  valid_567400 = validateParameter(valid_567400, JString, required = true,
                                 default = nil)
  if valid_567400 != nil:
    section.add "subscriptionId", valid_567400
  var valid_567401 = path.getOrDefault("premierAddOnName")
  valid_567401 = validateParameter(valid_567401, JString, required = true,
                                 default = nil)
  if valid_567401 != nil:
    section.add "premierAddOnName", valid_567401
  var valid_567402 = path.getOrDefault("resourceGroupName")
  valid_567402 = validateParameter(valid_567402, JString, required = true,
                                 default = nil)
  if valid_567402 != nil:
    section.add "resourceGroupName", valid_567402
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567403 = query.getOrDefault("api-version")
  valid_567403 = validateParameter(valid_567403, JString, required = true,
                                 default = nil)
  if valid_567403 != nil:
    section.add "api-version", valid_567403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567404: Call_WebAppsDeletePremierAddOnSlot_567395; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_567404.validator(path, query, header, formData, body)
  let scheme = call_567404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567404.url(scheme.get, call_567404.host, call_567404.base,
                         call_567404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567404, url, valid)

proc call*(call_567405: Call_WebAppsDeletePremierAddOnSlot_567395; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567406 = newJObject()
  var query_567407 = newJObject()
  add(path_567406, "slot", newJString(slot))
  add(query_567407, "api-version", newJString(apiVersion))
  add(path_567406, "name", newJString(name))
  add(path_567406, "subscriptionId", newJString(subscriptionId))
  add(path_567406, "premierAddOnName", newJString(premierAddOnName))
  add(path_567406, "resourceGroupName", newJString(resourceGroupName))
  result = call_567405.call(path_567406, query_567407, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_567395(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_567396, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_567397, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnetSlot_567435 = ref object of OpenApiRestCall_563564
proc url_WebAppsPutPrivateAccessVnetSlot_567437(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnetSlot_567436(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567438 = path.getOrDefault("slot")
  valid_567438 = validateParameter(valid_567438, JString, required = true,
                                 default = nil)
  if valid_567438 != nil:
    section.add "slot", valid_567438
  var valid_567439 = path.getOrDefault("name")
  valid_567439 = validateParameter(valid_567439, JString, required = true,
                                 default = nil)
  if valid_567439 != nil:
    section.add "name", valid_567439
  var valid_567440 = path.getOrDefault("subscriptionId")
  valid_567440 = validateParameter(valid_567440, JString, required = true,
                                 default = nil)
  if valid_567440 != nil:
    section.add "subscriptionId", valid_567440
  var valid_567441 = path.getOrDefault("resourceGroupName")
  valid_567441 = validateParameter(valid_567441, JString, required = true,
                                 default = nil)
  if valid_567441 != nil:
    section.add "resourceGroupName", valid_567441
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567442 = query.getOrDefault("api-version")
  valid_567442 = validateParameter(valid_567442, JString, required = true,
                                 default = nil)
  if valid_567442 != nil:
    section.add "api-version", valid_567442
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567444: Call_WebAppsPutPrivateAccessVnetSlot_567435;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_567444.validator(path, query, header, formData, body)
  let scheme = call_567444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567444.url(scheme.get, call_567444.host, call_567444.base,
                         call_567444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567444, url, valid)

proc call*(call_567445: Call_WebAppsPutPrivateAccessVnetSlot_567435; slot: string;
          apiVersion: string; access: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsPutPrivateAccessVnetSlot
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   access: JObject (required)
  ##         : The information for the private access
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567446 = newJObject()
  var query_567447 = newJObject()
  var body_567448 = newJObject()
  add(path_567446, "slot", newJString(slot))
  add(query_567447, "api-version", newJString(apiVersion))
  if access != nil:
    body_567448 = access
  add(path_567446, "name", newJString(name))
  add(path_567446, "subscriptionId", newJString(subscriptionId))
  add(path_567446, "resourceGroupName", newJString(resourceGroupName))
  result = call_567445.call(path_567446, query_567447, nil, nil, body_567448)

var webAppsPutPrivateAccessVnetSlot* = Call_WebAppsPutPrivateAccessVnetSlot_567435(
    name: "webAppsPutPrivateAccessVnetSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnetSlot_567436, base: "",
    url: url_WebAppsPutPrivateAccessVnetSlot_567437, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccessSlot_567423 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPrivateAccessSlot_567425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccessSlot_567424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567426 = path.getOrDefault("slot")
  valid_567426 = validateParameter(valid_567426, JString, required = true,
                                 default = nil)
  if valid_567426 != nil:
    section.add "slot", valid_567426
  var valid_567427 = path.getOrDefault("name")
  valid_567427 = validateParameter(valid_567427, JString, required = true,
                                 default = nil)
  if valid_567427 != nil:
    section.add "name", valid_567427
  var valid_567428 = path.getOrDefault("subscriptionId")
  valid_567428 = validateParameter(valid_567428, JString, required = true,
                                 default = nil)
  if valid_567428 != nil:
    section.add "subscriptionId", valid_567428
  var valid_567429 = path.getOrDefault("resourceGroupName")
  valid_567429 = validateParameter(valid_567429, JString, required = true,
                                 default = nil)
  if valid_567429 != nil:
    section.add "resourceGroupName", valid_567429
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567430 = query.getOrDefault("api-version")
  valid_567430 = validateParameter(valid_567430, JString, required = true,
                                 default = nil)
  if valid_567430 != nil:
    section.add "api-version", valid_567430
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567431: Call_WebAppsGetPrivateAccessSlot_567423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_567431.validator(path, query, header, formData, body)
  let scheme = call_567431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567431.url(scheme.get, call_567431.host, call_567431.base,
                         call_567431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567431, url, valid)

proc call*(call_567432: Call_WebAppsGetPrivateAccessSlot_567423; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetPrivateAccessSlot
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567433 = newJObject()
  var query_567434 = newJObject()
  add(path_567433, "slot", newJString(slot))
  add(query_567434, "api-version", newJString(apiVersion))
  add(path_567433, "name", newJString(name))
  add(path_567433, "subscriptionId", newJString(subscriptionId))
  add(path_567433, "resourceGroupName", newJString(resourceGroupName))
  result = call_567432.call(path_567433, query_567434, nil, nil, nil)

var webAppsGetPrivateAccessSlot* = Call_WebAppsGetPrivateAccessSlot_567423(
    name: "webAppsGetPrivateAccessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccessSlot_567424, base: "",
    url: url_WebAppsGetPrivateAccessSlot_567425, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_567449 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessesSlot_567451(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_567450(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567452 = path.getOrDefault("slot")
  valid_567452 = validateParameter(valid_567452, JString, required = true,
                                 default = nil)
  if valid_567452 != nil:
    section.add "slot", valid_567452
  var valid_567453 = path.getOrDefault("name")
  valid_567453 = validateParameter(valid_567453, JString, required = true,
                                 default = nil)
  if valid_567453 != nil:
    section.add "name", valid_567453
  var valid_567454 = path.getOrDefault("subscriptionId")
  valid_567454 = validateParameter(valid_567454, JString, required = true,
                                 default = nil)
  if valid_567454 != nil:
    section.add "subscriptionId", valid_567454
  var valid_567455 = path.getOrDefault("resourceGroupName")
  valid_567455 = validateParameter(valid_567455, JString, required = true,
                                 default = nil)
  if valid_567455 != nil:
    section.add "resourceGroupName", valid_567455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567456 = query.getOrDefault("api-version")
  valid_567456 = validateParameter(valid_567456, JString, required = true,
                                 default = nil)
  if valid_567456 != nil:
    section.add "api-version", valid_567456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567457: Call_WebAppsListProcessesSlot_567449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567457.validator(path, query, header, formData, body)
  let scheme = call_567457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567457.url(scheme.get, call_567457.host, call_567457.base,
                         call_567457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567457, url, valid)

proc call*(call_567458: Call_WebAppsListProcessesSlot_567449; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567459 = newJObject()
  var query_567460 = newJObject()
  add(path_567459, "slot", newJString(slot))
  add(query_567460, "api-version", newJString(apiVersion))
  add(path_567459, "name", newJString(name))
  add(path_567459, "subscriptionId", newJString(subscriptionId))
  add(path_567459, "resourceGroupName", newJString(resourceGroupName))
  result = call_567458.call(path_567459, query_567460, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_567449(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_567450, base: "",
    url: url_WebAppsListProcessesSlot_567451, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_567461 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessSlot_567463(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_567462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567464 = path.getOrDefault("slot")
  valid_567464 = validateParameter(valid_567464, JString, required = true,
                                 default = nil)
  if valid_567464 != nil:
    section.add "slot", valid_567464
  var valid_567465 = path.getOrDefault("name")
  valid_567465 = validateParameter(valid_567465, JString, required = true,
                                 default = nil)
  if valid_567465 != nil:
    section.add "name", valid_567465
  var valid_567466 = path.getOrDefault("subscriptionId")
  valid_567466 = validateParameter(valid_567466, JString, required = true,
                                 default = nil)
  if valid_567466 != nil:
    section.add "subscriptionId", valid_567466
  var valid_567467 = path.getOrDefault("resourceGroupName")
  valid_567467 = validateParameter(valid_567467, JString, required = true,
                                 default = nil)
  if valid_567467 != nil:
    section.add "resourceGroupName", valid_567467
  var valid_567468 = path.getOrDefault("processId")
  valid_567468 = validateParameter(valid_567468, JString, required = true,
                                 default = nil)
  if valid_567468 != nil:
    section.add "processId", valid_567468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567469 = query.getOrDefault("api-version")
  valid_567469 = validateParameter(valid_567469, JString, required = true,
                                 default = nil)
  if valid_567469 != nil:
    section.add "api-version", valid_567469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567470: Call_WebAppsGetProcessSlot_567461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567470.validator(path, query, header, formData, body)
  let scheme = call_567470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567470.url(scheme.get, call_567470.host, call_567470.base,
                         call_567470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567470, url, valid)

proc call*(call_567471: Call_WebAppsGetProcessSlot_567461; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567472 = newJObject()
  var query_567473 = newJObject()
  add(path_567472, "slot", newJString(slot))
  add(query_567473, "api-version", newJString(apiVersion))
  add(path_567472, "name", newJString(name))
  add(path_567472, "subscriptionId", newJString(subscriptionId))
  add(path_567472, "resourceGroupName", newJString(resourceGroupName))
  add(path_567472, "processId", newJString(processId))
  result = call_567471.call(path_567472, query_567473, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_567461(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_567462, base: "",
    url: url_WebAppsGetProcessSlot_567463, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_567474 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteProcessSlot_567476(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_567475(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567477 = path.getOrDefault("slot")
  valid_567477 = validateParameter(valid_567477, JString, required = true,
                                 default = nil)
  if valid_567477 != nil:
    section.add "slot", valid_567477
  var valid_567478 = path.getOrDefault("name")
  valid_567478 = validateParameter(valid_567478, JString, required = true,
                                 default = nil)
  if valid_567478 != nil:
    section.add "name", valid_567478
  var valid_567479 = path.getOrDefault("subscriptionId")
  valid_567479 = validateParameter(valid_567479, JString, required = true,
                                 default = nil)
  if valid_567479 != nil:
    section.add "subscriptionId", valid_567479
  var valid_567480 = path.getOrDefault("resourceGroupName")
  valid_567480 = validateParameter(valid_567480, JString, required = true,
                                 default = nil)
  if valid_567480 != nil:
    section.add "resourceGroupName", valid_567480
  var valid_567481 = path.getOrDefault("processId")
  valid_567481 = validateParameter(valid_567481, JString, required = true,
                                 default = nil)
  if valid_567481 != nil:
    section.add "processId", valid_567481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567482 = query.getOrDefault("api-version")
  valid_567482 = validateParameter(valid_567482, JString, required = true,
                                 default = nil)
  if valid_567482 != nil:
    section.add "api-version", valid_567482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567483: Call_WebAppsDeleteProcessSlot_567474; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_567483.validator(path, query, header, formData, body)
  let scheme = call_567483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567483.url(scheme.get, call_567483.host, call_567483.base,
                         call_567483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567483, url, valid)

proc call*(call_567484: Call_WebAppsDeleteProcessSlot_567474; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567485 = newJObject()
  var query_567486 = newJObject()
  add(path_567485, "slot", newJString(slot))
  add(query_567486, "api-version", newJString(apiVersion))
  add(path_567485, "name", newJString(name))
  add(path_567485, "subscriptionId", newJString(subscriptionId))
  add(path_567485, "resourceGroupName", newJString(resourceGroupName))
  add(path_567485, "processId", newJString(processId))
  result = call_567484.call(path_567485, query_567486, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_567474(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_567475, base: "",
    url: url_WebAppsDeleteProcessSlot_567476, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_567487 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessDumpSlot_567489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_567488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567490 = path.getOrDefault("slot")
  valid_567490 = validateParameter(valid_567490, JString, required = true,
                                 default = nil)
  if valid_567490 != nil:
    section.add "slot", valid_567490
  var valid_567491 = path.getOrDefault("name")
  valid_567491 = validateParameter(valid_567491, JString, required = true,
                                 default = nil)
  if valid_567491 != nil:
    section.add "name", valid_567491
  var valid_567492 = path.getOrDefault("subscriptionId")
  valid_567492 = validateParameter(valid_567492, JString, required = true,
                                 default = nil)
  if valid_567492 != nil:
    section.add "subscriptionId", valid_567492
  var valid_567493 = path.getOrDefault("resourceGroupName")
  valid_567493 = validateParameter(valid_567493, JString, required = true,
                                 default = nil)
  if valid_567493 != nil:
    section.add "resourceGroupName", valid_567493
  var valid_567494 = path.getOrDefault("processId")
  valid_567494 = validateParameter(valid_567494, JString, required = true,
                                 default = nil)
  if valid_567494 != nil:
    section.add "processId", valid_567494
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567495 = query.getOrDefault("api-version")
  valid_567495 = validateParameter(valid_567495, JString, required = true,
                                 default = nil)
  if valid_567495 != nil:
    section.add "api-version", valid_567495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567496: Call_WebAppsGetProcessDumpSlot_567487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567496.validator(path, query, header, formData, body)
  let scheme = call_567496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567496.url(scheme.get, call_567496.host, call_567496.base,
                         call_567496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567496, url, valid)

proc call*(call_567497: Call_WebAppsGetProcessDumpSlot_567487; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567498 = newJObject()
  var query_567499 = newJObject()
  add(path_567498, "slot", newJString(slot))
  add(query_567499, "api-version", newJString(apiVersion))
  add(path_567498, "name", newJString(name))
  add(path_567498, "subscriptionId", newJString(subscriptionId))
  add(path_567498, "resourceGroupName", newJString(resourceGroupName))
  add(path_567498, "processId", newJString(processId))
  result = call_567497.call(path_567498, query_567499, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_567487(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_567488, base: "",
    url: url_WebAppsGetProcessDumpSlot_567489, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_567500 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessModulesSlot_567502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_567501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567503 = path.getOrDefault("slot")
  valid_567503 = validateParameter(valid_567503, JString, required = true,
                                 default = nil)
  if valid_567503 != nil:
    section.add "slot", valid_567503
  var valid_567504 = path.getOrDefault("name")
  valid_567504 = validateParameter(valid_567504, JString, required = true,
                                 default = nil)
  if valid_567504 != nil:
    section.add "name", valid_567504
  var valid_567505 = path.getOrDefault("subscriptionId")
  valid_567505 = validateParameter(valid_567505, JString, required = true,
                                 default = nil)
  if valid_567505 != nil:
    section.add "subscriptionId", valid_567505
  var valid_567506 = path.getOrDefault("resourceGroupName")
  valid_567506 = validateParameter(valid_567506, JString, required = true,
                                 default = nil)
  if valid_567506 != nil:
    section.add "resourceGroupName", valid_567506
  var valid_567507 = path.getOrDefault("processId")
  valid_567507 = validateParameter(valid_567507, JString, required = true,
                                 default = nil)
  if valid_567507 != nil:
    section.add "processId", valid_567507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567508 = query.getOrDefault("api-version")
  valid_567508 = validateParameter(valid_567508, JString, required = true,
                                 default = nil)
  if valid_567508 != nil:
    section.add "api-version", valid_567508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567509: Call_WebAppsListProcessModulesSlot_567500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567509.validator(path, query, header, formData, body)
  let scheme = call_567509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567509.url(scheme.get, call_567509.host, call_567509.base,
                         call_567509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567509, url, valid)

proc call*(call_567510: Call_WebAppsListProcessModulesSlot_567500; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567511 = newJObject()
  var query_567512 = newJObject()
  add(path_567511, "slot", newJString(slot))
  add(query_567512, "api-version", newJString(apiVersion))
  add(path_567511, "name", newJString(name))
  add(path_567511, "subscriptionId", newJString(subscriptionId))
  add(path_567511, "resourceGroupName", newJString(resourceGroupName))
  add(path_567511, "processId", newJString(processId))
  result = call_567510.call(path_567511, query_567512, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_567500(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_567501, base: "",
    url: url_WebAppsListProcessModulesSlot_567502, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_567513 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessModuleSlot_567515(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_567514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567516 = path.getOrDefault("slot")
  valid_567516 = validateParameter(valid_567516, JString, required = true,
                                 default = nil)
  if valid_567516 != nil:
    section.add "slot", valid_567516
  var valid_567517 = path.getOrDefault("name")
  valid_567517 = validateParameter(valid_567517, JString, required = true,
                                 default = nil)
  if valid_567517 != nil:
    section.add "name", valid_567517
  var valid_567518 = path.getOrDefault("subscriptionId")
  valid_567518 = validateParameter(valid_567518, JString, required = true,
                                 default = nil)
  if valid_567518 != nil:
    section.add "subscriptionId", valid_567518
  var valid_567519 = path.getOrDefault("resourceGroupName")
  valid_567519 = validateParameter(valid_567519, JString, required = true,
                                 default = nil)
  if valid_567519 != nil:
    section.add "resourceGroupName", valid_567519
  var valid_567520 = path.getOrDefault("processId")
  valid_567520 = validateParameter(valid_567520, JString, required = true,
                                 default = nil)
  if valid_567520 != nil:
    section.add "processId", valid_567520
  var valid_567521 = path.getOrDefault("baseAddress")
  valid_567521 = validateParameter(valid_567521, JString, required = true,
                                 default = nil)
  if valid_567521 != nil:
    section.add "baseAddress", valid_567521
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567522 = query.getOrDefault("api-version")
  valid_567522 = validateParameter(valid_567522, JString, required = true,
                                 default = nil)
  if valid_567522 != nil:
    section.add "api-version", valid_567522
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567523: Call_WebAppsGetProcessModuleSlot_567513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567523.validator(path, query, header, formData, body)
  let scheme = call_567523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567523.url(scheme.get, call_567523.host, call_567523.base,
                         call_567523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567523, url, valid)

proc call*(call_567524: Call_WebAppsGetProcessModuleSlot_567513; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_567525 = newJObject()
  var query_567526 = newJObject()
  add(path_567525, "slot", newJString(slot))
  add(query_567526, "api-version", newJString(apiVersion))
  add(path_567525, "name", newJString(name))
  add(path_567525, "subscriptionId", newJString(subscriptionId))
  add(path_567525, "resourceGroupName", newJString(resourceGroupName))
  add(path_567525, "processId", newJString(processId))
  add(path_567525, "baseAddress", newJString(baseAddress))
  result = call_567524.call(path_567525, query_567526, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_567513(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_567514, base: "",
    url: url_WebAppsGetProcessModuleSlot_567515, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_567527 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessThreadsSlot_567529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_567528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567530 = path.getOrDefault("slot")
  valid_567530 = validateParameter(valid_567530, JString, required = true,
                                 default = nil)
  if valid_567530 != nil:
    section.add "slot", valid_567530
  var valid_567531 = path.getOrDefault("name")
  valid_567531 = validateParameter(valid_567531, JString, required = true,
                                 default = nil)
  if valid_567531 != nil:
    section.add "name", valid_567531
  var valid_567532 = path.getOrDefault("subscriptionId")
  valid_567532 = validateParameter(valid_567532, JString, required = true,
                                 default = nil)
  if valid_567532 != nil:
    section.add "subscriptionId", valid_567532
  var valid_567533 = path.getOrDefault("resourceGroupName")
  valid_567533 = validateParameter(valid_567533, JString, required = true,
                                 default = nil)
  if valid_567533 != nil:
    section.add "resourceGroupName", valid_567533
  var valid_567534 = path.getOrDefault("processId")
  valid_567534 = validateParameter(valid_567534, JString, required = true,
                                 default = nil)
  if valid_567534 != nil:
    section.add "processId", valid_567534
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567535 = query.getOrDefault("api-version")
  valid_567535 = validateParameter(valid_567535, JString, required = true,
                                 default = nil)
  if valid_567535 != nil:
    section.add "api-version", valid_567535
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567536: Call_WebAppsListProcessThreadsSlot_567527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567536.validator(path, query, header, formData, body)
  let scheme = call_567536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567536.url(scheme.get, call_567536.host, call_567536.base,
                         call_567536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567536, url, valid)

proc call*(call_567537: Call_WebAppsListProcessThreadsSlot_567527; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567538 = newJObject()
  var query_567539 = newJObject()
  add(path_567538, "slot", newJString(slot))
  add(query_567539, "api-version", newJString(apiVersion))
  add(path_567538, "name", newJString(name))
  add(path_567538, "subscriptionId", newJString(subscriptionId))
  add(path_567538, "resourceGroupName", newJString(resourceGroupName))
  add(path_567538, "processId", newJString(processId))
  result = call_567537.call(path_567538, query_567539, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_567527(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_567528, base: "",
    url: url_WebAppsListProcessThreadsSlot_567529, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_567540 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessThreadSlot_567542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_567541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_567543 = path.getOrDefault("threadId")
  valid_567543 = validateParameter(valid_567543, JString, required = true,
                                 default = nil)
  if valid_567543 != nil:
    section.add "threadId", valid_567543
  var valid_567544 = path.getOrDefault("slot")
  valid_567544 = validateParameter(valid_567544, JString, required = true,
                                 default = nil)
  if valid_567544 != nil:
    section.add "slot", valid_567544
  var valid_567545 = path.getOrDefault("name")
  valid_567545 = validateParameter(valid_567545, JString, required = true,
                                 default = nil)
  if valid_567545 != nil:
    section.add "name", valid_567545
  var valid_567546 = path.getOrDefault("subscriptionId")
  valid_567546 = validateParameter(valid_567546, JString, required = true,
                                 default = nil)
  if valid_567546 != nil:
    section.add "subscriptionId", valid_567546
  var valid_567547 = path.getOrDefault("resourceGroupName")
  valid_567547 = validateParameter(valid_567547, JString, required = true,
                                 default = nil)
  if valid_567547 != nil:
    section.add "resourceGroupName", valid_567547
  var valid_567548 = path.getOrDefault("processId")
  valid_567548 = validateParameter(valid_567548, JString, required = true,
                                 default = nil)
  if valid_567548 != nil:
    section.add "processId", valid_567548
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567549 = query.getOrDefault("api-version")
  valid_567549 = validateParameter(valid_567549, JString, required = true,
                                 default = nil)
  if valid_567549 != nil:
    section.add "api-version", valid_567549
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567550: Call_WebAppsGetProcessThreadSlot_567540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_567550.validator(path, query, header, formData, body)
  let scheme = call_567550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567550.url(scheme.get, call_567550.host, call_567550.base,
                         call_567550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567550, url, valid)

proc call*(call_567551: Call_WebAppsGetProcessThreadSlot_567540; threadId: string;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567552 = newJObject()
  var query_567553 = newJObject()
  add(path_567552, "threadId", newJString(threadId))
  add(path_567552, "slot", newJString(slot))
  add(query_567553, "api-version", newJString(apiVersion))
  add(path_567552, "name", newJString(name))
  add(path_567552, "subscriptionId", newJString(subscriptionId))
  add(path_567552, "resourceGroupName", newJString(resourceGroupName))
  add(path_567552, "processId", newJString(processId))
  result = call_567551.call(path_567552, query_567553, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_567540(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_567541, base: "",
    url: url_WebAppsGetProcessThreadSlot_567542, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_567554 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublicCertificatesSlot_567556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_567555(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567557 = path.getOrDefault("slot")
  valid_567557 = validateParameter(valid_567557, JString, required = true,
                                 default = nil)
  if valid_567557 != nil:
    section.add "slot", valid_567557
  var valid_567558 = path.getOrDefault("name")
  valid_567558 = validateParameter(valid_567558, JString, required = true,
                                 default = nil)
  if valid_567558 != nil:
    section.add "name", valid_567558
  var valid_567559 = path.getOrDefault("subscriptionId")
  valid_567559 = validateParameter(valid_567559, JString, required = true,
                                 default = nil)
  if valid_567559 != nil:
    section.add "subscriptionId", valid_567559
  var valid_567560 = path.getOrDefault("resourceGroupName")
  valid_567560 = validateParameter(valid_567560, JString, required = true,
                                 default = nil)
  if valid_567560 != nil:
    section.add "resourceGroupName", valid_567560
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567561 = query.getOrDefault("api-version")
  valid_567561 = validateParameter(valid_567561, JString, required = true,
                                 default = nil)
  if valid_567561 != nil:
    section.add "api-version", valid_567561
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567562: Call_WebAppsListPublicCertificatesSlot_567554;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_567562.validator(path, query, header, formData, body)
  let scheme = call_567562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567562.url(scheme.get, call_567562.host, call_567562.base,
                         call_567562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567562, url, valid)

proc call*(call_567563: Call_WebAppsListPublicCertificatesSlot_567554;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567564 = newJObject()
  var query_567565 = newJObject()
  add(path_567564, "slot", newJString(slot))
  add(query_567565, "api-version", newJString(apiVersion))
  add(path_567564, "name", newJString(name))
  add(path_567564, "subscriptionId", newJString(subscriptionId))
  add(path_567564, "resourceGroupName", newJString(resourceGroupName))
  result = call_567563.call(path_567564, query_567565, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_567554(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_567555, base: "",
    url: url_WebAppsListPublicCertificatesSlot_567556, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_567579 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_567581(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_567580(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567582 = path.getOrDefault("slot")
  valid_567582 = validateParameter(valid_567582, JString, required = true,
                                 default = nil)
  if valid_567582 != nil:
    section.add "slot", valid_567582
  var valid_567583 = path.getOrDefault("name")
  valid_567583 = validateParameter(valid_567583, JString, required = true,
                                 default = nil)
  if valid_567583 != nil:
    section.add "name", valid_567583
  var valid_567584 = path.getOrDefault("subscriptionId")
  valid_567584 = validateParameter(valid_567584, JString, required = true,
                                 default = nil)
  if valid_567584 != nil:
    section.add "subscriptionId", valid_567584
  var valid_567585 = path.getOrDefault("publicCertificateName")
  valid_567585 = validateParameter(valid_567585, JString, required = true,
                                 default = nil)
  if valid_567585 != nil:
    section.add "publicCertificateName", valid_567585
  var valid_567586 = path.getOrDefault("resourceGroupName")
  valid_567586 = validateParameter(valid_567586, JString, required = true,
                                 default = nil)
  if valid_567586 != nil:
    section.add "resourceGroupName", valid_567586
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567587 = query.getOrDefault("api-version")
  valid_567587 = validateParameter(valid_567587, JString, required = true,
                                 default = nil)
  if valid_567587 != nil:
    section.add "api-version", valid_567587
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567589: Call_WebAppsCreateOrUpdatePublicCertificateSlot_567579;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_567589.validator(path, query, header, formData, body)
  let scheme = call_567589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567589.url(scheme.get, call_567589.host, call_567589.base,
                         call_567589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567589, url, valid)

proc call*(call_567590: Call_WebAppsCreateOrUpdatePublicCertificateSlot_567579;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_567591 = newJObject()
  var query_567592 = newJObject()
  var body_567593 = newJObject()
  add(path_567591, "slot", newJString(slot))
  add(query_567592, "api-version", newJString(apiVersion))
  add(path_567591, "name", newJString(name))
  add(path_567591, "subscriptionId", newJString(subscriptionId))
  add(path_567591, "publicCertificateName", newJString(publicCertificateName))
  add(path_567591, "resourceGroupName", newJString(resourceGroupName))
  if publicCertificate != nil:
    body_567593 = publicCertificate
  result = call_567590.call(path_567591, query_567592, nil, nil, body_567593)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_567579(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_567580,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_567581,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_567566 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPublicCertificateSlot_567568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_567567(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567569 = path.getOrDefault("slot")
  valid_567569 = validateParameter(valid_567569, JString, required = true,
                                 default = nil)
  if valid_567569 != nil:
    section.add "slot", valid_567569
  var valid_567570 = path.getOrDefault("name")
  valid_567570 = validateParameter(valid_567570, JString, required = true,
                                 default = nil)
  if valid_567570 != nil:
    section.add "name", valid_567570
  var valid_567571 = path.getOrDefault("subscriptionId")
  valid_567571 = validateParameter(valid_567571, JString, required = true,
                                 default = nil)
  if valid_567571 != nil:
    section.add "subscriptionId", valid_567571
  var valid_567572 = path.getOrDefault("publicCertificateName")
  valid_567572 = validateParameter(valid_567572, JString, required = true,
                                 default = nil)
  if valid_567572 != nil:
    section.add "publicCertificateName", valid_567572
  var valid_567573 = path.getOrDefault("resourceGroupName")
  valid_567573 = validateParameter(valid_567573, JString, required = true,
                                 default = nil)
  if valid_567573 != nil:
    section.add "resourceGroupName", valid_567573
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567574 = query.getOrDefault("api-version")
  valid_567574 = validateParameter(valid_567574, JString, required = true,
                                 default = nil)
  if valid_567574 != nil:
    section.add "api-version", valid_567574
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567575: Call_WebAppsGetPublicCertificateSlot_567566;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_567575.validator(path, query, header, formData, body)
  let scheme = call_567575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567575.url(scheme.get, call_567575.host, call_567575.base,
                         call_567575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567575, url, valid)

proc call*(call_567576: Call_WebAppsGetPublicCertificateSlot_567566; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567577 = newJObject()
  var query_567578 = newJObject()
  add(path_567577, "slot", newJString(slot))
  add(query_567578, "api-version", newJString(apiVersion))
  add(path_567577, "name", newJString(name))
  add(path_567577, "subscriptionId", newJString(subscriptionId))
  add(path_567577, "publicCertificateName", newJString(publicCertificateName))
  add(path_567577, "resourceGroupName", newJString(resourceGroupName))
  result = call_567576.call(path_567577, query_567578, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_567566(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_567567, base: "",
    url: url_WebAppsGetPublicCertificateSlot_567568, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_567594 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePublicCertificateSlot_567596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_567595(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567597 = path.getOrDefault("slot")
  valid_567597 = validateParameter(valid_567597, JString, required = true,
                                 default = nil)
  if valid_567597 != nil:
    section.add "slot", valid_567597
  var valid_567598 = path.getOrDefault("name")
  valid_567598 = validateParameter(valid_567598, JString, required = true,
                                 default = nil)
  if valid_567598 != nil:
    section.add "name", valid_567598
  var valid_567599 = path.getOrDefault("subscriptionId")
  valid_567599 = validateParameter(valid_567599, JString, required = true,
                                 default = nil)
  if valid_567599 != nil:
    section.add "subscriptionId", valid_567599
  var valid_567600 = path.getOrDefault("publicCertificateName")
  valid_567600 = validateParameter(valid_567600, JString, required = true,
                                 default = nil)
  if valid_567600 != nil:
    section.add "publicCertificateName", valid_567600
  var valid_567601 = path.getOrDefault("resourceGroupName")
  valid_567601 = validateParameter(valid_567601, JString, required = true,
                                 default = nil)
  if valid_567601 != nil:
    section.add "resourceGroupName", valid_567601
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567602 = query.getOrDefault("api-version")
  valid_567602 = validateParameter(valid_567602, JString, required = true,
                                 default = nil)
  if valid_567602 != nil:
    section.add "api-version", valid_567602
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567603: Call_WebAppsDeletePublicCertificateSlot_567594;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_567603.validator(path, query, header, formData, body)
  let scheme = call_567603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567603.url(scheme.get, call_567603.host, call_567603.base,
                         call_567603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567603, url, valid)

proc call*(call_567604: Call_WebAppsDeletePublicCertificateSlot_567594;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567605 = newJObject()
  var query_567606 = newJObject()
  add(path_567605, "slot", newJString(slot))
  add(query_567606, "api-version", newJString(apiVersion))
  add(path_567605, "name", newJString(name))
  add(path_567605, "subscriptionId", newJString(subscriptionId))
  add(path_567605, "publicCertificateName", newJString(publicCertificateName))
  add(path_567605, "resourceGroupName", newJString(resourceGroupName))
  result = call_567604.call(path_567605, query_567606, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_567594(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_567595, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_567596, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567607 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_567609(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_567608(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567610 = path.getOrDefault("slot")
  valid_567610 = validateParameter(valid_567610, JString, required = true,
                                 default = nil)
  if valid_567610 != nil:
    section.add "slot", valid_567610
  var valid_567611 = path.getOrDefault("name")
  valid_567611 = validateParameter(valid_567611, JString, required = true,
                                 default = nil)
  if valid_567611 != nil:
    section.add "name", valid_567611
  var valid_567612 = path.getOrDefault("subscriptionId")
  valid_567612 = validateParameter(valid_567612, JString, required = true,
                                 default = nil)
  if valid_567612 != nil:
    section.add "subscriptionId", valid_567612
  var valid_567613 = path.getOrDefault("resourceGroupName")
  valid_567613 = validateParameter(valid_567613, JString, required = true,
                                 default = nil)
  if valid_567613 != nil:
    section.add "resourceGroupName", valid_567613
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567614 = query.getOrDefault("api-version")
  valid_567614 = validateParameter(valid_567614, JString, required = true,
                                 default = nil)
  if valid_567614 != nil:
    section.add "api-version", valid_567614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567616: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567607;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_567616.validator(path, query, header, formData, body)
  let scheme = call_567616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567616.url(scheme.get, call_567616.host, call_567616.base,
                         call_567616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567616, url, valid)

proc call*(call_567617: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567607;
          slot: string; apiVersion: string; publishingProfileOptions: JsonNode;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567618 = newJObject()
  var query_567619 = newJObject()
  var body_567620 = newJObject()
  add(path_567618, "slot", newJString(slot))
  add(query_567619, "api-version", newJString(apiVersion))
  if publishingProfileOptions != nil:
    body_567620 = publishingProfileOptions
  add(path_567618, "name", newJString(name))
  add(path_567618, "subscriptionId", newJString(subscriptionId))
  add(path_567618, "resourceGroupName", newJString(resourceGroupName))
  result = call_567617.call(path_567618, query_567619, nil, nil, body_567620)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567607(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_567608,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_567609,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_567621 = ref object of OpenApiRestCall_563564
proc url_WebAppsResetSlotConfigurationSlot_567623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_567622(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567624 = path.getOrDefault("slot")
  valid_567624 = validateParameter(valid_567624, JString, required = true,
                                 default = nil)
  if valid_567624 != nil:
    section.add "slot", valid_567624
  var valid_567625 = path.getOrDefault("name")
  valid_567625 = validateParameter(valid_567625, JString, required = true,
                                 default = nil)
  if valid_567625 != nil:
    section.add "name", valid_567625
  var valid_567626 = path.getOrDefault("subscriptionId")
  valid_567626 = validateParameter(valid_567626, JString, required = true,
                                 default = nil)
  if valid_567626 != nil:
    section.add "subscriptionId", valid_567626
  var valid_567627 = path.getOrDefault("resourceGroupName")
  valid_567627 = validateParameter(valid_567627, JString, required = true,
                                 default = nil)
  if valid_567627 != nil:
    section.add "resourceGroupName", valid_567627
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567628 = query.getOrDefault("api-version")
  valid_567628 = validateParameter(valid_567628, JString, required = true,
                                 default = nil)
  if valid_567628 != nil:
    section.add "api-version", valid_567628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567629: Call_WebAppsResetSlotConfigurationSlot_567621;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_567629.validator(path, query, header, formData, body)
  let scheme = call_567629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567629.url(scheme.get, call_567629.host, call_567629.base,
                         call_567629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567629, url, valid)

proc call*(call_567630: Call_WebAppsResetSlotConfigurationSlot_567621;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567631 = newJObject()
  var query_567632 = newJObject()
  add(path_567631, "slot", newJString(slot))
  add(query_567632, "api-version", newJString(apiVersion))
  add(path_567631, "name", newJString(name))
  add(path_567631, "subscriptionId", newJString(subscriptionId))
  add(path_567631, "resourceGroupName", newJString(resourceGroupName))
  result = call_567630.call(path_567631, query_567632, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_567621(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_567622, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_567623, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_567633 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestartSlot_567635(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_567634(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567636 = path.getOrDefault("slot")
  valid_567636 = validateParameter(valid_567636, JString, required = true,
                                 default = nil)
  if valid_567636 != nil:
    section.add "slot", valid_567636
  var valid_567637 = path.getOrDefault("name")
  valid_567637 = validateParameter(valid_567637, JString, required = true,
                                 default = nil)
  if valid_567637 != nil:
    section.add "name", valid_567637
  var valid_567638 = path.getOrDefault("subscriptionId")
  valid_567638 = validateParameter(valid_567638, JString, required = true,
                                 default = nil)
  if valid_567638 != nil:
    section.add "subscriptionId", valid_567638
  var valid_567639 = path.getOrDefault("resourceGroupName")
  valid_567639 = validateParameter(valid_567639, JString, required = true,
                                 default = nil)
  if valid_567639 != nil:
    section.add "resourceGroupName", valid_567639
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  var valid_567640 = query.getOrDefault("synchronous")
  valid_567640 = validateParameter(valid_567640, JBool, required = false, default = nil)
  if valid_567640 != nil:
    section.add "synchronous", valid_567640
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567641 = query.getOrDefault("api-version")
  valid_567641 = validateParameter(valid_567641, JString, required = true,
                                 default = nil)
  if valid_567641 != nil:
    section.add "api-version", valid_567641
  var valid_567642 = query.getOrDefault("softRestart")
  valid_567642 = validateParameter(valid_567642, JBool, required = false, default = nil)
  if valid_567642 != nil:
    section.add "softRestart", valid_567642
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567643: Call_WebAppsRestartSlot_567633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_567643.validator(path, query, header, formData, body)
  let scheme = call_567643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567643.url(scheme.get, call_567643.host, call_567643.base,
                         call_567643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567643, url, valid)

proc call*(call_567644: Call_WebAppsRestartSlot_567633; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; synchronous: bool = false;
          softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_567645 = newJObject()
  var query_567646 = newJObject()
  add(path_567645, "slot", newJString(slot))
  add(query_567646, "synchronous", newJBool(synchronous))
  add(query_567646, "api-version", newJString(apiVersion))
  add(path_567645, "name", newJString(name))
  add(path_567645, "subscriptionId", newJString(subscriptionId))
  add(path_567645, "resourceGroupName", newJString(resourceGroupName))
  add(query_567646, "softRestart", newJBool(softRestart))
  result = call_567644.call(path_567645, query_567646, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_567633(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_567634, base: "",
    url: url_WebAppsRestartSlot_567635, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlobSlot_567647 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreFromBackupBlobSlot_567649(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlobSlot_567648(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567650 = path.getOrDefault("slot")
  valid_567650 = validateParameter(valid_567650, JString, required = true,
                                 default = nil)
  if valid_567650 != nil:
    section.add "slot", valid_567650
  var valid_567651 = path.getOrDefault("name")
  valid_567651 = validateParameter(valid_567651, JString, required = true,
                                 default = nil)
  if valid_567651 != nil:
    section.add "name", valid_567651
  var valid_567652 = path.getOrDefault("subscriptionId")
  valid_567652 = validateParameter(valid_567652, JString, required = true,
                                 default = nil)
  if valid_567652 != nil:
    section.add "subscriptionId", valid_567652
  var valid_567653 = path.getOrDefault("resourceGroupName")
  valid_567653 = validateParameter(valid_567653, JString, required = true,
                                 default = nil)
  if valid_567653 != nil:
    section.add "resourceGroupName", valid_567653
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567654 = query.getOrDefault("api-version")
  valid_567654 = validateParameter(valid_567654, JString, required = true,
                                 default = nil)
  if valid_567654 != nil:
    section.add "api-version", valid_567654
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567656: Call_WebAppsRestoreFromBackupBlobSlot_567647;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_567656.validator(path, query, header, formData, body)
  let scheme = call_567656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567656.url(scheme.get, call_567656.host, call_567656.base,
                         call_567656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567656, url, valid)

proc call*(call_567657: Call_WebAppsRestoreFromBackupBlobSlot_567647; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlobSlot
  ## Restores an app from a backup blob in Azure Storage.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_567658 = newJObject()
  var query_567659 = newJObject()
  var body_567660 = newJObject()
  add(path_567658, "slot", newJString(slot))
  add(query_567659, "api-version", newJString(apiVersion))
  add(path_567658, "name", newJString(name))
  add(path_567658, "subscriptionId", newJString(subscriptionId))
  add(path_567658, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_567660 = request
  result = call_567657.call(path_567658, query_567659, nil, nil, body_567660)

var webAppsRestoreFromBackupBlobSlot* = Call_WebAppsRestoreFromBackupBlobSlot_567647(
    name: "webAppsRestoreFromBackupBlobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlobSlot_567648, base: "",
    url: url_WebAppsRestoreFromBackupBlobSlot_567649, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedAppSlot_567661 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreFromDeletedAppSlot_567663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedAppSlot_567662(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567664 = path.getOrDefault("slot")
  valid_567664 = validateParameter(valid_567664, JString, required = true,
                                 default = nil)
  if valid_567664 != nil:
    section.add "slot", valid_567664
  var valid_567665 = path.getOrDefault("name")
  valid_567665 = validateParameter(valid_567665, JString, required = true,
                                 default = nil)
  if valid_567665 != nil:
    section.add "name", valid_567665
  var valid_567666 = path.getOrDefault("subscriptionId")
  valid_567666 = validateParameter(valid_567666, JString, required = true,
                                 default = nil)
  if valid_567666 != nil:
    section.add "subscriptionId", valid_567666
  var valid_567667 = path.getOrDefault("resourceGroupName")
  valid_567667 = validateParameter(valid_567667, JString, required = true,
                                 default = nil)
  if valid_567667 != nil:
    section.add "resourceGroupName", valid_567667
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567668 = query.getOrDefault("api-version")
  valid_567668 = validateParameter(valid_567668, JString, required = true,
                                 default = nil)
  if valid_567668 != nil:
    section.add "api-version", valid_567668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567670: Call_WebAppsRestoreFromDeletedAppSlot_567661;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_567670.validator(path, query, header, formData, body)
  let scheme = call_567670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567670.url(scheme.get, call_567670.host, call_567670.base,
                         call_567670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567670, url, valid)

proc call*(call_567671: Call_WebAppsRestoreFromDeletedAppSlot_567661;
          restoreRequest: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRestoreFromDeletedAppSlot
  ## Restores a deleted web app to this web app.
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567672 = newJObject()
  var query_567673 = newJObject()
  var body_567674 = newJObject()
  if restoreRequest != nil:
    body_567674 = restoreRequest
  add(path_567672, "slot", newJString(slot))
  add(query_567673, "api-version", newJString(apiVersion))
  add(path_567672, "name", newJString(name))
  add(path_567672, "subscriptionId", newJString(subscriptionId))
  add(path_567672, "resourceGroupName", newJString(resourceGroupName))
  result = call_567671.call(path_567672, query_567673, nil, nil, body_567674)

var webAppsRestoreFromDeletedAppSlot* = Call_WebAppsRestoreFromDeletedAppSlot_567661(
    name: "webAppsRestoreFromDeletedAppSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedAppSlot_567662, base: "",
    url: url_WebAppsRestoreFromDeletedAppSlot_567663, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshotSlot_567675 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreSnapshotSlot_567677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshotSlot_567676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567678 = path.getOrDefault("slot")
  valid_567678 = validateParameter(valid_567678, JString, required = true,
                                 default = nil)
  if valid_567678 != nil:
    section.add "slot", valid_567678
  var valid_567679 = path.getOrDefault("name")
  valid_567679 = validateParameter(valid_567679, JString, required = true,
                                 default = nil)
  if valid_567679 != nil:
    section.add "name", valid_567679
  var valid_567680 = path.getOrDefault("subscriptionId")
  valid_567680 = validateParameter(valid_567680, JString, required = true,
                                 default = nil)
  if valid_567680 != nil:
    section.add "subscriptionId", valid_567680
  var valid_567681 = path.getOrDefault("resourceGroupName")
  valid_567681 = validateParameter(valid_567681, JString, required = true,
                                 default = nil)
  if valid_567681 != nil:
    section.add "resourceGroupName", valid_567681
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567682 = query.getOrDefault("api-version")
  valid_567682 = validateParameter(valid_567682, JString, required = true,
                                 default = nil)
  if valid_567682 != nil:
    section.add "api-version", valid_567682
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567684: Call_WebAppsRestoreSnapshotSlot_567675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_567684.validator(path, query, header, formData, body)
  let scheme = call_567684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567684.url(scheme.get, call_567684.host, call_567684.base,
                         call_567684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567684, url, valid)

proc call*(call_567685: Call_WebAppsRestoreSnapshotSlot_567675;
          restoreRequest: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRestoreSnapshotSlot
  ## Restores a web app from a snapshot.
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567686 = newJObject()
  var query_567687 = newJObject()
  var body_567688 = newJObject()
  if restoreRequest != nil:
    body_567688 = restoreRequest
  add(path_567686, "slot", newJString(slot))
  add(query_567687, "api-version", newJString(apiVersion))
  add(path_567686, "name", newJString(name))
  add(path_567686, "subscriptionId", newJString(subscriptionId))
  add(path_567686, "resourceGroupName", newJString(resourceGroupName))
  result = call_567685.call(path_567686, query_567687, nil, nil, body_567688)

var webAppsRestoreSnapshotSlot* = Call_WebAppsRestoreSnapshotSlot_567675(
    name: "webAppsRestoreSnapshotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshotSlot_567676, base: "",
    url: url_WebAppsRestoreSnapshotSlot_567677, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_567689 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSiteExtensionsSlot_567691(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_567690(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567692 = path.getOrDefault("slot")
  valid_567692 = validateParameter(valid_567692, JString, required = true,
                                 default = nil)
  if valid_567692 != nil:
    section.add "slot", valid_567692
  var valid_567693 = path.getOrDefault("name")
  valid_567693 = validateParameter(valid_567693, JString, required = true,
                                 default = nil)
  if valid_567693 != nil:
    section.add "name", valid_567693
  var valid_567694 = path.getOrDefault("subscriptionId")
  valid_567694 = validateParameter(valid_567694, JString, required = true,
                                 default = nil)
  if valid_567694 != nil:
    section.add "subscriptionId", valid_567694
  var valid_567695 = path.getOrDefault("resourceGroupName")
  valid_567695 = validateParameter(valid_567695, JString, required = true,
                                 default = nil)
  if valid_567695 != nil:
    section.add "resourceGroupName", valid_567695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567696 = query.getOrDefault("api-version")
  valid_567696 = validateParameter(valid_567696, JString, required = true,
                                 default = nil)
  if valid_567696 != nil:
    section.add "api-version", valid_567696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567697: Call_WebAppsListSiteExtensionsSlot_567689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_567697.validator(path, query, header, formData, body)
  let scheme = call_567697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567697.url(scheme.get, call_567697.host, call_567697.base,
                         call_567697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567697, url, valid)

proc call*(call_567698: Call_WebAppsListSiteExtensionsSlot_567689; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567699 = newJObject()
  var query_567700 = newJObject()
  add(path_567699, "slot", newJString(slot))
  add(query_567700, "api-version", newJString(apiVersion))
  add(path_567699, "name", newJString(name))
  add(path_567699, "subscriptionId", newJString(subscriptionId))
  add(path_567699, "resourceGroupName", newJString(resourceGroupName))
  result = call_567698.call(path_567699, query_567700, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_567689(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_567690, base: "",
    url: url_WebAppsListSiteExtensionsSlot_567691, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_567714 = ref object of OpenApiRestCall_563564
proc url_WebAppsInstallSiteExtensionSlot_567716(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_567715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567717 = path.getOrDefault("slot")
  valid_567717 = validateParameter(valid_567717, JString, required = true,
                                 default = nil)
  if valid_567717 != nil:
    section.add "slot", valid_567717
  var valid_567718 = path.getOrDefault("name")
  valid_567718 = validateParameter(valid_567718, JString, required = true,
                                 default = nil)
  if valid_567718 != nil:
    section.add "name", valid_567718
  var valid_567719 = path.getOrDefault("subscriptionId")
  valid_567719 = validateParameter(valid_567719, JString, required = true,
                                 default = nil)
  if valid_567719 != nil:
    section.add "subscriptionId", valid_567719
  var valid_567720 = path.getOrDefault("resourceGroupName")
  valid_567720 = validateParameter(valid_567720, JString, required = true,
                                 default = nil)
  if valid_567720 != nil:
    section.add "resourceGroupName", valid_567720
  var valid_567721 = path.getOrDefault("siteExtensionId")
  valid_567721 = validateParameter(valid_567721, JString, required = true,
                                 default = nil)
  if valid_567721 != nil:
    section.add "siteExtensionId", valid_567721
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567722 = query.getOrDefault("api-version")
  valid_567722 = validateParameter(valid_567722, JString, required = true,
                                 default = nil)
  if valid_567722 != nil:
    section.add "api-version", valid_567722
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567723: Call_WebAppsInstallSiteExtensionSlot_567714;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_567723.validator(path, query, header, formData, body)
  let scheme = call_567723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567723.url(scheme.get, call_567723.host, call_567723.base,
                         call_567723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567723, url, valid)

proc call*(call_567724: Call_WebAppsInstallSiteExtensionSlot_567714; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567725 = newJObject()
  var query_567726 = newJObject()
  add(path_567725, "slot", newJString(slot))
  add(query_567726, "api-version", newJString(apiVersion))
  add(path_567725, "name", newJString(name))
  add(path_567725, "subscriptionId", newJString(subscriptionId))
  add(path_567725, "resourceGroupName", newJString(resourceGroupName))
  add(path_567725, "siteExtensionId", newJString(siteExtensionId))
  result = call_567724.call(path_567725, query_567726, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_567714(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_567715, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_567716, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_567701 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSiteExtensionSlot_567703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_567702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567704 = path.getOrDefault("slot")
  valid_567704 = validateParameter(valid_567704, JString, required = true,
                                 default = nil)
  if valid_567704 != nil:
    section.add "slot", valid_567704
  var valid_567705 = path.getOrDefault("name")
  valid_567705 = validateParameter(valid_567705, JString, required = true,
                                 default = nil)
  if valid_567705 != nil:
    section.add "name", valid_567705
  var valid_567706 = path.getOrDefault("subscriptionId")
  valid_567706 = validateParameter(valid_567706, JString, required = true,
                                 default = nil)
  if valid_567706 != nil:
    section.add "subscriptionId", valid_567706
  var valid_567707 = path.getOrDefault("resourceGroupName")
  valid_567707 = validateParameter(valid_567707, JString, required = true,
                                 default = nil)
  if valid_567707 != nil:
    section.add "resourceGroupName", valid_567707
  var valid_567708 = path.getOrDefault("siteExtensionId")
  valid_567708 = validateParameter(valid_567708, JString, required = true,
                                 default = nil)
  if valid_567708 != nil:
    section.add "siteExtensionId", valid_567708
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567709 = query.getOrDefault("api-version")
  valid_567709 = validateParameter(valid_567709, JString, required = true,
                                 default = nil)
  if valid_567709 != nil:
    section.add "api-version", valid_567709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567710: Call_WebAppsGetSiteExtensionSlot_567701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_567710.validator(path, query, header, formData, body)
  let scheme = call_567710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567710.url(scheme.get, call_567710.host, call_567710.base,
                         call_567710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567710, url, valid)

proc call*(call_567711: Call_WebAppsGetSiteExtensionSlot_567701; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567712 = newJObject()
  var query_567713 = newJObject()
  add(path_567712, "slot", newJString(slot))
  add(query_567713, "api-version", newJString(apiVersion))
  add(path_567712, "name", newJString(name))
  add(path_567712, "subscriptionId", newJString(subscriptionId))
  add(path_567712, "resourceGroupName", newJString(resourceGroupName))
  add(path_567712, "siteExtensionId", newJString(siteExtensionId))
  result = call_567711.call(path_567712, query_567713, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_567701(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_567702, base: "",
    url: url_WebAppsGetSiteExtensionSlot_567703, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_567727 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSiteExtensionSlot_567729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_567728(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567730 = path.getOrDefault("slot")
  valid_567730 = validateParameter(valid_567730, JString, required = true,
                                 default = nil)
  if valid_567730 != nil:
    section.add "slot", valid_567730
  var valid_567731 = path.getOrDefault("name")
  valid_567731 = validateParameter(valid_567731, JString, required = true,
                                 default = nil)
  if valid_567731 != nil:
    section.add "name", valid_567731
  var valid_567732 = path.getOrDefault("subscriptionId")
  valid_567732 = validateParameter(valid_567732, JString, required = true,
                                 default = nil)
  if valid_567732 != nil:
    section.add "subscriptionId", valid_567732
  var valid_567733 = path.getOrDefault("resourceGroupName")
  valid_567733 = validateParameter(valid_567733, JString, required = true,
                                 default = nil)
  if valid_567733 != nil:
    section.add "resourceGroupName", valid_567733
  var valid_567734 = path.getOrDefault("siteExtensionId")
  valid_567734 = validateParameter(valid_567734, JString, required = true,
                                 default = nil)
  if valid_567734 != nil:
    section.add "siteExtensionId", valid_567734
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567735 = query.getOrDefault("api-version")
  valid_567735 = validateParameter(valid_567735, JString, required = true,
                                 default = nil)
  if valid_567735 != nil:
    section.add "api-version", valid_567735
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567736: Call_WebAppsDeleteSiteExtensionSlot_567727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_567736.validator(path, query, header, formData, body)
  let scheme = call_567736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567736.url(scheme.get, call_567736.host, call_567736.base,
                         call_567736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567736, url, valid)

proc call*(call_567737: Call_WebAppsDeleteSiteExtensionSlot_567727; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567738 = newJObject()
  var query_567739 = newJObject()
  add(path_567738, "slot", newJString(slot))
  add(query_567739, "api-version", newJString(apiVersion))
  add(path_567738, "name", newJString(name))
  add(path_567738, "subscriptionId", newJString(subscriptionId))
  add(path_567738, "resourceGroupName", newJString(resourceGroupName))
  add(path_567738, "siteExtensionId", newJString(siteExtensionId))
  result = call_567737.call(path_567738, query_567739, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_567727(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_567728, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_567729, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_567740 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotDifferencesSlot_567742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_567741(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567743 = path.getOrDefault("slot")
  valid_567743 = validateParameter(valid_567743, JString, required = true,
                                 default = nil)
  if valid_567743 != nil:
    section.add "slot", valid_567743
  var valid_567744 = path.getOrDefault("name")
  valid_567744 = validateParameter(valid_567744, JString, required = true,
                                 default = nil)
  if valid_567744 != nil:
    section.add "name", valid_567744
  var valid_567745 = path.getOrDefault("subscriptionId")
  valid_567745 = validateParameter(valid_567745, JString, required = true,
                                 default = nil)
  if valid_567745 != nil:
    section.add "subscriptionId", valid_567745
  var valid_567746 = path.getOrDefault("resourceGroupName")
  valid_567746 = validateParameter(valid_567746, JString, required = true,
                                 default = nil)
  if valid_567746 != nil:
    section.add "resourceGroupName", valid_567746
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567747 = query.getOrDefault("api-version")
  valid_567747 = validateParameter(valid_567747, JString, required = true,
                                 default = nil)
  if valid_567747 != nil:
    section.add "api-version", valid_567747
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567749: Call_WebAppsListSlotDifferencesSlot_567740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_567749.validator(path, query, header, formData, body)
  let scheme = call_567749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567749.url(scheme.get, call_567749.host, call_567749.base,
                         call_567749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567749, url, valid)

proc call*(call_567750: Call_WebAppsListSlotDifferencesSlot_567740; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567751 = newJObject()
  var query_567752 = newJObject()
  var body_567753 = newJObject()
  add(path_567751, "slot", newJString(slot))
  add(query_567752, "api-version", newJString(apiVersion))
  add(path_567751, "name", newJString(name))
  add(path_567751, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567753 = slotSwapEntity
  add(path_567751, "resourceGroupName", newJString(resourceGroupName))
  result = call_567750.call(path_567751, query_567752, nil, nil, body_567753)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_567740(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_567741, base: "",
    url: url_WebAppsListSlotDifferencesSlot_567742, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_567754 = ref object of OpenApiRestCall_563564
proc url_WebAppsSwapSlotSlot_567756(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_567755(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567757 = path.getOrDefault("slot")
  valid_567757 = validateParameter(valid_567757, JString, required = true,
                                 default = nil)
  if valid_567757 != nil:
    section.add "slot", valid_567757
  var valid_567758 = path.getOrDefault("name")
  valid_567758 = validateParameter(valid_567758, JString, required = true,
                                 default = nil)
  if valid_567758 != nil:
    section.add "name", valid_567758
  var valid_567759 = path.getOrDefault("subscriptionId")
  valid_567759 = validateParameter(valid_567759, JString, required = true,
                                 default = nil)
  if valid_567759 != nil:
    section.add "subscriptionId", valid_567759
  var valid_567760 = path.getOrDefault("resourceGroupName")
  valid_567760 = validateParameter(valid_567760, JString, required = true,
                                 default = nil)
  if valid_567760 != nil:
    section.add "resourceGroupName", valid_567760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567761 = query.getOrDefault("api-version")
  valid_567761 = validateParameter(valid_567761, JString, required = true,
                                 default = nil)
  if valid_567761 != nil:
    section.add "api-version", valid_567761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567763: Call_WebAppsSwapSlotSlot_567754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_567763.validator(path, query, header, formData, body)
  let scheme = call_567763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567763.url(scheme.get, call_567763.host, call_567763.base,
                         call_567763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567763, url, valid)

proc call*(call_567764: Call_WebAppsSwapSlotSlot_567754; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567765 = newJObject()
  var query_567766 = newJObject()
  var body_567767 = newJObject()
  add(path_567765, "slot", newJString(slot))
  add(query_567766, "api-version", newJString(apiVersion))
  add(path_567765, "name", newJString(name))
  add(path_567765, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567767 = slotSwapEntity
  add(path_567765, "resourceGroupName", newJString(resourceGroupName))
  result = call_567764.call(path_567765, query_567766, nil, nil, body_567767)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_567754(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_567755, base: "",
    url: url_WebAppsSwapSlotSlot_567756, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_567768 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshotsSlot_567770(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_567769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567771 = path.getOrDefault("slot")
  valid_567771 = validateParameter(valid_567771, JString, required = true,
                                 default = nil)
  if valid_567771 != nil:
    section.add "slot", valid_567771
  var valid_567772 = path.getOrDefault("name")
  valid_567772 = validateParameter(valid_567772, JString, required = true,
                                 default = nil)
  if valid_567772 != nil:
    section.add "name", valid_567772
  var valid_567773 = path.getOrDefault("subscriptionId")
  valid_567773 = validateParameter(valid_567773, JString, required = true,
                                 default = nil)
  if valid_567773 != nil:
    section.add "subscriptionId", valid_567773
  var valid_567774 = path.getOrDefault("resourceGroupName")
  valid_567774 = validateParameter(valid_567774, JString, required = true,
                                 default = nil)
  if valid_567774 != nil:
    section.add "resourceGroupName", valid_567774
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567775 = query.getOrDefault("api-version")
  valid_567775 = validateParameter(valid_567775, JString, required = true,
                                 default = nil)
  if valid_567775 != nil:
    section.add "api-version", valid_567775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567776: Call_WebAppsListSnapshotsSlot_567768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_567776.validator(path, query, header, formData, body)
  let scheme = call_567776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567776.url(scheme.get, call_567776.host, call_567776.base,
                         call_567776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567776, url, valid)

proc call*(call_567777: Call_WebAppsListSnapshotsSlot_567768; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567778 = newJObject()
  var query_567779 = newJObject()
  add(path_567778, "slot", newJString(slot))
  add(query_567779, "api-version", newJString(apiVersion))
  add(path_567778, "name", newJString(name))
  add(path_567778, "subscriptionId", newJString(subscriptionId))
  add(path_567778, "resourceGroupName", newJString(resourceGroupName))
  result = call_567777.call(path_567778, query_567779, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_567768(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_567769, base: "",
    url: url_WebAppsListSnapshotsSlot_567770, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondarySlot_567780 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshotsFromDRSecondarySlot_567782(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondarySlot_567781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567783 = path.getOrDefault("slot")
  valid_567783 = validateParameter(valid_567783, JString, required = true,
                                 default = nil)
  if valid_567783 != nil:
    section.add "slot", valid_567783
  var valid_567784 = path.getOrDefault("name")
  valid_567784 = validateParameter(valid_567784, JString, required = true,
                                 default = nil)
  if valid_567784 != nil:
    section.add "name", valid_567784
  var valid_567785 = path.getOrDefault("subscriptionId")
  valid_567785 = validateParameter(valid_567785, JString, required = true,
                                 default = nil)
  if valid_567785 != nil:
    section.add "subscriptionId", valid_567785
  var valid_567786 = path.getOrDefault("resourceGroupName")
  valid_567786 = validateParameter(valid_567786, JString, required = true,
                                 default = nil)
  if valid_567786 != nil:
    section.add "resourceGroupName", valid_567786
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567787 = query.getOrDefault("api-version")
  valid_567787 = validateParameter(valid_567787, JString, required = true,
                                 default = nil)
  if valid_567787 != nil:
    section.add "api-version", valid_567787
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567788: Call_WebAppsListSnapshotsFromDRSecondarySlot_567780;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_567788.validator(path, query, header, formData, body)
  let scheme = call_567788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567788.url(scheme.get, call_567788.host, call_567788.base,
                         call_567788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567788, url, valid)

proc call*(call_567789: Call_WebAppsListSnapshotsFromDRSecondarySlot_567780;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondarySlot
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567790 = newJObject()
  var query_567791 = newJObject()
  add(path_567790, "slot", newJString(slot))
  add(query_567791, "api-version", newJString(apiVersion))
  add(path_567790, "name", newJString(name))
  add(path_567790, "subscriptionId", newJString(subscriptionId))
  add(path_567790, "resourceGroupName", newJString(resourceGroupName))
  result = call_567789.call(path_567790, query_567791, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondarySlot* = Call_WebAppsListSnapshotsFromDRSecondarySlot_567780(
    name: "webAppsListSnapshotsFromDRSecondarySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondarySlot_567781, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondarySlot_567782,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_567804 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSourceControlSlot_567806(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_567805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567807 = path.getOrDefault("slot")
  valid_567807 = validateParameter(valid_567807, JString, required = true,
                                 default = nil)
  if valid_567807 != nil:
    section.add "slot", valid_567807
  var valid_567808 = path.getOrDefault("name")
  valid_567808 = validateParameter(valid_567808, JString, required = true,
                                 default = nil)
  if valid_567808 != nil:
    section.add "name", valid_567808
  var valid_567809 = path.getOrDefault("subscriptionId")
  valid_567809 = validateParameter(valid_567809, JString, required = true,
                                 default = nil)
  if valid_567809 != nil:
    section.add "subscriptionId", valid_567809
  var valid_567810 = path.getOrDefault("resourceGroupName")
  valid_567810 = validateParameter(valid_567810, JString, required = true,
                                 default = nil)
  if valid_567810 != nil:
    section.add "resourceGroupName", valid_567810
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567811 = query.getOrDefault("api-version")
  valid_567811 = validateParameter(valid_567811, JString, required = true,
                                 default = nil)
  if valid_567811 != nil:
    section.add "api-version", valid_567811
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567813: Call_WebAppsCreateOrUpdateSourceControlSlot_567804;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567813.validator(path, query, header, formData, body)
  let scheme = call_567813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567813.url(scheme.get, call_567813.host, call_567813.base,
                         call_567813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567813, url, valid)

proc call*(call_567814: Call_WebAppsCreateOrUpdateSourceControlSlot_567804;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567815 = newJObject()
  var query_567816 = newJObject()
  var body_567817 = newJObject()
  if siteSourceControl != nil:
    body_567817 = siteSourceControl
  add(path_567815, "slot", newJString(slot))
  add(query_567816, "api-version", newJString(apiVersion))
  add(path_567815, "name", newJString(name))
  add(path_567815, "subscriptionId", newJString(subscriptionId))
  add(path_567815, "resourceGroupName", newJString(resourceGroupName))
  result = call_567814.call(path_567815, query_567816, nil, nil, body_567817)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_567804(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_567805, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_567806,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_567792 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSourceControlSlot_567794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_567793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567795 = path.getOrDefault("slot")
  valid_567795 = validateParameter(valid_567795, JString, required = true,
                                 default = nil)
  if valid_567795 != nil:
    section.add "slot", valid_567795
  var valid_567796 = path.getOrDefault("name")
  valid_567796 = validateParameter(valid_567796, JString, required = true,
                                 default = nil)
  if valid_567796 != nil:
    section.add "name", valid_567796
  var valid_567797 = path.getOrDefault("subscriptionId")
  valid_567797 = validateParameter(valid_567797, JString, required = true,
                                 default = nil)
  if valid_567797 != nil:
    section.add "subscriptionId", valid_567797
  var valid_567798 = path.getOrDefault("resourceGroupName")
  valid_567798 = validateParameter(valid_567798, JString, required = true,
                                 default = nil)
  if valid_567798 != nil:
    section.add "resourceGroupName", valid_567798
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567799 = query.getOrDefault("api-version")
  valid_567799 = validateParameter(valid_567799, JString, required = true,
                                 default = nil)
  if valid_567799 != nil:
    section.add "api-version", valid_567799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567800: Call_WebAppsGetSourceControlSlot_567792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_567800.validator(path, query, header, formData, body)
  let scheme = call_567800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567800.url(scheme.get, call_567800.host, call_567800.base,
                         call_567800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567800, url, valid)

proc call*(call_567801: Call_WebAppsGetSourceControlSlot_567792; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567802 = newJObject()
  var query_567803 = newJObject()
  add(path_567802, "slot", newJString(slot))
  add(query_567803, "api-version", newJString(apiVersion))
  add(path_567802, "name", newJString(name))
  add(path_567802, "subscriptionId", newJString(subscriptionId))
  add(path_567802, "resourceGroupName", newJString(resourceGroupName))
  result = call_567801.call(path_567802, query_567803, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_567792(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_567793, base: "",
    url: url_WebAppsGetSourceControlSlot_567794, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_567830 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSourceControlSlot_567832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_567831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567833 = path.getOrDefault("slot")
  valid_567833 = validateParameter(valid_567833, JString, required = true,
                                 default = nil)
  if valid_567833 != nil:
    section.add "slot", valid_567833
  var valid_567834 = path.getOrDefault("name")
  valid_567834 = validateParameter(valid_567834, JString, required = true,
                                 default = nil)
  if valid_567834 != nil:
    section.add "name", valid_567834
  var valid_567835 = path.getOrDefault("subscriptionId")
  valid_567835 = validateParameter(valid_567835, JString, required = true,
                                 default = nil)
  if valid_567835 != nil:
    section.add "subscriptionId", valid_567835
  var valid_567836 = path.getOrDefault("resourceGroupName")
  valid_567836 = validateParameter(valid_567836, JString, required = true,
                                 default = nil)
  if valid_567836 != nil:
    section.add "resourceGroupName", valid_567836
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567837 = query.getOrDefault("api-version")
  valid_567837 = validateParameter(valid_567837, JString, required = true,
                                 default = nil)
  if valid_567837 != nil:
    section.add "api-version", valid_567837
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567839: Call_WebAppsUpdateSourceControlSlot_567830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567839.validator(path, query, header, formData, body)
  let scheme = call_567839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567839.url(scheme.get, call_567839.host, call_567839.base,
                         call_567839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567839, url, valid)

proc call*(call_567840: Call_WebAppsUpdateSourceControlSlot_567830;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567841 = newJObject()
  var query_567842 = newJObject()
  var body_567843 = newJObject()
  if siteSourceControl != nil:
    body_567843 = siteSourceControl
  add(path_567841, "slot", newJString(slot))
  add(query_567842, "api-version", newJString(apiVersion))
  add(path_567841, "name", newJString(name))
  add(path_567841, "subscriptionId", newJString(subscriptionId))
  add(path_567841, "resourceGroupName", newJString(resourceGroupName))
  result = call_567840.call(path_567841, query_567842, nil, nil, body_567843)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_567830(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_567831, base: "",
    url: url_WebAppsUpdateSourceControlSlot_567832, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_567818 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSourceControlSlot_567820(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_567819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567821 = path.getOrDefault("slot")
  valid_567821 = validateParameter(valid_567821, JString, required = true,
                                 default = nil)
  if valid_567821 != nil:
    section.add "slot", valid_567821
  var valid_567822 = path.getOrDefault("name")
  valid_567822 = validateParameter(valid_567822, JString, required = true,
                                 default = nil)
  if valid_567822 != nil:
    section.add "name", valid_567822
  var valid_567823 = path.getOrDefault("subscriptionId")
  valid_567823 = validateParameter(valid_567823, JString, required = true,
                                 default = nil)
  if valid_567823 != nil:
    section.add "subscriptionId", valid_567823
  var valid_567824 = path.getOrDefault("resourceGroupName")
  valid_567824 = validateParameter(valid_567824, JString, required = true,
                                 default = nil)
  if valid_567824 != nil:
    section.add "resourceGroupName", valid_567824
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567825 = query.getOrDefault("api-version")
  valid_567825 = validateParameter(valid_567825, JString, required = true,
                                 default = nil)
  if valid_567825 != nil:
    section.add "api-version", valid_567825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567826: Call_WebAppsDeleteSourceControlSlot_567818; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_567826.validator(path, query, header, formData, body)
  let scheme = call_567826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567826.url(scheme.get, call_567826.host, call_567826.base,
                         call_567826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567826, url, valid)

proc call*(call_567827: Call_WebAppsDeleteSourceControlSlot_567818; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567828 = newJObject()
  var query_567829 = newJObject()
  add(path_567828, "slot", newJString(slot))
  add(query_567829, "api-version", newJString(apiVersion))
  add(path_567828, "name", newJString(name))
  add(path_567828, "subscriptionId", newJString(subscriptionId))
  add(path_567828, "resourceGroupName", newJString(resourceGroupName))
  result = call_567827.call(path_567828, query_567829, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_567818(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_567819, base: "",
    url: url_WebAppsDeleteSourceControlSlot_567820, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_567844 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartSlot_567846(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_567845(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567847 = path.getOrDefault("slot")
  valid_567847 = validateParameter(valid_567847, JString, required = true,
                                 default = nil)
  if valid_567847 != nil:
    section.add "slot", valid_567847
  var valid_567848 = path.getOrDefault("name")
  valid_567848 = validateParameter(valid_567848, JString, required = true,
                                 default = nil)
  if valid_567848 != nil:
    section.add "name", valid_567848
  var valid_567849 = path.getOrDefault("subscriptionId")
  valid_567849 = validateParameter(valid_567849, JString, required = true,
                                 default = nil)
  if valid_567849 != nil:
    section.add "subscriptionId", valid_567849
  var valid_567850 = path.getOrDefault("resourceGroupName")
  valid_567850 = validateParameter(valid_567850, JString, required = true,
                                 default = nil)
  if valid_567850 != nil:
    section.add "resourceGroupName", valid_567850
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567851 = query.getOrDefault("api-version")
  valid_567851 = validateParameter(valid_567851, JString, required = true,
                                 default = nil)
  if valid_567851 != nil:
    section.add "api-version", valid_567851
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567852: Call_WebAppsStartSlot_567844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_567852.validator(path, query, header, formData, body)
  let scheme = call_567852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567852.url(scheme.get, call_567852.host, call_567852.base,
                         call_567852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567852, url, valid)

proc call*(call_567853: Call_WebAppsStartSlot_567844; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567854 = newJObject()
  var query_567855 = newJObject()
  add(path_567854, "slot", newJString(slot))
  add(query_567855, "api-version", newJString(apiVersion))
  add(path_567854, "name", newJString(name))
  add(path_567854, "subscriptionId", newJString(subscriptionId))
  add(path_567854, "resourceGroupName", newJString(resourceGroupName))
  result = call_567853.call(path_567854, query_567855, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_567844(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_567845, base: "",
    url: url_WebAppsStartSlot_567846, schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTraceSlot_567856 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartNetworkTraceSlot_567858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTraceSlot_567857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567859 = path.getOrDefault("slot")
  valid_567859 = validateParameter(valid_567859, JString, required = true,
                                 default = nil)
  if valid_567859 != nil:
    section.add "slot", valid_567859
  var valid_567860 = path.getOrDefault("name")
  valid_567860 = validateParameter(valid_567860, JString, required = true,
                                 default = nil)
  if valid_567860 != nil:
    section.add "name", valid_567860
  var valid_567861 = path.getOrDefault("subscriptionId")
  valid_567861 = validateParameter(valid_567861, JString, required = true,
                                 default = nil)
  if valid_567861 != nil:
    section.add "subscriptionId", valid_567861
  var valid_567862 = path.getOrDefault("resourceGroupName")
  valid_567862 = validateParameter(valid_567862, JString, required = true,
                                 default = nil)
  if valid_567862 != nil:
    section.add "resourceGroupName", valid_567862
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567863 = query.getOrDefault("api-version")
  valid_567863 = validateParameter(valid_567863, JString, required = true,
                                 default = nil)
  if valid_567863 != nil:
    section.add "api-version", valid_567863
  var valid_567864 = query.getOrDefault("sasUrl")
  valid_567864 = validateParameter(valid_567864, JString, required = false,
                                 default = nil)
  if valid_567864 != nil:
    section.add "sasUrl", valid_567864
  var valid_567865 = query.getOrDefault("durationInSeconds")
  valid_567865 = validateParameter(valid_567865, JInt, required = false, default = nil)
  if valid_567865 != nil:
    section.add "durationInSeconds", valid_567865
  var valid_567866 = query.getOrDefault("maxFrameLength")
  valid_567866 = validateParameter(valid_567866, JInt, required = false, default = nil)
  if valid_567866 != nil:
    section.add "maxFrameLength", valid_567866
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567867: Call_WebAppsStartNetworkTraceSlot_567856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_567867.validator(path, query, header, formData, body)
  let scheme = call_567867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567867.url(scheme.get, call_567867.host, call_567867.base,
                         call_567867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567867, url, valid)

proc call*(call_567868: Call_WebAppsStartNetworkTraceSlot_567856; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_567869 = newJObject()
  var query_567870 = newJObject()
  add(path_567869, "slot", newJString(slot))
  add(query_567870, "api-version", newJString(apiVersion))
  add(query_567870, "sasUrl", newJString(sasUrl))
  add(path_567869, "name", newJString(name))
  add(path_567869, "subscriptionId", newJString(subscriptionId))
  add(query_567870, "durationInSeconds", newJInt(durationInSeconds))
  add(path_567869, "resourceGroupName", newJString(resourceGroupName))
  add(query_567870, "maxFrameLength", newJInt(maxFrameLength))
  result = call_567868.call(path_567869, query_567870, nil, nil, nil)

var webAppsStartNetworkTraceSlot* = Call_WebAppsStartNetworkTraceSlot_567856(
    name: "webAppsStartNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTraceSlot_567857, base: "",
    url: url_WebAppsStartNetworkTraceSlot_567858, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_567871 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopSlot_567873(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_567872(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567874 = path.getOrDefault("slot")
  valid_567874 = validateParameter(valid_567874, JString, required = true,
                                 default = nil)
  if valid_567874 != nil:
    section.add "slot", valid_567874
  var valid_567875 = path.getOrDefault("name")
  valid_567875 = validateParameter(valid_567875, JString, required = true,
                                 default = nil)
  if valid_567875 != nil:
    section.add "name", valid_567875
  var valid_567876 = path.getOrDefault("subscriptionId")
  valid_567876 = validateParameter(valid_567876, JString, required = true,
                                 default = nil)
  if valid_567876 != nil:
    section.add "subscriptionId", valid_567876
  var valid_567877 = path.getOrDefault("resourceGroupName")
  valid_567877 = validateParameter(valid_567877, JString, required = true,
                                 default = nil)
  if valid_567877 != nil:
    section.add "resourceGroupName", valid_567877
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567878 = query.getOrDefault("api-version")
  valid_567878 = validateParameter(valid_567878, JString, required = true,
                                 default = nil)
  if valid_567878 != nil:
    section.add "api-version", valid_567878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567879: Call_WebAppsStopSlot_567871; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_567879.validator(path, query, header, formData, body)
  let scheme = call_567879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567879.url(scheme.get, call_567879.host, call_567879.base,
                         call_567879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567879, url, valid)

proc call*(call_567880: Call_WebAppsStopSlot_567871; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567881 = newJObject()
  var query_567882 = newJObject()
  add(path_567881, "slot", newJString(slot))
  add(query_567882, "api-version", newJString(apiVersion))
  add(path_567881, "name", newJString(name))
  add(path_567881, "subscriptionId", newJString(subscriptionId))
  add(path_567881, "resourceGroupName", newJString(resourceGroupName))
  result = call_567880.call(path_567881, query_567882, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_567871(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_567872, base: "", url: url_WebAppsStopSlot_567873,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTraceSlot_567883 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopNetworkTraceSlot_567885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTraceSlot_567884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567886 = path.getOrDefault("slot")
  valid_567886 = validateParameter(valid_567886, JString, required = true,
                                 default = nil)
  if valid_567886 != nil:
    section.add "slot", valid_567886
  var valid_567887 = path.getOrDefault("name")
  valid_567887 = validateParameter(valid_567887, JString, required = true,
                                 default = nil)
  if valid_567887 != nil:
    section.add "name", valid_567887
  var valid_567888 = path.getOrDefault("subscriptionId")
  valid_567888 = validateParameter(valid_567888, JString, required = true,
                                 default = nil)
  if valid_567888 != nil:
    section.add "subscriptionId", valid_567888
  var valid_567889 = path.getOrDefault("resourceGroupName")
  valid_567889 = validateParameter(valid_567889, JString, required = true,
                                 default = nil)
  if valid_567889 != nil:
    section.add "resourceGroupName", valid_567889
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567890 = query.getOrDefault("api-version")
  valid_567890 = validateParameter(valid_567890, JString, required = true,
                                 default = nil)
  if valid_567890 != nil:
    section.add "api-version", valid_567890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567891: Call_WebAppsStopNetworkTraceSlot_567883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_567891.validator(path, query, header, formData, body)
  let scheme = call_567891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567891.url(scheme.get, call_567891.host, call_567891.base,
                         call_567891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567891, url, valid)

proc call*(call_567892: Call_WebAppsStopNetworkTraceSlot_567883; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567893 = newJObject()
  var query_567894 = newJObject()
  add(path_567893, "slot", newJString(slot))
  add(query_567894, "api-version", newJString(apiVersion))
  add(path_567893, "name", newJString(name))
  add(path_567893, "subscriptionId", newJString(subscriptionId))
  add(path_567893, "resourceGroupName", newJString(resourceGroupName))
  result = call_567892.call(path_567893, query_567894, nil, nil, nil)

var webAppsStopNetworkTraceSlot* = Call_WebAppsStopNetworkTraceSlot_567883(
    name: "webAppsStopNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTraceSlot_567884, base: "",
    url: url_WebAppsStopNetworkTraceSlot_567885, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_567895 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncRepositorySlot_567897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_567896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567898 = path.getOrDefault("slot")
  valid_567898 = validateParameter(valid_567898, JString, required = true,
                                 default = nil)
  if valid_567898 != nil:
    section.add "slot", valid_567898
  var valid_567899 = path.getOrDefault("name")
  valid_567899 = validateParameter(valid_567899, JString, required = true,
                                 default = nil)
  if valid_567899 != nil:
    section.add "name", valid_567899
  var valid_567900 = path.getOrDefault("subscriptionId")
  valid_567900 = validateParameter(valid_567900, JString, required = true,
                                 default = nil)
  if valid_567900 != nil:
    section.add "subscriptionId", valid_567900
  var valid_567901 = path.getOrDefault("resourceGroupName")
  valid_567901 = validateParameter(valid_567901, JString, required = true,
                                 default = nil)
  if valid_567901 != nil:
    section.add "resourceGroupName", valid_567901
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567902 = query.getOrDefault("api-version")
  valid_567902 = validateParameter(valid_567902, JString, required = true,
                                 default = nil)
  if valid_567902 != nil:
    section.add "api-version", valid_567902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567903: Call_WebAppsSyncRepositorySlot_567895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_567903.validator(path, query, header, formData, body)
  let scheme = call_567903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567903.url(scheme.get, call_567903.host, call_567903.base,
                         call_567903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567903, url, valid)

proc call*(call_567904: Call_WebAppsSyncRepositorySlot_567895; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567905 = newJObject()
  var query_567906 = newJObject()
  add(path_567905, "slot", newJString(slot))
  add(query_567906, "api-version", newJString(apiVersion))
  add(path_567905, "name", newJString(name))
  add(path_567905, "subscriptionId", newJString(subscriptionId))
  add(path_567905, "resourceGroupName", newJString(resourceGroupName))
  result = call_567904.call(path_567905, query_567906, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_567895(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_567896, base: "",
    url: url_WebAppsSyncRepositorySlot_567897, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_567907 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncFunctionTriggersSlot_567909(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_567908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567910 = path.getOrDefault("slot")
  valid_567910 = validateParameter(valid_567910, JString, required = true,
                                 default = nil)
  if valid_567910 != nil:
    section.add "slot", valid_567910
  var valid_567911 = path.getOrDefault("name")
  valid_567911 = validateParameter(valid_567911, JString, required = true,
                                 default = nil)
  if valid_567911 != nil:
    section.add "name", valid_567911
  var valid_567912 = path.getOrDefault("subscriptionId")
  valid_567912 = validateParameter(valid_567912, JString, required = true,
                                 default = nil)
  if valid_567912 != nil:
    section.add "subscriptionId", valid_567912
  var valid_567913 = path.getOrDefault("resourceGroupName")
  valid_567913 = validateParameter(valid_567913, JString, required = true,
                                 default = nil)
  if valid_567913 != nil:
    section.add "resourceGroupName", valid_567913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567914 = query.getOrDefault("api-version")
  valid_567914 = validateParameter(valid_567914, JString, required = true,
                                 default = nil)
  if valid_567914 != nil:
    section.add "api-version", valid_567914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567915: Call_WebAppsSyncFunctionTriggersSlot_567907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_567915.validator(path, query, header, formData, body)
  let scheme = call_567915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567915.url(scheme.get, call_567915.host, call_567915.base,
                         call_567915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567915, url, valid)

proc call*(call_567916: Call_WebAppsSyncFunctionTriggersSlot_567907; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567917 = newJObject()
  var query_567918 = newJObject()
  add(path_567917, "slot", newJString(slot))
  add(query_567918, "api-version", newJString(apiVersion))
  add(path_567917, "name", newJString(name))
  add(path_567917, "subscriptionId", newJString(subscriptionId))
  add(path_567917, "resourceGroupName", newJString(resourceGroupName))
  result = call_567916.call(path_567917, query_567918, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_567907(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_567908, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_567909, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_567919 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobsSlot_567921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_567920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567922 = path.getOrDefault("slot")
  valid_567922 = validateParameter(valid_567922, JString, required = true,
                                 default = nil)
  if valid_567922 != nil:
    section.add "slot", valid_567922
  var valid_567923 = path.getOrDefault("name")
  valid_567923 = validateParameter(valid_567923, JString, required = true,
                                 default = nil)
  if valid_567923 != nil:
    section.add "name", valid_567923
  var valid_567924 = path.getOrDefault("subscriptionId")
  valid_567924 = validateParameter(valid_567924, JString, required = true,
                                 default = nil)
  if valid_567924 != nil:
    section.add "subscriptionId", valid_567924
  var valid_567925 = path.getOrDefault("resourceGroupName")
  valid_567925 = validateParameter(valid_567925, JString, required = true,
                                 default = nil)
  if valid_567925 != nil:
    section.add "resourceGroupName", valid_567925
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567926 = query.getOrDefault("api-version")
  valid_567926 = validateParameter(valid_567926, JString, required = true,
                                 default = nil)
  if valid_567926 != nil:
    section.add "api-version", valid_567926
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567927: Call_WebAppsListTriggeredWebJobsSlot_567919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_567927.validator(path, query, header, formData, body)
  let scheme = call_567927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567927.url(scheme.get, call_567927.host, call_567927.base,
                         call_567927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567927, url, valid)

proc call*(call_567928: Call_WebAppsListTriggeredWebJobsSlot_567919; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567929 = newJObject()
  var query_567930 = newJObject()
  add(path_567929, "slot", newJString(slot))
  add(query_567930, "api-version", newJString(apiVersion))
  add(path_567929, "name", newJString(name))
  add(path_567929, "subscriptionId", newJString(subscriptionId))
  add(path_567929, "resourceGroupName", newJString(resourceGroupName))
  result = call_567928.call(path_567929, query_567930, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_567919(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_567920, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_567921, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_567931 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobSlot_567933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_567932(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567934 = path.getOrDefault("slot")
  valid_567934 = validateParameter(valid_567934, JString, required = true,
                                 default = nil)
  if valid_567934 != nil:
    section.add "slot", valid_567934
  var valid_567935 = path.getOrDefault("name")
  valid_567935 = validateParameter(valid_567935, JString, required = true,
                                 default = nil)
  if valid_567935 != nil:
    section.add "name", valid_567935
  var valid_567936 = path.getOrDefault("subscriptionId")
  valid_567936 = validateParameter(valid_567936, JString, required = true,
                                 default = nil)
  if valid_567936 != nil:
    section.add "subscriptionId", valid_567936
  var valid_567937 = path.getOrDefault("webJobName")
  valid_567937 = validateParameter(valid_567937, JString, required = true,
                                 default = nil)
  if valid_567937 != nil:
    section.add "webJobName", valid_567937
  var valid_567938 = path.getOrDefault("resourceGroupName")
  valid_567938 = validateParameter(valid_567938, JString, required = true,
                                 default = nil)
  if valid_567938 != nil:
    section.add "resourceGroupName", valid_567938
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567939 = query.getOrDefault("api-version")
  valid_567939 = validateParameter(valid_567939, JString, required = true,
                                 default = nil)
  if valid_567939 != nil:
    section.add "api-version", valid_567939
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567940: Call_WebAppsGetTriggeredWebJobSlot_567931; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567940.validator(path, query, header, formData, body)
  let scheme = call_567940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567940.url(scheme.get, call_567940.host, call_567940.base,
                         call_567940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567940, url, valid)

proc call*(call_567941: Call_WebAppsGetTriggeredWebJobSlot_567931; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567942 = newJObject()
  var query_567943 = newJObject()
  add(path_567942, "slot", newJString(slot))
  add(query_567943, "api-version", newJString(apiVersion))
  add(path_567942, "name", newJString(name))
  add(path_567942, "subscriptionId", newJString(subscriptionId))
  add(path_567942, "webJobName", newJString(webJobName))
  add(path_567942, "resourceGroupName", newJString(resourceGroupName))
  result = call_567941.call(path_567942, query_567943, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_567931(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_567932, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_567933, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_567944 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteTriggeredWebJobSlot_567946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_567945(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567947 = path.getOrDefault("slot")
  valid_567947 = validateParameter(valid_567947, JString, required = true,
                                 default = nil)
  if valid_567947 != nil:
    section.add "slot", valid_567947
  var valid_567948 = path.getOrDefault("name")
  valid_567948 = validateParameter(valid_567948, JString, required = true,
                                 default = nil)
  if valid_567948 != nil:
    section.add "name", valid_567948
  var valid_567949 = path.getOrDefault("subscriptionId")
  valid_567949 = validateParameter(valid_567949, JString, required = true,
                                 default = nil)
  if valid_567949 != nil:
    section.add "subscriptionId", valid_567949
  var valid_567950 = path.getOrDefault("webJobName")
  valid_567950 = validateParameter(valid_567950, JString, required = true,
                                 default = nil)
  if valid_567950 != nil:
    section.add "webJobName", valid_567950
  var valid_567951 = path.getOrDefault("resourceGroupName")
  valid_567951 = validateParameter(valid_567951, JString, required = true,
                                 default = nil)
  if valid_567951 != nil:
    section.add "resourceGroupName", valid_567951
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567952 = query.getOrDefault("api-version")
  valid_567952 = validateParameter(valid_567952, JString, required = true,
                                 default = nil)
  if valid_567952 != nil:
    section.add "api-version", valid_567952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567953: Call_WebAppsDeleteTriggeredWebJobSlot_567944;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567953.validator(path, query, header, formData, body)
  let scheme = call_567953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567953.url(scheme.get, call_567953.host, call_567953.base,
                         call_567953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567953, url, valid)

proc call*(call_567954: Call_WebAppsDeleteTriggeredWebJobSlot_567944; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567955 = newJObject()
  var query_567956 = newJObject()
  add(path_567955, "slot", newJString(slot))
  add(query_567956, "api-version", newJString(apiVersion))
  add(path_567955, "name", newJString(name))
  add(path_567955, "subscriptionId", newJString(subscriptionId))
  add(path_567955, "webJobName", newJString(webJobName))
  add(path_567955, "resourceGroupName", newJString(resourceGroupName))
  result = call_567954.call(path_567955, query_567956, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_567944(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_567945, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_567946, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_567957 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobHistorySlot_567959(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_567958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567960 = path.getOrDefault("slot")
  valid_567960 = validateParameter(valid_567960, JString, required = true,
                                 default = nil)
  if valid_567960 != nil:
    section.add "slot", valid_567960
  var valid_567961 = path.getOrDefault("name")
  valid_567961 = validateParameter(valid_567961, JString, required = true,
                                 default = nil)
  if valid_567961 != nil:
    section.add "name", valid_567961
  var valid_567962 = path.getOrDefault("subscriptionId")
  valid_567962 = validateParameter(valid_567962, JString, required = true,
                                 default = nil)
  if valid_567962 != nil:
    section.add "subscriptionId", valid_567962
  var valid_567963 = path.getOrDefault("webJobName")
  valid_567963 = validateParameter(valid_567963, JString, required = true,
                                 default = nil)
  if valid_567963 != nil:
    section.add "webJobName", valid_567963
  var valid_567964 = path.getOrDefault("resourceGroupName")
  valid_567964 = validateParameter(valid_567964, JString, required = true,
                                 default = nil)
  if valid_567964 != nil:
    section.add "resourceGroupName", valid_567964
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567965 = query.getOrDefault("api-version")
  valid_567965 = validateParameter(valid_567965, JString, required = true,
                                 default = nil)
  if valid_567965 != nil:
    section.add "api-version", valid_567965
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567966: Call_WebAppsListTriggeredWebJobHistorySlot_567957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_567966.validator(path, query, header, formData, body)
  let scheme = call_567966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567966.url(scheme.get, call_567966.host, call_567966.base,
                         call_567966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567966, url, valid)

proc call*(call_567967: Call_WebAppsListTriggeredWebJobHistorySlot_567957;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567968 = newJObject()
  var query_567969 = newJObject()
  add(path_567968, "slot", newJString(slot))
  add(query_567969, "api-version", newJString(apiVersion))
  add(path_567968, "name", newJString(name))
  add(path_567968, "subscriptionId", newJString(subscriptionId))
  add(path_567968, "webJobName", newJString(webJobName))
  add(path_567968, "resourceGroupName", newJString(resourceGroupName))
  result = call_567967.call(path_567968, query_567969, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_567957(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_567958, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_567959, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_567970 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobHistorySlot_567972(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_567971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   id: JString (required)
  ##     : History ID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567973 = path.getOrDefault("slot")
  valid_567973 = validateParameter(valid_567973, JString, required = true,
                                 default = nil)
  if valid_567973 != nil:
    section.add "slot", valid_567973
  var valid_567974 = path.getOrDefault("id")
  valid_567974 = validateParameter(valid_567974, JString, required = true,
                                 default = nil)
  if valid_567974 != nil:
    section.add "id", valid_567974
  var valid_567975 = path.getOrDefault("name")
  valid_567975 = validateParameter(valid_567975, JString, required = true,
                                 default = nil)
  if valid_567975 != nil:
    section.add "name", valid_567975
  var valid_567976 = path.getOrDefault("subscriptionId")
  valid_567976 = validateParameter(valid_567976, JString, required = true,
                                 default = nil)
  if valid_567976 != nil:
    section.add "subscriptionId", valid_567976
  var valid_567977 = path.getOrDefault("webJobName")
  valid_567977 = validateParameter(valid_567977, JString, required = true,
                                 default = nil)
  if valid_567977 != nil:
    section.add "webJobName", valid_567977
  var valid_567978 = path.getOrDefault("resourceGroupName")
  valid_567978 = validateParameter(valid_567978, JString, required = true,
                                 default = nil)
  if valid_567978 != nil:
    section.add "resourceGroupName", valid_567978
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567979 = query.getOrDefault("api-version")
  valid_567979 = validateParameter(valid_567979, JString, required = true,
                                 default = nil)
  if valid_567979 != nil:
    section.add "api-version", valid_567979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567980: Call_WebAppsGetTriggeredWebJobHistorySlot_567970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_567980.validator(path, query, header, formData, body)
  let scheme = call_567980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567980.url(scheme.get, call_567980.host, call_567980.base,
                         call_567980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567980, url, valid)

proc call*(call_567981: Call_WebAppsGetTriggeredWebJobHistorySlot_567970;
          slot: string; apiVersion: string; id: string; name: string;
          subscriptionId: string; webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : History ID.
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567982 = newJObject()
  var query_567983 = newJObject()
  add(path_567982, "slot", newJString(slot))
  add(query_567983, "api-version", newJString(apiVersion))
  add(path_567982, "id", newJString(id))
  add(path_567982, "name", newJString(name))
  add(path_567982, "subscriptionId", newJString(subscriptionId))
  add(path_567982, "webJobName", newJString(webJobName))
  add(path_567982, "resourceGroupName", newJString(resourceGroupName))
  result = call_567981.call(path_567982, query_567983, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_567970(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_567971, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_567972, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_567984 = ref object of OpenApiRestCall_563564
proc url_WebAppsRunTriggeredWebJobSlot_567986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_567985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567987 = path.getOrDefault("slot")
  valid_567987 = validateParameter(valid_567987, JString, required = true,
                                 default = nil)
  if valid_567987 != nil:
    section.add "slot", valid_567987
  var valid_567988 = path.getOrDefault("name")
  valid_567988 = validateParameter(valid_567988, JString, required = true,
                                 default = nil)
  if valid_567988 != nil:
    section.add "name", valid_567988
  var valid_567989 = path.getOrDefault("subscriptionId")
  valid_567989 = validateParameter(valid_567989, JString, required = true,
                                 default = nil)
  if valid_567989 != nil:
    section.add "subscriptionId", valid_567989
  var valid_567990 = path.getOrDefault("webJobName")
  valid_567990 = validateParameter(valid_567990, JString, required = true,
                                 default = nil)
  if valid_567990 != nil:
    section.add "webJobName", valid_567990
  var valid_567991 = path.getOrDefault("resourceGroupName")
  valid_567991 = validateParameter(valid_567991, JString, required = true,
                                 default = nil)
  if valid_567991 != nil:
    section.add "resourceGroupName", valid_567991
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567992 = query.getOrDefault("api-version")
  valid_567992 = validateParameter(valid_567992, JString, required = true,
                                 default = nil)
  if valid_567992 != nil:
    section.add "api-version", valid_567992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567993: Call_WebAppsRunTriggeredWebJobSlot_567984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_567993.validator(path, query, header, formData, body)
  let scheme = call_567993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567993.url(scheme.get, call_567993.host, call_567993.base,
                         call_567993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567993, url, valid)

proc call*(call_567994: Call_WebAppsRunTriggeredWebJobSlot_567984; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567995 = newJObject()
  var query_567996 = newJObject()
  add(path_567995, "slot", newJString(slot))
  add(query_567996, "api-version", newJString(apiVersion))
  add(path_567995, "name", newJString(name))
  add(path_567995, "subscriptionId", newJString(subscriptionId))
  add(path_567995, "webJobName", newJString(webJobName))
  add(path_567995, "resourceGroupName", newJString(resourceGroupName))
  result = call_567994.call(path_567995, query_567996, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_567984(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_567985, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_567986, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_567997 = ref object of OpenApiRestCall_563564
proc url_WebAppsListUsagesSlot_567999(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_567998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568000 = path.getOrDefault("slot")
  valid_568000 = validateParameter(valid_568000, JString, required = true,
                                 default = nil)
  if valid_568000 != nil:
    section.add "slot", valid_568000
  var valid_568001 = path.getOrDefault("name")
  valid_568001 = validateParameter(valid_568001, JString, required = true,
                                 default = nil)
  if valid_568001 != nil:
    section.add "name", valid_568001
  var valid_568002 = path.getOrDefault("subscriptionId")
  valid_568002 = validateParameter(valid_568002, JString, required = true,
                                 default = nil)
  if valid_568002 != nil:
    section.add "subscriptionId", valid_568002
  var valid_568003 = path.getOrDefault("resourceGroupName")
  valid_568003 = validateParameter(valid_568003, JString, required = true,
                                 default = nil)
  if valid_568003 != nil:
    section.add "resourceGroupName", valid_568003
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568004 = query.getOrDefault("api-version")
  valid_568004 = validateParameter(valid_568004, JString, required = true,
                                 default = nil)
  if valid_568004 != nil:
    section.add "api-version", valid_568004
  var valid_568005 = query.getOrDefault("$filter")
  valid_568005 = validateParameter(valid_568005, JString, required = false,
                                 default = nil)
  if valid_568005 != nil:
    section.add "$filter", valid_568005
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568006: Call_WebAppsListUsagesSlot_567997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_568006.validator(path, query, header, formData, body)
  let scheme = call_568006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568006.url(scheme.get, call_568006.host, call_568006.base,
                         call_568006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568006, url, valid)

proc call*(call_568007: Call_WebAppsListUsagesSlot_567997; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_568008 = newJObject()
  var query_568009 = newJObject()
  add(path_568008, "slot", newJString(slot))
  add(query_568009, "api-version", newJString(apiVersion))
  add(path_568008, "name", newJString(name))
  add(path_568008, "subscriptionId", newJString(subscriptionId))
  add(path_568008, "resourceGroupName", newJString(resourceGroupName))
  add(query_568009, "$filter", newJString(Filter))
  result = call_568007.call(path_568008, query_568009, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_567997(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_567998, base: "",
    url: url_WebAppsListUsagesSlot_567999, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_568010 = ref object of OpenApiRestCall_563564
proc url_WebAppsListVnetConnectionsSlot_568012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_568011(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568013 = path.getOrDefault("slot")
  valid_568013 = validateParameter(valid_568013, JString, required = true,
                                 default = nil)
  if valid_568013 != nil:
    section.add "slot", valid_568013
  var valid_568014 = path.getOrDefault("name")
  valid_568014 = validateParameter(valid_568014, JString, required = true,
                                 default = nil)
  if valid_568014 != nil:
    section.add "name", valid_568014
  var valid_568015 = path.getOrDefault("subscriptionId")
  valid_568015 = validateParameter(valid_568015, JString, required = true,
                                 default = nil)
  if valid_568015 != nil:
    section.add "subscriptionId", valid_568015
  var valid_568016 = path.getOrDefault("resourceGroupName")
  valid_568016 = validateParameter(valid_568016, JString, required = true,
                                 default = nil)
  if valid_568016 != nil:
    section.add "resourceGroupName", valid_568016
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568017 = query.getOrDefault("api-version")
  valid_568017 = validateParameter(valid_568017, JString, required = true,
                                 default = nil)
  if valid_568017 != nil:
    section.add "api-version", valid_568017
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568018: Call_WebAppsListVnetConnectionsSlot_568010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_568018.validator(path, query, header, formData, body)
  let scheme = call_568018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568018.url(scheme.get, call_568018.host, call_568018.base,
                         call_568018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568018, url, valid)

proc call*(call_568019: Call_WebAppsListVnetConnectionsSlot_568010; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568020 = newJObject()
  var query_568021 = newJObject()
  add(path_568020, "slot", newJString(slot))
  add(query_568021, "api-version", newJString(apiVersion))
  add(path_568020, "name", newJString(name))
  add(path_568020, "subscriptionId", newJString(subscriptionId))
  add(path_568020, "resourceGroupName", newJString(resourceGroupName))
  result = call_568019.call(path_568020, query_568021, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_568010(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_568011, base: "",
    url: url_WebAppsListVnetConnectionsSlot_568012, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_568035 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_568037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_568036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568038 = path.getOrDefault("slot")
  valid_568038 = validateParameter(valid_568038, JString, required = true,
                                 default = nil)
  if valid_568038 != nil:
    section.add "slot", valid_568038
  var valid_568039 = path.getOrDefault("name")
  valid_568039 = validateParameter(valid_568039, JString, required = true,
                                 default = nil)
  if valid_568039 != nil:
    section.add "name", valid_568039
  var valid_568040 = path.getOrDefault("vnetName")
  valid_568040 = validateParameter(valid_568040, JString, required = true,
                                 default = nil)
  if valid_568040 != nil:
    section.add "vnetName", valid_568040
  var valid_568041 = path.getOrDefault("subscriptionId")
  valid_568041 = validateParameter(valid_568041, JString, required = true,
                                 default = nil)
  if valid_568041 != nil:
    section.add "subscriptionId", valid_568041
  var valid_568042 = path.getOrDefault("resourceGroupName")
  valid_568042 = validateParameter(valid_568042, JString, required = true,
                                 default = nil)
  if valid_568042 != nil:
    section.add "resourceGroupName", valid_568042
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568043 = query.getOrDefault("api-version")
  valid_568043 = validateParameter(valid_568043, JString, required = true,
                                 default = nil)
  if valid_568043 != nil:
    section.add "api-version", valid_568043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568045: Call_WebAppsCreateOrUpdateVnetConnectionSlot_568035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_568045.validator(path, query, header, formData, body)
  let scheme = call_568045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568045.url(scheme.get, call_568045.host, call_568045.base,
                         call_568045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568045, url, valid)

proc call*(call_568046: Call_WebAppsCreateOrUpdateVnetConnectionSlot_568035;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568047 = newJObject()
  var query_568048 = newJObject()
  var body_568049 = newJObject()
  add(path_568047, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_568049 = connectionEnvelope
  add(query_568048, "api-version", newJString(apiVersion))
  add(path_568047, "name", newJString(name))
  add(path_568047, "vnetName", newJString(vnetName))
  add(path_568047, "subscriptionId", newJString(subscriptionId))
  add(path_568047, "resourceGroupName", newJString(resourceGroupName))
  result = call_568046.call(path_568047, query_568048, nil, nil, body_568049)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_568035(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_568036, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_568037,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_568022 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionSlot_568024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_568023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568025 = path.getOrDefault("slot")
  valid_568025 = validateParameter(valid_568025, JString, required = true,
                                 default = nil)
  if valid_568025 != nil:
    section.add "slot", valid_568025
  var valid_568026 = path.getOrDefault("name")
  valid_568026 = validateParameter(valid_568026, JString, required = true,
                                 default = nil)
  if valid_568026 != nil:
    section.add "name", valid_568026
  var valid_568027 = path.getOrDefault("vnetName")
  valid_568027 = validateParameter(valid_568027, JString, required = true,
                                 default = nil)
  if valid_568027 != nil:
    section.add "vnetName", valid_568027
  var valid_568028 = path.getOrDefault("subscriptionId")
  valid_568028 = validateParameter(valid_568028, JString, required = true,
                                 default = nil)
  if valid_568028 != nil:
    section.add "subscriptionId", valid_568028
  var valid_568029 = path.getOrDefault("resourceGroupName")
  valid_568029 = validateParameter(valid_568029, JString, required = true,
                                 default = nil)
  if valid_568029 != nil:
    section.add "resourceGroupName", valid_568029
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568030 = query.getOrDefault("api-version")
  valid_568030 = validateParameter(valid_568030, JString, required = true,
                                 default = nil)
  if valid_568030 != nil:
    section.add "api-version", valid_568030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568031: Call_WebAppsGetVnetConnectionSlot_568022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_568031.validator(path, query, header, formData, body)
  let scheme = call_568031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568031.url(scheme.get, call_568031.host, call_568031.base,
                         call_568031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568031, url, valid)

proc call*(call_568032: Call_WebAppsGetVnetConnectionSlot_568022; slot: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568033 = newJObject()
  var query_568034 = newJObject()
  add(path_568033, "slot", newJString(slot))
  add(query_568034, "api-version", newJString(apiVersion))
  add(path_568033, "name", newJString(name))
  add(path_568033, "vnetName", newJString(vnetName))
  add(path_568033, "subscriptionId", newJString(subscriptionId))
  add(path_568033, "resourceGroupName", newJString(resourceGroupName))
  result = call_568032.call(path_568033, query_568034, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_568022(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_568023, base: "",
    url: url_WebAppsGetVnetConnectionSlot_568024, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_568063 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionSlot_568065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_568064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568066 = path.getOrDefault("slot")
  valid_568066 = validateParameter(valid_568066, JString, required = true,
                                 default = nil)
  if valid_568066 != nil:
    section.add "slot", valid_568066
  var valid_568067 = path.getOrDefault("name")
  valid_568067 = validateParameter(valid_568067, JString, required = true,
                                 default = nil)
  if valid_568067 != nil:
    section.add "name", valid_568067
  var valid_568068 = path.getOrDefault("vnetName")
  valid_568068 = validateParameter(valid_568068, JString, required = true,
                                 default = nil)
  if valid_568068 != nil:
    section.add "vnetName", valid_568068
  var valid_568069 = path.getOrDefault("subscriptionId")
  valid_568069 = validateParameter(valid_568069, JString, required = true,
                                 default = nil)
  if valid_568069 != nil:
    section.add "subscriptionId", valid_568069
  var valid_568070 = path.getOrDefault("resourceGroupName")
  valid_568070 = validateParameter(valid_568070, JString, required = true,
                                 default = nil)
  if valid_568070 != nil:
    section.add "resourceGroupName", valid_568070
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568071 = query.getOrDefault("api-version")
  valid_568071 = validateParameter(valid_568071, JString, required = true,
                                 default = nil)
  if valid_568071 != nil:
    section.add "api-version", valid_568071
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568073: Call_WebAppsUpdateVnetConnectionSlot_568063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_568073.validator(path, query, header, formData, body)
  let scheme = call_568073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568073.url(scheme.get, call_568073.host, call_568073.base,
                         call_568073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568073, url, valid)

proc call*(call_568074: Call_WebAppsUpdateVnetConnectionSlot_568063; slot: string;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568075 = newJObject()
  var query_568076 = newJObject()
  var body_568077 = newJObject()
  add(path_568075, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_568077 = connectionEnvelope
  add(query_568076, "api-version", newJString(apiVersion))
  add(path_568075, "name", newJString(name))
  add(path_568075, "vnetName", newJString(vnetName))
  add(path_568075, "subscriptionId", newJString(subscriptionId))
  add(path_568075, "resourceGroupName", newJString(resourceGroupName))
  result = call_568074.call(path_568075, query_568076, nil, nil, body_568077)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_568063(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_568064, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_568065, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_568050 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteVnetConnectionSlot_568052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_568051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568053 = path.getOrDefault("slot")
  valid_568053 = validateParameter(valid_568053, JString, required = true,
                                 default = nil)
  if valid_568053 != nil:
    section.add "slot", valid_568053
  var valid_568054 = path.getOrDefault("name")
  valid_568054 = validateParameter(valid_568054, JString, required = true,
                                 default = nil)
  if valid_568054 != nil:
    section.add "name", valid_568054
  var valid_568055 = path.getOrDefault("vnetName")
  valid_568055 = validateParameter(valid_568055, JString, required = true,
                                 default = nil)
  if valid_568055 != nil:
    section.add "vnetName", valid_568055
  var valid_568056 = path.getOrDefault("subscriptionId")
  valid_568056 = validateParameter(valid_568056, JString, required = true,
                                 default = nil)
  if valid_568056 != nil:
    section.add "subscriptionId", valid_568056
  var valid_568057 = path.getOrDefault("resourceGroupName")
  valid_568057 = validateParameter(valid_568057, JString, required = true,
                                 default = nil)
  if valid_568057 != nil:
    section.add "resourceGroupName", valid_568057
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568058 = query.getOrDefault("api-version")
  valid_568058 = validateParameter(valid_568058, JString, required = true,
                                 default = nil)
  if valid_568058 != nil:
    section.add "api-version", valid_568058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568059: Call_WebAppsDeleteVnetConnectionSlot_568050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_568059.validator(path, query, header, formData, body)
  let scheme = call_568059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568059.url(scheme.get, call_568059.host, call_568059.base,
                         call_568059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568059, url, valid)

proc call*(call_568060: Call_WebAppsDeleteVnetConnectionSlot_568050; slot: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568061 = newJObject()
  var query_568062 = newJObject()
  add(path_568061, "slot", newJString(slot))
  add(query_568062, "api-version", newJString(apiVersion))
  add(path_568061, "name", newJString(name))
  add(path_568061, "vnetName", newJString(vnetName))
  add(path_568061, "subscriptionId", newJString(subscriptionId))
  add(path_568061, "resourceGroupName", newJString(resourceGroupName))
  result = call_568060.call(path_568061, query_568062, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_568050(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_568051, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_568052, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568092 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568094(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568093(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568095 = path.getOrDefault("slot")
  valid_568095 = validateParameter(valid_568095, JString, required = true,
                                 default = nil)
  if valid_568095 != nil:
    section.add "slot", valid_568095
  var valid_568096 = path.getOrDefault("gatewayName")
  valid_568096 = validateParameter(valid_568096, JString, required = true,
                                 default = nil)
  if valid_568096 != nil:
    section.add "gatewayName", valid_568096
  var valid_568097 = path.getOrDefault("name")
  valid_568097 = validateParameter(valid_568097, JString, required = true,
                                 default = nil)
  if valid_568097 != nil:
    section.add "name", valid_568097
  var valid_568098 = path.getOrDefault("vnetName")
  valid_568098 = validateParameter(valid_568098, JString, required = true,
                                 default = nil)
  if valid_568098 != nil:
    section.add "vnetName", valid_568098
  var valid_568099 = path.getOrDefault("subscriptionId")
  valid_568099 = validateParameter(valid_568099, JString, required = true,
                                 default = nil)
  if valid_568099 != nil:
    section.add "subscriptionId", valid_568099
  var valid_568100 = path.getOrDefault("resourceGroupName")
  valid_568100 = validateParameter(valid_568100, JString, required = true,
                                 default = nil)
  if valid_568100 != nil:
    section.add "resourceGroupName", valid_568100
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568101 = query.getOrDefault("api-version")
  valid_568101 = validateParameter(valid_568101, JString, required = true,
                                 default = nil)
  if valid_568101 != nil:
    section.add "api-version", valid_568101
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568103: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568092;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568103.validator(path, query, header, formData, body)
  let scheme = call_568103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568103.url(scheme.get, call_568103.host, call_568103.base,
                         call_568103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568103, url, valid)

proc call*(call_568104: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568092;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568105 = newJObject()
  var query_568106 = newJObject()
  var body_568107 = newJObject()
  add(path_568105, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_568107 = connectionEnvelope
  add(query_568106, "api-version", newJString(apiVersion))
  add(path_568105, "gatewayName", newJString(gatewayName))
  add(path_568105, "name", newJString(name))
  add(path_568105, "vnetName", newJString(vnetName))
  add(path_568105, "subscriptionId", newJString(subscriptionId))
  add(path_568105, "resourceGroupName", newJString(resourceGroupName))
  result = call_568104.call(path_568105, query_568106, nil, nil, body_568107)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568092(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568093,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_568094,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_568078 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionGatewaySlot_568080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_568079(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568081 = path.getOrDefault("slot")
  valid_568081 = validateParameter(valid_568081, JString, required = true,
                                 default = nil)
  if valid_568081 != nil:
    section.add "slot", valid_568081
  var valid_568082 = path.getOrDefault("gatewayName")
  valid_568082 = validateParameter(valid_568082, JString, required = true,
                                 default = nil)
  if valid_568082 != nil:
    section.add "gatewayName", valid_568082
  var valid_568083 = path.getOrDefault("name")
  valid_568083 = validateParameter(valid_568083, JString, required = true,
                                 default = nil)
  if valid_568083 != nil:
    section.add "name", valid_568083
  var valid_568084 = path.getOrDefault("vnetName")
  valid_568084 = validateParameter(valid_568084, JString, required = true,
                                 default = nil)
  if valid_568084 != nil:
    section.add "vnetName", valid_568084
  var valid_568085 = path.getOrDefault("subscriptionId")
  valid_568085 = validateParameter(valid_568085, JString, required = true,
                                 default = nil)
  if valid_568085 != nil:
    section.add "subscriptionId", valid_568085
  var valid_568086 = path.getOrDefault("resourceGroupName")
  valid_568086 = validateParameter(valid_568086, JString, required = true,
                                 default = nil)
  if valid_568086 != nil:
    section.add "resourceGroupName", valid_568086
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568087 = query.getOrDefault("api-version")
  valid_568087 = validateParameter(valid_568087, JString, required = true,
                                 default = nil)
  if valid_568087 != nil:
    section.add "api-version", valid_568087
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568088: Call_WebAppsGetVnetConnectionGatewaySlot_568078;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_568088.validator(path, query, header, formData, body)
  let scheme = call_568088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568088.url(scheme.get, call_568088.host, call_568088.base,
                         call_568088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568088, url, valid)

proc call*(call_568089: Call_WebAppsGetVnetConnectionGatewaySlot_568078;
          slot: string; apiVersion: string; gatewayName: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568090 = newJObject()
  var query_568091 = newJObject()
  add(path_568090, "slot", newJString(slot))
  add(query_568091, "api-version", newJString(apiVersion))
  add(path_568090, "gatewayName", newJString(gatewayName))
  add(path_568090, "name", newJString(name))
  add(path_568090, "vnetName", newJString(vnetName))
  add(path_568090, "subscriptionId", newJString(subscriptionId))
  add(path_568090, "resourceGroupName", newJString(resourceGroupName))
  result = call_568089.call(path_568090, query_568091, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_568078(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_568079, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_568080, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_568108 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionGatewaySlot_568110(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_568109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568111 = path.getOrDefault("slot")
  valid_568111 = validateParameter(valid_568111, JString, required = true,
                                 default = nil)
  if valid_568111 != nil:
    section.add "slot", valid_568111
  var valid_568112 = path.getOrDefault("gatewayName")
  valid_568112 = validateParameter(valid_568112, JString, required = true,
                                 default = nil)
  if valid_568112 != nil:
    section.add "gatewayName", valid_568112
  var valid_568113 = path.getOrDefault("name")
  valid_568113 = validateParameter(valid_568113, JString, required = true,
                                 default = nil)
  if valid_568113 != nil:
    section.add "name", valid_568113
  var valid_568114 = path.getOrDefault("vnetName")
  valid_568114 = validateParameter(valid_568114, JString, required = true,
                                 default = nil)
  if valid_568114 != nil:
    section.add "vnetName", valid_568114
  var valid_568115 = path.getOrDefault("subscriptionId")
  valid_568115 = validateParameter(valid_568115, JString, required = true,
                                 default = nil)
  if valid_568115 != nil:
    section.add "subscriptionId", valid_568115
  var valid_568116 = path.getOrDefault("resourceGroupName")
  valid_568116 = validateParameter(valid_568116, JString, required = true,
                                 default = nil)
  if valid_568116 != nil:
    section.add "resourceGroupName", valid_568116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568117 = query.getOrDefault("api-version")
  valid_568117 = validateParameter(valid_568117, JString, required = true,
                                 default = nil)
  if valid_568117 != nil:
    section.add "api-version", valid_568117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568119: Call_WebAppsUpdateVnetConnectionGatewaySlot_568108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568119.validator(path, query, header, formData, body)
  let scheme = call_568119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568119.url(scheme.get, call_568119.host, call_568119.base,
                         call_568119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568119, url, valid)

proc call*(call_568120: Call_WebAppsUpdateVnetConnectionGatewaySlot_568108;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568121 = newJObject()
  var query_568122 = newJObject()
  var body_568123 = newJObject()
  add(path_568121, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_568123 = connectionEnvelope
  add(query_568122, "api-version", newJString(apiVersion))
  add(path_568121, "gatewayName", newJString(gatewayName))
  add(path_568121, "name", newJString(name))
  add(path_568121, "vnetName", newJString(vnetName))
  add(path_568121, "subscriptionId", newJString(subscriptionId))
  add(path_568121, "resourceGroupName", newJString(resourceGroupName))
  result = call_568120.call(path_568121, query_568122, nil, nil, body_568123)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_568108(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_568109, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_568110,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_568124 = ref object of OpenApiRestCall_563564
proc url_WebAppsListWebJobsSlot_568126(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_568125(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568127 = path.getOrDefault("slot")
  valid_568127 = validateParameter(valid_568127, JString, required = true,
                                 default = nil)
  if valid_568127 != nil:
    section.add "slot", valid_568127
  var valid_568128 = path.getOrDefault("name")
  valid_568128 = validateParameter(valid_568128, JString, required = true,
                                 default = nil)
  if valid_568128 != nil:
    section.add "name", valid_568128
  var valid_568129 = path.getOrDefault("subscriptionId")
  valid_568129 = validateParameter(valid_568129, JString, required = true,
                                 default = nil)
  if valid_568129 != nil:
    section.add "subscriptionId", valid_568129
  var valid_568130 = path.getOrDefault("resourceGroupName")
  valid_568130 = validateParameter(valid_568130, JString, required = true,
                                 default = nil)
  if valid_568130 != nil:
    section.add "resourceGroupName", valid_568130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568131 = query.getOrDefault("api-version")
  valid_568131 = validateParameter(valid_568131, JString, required = true,
                                 default = nil)
  if valid_568131 != nil:
    section.add "api-version", valid_568131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568132: Call_WebAppsListWebJobsSlot_568124; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_568132.validator(path, query, header, formData, body)
  let scheme = call_568132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568132.url(scheme.get, call_568132.host, call_568132.base,
                         call_568132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568132, url, valid)

proc call*(call_568133: Call_WebAppsListWebJobsSlot_568124; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568134 = newJObject()
  var query_568135 = newJObject()
  add(path_568134, "slot", newJString(slot))
  add(query_568135, "api-version", newJString(apiVersion))
  add(path_568134, "name", newJString(name))
  add(path_568134, "subscriptionId", newJString(subscriptionId))
  add(path_568134, "resourceGroupName", newJString(resourceGroupName))
  result = call_568133.call(path_568134, query_568135, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_568124(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_568125, base: "",
    url: url_WebAppsListWebJobsSlot_568126, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_568136 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebJobSlot_568138(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_568137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_568139 = path.getOrDefault("slot")
  valid_568139 = validateParameter(valid_568139, JString, required = true,
                                 default = nil)
  if valid_568139 != nil:
    section.add "slot", valid_568139
  var valid_568140 = path.getOrDefault("name")
  valid_568140 = validateParameter(valid_568140, JString, required = true,
                                 default = nil)
  if valid_568140 != nil:
    section.add "name", valid_568140
  var valid_568141 = path.getOrDefault("subscriptionId")
  valid_568141 = validateParameter(valid_568141, JString, required = true,
                                 default = nil)
  if valid_568141 != nil:
    section.add "subscriptionId", valid_568141
  var valid_568142 = path.getOrDefault("webJobName")
  valid_568142 = validateParameter(valid_568142, JString, required = true,
                                 default = nil)
  if valid_568142 != nil:
    section.add "webJobName", valid_568142
  var valid_568143 = path.getOrDefault("resourceGroupName")
  valid_568143 = validateParameter(valid_568143, JString, required = true,
                                 default = nil)
  if valid_568143 != nil:
    section.add "resourceGroupName", valid_568143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568144 = query.getOrDefault("api-version")
  valid_568144 = validateParameter(valid_568144, JString, required = true,
                                 default = nil)
  if valid_568144 != nil:
    section.add "api-version", valid_568144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568145: Call_WebAppsGetWebJobSlot_568136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_568145.validator(path, query, header, formData, body)
  let scheme = call_568145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568145.url(scheme.get, call_568145.host, call_568145.base,
                         call_568145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568145, url, valid)

proc call*(call_568146: Call_WebAppsGetWebJobSlot_568136; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568147 = newJObject()
  var query_568148 = newJObject()
  add(path_568147, "slot", newJString(slot))
  add(query_568148, "api-version", newJString(apiVersion))
  add(path_568147, "name", newJString(name))
  add(path_568147, "subscriptionId", newJString(subscriptionId))
  add(path_568147, "webJobName", newJString(webJobName))
  add(path_568147, "resourceGroupName", newJString(resourceGroupName))
  result = call_568146.call(path_568147, query_568148, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_568136(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_568137, base: "",
    url: url_WebAppsGetWebJobSlot_568138, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_568149 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotDifferencesFromProduction_568151(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_568150(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568152 = path.getOrDefault("name")
  valid_568152 = validateParameter(valid_568152, JString, required = true,
                                 default = nil)
  if valid_568152 != nil:
    section.add "name", valid_568152
  var valid_568153 = path.getOrDefault("subscriptionId")
  valid_568153 = validateParameter(valid_568153, JString, required = true,
                                 default = nil)
  if valid_568153 != nil:
    section.add "subscriptionId", valid_568153
  var valid_568154 = path.getOrDefault("resourceGroupName")
  valid_568154 = validateParameter(valid_568154, JString, required = true,
                                 default = nil)
  if valid_568154 != nil:
    section.add "resourceGroupName", valid_568154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568155 = query.getOrDefault("api-version")
  valid_568155 = validateParameter(valid_568155, JString, required = true,
                                 default = nil)
  if valid_568155 != nil:
    section.add "api-version", valid_568155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568157: Call_WebAppsListSlotDifferencesFromProduction_568149;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_568157.validator(path, query, header, formData, body)
  let scheme = call_568157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568157.url(scheme.get, call_568157.host, call_568157.base,
                         call_568157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568157, url, valid)

proc call*(call_568158: Call_WebAppsListSlotDifferencesFromProduction_568149;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568159 = newJObject()
  var query_568160 = newJObject()
  var body_568161 = newJObject()
  add(query_568160, "api-version", newJString(apiVersion))
  add(path_568159, "name", newJString(name))
  add(path_568159, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_568161 = slotSwapEntity
  add(path_568159, "resourceGroupName", newJString(resourceGroupName))
  result = call_568158.call(path_568159, query_568160, nil, nil, body_568161)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_568149(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_568150, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_568151,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_568162 = ref object of OpenApiRestCall_563564
proc url_WebAppsSwapSlotWithProduction_568164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_568163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568165 = path.getOrDefault("name")
  valid_568165 = validateParameter(valid_568165, JString, required = true,
                                 default = nil)
  if valid_568165 != nil:
    section.add "name", valid_568165
  var valid_568166 = path.getOrDefault("subscriptionId")
  valid_568166 = validateParameter(valid_568166, JString, required = true,
                                 default = nil)
  if valid_568166 != nil:
    section.add "subscriptionId", valid_568166
  var valid_568167 = path.getOrDefault("resourceGroupName")
  valid_568167 = validateParameter(valid_568167, JString, required = true,
                                 default = nil)
  if valid_568167 != nil:
    section.add "resourceGroupName", valid_568167
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568168 = query.getOrDefault("api-version")
  valid_568168 = validateParameter(valid_568168, JString, required = true,
                                 default = nil)
  if valid_568168 != nil:
    section.add "api-version", valid_568168
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568170: Call_WebAppsSwapSlotWithProduction_568162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_568170.validator(path, query, header, formData, body)
  let scheme = call_568170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568170.url(scheme.get, call_568170.host, call_568170.base,
                         call_568170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568170, url, valid)

proc call*(call_568171: Call_WebAppsSwapSlotWithProduction_568162;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568172 = newJObject()
  var query_568173 = newJObject()
  var body_568174 = newJObject()
  add(query_568173, "api-version", newJString(apiVersion))
  add(path_568172, "name", newJString(name))
  add(path_568172, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_568174 = slotSwapEntity
  add(path_568172, "resourceGroupName", newJString(resourceGroupName))
  result = call_568171.call(path_568172, query_568173, nil, nil, body_568174)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_568162(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_568163, base: "",
    url: url_WebAppsSwapSlotWithProduction_568164, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_568175 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshots_568177(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_568176(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568178 = path.getOrDefault("name")
  valid_568178 = validateParameter(valid_568178, JString, required = true,
                                 default = nil)
  if valid_568178 != nil:
    section.add "name", valid_568178
  var valid_568179 = path.getOrDefault("subscriptionId")
  valid_568179 = validateParameter(valid_568179, JString, required = true,
                                 default = nil)
  if valid_568179 != nil:
    section.add "subscriptionId", valid_568179
  var valid_568180 = path.getOrDefault("resourceGroupName")
  valid_568180 = validateParameter(valid_568180, JString, required = true,
                                 default = nil)
  if valid_568180 != nil:
    section.add "resourceGroupName", valid_568180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568181 = query.getOrDefault("api-version")
  valid_568181 = validateParameter(valid_568181, JString, required = true,
                                 default = nil)
  if valid_568181 != nil:
    section.add "api-version", valid_568181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568182: Call_WebAppsListSnapshots_568175; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_568182.validator(path, query, header, formData, body)
  let scheme = call_568182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568182.url(scheme.get, call_568182.host, call_568182.base,
                         call_568182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568182, url, valid)

proc call*(call_568183: Call_WebAppsListSnapshots_568175; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568184 = newJObject()
  var query_568185 = newJObject()
  add(query_568185, "api-version", newJString(apiVersion))
  add(path_568184, "name", newJString(name))
  add(path_568184, "subscriptionId", newJString(subscriptionId))
  add(path_568184, "resourceGroupName", newJString(resourceGroupName))
  result = call_568183.call(path_568184, query_568185, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_568175(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_568176, base: "",
    url: url_WebAppsListSnapshots_568177, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondary_568186 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshotsFromDRSecondary_568188(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondary_568187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568189 = path.getOrDefault("name")
  valid_568189 = validateParameter(valid_568189, JString, required = true,
                                 default = nil)
  if valid_568189 != nil:
    section.add "name", valid_568189
  var valid_568190 = path.getOrDefault("subscriptionId")
  valid_568190 = validateParameter(valid_568190, JString, required = true,
                                 default = nil)
  if valid_568190 != nil:
    section.add "subscriptionId", valid_568190
  var valid_568191 = path.getOrDefault("resourceGroupName")
  valid_568191 = validateParameter(valid_568191, JString, required = true,
                                 default = nil)
  if valid_568191 != nil:
    section.add "resourceGroupName", valid_568191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568192 = query.getOrDefault("api-version")
  valid_568192 = validateParameter(valid_568192, JString, required = true,
                                 default = nil)
  if valid_568192 != nil:
    section.add "api-version", valid_568192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568193: Call_WebAppsListSnapshotsFromDRSecondary_568186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_568193.validator(path, query, header, formData, body)
  let scheme = call_568193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568193.url(scheme.get, call_568193.host, call_568193.base,
                         call_568193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568193, url, valid)

proc call*(call_568194: Call_WebAppsListSnapshotsFromDRSecondary_568186;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondary
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568195 = newJObject()
  var query_568196 = newJObject()
  add(query_568196, "api-version", newJString(apiVersion))
  add(path_568195, "name", newJString(name))
  add(path_568195, "subscriptionId", newJString(subscriptionId))
  add(path_568195, "resourceGroupName", newJString(resourceGroupName))
  result = call_568194.call(path_568195, query_568196, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondary* = Call_WebAppsListSnapshotsFromDRSecondary_568186(
    name: "webAppsListSnapshotsFromDRSecondary", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondary_568187, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondary_568188, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_568208 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSourceControl_568210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_568209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568211 = path.getOrDefault("name")
  valid_568211 = validateParameter(valid_568211, JString, required = true,
                                 default = nil)
  if valid_568211 != nil:
    section.add "name", valid_568211
  var valid_568212 = path.getOrDefault("subscriptionId")
  valid_568212 = validateParameter(valid_568212, JString, required = true,
                                 default = nil)
  if valid_568212 != nil:
    section.add "subscriptionId", valid_568212
  var valid_568213 = path.getOrDefault("resourceGroupName")
  valid_568213 = validateParameter(valid_568213, JString, required = true,
                                 default = nil)
  if valid_568213 != nil:
    section.add "resourceGroupName", valid_568213
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568214 = query.getOrDefault("api-version")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "api-version", valid_568214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568216: Call_WebAppsCreateOrUpdateSourceControl_568208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_568216.validator(path, query, header, formData, body)
  let scheme = call_568216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568216.url(scheme.get, call_568216.host, call_568216.base,
                         call_568216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568216, url, valid)

proc call*(call_568217: Call_WebAppsCreateOrUpdateSourceControl_568208;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568218 = newJObject()
  var query_568219 = newJObject()
  var body_568220 = newJObject()
  if siteSourceControl != nil:
    body_568220 = siteSourceControl
  add(query_568219, "api-version", newJString(apiVersion))
  add(path_568218, "name", newJString(name))
  add(path_568218, "subscriptionId", newJString(subscriptionId))
  add(path_568218, "resourceGroupName", newJString(resourceGroupName))
  result = call_568217.call(path_568218, query_568219, nil, nil, body_568220)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_568208(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_568209, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_568210, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_568197 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSourceControl_568199(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_568198(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568200 = path.getOrDefault("name")
  valid_568200 = validateParameter(valid_568200, JString, required = true,
                                 default = nil)
  if valid_568200 != nil:
    section.add "name", valid_568200
  var valid_568201 = path.getOrDefault("subscriptionId")
  valid_568201 = validateParameter(valid_568201, JString, required = true,
                                 default = nil)
  if valid_568201 != nil:
    section.add "subscriptionId", valid_568201
  var valid_568202 = path.getOrDefault("resourceGroupName")
  valid_568202 = validateParameter(valid_568202, JString, required = true,
                                 default = nil)
  if valid_568202 != nil:
    section.add "resourceGroupName", valid_568202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568203 = query.getOrDefault("api-version")
  valid_568203 = validateParameter(valid_568203, JString, required = true,
                                 default = nil)
  if valid_568203 != nil:
    section.add "api-version", valid_568203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568204: Call_WebAppsGetSourceControl_568197; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_568204.validator(path, query, header, formData, body)
  let scheme = call_568204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568204.url(scheme.get, call_568204.host, call_568204.base,
                         call_568204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568204, url, valid)

proc call*(call_568205: Call_WebAppsGetSourceControl_568197; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568206 = newJObject()
  var query_568207 = newJObject()
  add(query_568207, "api-version", newJString(apiVersion))
  add(path_568206, "name", newJString(name))
  add(path_568206, "subscriptionId", newJString(subscriptionId))
  add(path_568206, "resourceGroupName", newJString(resourceGroupName))
  result = call_568205.call(path_568206, query_568207, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_568197(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_568198, base: "",
    url: url_WebAppsGetSourceControl_568199, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_568232 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSourceControl_568234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_568233(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568235 = path.getOrDefault("name")
  valid_568235 = validateParameter(valid_568235, JString, required = true,
                                 default = nil)
  if valid_568235 != nil:
    section.add "name", valid_568235
  var valid_568236 = path.getOrDefault("subscriptionId")
  valid_568236 = validateParameter(valid_568236, JString, required = true,
                                 default = nil)
  if valid_568236 != nil:
    section.add "subscriptionId", valid_568236
  var valid_568237 = path.getOrDefault("resourceGroupName")
  valid_568237 = validateParameter(valid_568237, JString, required = true,
                                 default = nil)
  if valid_568237 != nil:
    section.add "resourceGroupName", valid_568237
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568238 = query.getOrDefault("api-version")
  valid_568238 = validateParameter(valid_568238, JString, required = true,
                                 default = nil)
  if valid_568238 != nil:
    section.add "api-version", valid_568238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568240: Call_WebAppsUpdateSourceControl_568232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_568240.validator(path, query, header, formData, body)
  let scheme = call_568240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568240.url(scheme.get, call_568240.host, call_568240.base,
                         call_568240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568240, url, valid)

proc call*(call_568241: Call_WebAppsUpdateSourceControl_568232;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568242 = newJObject()
  var query_568243 = newJObject()
  var body_568244 = newJObject()
  if siteSourceControl != nil:
    body_568244 = siteSourceControl
  add(query_568243, "api-version", newJString(apiVersion))
  add(path_568242, "name", newJString(name))
  add(path_568242, "subscriptionId", newJString(subscriptionId))
  add(path_568242, "resourceGroupName", newJString(resourceGroupName))
  result = call_568241.call(path_568242, query_568243, nil, nil, body_568244)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_568232(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_568233, base: "",
    url: url_WebAppsUpdateSourceControl_568234, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_568221 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSourceControl_568223(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_568222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568224 = path.getOrDefault("name")
  valid_568224 = validateParameter(valid_568224, JString, required = true,
                                 default = nil)
  if valid_568224 != nil:
    section.add "name", valid_568224
  var valid_568225 = path.getOrDefault("subscriptionId")
  valid_568225 = validateParameter(valid_568225, JString, required = true,
                                 default = nil)
  if valid_568225 != nil:
    section.add "subscriptionId", valid_568225
  var valid_568226 = path.getOrDefault("resourceGroupName")
  valid_568226 = validateParameter(valid_568226, JString, required = true,
                                 default = nil)
  if valid_568226 != nil:
    section.add "resourceGroupName", valid_568226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568227 = query.getOrDefault("api-version")
  valid_568227 = validateParameter(valid_568227, JString, required = true,
                                 default = nil)
  if valid_568227 != nil:
    section.add "api-version", valid_568227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568228: Call_WebAppsDeleteSourceControl_568221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_568228.validator(path, query, header, formData, body)
  let scheme = call_568228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568228.url(scheme.get, call_568228.host, call_568228.base,
                         call_568228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568228, url, valid)

proc call*(call_568229: Call_WebAppsDeleteSourceControl_568221; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568230 = newJObject()
  var query_568231 = newJObject()
  add(query_568231, "api-version", newJString(apiVersion))
  add(path_568230, "name", newJString(name))
  add(path_568230, "subscriptionId", newJString(subscriptionId))
  add(path_568230, "resourceGroupName", newJString(resourceGroupName))
  result = call_568229.call(path_568230, query_568231, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_568221(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_568222, base: "",
    url: url_WebAppsDeleteSourceControl_568223, schemes: {Scheme.Https})
type
  Call_WebAppsStart_568245 = ref object of OpenApiRestCall_563564
proc url_WebAppsStart_568247(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_568246(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568248 = path.getOrDefault("name")
  valid_568248 = validateParameter(valid_568248, JString, required = true,
                                 default = nil)
  if valid_568248 != nil:
    section.add "name", valid_568248
  var valid_568249 = path.getOrDefault("subscriptionId")
  valid_568249 = validateParameter(valid_568249, JString, required = true,
                                 default = nil)
  if valid_568249 != nil:
    section.add "subscriptionId", valid_568249
  var valid_568250 = path.getOrDefault("resourceGroupName")
  valid_568250 = validateParameter(valid_568250, JString, required = true,
                                 default = nil)
  if valid_568250 != nil:
    section.add "resourceGroupName", valid_568250
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568251 = query.getOrDefault("api-version")
  valid_568251 = validateParameter(valid_568251, JString, required = true,
                                 default = nil)
  if valid_568251 != nil:
    section.add "api-version", valid_568251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568252: Call_WebAppsStart_568245; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_568252.validator(path, query, header, formData, body)
  let scheme = call_568252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568252.url(scheme.get, call_568252.host, call_568252.base,
                         call_568252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568252, url, valid)

proc call*(call_568253: Call_WebAppsStart_568245; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568254 = newJObject()
  var query_568255 = newJObject()
  add(query_568255, "api-version", newJString(apiVersion))
  add(path_568254, "name", newJString(name))
  add(path_568254, "subscriptionId", newJString(subscriptionId))
  add(path_568254, "resourceGroupName", newJString(resourceGroupName))
  result = call_568253.call(path_568254, query_568255, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_568245(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_568246, base: "", url: url_WebAppsStart_568247,
    schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTrace_568256 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartNetworkTrace_568258(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTrace_568257(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568259 = path.getOrDefault("name")
  valid_568259 = validateParameter(valid_568259, JString, required = true,
                                 default = nil)
  if valid_568259 != nil:
    section.add "name", valid_568259
  var valid_568260 = path.getOrDefault("subscriptionId")
  valid_568260 = validateParameter(valid_568260, JString, required = true,
                                 default = nil)
  if valid_568260 != nil:
    section.add "subscriptionId", valid_568260
  var valid_568261 = path.getOrDefault("resourceGroupName")
  valid_568261 = validateParameter(valid_568261, JString, required = true,
                                 default = nil)
  if valid_568261 != nil:
    section.add "resourceGroupName", valid_568261
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568262 = query.getOrDefault("api-version")
  valid_568262 = validateParameter(valid_568262, JString, required = true,
                                 default = nil)
  if valid_568262 != nil:
    section.add "api-version", valid_568262
  var valid_568263 = query.getOrDefault("sasUrl")
  valid_568263 = validateParameter(valid_568263, JString, required = false,
                                 default = nil)
  if valid_568263 != nil:
    section.add "sasUrl", valid_568263
  var valid_568264 = query.getOrDefault("durationInSeconds")
  valid_568264 = validateParameter(valid_568264, JInt, required = false, default = nil)
  if valid_568264 != nil:
    section.add "durationInSeconds", valid_568264
  var valid_568265 = query.getOrDefault("maxFrameLength")
  valid_568265 = validateParameter(valid_568265, JInt, required = false, default = nil)
  if valid_568265 != nil:
    section.add "maxFrameLength", valid_568265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568266: Call_WebAppsStartNetworkTrace_568256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_568266.validator(path, query, header, formData, body)
  let scheme = call_568266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568266.url(scheme.get, call_568266.host, call_568266.base,
                         call_568266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568266, url, valid)

proc call*(call_568267: Call_WebAppsStartNetworkTrace_568256; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          sasUrl: string = ""; durationInSeconds: int = 0; maxFrameLength: int = 0): Recallable =
  ## webAppsStartNetworkTrace
  ## Start capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_568268 = newJObject()
  var query_568269 = newJObject()
  add(query_568269, "api-version", newJString(apiVersion))
  add(query_568269, "sasUrl", newJString(sasUrl))
  add(path_568268, "name", newJString(name))
  add(path_568268, "subscriptionId", newJString(subscriptionId))
  add(query_568269, "durationInSeconds", newJInt(durationInSeconds))
  add(path_568268, "resourceGroupName", newJString(resourceGroupName))
  add(query_568269, "maxFrameLength", newJInt(maxFrameLength))
  result = call_568267.call(path_568268, query_568269, nil, nil, nil)

var webAppsStartNetworkTrace* = Call_WebAppsStartNetworkTrace_568256(
    name: "webAppsStartNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTrace_568257, base: "",
    url: url_WebAppsStartNetworkTrace_568258, schemes: {Scheme.Https})
type
  Call_WebAppsStop_568270 = ref object of OpenApiRestCall_563564
proc url_WebAppsStop_568272(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_568271(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568273 = path.getOrDefault("name")
  valid_568273 = validateParameter(valid_568273, JString, required = true,
                                 default = nil)
  if valid_568273 != nil:
    section.add "name", valid_568273
  var valid_568274 = path.getOrDefault("subscriptionId")
  valid_568274 = validateParameter(valid_568274, JString, required = true,
                                 default = nil)
  if valid_568274 != nil:
    section.add "subscriptionId", valid_568274
  var valid_568275 = path.getOrDefault("resourceGroupName")
  valid_568275 = validateParameter(valid_568275, JString, required = true,
                                 default = nil)
  if valid_568275 != nil:
    section.add "resourceGroupName", valid_568275
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568276 = query.getOrDefault("api-version")
  valid_568276 = validateParameter(valid_568276, JString, required = true,
                                 default = nil)
  if valid_568276 != nil:
    section.add "api-version", valid_568276
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568277: Call_WebAppsStop_568270; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_568277.validator(path, query, header, formData, body)
  let scheme = call_568277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568277.url(scheme.get, call_568277.host, call_568277.base,
                         call_568277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568277, url, valid)

proc call*(call_568278: Call_WebAppsStop_568270; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568279 = newJObject()
  var query_568280 = newJObject()
  add(query_568280, "api-version", newJString(apiVersion))
  add(path_568279, "name", newJString(name))
  add(path_568279, "subscriptionId", newJString(subscriptionId))
  add(path_568279, "resourceGroupName", newJString(resourceGroupName))
  result = call_568278.call(path_568279, query_568280, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_568270(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_568271,
                                        base: "", url: url_WebAppsStop_568272,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTrace_568281 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopNetworkTrace_568283(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTrace_568282(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568284 = path.getOrDefault("name")
  valid_568284 = validateParameter(valid_568284, JString, required = true,
                                 default = nil)
  if valid_568284 != nil:
    section.add "name", valid_568284
  var valid_568285 = path.getOrDefault("subscriptionId")
  valid_568285 = validateParameter(valid_568285, JString, required = true,
                                 default = nil)
  if valid_568285 != nil:
    section.add "subscriptionId", valid_568285
  var valid_568286 = path.getOrDefault("resourceGroupName")
  valid_568286 = validateParameter(valid_568286, JString, required = true,
                                 default = nil)
  if valid_568286 != nil:
    section.add "resourceGroupName", valid_568286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568287 = query.getOrDefault("api-version")
  valid_568287 = validateParameter(valid_568287, JString, required = true,
                                 default = nil)
  if valid_568287 != nil:
    section.add "api-version", valid_568287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568288: Call_WebAppsStopNetworkTrace_568281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_568288.validator(path, query, header, formData, body)
  let scheme = call_568288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568288.url(scheme.get, call_568288.host, call_568288.base,
                         call_568288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568288, url, valid)

proc call*(call_568289: Call_WebAppsStopNetworkTrace_568281; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsStopNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568290 = newJObject()
  var query_568291 = newJObject()
  add(query_568291, "api-version", newJString(apiVersion))
  add(path_568290, "name", newJString(name))
  add(path_568290, "subscriptionId", newJString(subscriptionId))
  add(path_568290, "resourceGroupName", newJString(resourceGroupName))
  result = call_568289.call(path_568290, query_568291, nil, nil, nil)

var webAppsStopNetworkTrace* = Call_WebAppsStopNetworkTrace_568281(
    name: "webAppsStopNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTrace_568282, base: "",
    url: url_WebAppsStopNetworkTrace_568283, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_568292 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncRepository_568294(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_568293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568295 = path.getOrDefault("name")
  valid_568295 = validateParameter(valid_568295, JString, required = true,
                                 default = nil)
  if valid_568295 != nil:
    section.add "name", valid_568295
  var valid_568296 = path.getOrDefault("subscriptionId")
  valid_568296 = validateParameter(valid_568296, JString, required = true,
                                 default = nil)
  if valid_568296 != nil:
    section.add "subscriptionId", valid_568296
  var valid_568297 = path.getOrDefault("resourceGroupName")
  valid_568297 = validateParameter(valid_568297, JString, required = true,
                                 default = nil)
  if valid_568297 != nil:
    section.add "resourceGroupName", valid_568297
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568298 = query.getOrDefault("api-version")
  valid_568298 = validateParameter(valid_568298, JString, required = true,
                                 default = nil)
  if valid_568298 != nil:
    section.add "api-version", valid_568298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568299: Call_WebAppsSyncRepository_568292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_568299.validator(path, query, header, formData, body)
  let scheme = call_568299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568299.url(scheme.get, call_568299.host, call_568299.base,
                         call_568299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568299, url, valid)

proc call*(call_568300: Call_WebAppsSyncRepository_568292; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568301 = newJObject()
  var query_568302 = newJObject()
  add(query_568302, "api-version", newJString(apiVersion))
  add(path_568301, "name", newJString(name))
  add(path_568301, "subscriptionId", newJString(subscriptionId))
  add(path_568301, "resourceGroupName", newJString(resourceGroupName))
  result = call_568300.call(path_568301, query_568302, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_568292(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_568293, base: "",
    url: url_WebAppsSyncRepository_568294, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_568303 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncFunctionTriggers_568305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_568304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568306 = path.getOrDefault("name")
  valid_568306 = validateParameter(valid_568306, JString, required = true,
                                 default = nil)
  if valid_568306 != nil:
    section.add "name", valid_568306
  var valid_568307 = path.getOrDefault("subscriptionId")
  valid_568307 = validateParameter(valid_568307, JString, required = true,
                                 default = nil)
  if valid_568307 != nil:
    section.add "subscriptionId", valid_568307
  var valid_568308 = path.getOrDefault("resourceGroupName")
  valid_568308 = validateParameter(valid_568308, JString, required = true,
                                 default = nil)
  if valid_568308 != nil:
    section.add "resourceGroupName", valid_568308
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568309 = query.getOrDefault("api-version")
  valid_568309 = validateParameter(valid_568309, JString, required = true,
                                 default = nil)
  if valid_568309 != nil:
    section.add "api-version", valid_568309
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568310: Call_WebAppsSyncFunctionTriggers_568303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_568310.validator(path, query, header, formData, body)
  let scheme = call_568310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568310.url(scheme.get, call_568310.host, call_568310.base,
                         call_568310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568310, url, valid)

proc call*(call_568311: Call_WebAppsSyncFunctionTriggers_568303;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568312 = newJObject()
  var query_568313 = newJObject()
  add(query_568313, "api-version", newJString(apiVersion))
  add(path_568312, "name", newJString(name))
  add(path_568312, "subscriptionId", newJString(subscriptionId))
  add(path_568312, "resourceGroupName", newJString(resourceGroupName))
  result = call_568311.call(path_568312, query_568313, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_568303(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_568304, base: "",
    url: url_WebAppsSyncFunctionTriggers_568305, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_568314 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobs_568316(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_568315(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568317 = path.getOrDefault("name")
  valid_568317 = validateParameter(valid_568317, JString, required = true,
                                 default = nil)
  if valid_568317 != nil:
    section.add "name", valid_568317
  var valid_568318 = path.getOrDefault("subscriptionId")
  valid_568318 = validateParameter(valid_568318, JString, required = true,
                                 default = nil)
  if valid_568318 != nil:
    section.add "subscriptionId", valid_568318
  var valid_568319 = path.getOrDefault("resourceGroupName")
  valid_568319 = validateParameter(valid_568319, JString, required = true,
                                 default = nil)
  if valid_568319 != nil:
    section.add "resourceGroupName", valid_568319
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568320 = query.getOrDefault("api-version")
  valid_568320 = validateParameter(valid_568320, JString, required = true,
                                 default = nil)
  if valid_568320 != nil:
    section.add "api-version", valid_568320
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568321: Call_WebAppsListTriggeredWebJobs_568314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_568321.validator(path, query, header, formData, body)
  let scheme = call_568321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568321.url(scheme.get, call_568321.host, call_568321.base,
                         call_568321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568321, url, valid)

proc call*(call_568322: Call_WebAppsListTriggeredWebJobs_568314;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568323 = newJObject()
  var query_568324 = newJObject()
  add(query_568324, "api-version", newJString(apiVersion))
  add(path_568323, "name", newJString(name))
  add(path_568323, "subscriptionId", newJString(subscriptionId))
  add(path_568323, "resourceGroupName", newJString(resourceGroupName))
  result = call_568322.call(path_568323, query_568324, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_568314(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_568315, base: "",
    url: url_WebAppsListTriggeredWebJobs_568316, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_568325 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJob_568327(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_568326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568328 = path.getOrDefault("name")
  valid_568328 = validateParameter(valid_568328, JString, required = true,
                                 default = nil)
  if valid_568328 != nil:
    section.add "name", valid_568328
  var valid_568329 = path.getOrDefault("subscriptionId")
  valid_568329 = validateParameter(valid_568329, JString, required = true,
                                 default = nil)
  if valid_568329 != nil:
    section.add "subscriptionId", valid_568329
  var valid_568330 = path.getOrDefault("webJobName")
  valid_568330 = validateParameter(valid_568330, JString, required = true,
                                 default = nil)
  if valid_568330 != nil:
    section.add "webJobName", valid_568330
  var valid_568331 = path.getOrDefault("resourceGroupName")
  valid_568331 = validateParameter(valid_568331, JString, required = true,
                                 default = nil)
  if valid_568331 != nil:
    section.add "resourceGroupName", valid_568331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568332 = query.getOrDefault("api-version")
  valid_568332 = validateParameter(valid_568332, JString, required = true,
                                 default = nil)
  if valid_568332 != nil:
    section.add "api-version", valid_568332
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568333: Call_WebAppsGetTriggeredWebJob_568325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568333.validator(path, query, header, formData, body)
  let scheme = call_568333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568333.url(scheme.get, call_568333.host, call_568333.base,
                         call_568333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568333, url, valid)

proc call*(call_568334: Call_WebAppsGetTriggeredWebJob_568325; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568335 = newJObject()
  var query_568336 = newJObject()
  add(query_568336, "api-version", newJString(apiVersion))
  add(path_568335, "name", newJString(name))
  add(path_568335, "subscriptionId", newJString(subscriptionId))
  add(path_568335, "webJobName", newJString(webJobName))
  add(path_568335, "resourceGroupName", newJString(resourceGroupName))
  result = call_568334.call(path_568335, query_568336, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_568325(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_568326, base: "",
    url: url_WebAppsGetTriggeredWebJob_568327, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_568337 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteTriggeredWebJob_568339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_568338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568340 = path.getOrDefault("name")
  valid_568340 = validateParameter(valid_568340, JString, required = true,
                                 default = nil)
  if valid_568340 != nil:
    section.add "name", valid_568340
  var valid_568341 = path.getOrDefault("subscriptionId")
  valid_568341 = validateParameter(valid_568341, JString, required = true,
                                 default = nil)
  if valid_568341 != nil:
    section.add "subscriptionId", valid_568341
  var valid_568342 = path.getOrDefault("webJobName")
  valid_568342 = validateParameter(valid_568342, JString, required = true,
                                 default = nil)
  if valid_568342 != nil:
    section.add "webJobName", valid_568342
  var valid_568343 = path.getOrDefault("resourceGroupName")
  valid_568343 = validateParameter(valid_568343, JString, required = true,
                                 default = nil)
  if valid_568343 != nil:
    section.add "resourceGroupName", valid_568343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568344 = query.getOrDefault("api-version")
  valid_568344 = validateParameter(valid_568344, JString, required = true,
                                 default = nil)
  if valid_568344 != nil:
    section.add "api-version", valid_568344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568345: Call_WebAppsDeleteTriggeredWebJob_568337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568345.validator(path, query, header, formData, body)
  let scheme = call_568345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568345.url(scheme.get, call_568345.host, call_568345.base,
                         call_568345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568345, url, valid)

proc call*(call_568346: Call_WebAppsDeleteTriggeredWebJob_568337;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568347 = newJObject()
  var query_568348 = newJObject()
  add(query_568348, "api-version", newJString(apiVersion))
  add(path_568347, "name", newJString(name))
  add(path_568347, "subscriptionId", newJString(subscriptionId))
  add(path_568347, "webJobName", newJString(webJobName))
  add(path_568347, "resourceGroupName", newJString(resourceGroupName))
  result = call_568346.call(path_568347, query_568348, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_568337(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_568338, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_568339, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_568349 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobHistory_568351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_568350(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568352 = path.getOrDefault("name")
  valid_568352 = validateParameter(valid_568352, JString, required = true,
                                 default = nil)
  if valid_568352 != nil:
    section.add "name", valid_568352
  var valid_568353 = path.getOrDefault("subscriptionId")
  valid_568353 = validateParameter(valid_568353, JString, required = true,
                                 default = nil)
  if valid_568353 != nil:
    section.add "subscriptionId", valid_568353
  var valid_568354 = path.getOrDefault("webJobName")
  valid_568354 = validateParameter(valid_568354, JString, required = true,
                                 default = nil)
  if valid_568354 != nil:
    section.add "webJobName", valid_568354
  var valid_568355 = path.getOrDefault("resourceGroupName")
  valid_568355 = validateParameter(valid_568355, JString, required = true,
                                 default = nil)
  if valid_568355 != nil:
    section.add "resourceGroupName", valid_568355
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568356 = query.getOrDefault("api-version")
  valid_568356 = validateParameter(valid_568356, JString, required = true,
                                 default = nil)
  if valid_568356 != nil:
    section.add "api-version", valid_568356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568357: Call_WebAppsListTriggeredWebJobHistory_568349;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_568357.validator(path, query, header, formData, body)
  let scheme = call_568357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568357.url(scheme.get, call_568357.host, call_568357.base,
                         call_568357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568357, url, valid)

proc call*(call_568358: Call_WebAppsListTriggeredWebJobHistory_568349;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568359 = newJObject()
  var query_568360 = newJObject()
  add(query_568360, "api-version", newJString(apiVersion))
  add(path_568359, "name", newJString(name))
  add(path_568359, "subscriptionId", newJString(subscriptionId))
  add(path_568359, "webJobName", newJString(webJobName))
  add(path_568359, "resourceGroupName", newJString(resourceGroupName))
  result = call_568358.call(path_568359, query_568360, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_568349(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_568350, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_568351, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_568361 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobHistory_568363(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_568362(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : History ID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_568364 = path.getOrDefault("id")
  valid_568364 = validateParameter(valid_568364, JString, required = true,
                                 default = nil)
  if valid_568364 != nil:
    section.add "id", valid_568364
  var valid_568365 = path.getOrDefault("name")
  valid_568365 = validateParameter(valid_568365, JString, required = true,
                                 default = nil)
  if valid_568365 != nil:
    section.add "name", valid_568365
  var valid_568366 = path.getOrDefault("subscriptionId")
  valid_568366 = validateParameter(valid_568366, JString, required = true,
                                 default = nil)
  if valid_568366 != nil:
    section.add "subscriptionId", valid_568366
  var valid_568367 = path.getOrDefault("webJobName")
  valid_568367 = validateParameter(valid_568367, JString, required = true,
                                 default = nil)
  if valid_568367 != nil:
    section.add "webJobName", valid_568367
  var valid_568368 = path.getOrDefault("resourceGroupName")
  valid_568368 = validateParameter(valid_568368, JString, required = true,
                                 default = nil)
  if valid_568368 != nil:
    section.add "resourceGroupName", valid_568368
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568369 = query.getOrDefault("api-version")
  valid_568369 = validateParameter(valid_568369, JString, required = true,
                                 default = nil)
  if valid_568369 != nil:
    section.add "api-version", valid_568369
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568370: Call_WebAppsGetTriggeredWebJobHistory_568361;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_568370.validator(path, query, header, formData, body)
  let scheme = call_568370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568370.url(scheme.get, call_568370.host, call_568370.base,
                         call_568370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568370, url, valid)

proc call*(call_568371: Call_WebAppsGetTriggeredWebJobHistory_568361;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : History ID.
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568372 = newJObject()
  var query_568373 = newJObject()
  add(query_568373, "api-version", newJString(apiVersion))
  add(path_568372, "id", newJString(id))
  add(path_568372, "name", newJString(name))
  add(path_568372, "subscriptionId", newJString(subscriptionId))
  add(path_568372, "webJobName", newJString(webJobName))
  add(path_568372, "resourceGroupName", newJString(resourceGroupName))
  result = call_568371.call(path_568372, query_568373, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_568361(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_568362, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_568363, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_568374 = ref object of OpenApiRestCall_563564
proc url_WebAppsRunTriggeredWebJob_568376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_568375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568377 = path.getOrDefault("name")
  valid_568377 = validateParameter(valid_568377, JString, required = true,
                                 default = nil)
  if valid_568377 != nil:
    section.add "name", valid_568377
  var valid_568378 = path.getOrDefault("subscriptionId")
  valid_568378 = validateParameter(valid_568378, JString, required = true,
                                 default = nil)
  if valid_568378 != nil:
    section.add "subscriptionId", valid_568378
  var valid_568379 = path.getOrDefault("webJobName")
  valid_568379 = validateParameter(valid_568379, JString, required = true,
                                 default = nil)
  if valid_568379 != nil:
    section.add "webJobName", valid_568379
  var valid_568380 = path.getOrDefault("resourceGroupName")
  valid_568380 = validateParameter(valid_568380, JString, required = true,
                                 default = nil)
  if valid_568380 != nil:
    section.add "resourceGroupName", valid_568380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568381 = query.getOrDefault("api-version")
  valid_568381 = validateParameter(valid_568381, JString, required = true,
                                 default = nil)
  if valid_568381 != nil:
    section.add "api-version", valid_568381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568382: Call_WebAppsRunTriggeredWebJob_568374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_568382.validator(path, query, header, formData, body)
  let scheme = call_568382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568382.url(scheme.get, call_568382.host, call_568382.base,
                         call_568382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568382, url, valid)

proc call*(call_568383: Call_WebAppsRunTriggeredWebJob_568374; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568384 = newJObject()
  var query_568385 = newJObject()
  add(query_568385, "api-version", newJString(apiVersion))
  add(path_568384, "name", newJString(name))
  add(path_568384, "subscriptionId", newJString(subscriptionId))
  add(path_568384, "webJobName", newJString(webJobName))
  add(path_568384, "resourceGroupName", newJString(resourceGroupName))
  result = call_568383.call(path_568384, query_568385, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_568374(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_568375, base: "",
    url: url_WebAppsRunTriggeredWebJob_568376, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_568386 = ref object of OpenApiRestCall_563564
proc url_WebAppsListUsages_568388(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_568387(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568389 = path.getOrDefault("name")
  valid_568389 = validateParameter(valid_568389, JString, required = true,
                                 default = nil)
  if valid_568389 != nil:
    section.add "name", valid_568389
  var valid_568390 = path.getOrDefault("subscriptionId")
  valid_568390 = validateParameter(valid_568390, JString, required = true,
                                 default = nil)
  if valid_568390 != nil:
    section.add "subscriptionId", valid_568390
  var valid_568391 = path.getOrDefault("resourceGroupName")
  valid_568391 = validateParameter(valid_568391, JString, required = true,
                                 default = nil)
  if valid_568391 != nil:
    section.add "resourceGroupName", valid_568391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568392 = query.getOrDefault("api-version")
  valid_568392 = validateParameter(valid_568392, JString, required = true,
                                 default = nil)
  if valid_568392 != nil:
    section.add "api-version", valid_568392
  var valid_568393 = query.getOrDefault("$filter")
  valid_568393 = validateParameter(valid_568393, JString, required = false,
                                 default = nil)
  if valid_568393 != nil:
    section.add "$filter", valid_568393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568394: Call_WebAppsListUsages_568386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_568394.validator(path, query, header, formData, body)
  let scheme = call_568394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568394.url(scheme.get, call_568394.host, call_568394.base,
                         call_568394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568394, url, valid)

proc call*(call_568395: Call_WebAppsListUsages_568386; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_568396 = newJObject()
  var query_568397 = newJObject()
  add(query_568397, "api-version", newJString(apiVersion))
  add(path_568396, "name", newJString(name))
  add(path_568396, "subscriptionId", newJString(subscriptionId))
  add(path_568396, "resourceGroupName", newJString(resourceGroupName))
  add(query_568397, "$filter", newJString(Filter))
  result = call_568395.call(path_568396, query_568397, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_568386(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_568387, base: "",
    url: url_WebAppsListUsages_568388, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_568398 = ref object of OpenApiRestCall_563564
proc url_WebAppsListVnetConnections_568400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_568399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568401 = path.getOrDefault("name")
  valid_568401 = validateParameter(valid_568401, JString, required = true,
                                 default = nil)
  if valid_568401 != nil:
    section.add "name", valid_568401
  var valid_568402 = path.getOrDefault("subscriptionId")
  valid_568402 = validateParameter(valid_568402, JString, required = true,
                                 default = nil)
  if valid_568402 != nil:
    section.add "subscriptionId", valid_568402
  var valid_568403 = path.getOrDefault("resourceGroupName")
  valid_568403 = validateParameter(valid_568403, JString, required = true,
                                 default = nil)
  if valid_568403 != nil:
    section.add "resourceGroupName", valid_568403
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568404 = query.getOrDefault("api-version")
  valid_568404 = validateParameter(valid_568404, JString, required = true,
                                 default = nil)
  if valid_568404 != nil:
    section.add "api-version", valid_568404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568405: Call_WebAppsListVnetConnections_568398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_568405.validator(path, query, header, formData, body)
  let scheme = call_568405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568405.url(scheme.get, call_568405.host, call_568405.base,
                         call_568405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568405, url, valid)

proc call*(call_568406: Call_WebAppsListVnetConnections_568398; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568407 = newJObject()
  var query_568408 = newJObject()
  add(query_568408, "api-version", newJString(apiVersion))
  add(path_568407, "name", newJString(name))
  add(path_568407, "subscriptionId", newJString(subscriptionId))
  add(path_568407, "resourceGroupName", newJString(resourceGroupName))
  result = call_568406.call(path_568407, query_568408, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_568398(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_568399, base: "",
    url: url_WebAppsListVnetConnections_568400, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_568421 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnection_568423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_568422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568424 = path.getOrDefault("name")
  valid_568424 = validateParameter(valid_568424, JString, required = true,
                                 default = nil)
  if valid_568424 != nil:
    section.add "name", valid_568424
  var valid_568425 = path.getOrDefault("vnetName")
  valid_568425 = validateParameter(valid_568425, JString, required = true,
                                 default = nil)
  if valid_568425 != nil:
    section.add "vnetName", valid_568425
  var valid_568426 = path.getOrDefault("subscriptionId")
  valid_568426 = validateParameter(valid_568426, JString, required = true,
                                 default = nil)
  if valid_568426 != nil:
    section.add "subscriptionId", valid_568426
  var valid_568427 = path.getOrDefault("resourceGroupName")
  valid_568427 = validateParameter(valid_568427, JString, required = true,
                                 default = nil)
  if valid_568427 != nil:
    section.add "resourceGroupName", valid_568427
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568428 = query.getOrDefault("api-version")
  valid_568428 = validateParameter(valid_568428, JString, required = true,
                                 default = nil)
  if valid_568428 != nil:
    section.add "api-version", valid_568428
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568430: Call_WebAppsCreateOrUpdateVnetConnection_568421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_568430.validator(path, query, header, formData, body)
  let scheme = call_568430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568430.url(scheme.get, call_568430.host, call_568430.base,
                         call_568430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568430, url, valid)

proc call*(call_568431: Call_WebAppsCreateOrUpdateVnetConnection_568421;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568432 = newJObject()
  var query_568433 = newJObject()
  var body_568434 = newJObject()
  if connectionEnvelope != nil:
    body_568434 = connectionEnvelope
  add(query_568433, "api-version", newJString(apiVersion))
  add(path_568432, "name", newJString(name))
  add(path_568432, "vnetName", newJString(vnetName))
  add(path_568432, "subscriptionId", newJString(subscriptionId))
  add(path_568432, "resourceGroupName", newJString(resourceGroupName))
  result = call_568431.call(path_568432, query_568433, nil, nil, body_568434)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_568421(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_568422, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_568423, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_568409 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnection_568411(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_568410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568412 = path.getOrDefault("name")
  valid_568412 = validateParameter(valid_568412, JString, required = true,
                                 default = nil)
  if valid_568412 != nil:
    section.add "name", valid_568412
  var valid_568413 = path.getOrDefault("vnetName")
  valid_568413 = validateParameter(valid_568413, JString, required = true,
                                 default = nil)
  if valid_568413 != nil:
    section.add "vnetName", valid_568413
  var valid_568414 = path.getOrDefault("subscriptionId")
  valid_568414 = validateParameter(valid_568414, JString, required = true,
                                 default = nil)
  if valid_568414 != nil:
    section.add "subscriptionId", valid_568414
  var valid_568415 = path.getOrDefault("resourceGroupName")
  valid_568415 = validateParameter(valid_568415, JString, required = true,
                                 default = nil)
  if valid_568415 != nil:
    section.add "resourceGroupName", valid_568415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568416 = query.getOrDefault("api-version")
  valid_568416 = validateParameter(valid_568416, JString, required = true,
                                 default = nil)
  if valid_568416 != nil:
    section.add "api-version", valid_568416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568417: Call_WebAppsGetVnetConnection_568409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_568417.validator(path, query, header, formData, body)
  let scheme = call_568417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568417.url(scheme.get, call_568417.host, call_568417.base,
                         call_568417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568417, url, valid)

proc call*(call_568418: Call_WebAppsGetVnetConnection_568409; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568419 = newJObject()
  var query_568420 = newJObject()
  add(query_568420, "api-version", newJString(apiVersion))
  add(path_568419, "name", newJString(name))
  add(path_568419, "vnetName", newJString(vnetName))
  add(path_568419, "subscriptionId", newJString(subscriptionId))
  add(path_568419, "resourceGroupName", newJString(resourceGroupName))
  result = call_568418.call(path_568419, query_568420, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_568409(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_568410, base: "",
    url: url_WebAppsGetVnetConnection_568411, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_568447 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnection_568449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_568448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568450 = path.getOrDefault("name")
  valid_568450 = validateParameter(valid_568450, JString, required = true,
                                 default = nil)
  if valid_568450 != nil:
    section.add "name", valid_568450
  var valid_568451 = path.getOrDefault("vnetName")
  valid_568451 = validateParameter(valid_568451, JString, required = true,
                                 default = nil)
  if valid_568451 != nil:
    section.add "vnetName", valid_568451
  var valid_568452 = path.getOrDefault("subscriptionId")
  valid_568452 = validateParameter(valid_568452, JString, required = true,
                                 default = nil)
  if valid_568452 != nil:
    section.add "subscriptionId", valid_568452
  var valid_568453 = path.getOrDefault("resourceGroupName")
  valid_568453 = validateParameter(valid_568453, JString, required = true,
                                 default = nil)
  if valid_568453 != nil:
    section.add "resourceGroupName", valid_568453
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568454 = query.getOrDefault("api-version")
  valid_568454 = validateParameter(valid_568454, JString, required = true,
                                 default = nil)
  if valid_568454 != nil:
    section.add "api-version", valid_568454
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568456: Call_WebAppsUpdateVnetConnection_568447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_568456.validator(path, query, header, formData, body)
  let scheme = call_568456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568456.url(scheme.get, call_568456.host, call_568456.base,
                         call_568456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568456, url, valid)

proc call*(call_568457: Call_WebAppsUpdateVnetConnection_568447;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568458 = newJObject()
  var query_568459 = newJObject()
  var body_568460 = newJObject()
  if connectionEnvelope != nil:
    body_568460 = connectionEnvelope
  add(query_568459, "api-version", newJString(apiVersion))
  add(path_568458, "name", newJString(name))
  add(path_568458, "vnetName", newJString(vnetName))
  add(path_568458, "subscriptionId", newJString(subscriptionId))
  add(path_568458, "resourceGroupName", newJString(resourceGroupName))
  result = call_568457.call(path_568458, query_568459, nil, nil, body_568460)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_568447(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_568448, base: "",
    url: url_WebAppsUpdateVnetConnection_568449, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_568435 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteVnetConnection_568437(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_568436(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568438 = path.getOrDefault("name")
  valid_568438 = validateParameter(valid_568438, JString, required = true,
                                 default = nil)
  if valid_568438 != nil:
    section.add "name", valid_568438
  var valid_568439 = path.getOrDefault("vnetName")
  valid_568439 = validateParameter(valid_568439, JString, required = true,
                                 default = nil)
  if valid_568439 != nil:
    section.add "vnetName", valid_568439
  var valid_568440 = path.getOrDefault("subscriptionId")
  valid_568440 = validateParameter(valid_568440, JString, required = true,
                                 default = nil)
  if valid_568440 != nil:
    section.add "subscriptionId", valid_568440
  var valid_568441 = path.getOrDefault("resourceGroupName")
  valid_568441 = validateParameter(valid_568441, JString, required = true,
                                 default = nil)
  if valid_568441 != nil:
    section.add "resourceGroupName", valid_568441
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568442 = query.getOrDefault("api-version")
  valid_568442 = validateParameter(valid_568442, JString, required = true,
                                 default = nil)
  if valid_568442 != nil:
    section.add "api-version", valid_568442
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568443: Call_WebAppsDeleteVnetConnection_568435; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_568443.validator(path, query, header, formData, body)
  let scheme = call_568443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568443.url(scheme.get, call_568443.host, call_568443.base,
                         call_568443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568443, url, valid)

proc call*(call_568444: Call_WebAppsDeleteVnetConnection_568435;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568445 = newJObject()
  var query_568446 = newJObject()
  add(query_568446, "api-version", newJString(apiVersion))
  add(path_568445, "name", newJString(name))
  add(path_568445, "vnetName", newJString(vnetName))
  add(path_568445, "subscriptionId", newJString(subscriptionId))
  add(path_568445, "resourceGroupName", newJString(resourceGroupName))
  result = call_568444.call(path_568445, query_568446, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_568435(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_568436, base: "",
    url: url_WebAppsDeleteVnetConnection_568437, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_568474 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_568476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_568475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_568477 = path.getOrDefault("gatewayName")
  valid_568477 = validateParameter(valid_568477, JString, required = true,
                                 default = nil)
  if valid_568477 != nil:
    section.add "gatewayName", valid_568477
  var valid_568478 = path.getOrDefault("name")
  valid_568478 = validateParameter(valid_568478, JString, required = true,
                                 default = nil)
  if valid_568478 != nil:
    section.add "name", valid_568478
  var valid_568479 = path.getOrDefault("vnetName")
  valid_568479 = validateParameter(valid_568479, JString, required = true,
                                 default = nil)
  if valid_568479 != nil:
    section.add "vnetName", valid_568479
  var valid_568480 = path.getOrDefault("subscriptionId")
  valid_568480 = validateParameter(valid_568480, JString, required = true,
                                 default = nil)
  if valid_568480 != nil:
    section.add "subscriptionId", valid_568480
  var valid_568481 = path.getOrDefault("resourceGroupName")
  valid_568481 = validateParameter(valid_568481, JString, required = true,
                                 default = nil)
  if valid_568481 != nil:
    section.add "resourceGroupName", valid_568481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568482 = query.getOrDefault("api-version")
  valid_568482 = validateParameter(valid_568482, JString, required = true,
                                 default = nil)
  if valid_568482 != nil:
    section.add "api-version", valid_568482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568484: Call_WebAppsCreateOrUpdateVnetConnectionGateway_568474;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568484.validator(path, query, header, formData, body)
  let scheme = call_568484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568484.url(scheme.get, call_568484.host, call_568484.base,
                         call_568484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568484, url, valid)

proc call*(call_568485: Call_WebAppsCreateOrUpdateVnetConnectionGateway_568474;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568486 = newJObject()
  var query_568487 = newJObject()
  var body_568488 = newJObject()
  if connectionEnvelope != nil:
    body_568488 = connectionEnvelope
  add(query_568487, "api-version", newJString(apiVersion))
  add(path_568486, "gatewayName", newJString(gatewayName))
  add(path_568486, "name", newJString(name))
  add(path_568486, "vnetName", newJString(vnetName))
  add(path_568486, "subscriptionId", newJString(subscriptionId))
  add(path_568486, "resourceGroupName", newJString(resourceGroupName))
  result = call_568485.call(path_568486, query_568487, nil, nil, body_568488)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_568474(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_568475,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_568476,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_568461 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionGateway_568463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_568462(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_568464 = path.getOrDefault("gatewayName")
  valid_568464 = validateParameter(valid_568464, JString, required = true,
                                 default = nil)
  if valid_568464 != nil:
    section.add "gatewayName", valid_568464
  var valid_568465 = path.getOrDefault("name")
  valid_568465 = validateParameter(valid_568465, JString, required = true,
                                 default = nil)
  if valid_568465 != nil:
    section.add "name", valid_568465
  var valid_568466 = path.getOrDefault("vnetName")
  valid_568466 = validateParameter(valid_568466, JString, required = true,
                                 default = nil)
  if valid_568466 != nil:
    section.add "vnetName", valid_568466
  var valid_568467 = path.getOrDefault("subscriptionId")
  valid_568467 = validateParameter(valid_568467, JString, required = true,
                                 default = nil)
  if valid_568467 != nil:
    section.add "subscriptionId", valid_568467
  var valid_568468 = path.getOrDefault("resourceGroupName")
  valid_568468 = validateParameter(valid_568468, JString, required = true,
                                 default = nil)
  if valid_568468 != nil:
    section.add "resourceGroupName", valid_568468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568469 = query.getOrDefault("api-version")
  valid_568469 = validateParameter(valid_568469, JString, required = true,
                                 default = nil)
  if valid_568469 != nil:
    section.add "api-version", valid_568469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568470: Call_WebAppsGetVnetConnectionGateway_568461;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_568470.validator(path, query, header, formData, body)
  let scheme = call_568470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568470.url(scheme.get, call_568470.host, call_568470.base,
                         call_568470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568470, url, valid)

proc call*(call_568471: Call_WebAppsGetVnetConnectionGateway_568461;
          apiVersion: string; gatewayName: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568472 = newJObject()
  var query_568473 = newJObject()
  add(query_568473, "api-version", newJString(apiVersion))
  add(path_568472, "gatewayName", newJString(gatewayName))
  add(path_568472, "name", newJString(name))
  add(path_568472, "vnetName", newJString(vnetName))
  add(path_568472, "subscriptionId", newJString(subscriptionId))
  add(path_568472, "resourceGroupName", newJString(resourceGroupName))
  result = call_568471.call(path_568472, query_568473, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_568461(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_568462, base: "",
    url: url_WebAppsGetVnetConnectionGateway_568463, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_568489 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionGateway_568491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_568490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_568492 = path.getOrDefault("gatewayName")
  valid_568492 = validateParameter(valid_568492, JString, required = true,
                                 default = nil)
  if valid_568492 != nil:
    section.add "gatewayName", valid_568492
  var valid_568493 = path.getOrDefault("name")
  valid_568493 = validateParameter(valid_568493, JString, required = true,
                                 default = nil)
  if valid_568493 != nil:
    section.add "name", valid_568493
  var valid_568494 = path.getOrDefault("vnetName")
  valid_568494 = validateParameter(valid_568494, JString, required = true,
                                 default = nil)
  if valid_568494 != nil:
    section.add "vnetName", valid_568494
  var valid_568495 = path.getOrDefault("subscriptionId")
  valid_568495 = validateParameter(valid_568495, JString, required = true,
                                 default = nil)
  if valid_568495 != nil:
    section.add "subscriptionId", valid_568495
  var valid_568496 = path.getOrDefault("resourceGroupName")
  valid_568496 = validateParameter(valid_568496, JString, required = true,
                                 default = nil)
  if valid_568496 != nil:
    section.add "resourceGroupName", valid_568496
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568497 = query.getOrDefault("api-version")
  valid_568497 = validateParameter(valid_568497, JString, required = true,
                                 default = nil)
  if valid_568497 != nil:
    section.add "api-version", valid_568497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568499: Call_WebAppsUpdateVnetConnectionGateway_568489;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568499.validator(path, query, header, formData, body)
  let scheme = call_568499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568499.url(scheme.get, call_568499.host, call_568499.base,
                         call_568499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568499, url, valid)

proc call*(call_568500: Call_WebAppsUpdateVnetConnectionGateway_568489;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568501 = newJObject()
  var query_568502 = newJObject()
  var body_568503 = newJObject()
  if connectionEnvelope != nil:
    body_568503 = connectionEnvelope
  add(query_568502, "api-version", newJString(apiVersion))
  add(path_568501, "gatewayName", newJString(gatewayName))
  add(path_568501, "name", newJString(name))
  add(path_568501, "vnetName", newJString(vnetName))
  add(path_568501, "subscriptionId", newJString(subscriptionId))
  add(path_568501, "resourceGroupName", newJString(resourceGroupName))
  result = call_568500.call(path_568501, query_568502, nil, nil, body_568503)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_568489(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_568490, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_568491, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_568504 = ref object of OpenApiRestCall_563564
proc url_WebAppsListWebJobs_568506(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_568505(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568507 = path.getOrDefault("name")
  valid_568507 = validateParameter(valid_568507, JString, required = true,
                                 default = nil)
  if valid_568507 != nil:
    section.add "name", valid_568507
  var valid_568508 = path.getOrDefault("subscriptionId")
  valid_568508 = validateParameter(valid_568508, JString, required = true,
                                 default = nil)
  if valid_568508 != nil:
    section.add "subscriptionId", valid_568508
  var valid_568509 = path.getOrDefault("resourceGroupName")
  valid_568509 = validateParameter(valid_568509, JString, required = true,
                                 default = nil)
  if valid_568509 != nil:
    section.add "resourceGroupName", valid_568509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568510 = query.getOrDefault("api-version")
  valid_568510 = validateParameter(valid_568510, JString, required = true,
                                 default = nil)
  if valid_568510 != nil:
    section.add "api-version", valid_568510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568511: Call_WebAppsListWebJobs_568504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_568511.validator(path, query, header, formData, body)
  let scheme = call_568511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568511.url(scheme.get, call_568511.host, call_568511.base,
                         call_568511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568511, url, valid)

proc call*(call_568512: Call_WebAppsListWebJobs_568504; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568513 = newJObject()
  var query_568514 = newJObject()
  add(query_568514, "api-version", newJString(apiVersion))
  add(path_568513, "name", newJString(name))
  add(path_568513, "subscriptionId", newJString(subscriptionId))
  add(path_568513, "resourceGroupName", newJString(resourceGroupName))
  result = call_568512.call(path_568513, query_568514, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_568504(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_568505, base: "",
    url: url_WebAppsListWebJobs_568506, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_568515 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebJob_568517(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_568516(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568518 = path.getOrDefault("name")
  valid_568518 = validateParameter(valid_568518, JString, required = true,
                                 default = nil)
  if valid_568518 != nil:
    section.add "name", valid_568518
  var valid_568519 = path.getOrDefault("subscriptionId")
  valid_568519 = validateParameter(valid_568519, JString, required = true,
                                 default = nil)
  if valid_568519 != nil:
    section.add "subscriptionId", valid_568519
  var valid_568520 = path.getOrDefault("webJobName")
  valid_568520 = validateParameter(valid_568520, JString, required = true,
                                 default = nil)
  if valid_568520 != nil:
    section.add "webJobName", valid_568520
  var valid_568521 = path.getOrDefault("resourceGroupName")
  valid_568521 = validateParameter(valid_568521, JString, required = true,
                                 default = nil)
  if valid_568521 != nil:
    section.add "resourceGroupName", valid_568521
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568522 = query.getOrDefault("api-version")
  valid_568522 = validateParameter(valid_568522, JString, required = true,
                                 default = nil)
  if valid_568522 != nil:
    section.add "api-version", valid_568522
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568523: Call_WebAppsGetWebJob_568515; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_568523.validator(path, query, header, formData, body)
  let scheme = call_568523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568523.url(scheme.get, call_568523.host, call_568523.base,
                         call_568523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568523, url, valid)

proc call*(call_568524: Call_WebAppsGetWebJob_568515; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568525 = newJObject()
  var query_568526 = newJObject()
  add(query_568526, "api-version", newJString(apiVersion))
  add(path_568525, "name", newJString(name))
  add(path_568525, "subscriptionId", newJString(subscriptionId))
  add(path_568525, "webJobName", newJString(webJobName))
  add(path_568525, "resourceGroupName", newJString(resourceGroupName))
  result = call_568524.call(path_568525, query_568526, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_568515(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_568516, base: "",
    url: url_WebAppsGetWebJob_568517, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
